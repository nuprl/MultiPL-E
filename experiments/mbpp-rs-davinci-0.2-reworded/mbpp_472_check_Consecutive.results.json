{
  "name": "mbpp_472_check_Consecutive",
  "language": "rs",
  "prompt": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l.clone();\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n    for i in l {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    if max - min + 1 == l.len() as isize {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpptmb2ehj.rs:13:25\n    |\n2   | fn check_Consecutive(l: Vec<isize>) -> bool {\n    |                      - move occurs because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n...\n13  |     if max - min + 1 == l.len() as isize {\n    |                         ^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &l {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    let mut i = 0;\n    while i < v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i + 1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l;\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i+1] - v[i] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] != l[i - 1] + 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()-1 {\n        if l[i+1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] != l[i - 1] + 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()-1 {\n        if l[i+1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i + 1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n    for i in l {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    if max - min + 1 == l.len() as isize {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpptmb2ehj.rs:13:25\n    |\n2   | fn check_Consecutive(l: Vec<isize>) -> bool {\n    |                      - move occurs because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n...\n13  |     if max - min + 1 == l.len() as isize {\n    |                         ^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &l {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    while i < l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i+1] - v[i] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut set = HashSet::new();\n    let mut max = isize::min_value();\n    let mut min = isize::max_value();\n\n    for i in l {\n        if set.contains(&i) {\n            return false;\n        }\n        set.insert(i);\n        max = std::cmp::max(max, i);\n        min = std::cmp::min(min, i);\n    }\n    return max - min + 1 == l.len() as isize;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp2n4hkhv8.rs:3:19\n  |\n3 |     let mut set = HashSet::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut flag = true;\n    while j < l.len() {\n        if l[i] + 1 != l[j] {\n            flag = false;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i+1] - v[i] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i + 1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i + 1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i + 1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n    for i in l {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    if max - min + 1 == l.len() as isize {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpptmb2ehj.rs:13:25\n    |\n2   | fn check_Consecutive(l: Vec<isize>) -> bool {\n    |                      - move occurs because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n...\n13  |     if max - min + 1 == l.len() as isize {\n    |                         ^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &l {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] != v[i - 1] + 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] != v[i - 1] + 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n    for i in l {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    if max - min + 1 == l.len() as isize {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpptmb2ehj.rs:13:25\n    |\n2   | fn check_Consecutive(l: Vec<isize>) -> bool {\n    |                      - move occurs because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n...\n13  |     if max - min + 1 == l.len() as isize {\n    |                         ^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &l {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] != l[i - 1] + 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i+1] - v[i] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut flag = true;\n    while i < l.len() - 1 && j < l.len() {\n        if l[j] - l[i] == 1 {\n            i += 1;\n            j += 1;\n        } else {\n            flag = false;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()-1 {\n        if l[i+1] - l[i] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] != v[i - 1] + 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i + 1] - v[i] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut max = l[0];\n    let mut min = l[0];\n    for i in l {\n        if i > max {\n            max = i;\n        }\n        if i < min {\n            min = i;\n        }\n    }\n    if max - min + 1 == l.len() as isize {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp5epv_9jb.rs:13:25\n    |\n2   | fn check_Consecutive(l: Vec<isize>) -> bool {\n    |                      - move occurs because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n...\n13  |     if max - min + 1 == l.len() as isize {\n    |                         ^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &l {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i + 1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l.clone();\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i+1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i + 1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n    for i in l {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    if max - min + 1 == l.len() as isize {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpptmb2ehj.rs:13:25\n    |\n2   | fn check_Consecutive(l: Vec<isize>) -> bool {\n    |                      - move occurs because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n...\n13  |     if max - min + 1 == l.len() as isize {\n    |                         ^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &l {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i+1] - v[i] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i] + 1 != v[i+1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i + 1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()-1 {\n        if l[i+1] - l[i] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i + 1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i+1] - v[i] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut sorted_list = l.clone();\n    sorted_list.sort();\n    let mut prev = sorted_list[0];\n    for i in 1..sorted_list.len() {\n        if sorted_list[i] != prev + 1 {\n            return false;\n        }\n        prev = sorted_list[i];\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n    for i in l {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    if (max - min + 1) == l.len() as isize {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpcqohv7wd.rs:13:27\n    |\n2   | fn check_Consecutive(l: Vec<isize>) -> bool {\n    |                      - move occurs because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n...\n13  |     if (max - min + 1) == l.len() as isize {\n    |                           ^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &l {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    while i < l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l.clone();\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut flag = false;\n    while j < l.len() {\n        if l[i] + 1 == l[j] {\n            flag = true;\n        } else {\n            flag = false;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len()-1 {\n        if l[i] + 1 != l[i+1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] != l[i - 1] + 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l;\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l.clone();\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i+1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut is_consecutive = true;\n    let mut min = l[0];\n    let mut max = l[0];\n    for i in l {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    if max - min + 1 == l.len() as isize {\n        for i in min..max + 1 {\n            if !l.contains(&i) {\n                is_consecutive = false;\n                break;\n            }\n        }\n    } else {\n        is_consecutive = false;\n    }\n    is_consecutive\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpjhavd367.rs:14:25\n    |\n2   | fn check_Consecutive(l: Vec<isize>) -> bool {\n    |                      - move occurs because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n6   |     for i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n...\n14  |     if max - min + 1 == l.len() as isize {\n    |                         ^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n6   |     for i in &l {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut flag = true;\n    while j < l.len() {\n        if l[i] + 1 == l[j] {\n            i += 1;\n            j += 1;\n        } else {\n            flag = false;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i+1] - v[i] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n    for i in l {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    if max - min + 1 == l.len() as isize {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpptmb2ehj.rs:13:25\n    |\n2   | fn check_Consecutive(l: Vec<isize>) -> bool {\n    |                      - move occurs because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n...\n13  |     if max - min + 1 == l.len() as isize {\n    |                         ^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &l {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    let mut flag = true;\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            flag = false;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i+1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] != l[i - 1] + 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut sorted = l.clone();\n    sorted.sort();\n    for i in 0..sorted.len() - 1 {\n        if sorted[i + 1] - sorted[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i + 1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i + 1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] != v[i - 1] + 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l.clone();\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i+1] - v[i] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l.clone();\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n    for i in l {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    if max - min + 1 == l.len() as isize {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpptmb2ehj.rs:13:25\n    |\n2   | fn check_Consecutive(l: Vec<isize>) -> bool {\n    |                      - move occurs because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n...\n13  |     if max - min + 1 == l.len() as isize {\n    |                         ^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &l {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i+1] - v[i] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    while i < l.len() - 1 {\n        if l[i + 1] - l[i] == 1 {\n            i += 1;\n        } else {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut flag = false;\n    let mut count = 0;\n    while j < l.len() {\n        if l[i] == l[j] {\n            flag = true;\n            break;\n        }\n        if l[j] - l[i] == 1 {\n            count += 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    if count == l.len() - 1 {\n        flag = false;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmppo2nsiws.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    while i < l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n    for i in l {\n        if i > max {\n            max = i;\n        }\n        if i < min {\n            min = i;\n        }\n    }\n    let mut v = vec![false; (max - min + 1) as usize];\n    for i in l {\n        if v[(i - min) as usize] == true {\n            return false;\n        }\n        v[(i - min) as usize] = true;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `l`\n   --> /tmp/tmpdz4a5lxb.rs:14:14\n    |\n2   | fn check_Consecutive(l: Vec<isize>) -> bool {\n    |                      - move occurs because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n...\n14  |     for i in l {\n    |              ^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &l {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] - v[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len()-1 {\n        if v[i] + 1 != v[i+1] {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i + 1] - v[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i + 1] - l[i] != 1 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n    for i in l {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    if max - min + 1 == l.len() as isize {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp7587pmda.rs:13:25\n    |\n2   | fn check_Consecutive(l: Vec<isize>) -> bool {\n    |                      - move occurs because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n...\n13  |     if max - min + 1 == l.len() as isize {\n    |                         ^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &l {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut flag = true;\n    let mut i = 0;\n    let mut j = 1;\n    while j < l.len() {\n        if l[j] - l[i] == 1 {\n            i = i + 1;\n            j = j + 1;\n        } else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i] + 1 != v[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] != l[i - 1] + 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    for i in 1..v.len() {\n        if v[i] != v[i - 1] + 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n    for i in l {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    if max - min + 1 == l.len() as isize {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpptmb2ehj.rs:13:25\n    |\n2   | fn check_Consecutive(l: Vec<isize>) -> bool {\n    |                      - move occurs because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n...\n13  |     if max - min + 1 == l.len() as isize {\n    |                         ^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &l {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l.clone();\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}