{
  "name": "mbpp_742_area_tetrahedron",
  "language": "rs",
  "prompt": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpg42aoln1.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * a.sqrt();\n    let area = (s * s * s.sqrt()) / 12.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5.128890878148249`,\n right: `15.588457268119894`', /tmp/tmpyunhq1pv.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.07031250000000001`,\n right: `15.588457268119894`', /tmp/tmp5onmoo_m.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let area = (s.powi(2) * (s.powi(2) - 2.0 * s + 2.0).sqrt()).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.486046343663662`,\n right: `15.588457268119894`', /tmp/tmpr6q73fyn.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64.sqrt())) / 4.0;\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpvj52jk6t.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmpl9x1irgs.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpcgns17p_.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s.powi(2) * 3.0_f64.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.3247595264191645`,\n right: `15.588457268119894`', /tmp/tmpd5ixeen7.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let area = (a.powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmpcgfphokx.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let area = (s.powi(2) * (3.0_f64.sqrt())) / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpy9c2s6_2.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((3.0f64).sqrt() / 4.0) * (side as f64).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpk_zvqqmf.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    (s * s * s * 3.0_f64.sqrt() / 2.0).round()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2.0`,\n right: `15.588457268119894`', /tmp/tmp87_91e3l.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpvnu1spf3.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.14062500000000003`,\n right: `15.588457268119894`', /tmp/tmp2txnkrlr.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpmggt3kv8.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * ((3.0_f64).sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpkkwwvjuy.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    let area = a.powi(2) * 3.0_f64.sqrt() / 4.0;\n    println!(\"The area of a tetrahedron with side {} is {}\", side, area);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "The area of a tetrahedron with side 3 is 3.8971143170299736\n",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpck6dkck4.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpcgns17p_.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * (side as f64).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side.pow(2) * (3 as f64).sqrt() / 4.0) as f64;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "error[E0277]: cannot multiply `isize` by `f64`\n --> /tmp/tmpaq2dgnaf.rs:3:29\n  |\n3 |     let area = (side.pow(2) * (3 as f64).sqrt() / 4.0) as f64;\n  |                             ^ no implementation for `isize * f64`\n  |\n  = help: the trait `Mul<f64>` is not implemented for `isize`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.14062500000000003`,\n right: `15.588457268119894`', /tmp/tmp2txnkrlr.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let square_side = side as f64;\n    let area = (square_side.powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmpb5p4unep.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64.sqrt())) / 4.0;\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpvj52jk6t.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.14062500000000003`,\n right: `15.588457268119894`', /tmp/tmp2txnkrlr.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let area = (s.powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmpraom7os7.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s * s * (3.0_f64).sqrt()) / 4.0;\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpjk5jldas.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area_square = area_square(side);\n    let area_triangle = area_triangle(side);\n    (area_square + area_triangle * 3.0).sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `area_square` in this scope\n --> /tmp/tmpp0cvpjz2.rs:3:23\n  |\n3 |     let area_square = area_square(side);\n  |                       ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `area_triangle` in this scope\n --> /tmp/tmpp0cvpjz2.rs:4:25\n  |\n4 |     let area_triangle = area_triangle(side);\n  |                         ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0_f64).sqrt() * side as f64 * side as f64;\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.897114317029974`,\n right: `15.588457268119894`', /tmp/tmp4ofsychg.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    s * s * s * (3.0_f64.sqrt() / 6.0)\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.6328125`,\n right: `15.588457268119894`', /tmp/tmpd0ex1bex.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.08118988160479114`,\n right: `15.588457268119894`', /tmp/tmp2tx9tbr9.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpmggt3kv8.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.07031250000000001`,\n right: `15.588457268119894`', /tmp/tmp5onmoo_m.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    let area = (s * (s - a) * (s - a) * (s - a)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `NaN`,\n right: `15.588457268119894`', /tmp/tmplpqce2d7.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let mut area = 0.0;\n    let mut side = side as f64;\n    area = (side.powi(2) * (3.0_f64).sqrt() / 4.0) * 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * side as f64 * side as f64;\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.897114317029974`,\n right: `15.588457268119894`', /tmp/tmp_zhq37l0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * ((3.0_f64).sqrt() / 4.0_f64);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpunea157c.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * side as f64 * side as f64;\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.897114317029974`,\n right: `15.588457268119894`', /tmp/tmp_zhq37l0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * ((3.0_f64).sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpkkwwvjuy.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpmggt3kv8.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0_f64).sqrt() * (side as f64).powi(2);\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpbx9j13xg.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = s.powi(2) * (3.0_f64).sqrt();\n    let b = (3.0_f64 / 2.0_f64) * a;\n    let c = (b.powi(2) - (s.powi(4) / 4.0_f64)).sqrt();\n    let d = (b - c) / 4.0_f64;\n    let e = (3.0_f64 * d.powi(2)).sqrt();\n    e\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.18926902538117285`,\n right: `15.588457268119894`', /tmp/tmpekl9zfi9.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3 as f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmp8b5dztrw.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * ((3.0_f64).sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpkkwwvjuy.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * ((3.0_f64).sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpkkwwvjuy.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = s.powi(2) * (3.0_f64).sqrt();\n    let b = (3.0_f64 / 2.0_f64) * (s.powi(2) * (3.0_f64).sqrt());\n    let c = (a * b) / 2.0_f64;\n    c\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `182.24999999999997`,\n right: `15.588457268119894`', /tmp/tmprikt5o57.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    let area = (s * s * 3.0_f64.sqrt() / 2.0).round();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1.0`,\n right: `15.588457268119894`', /tmp/tmp_zrrsab1.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64).sqrt() / 4.0_f64).sqrt();\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1.9741110194287386`,\n right: `15.588457268119894`', /tmp/tmpqil293r3.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    let area = s * s * 3.0_f64.sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.73070893444312`,\n right: `15.588457268119894`', /tmp/tmpffyuqr_2.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * (side as f64).powi(2);\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpxxqeamdo.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s * s * (3.0_f64).sqrt()) / 4.0;\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpjk5jldas.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * (side as f64).powi(2);\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpxxqeamdo.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * a.sqrt();\n    let area = (s * s * 3.0).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9.0`,\n right: `15.588457268119894`', /tmp/tmpxdjeu686.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (3.0_f64).sqrt() * s * s / 4.0;\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.897114317029974`,\n right: `15.588457268119894`', /tmp/tmp2zon16nq.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpvnu1spf3.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    // The formula for the area of a tetrahedron is:\n    //\n    //     sqrt(3) * side^2\n    //\n    // We can calculate this using the `powf` function from the `std::f64` module.\n    //\n    // The `powf` function takes two arguments, the first is the number to raise to\n    // the power of the second.\n    //\n    // The `sqrt` function takes a single argument, the number to take the square\n    // root of.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `powf` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf` to a `f64` value.\n    //\n    // The `sqrt` function returns a `f64` value, so we need to cast the result of\n    // `powf`\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpf6qwbuuz.rs:2:37\n  |\n2 | fn area_tetrahedron(side: isize) -> f64 {\n  |    ----------------                 ^^^ expected `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64).sqrt() / 4.0).sqrt();\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1.9741110194287386`,\n right: `15.588457268119894`', /tmp/tmp5ril50wl.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let side = side as f64;\n    let area = (side.powi(2) * (3.0_f64).sqrt()).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.948222038857477`,\n right: `15.588457268119894`', /tmp/tmpjyh8w__o.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpcgns17p_.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmp8b5dztrw.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let area = (s.powi(2) * (3.0_f64.sqrt()) / 4.0) * 3.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `11.69134295108992`,\n right: `15.588457268119894`', /tmp/tmptzlhqn4b.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).powf(1.0 / 3.0);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2.8595528789908093`,\n right: `15.588457268119894`', /tmp/tmpmkle7ljf.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * side as f64 * side as f64;\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.897114317029974`,\n right: `15.588457268119894`', /tmp/tmp_zhq37l0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = (a * a * a / (6.0 * (a * a / 4.0).sqrt())).sqrt();\n    (s * s * 3.0).sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2.9999999999999996`,\n right: `15.588457268119894`', /tmp/tmpapkikmfa.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (3.0_f64).sqrt() * s * s / 4.0;\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.897114317029974`,\n right: `15.588457268119894`', /tmp/tmp2zon16nq.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    let area = s * s * 3.0_f64.sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.73070893444312`,\n right: `15.588457268119894`', /tmp/tmpffyuqr_2.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * ((3.0_f64).sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpkkwwvjuy.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpcgns17p_.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.14062500000000003`,\n right: `15.588457268119894`', /tmp/tmp2txnkrlr.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmpl9x1irgs.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpmggt3kv8.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((3.0f64).sqrt() * (side as f64).powi(2)) / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpkqz5l9bq.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    s * s * 3.0_f64.sqrt() / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.73070893444312`,\n right: `15.588457268119894`', /tmp/tmpjzyuc8qw.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let area = (s.powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmpraom7os7.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0 as f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0 as f64).sqrt();\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpwepxd4hh.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0_f64).sqrt() * side as f64;\n    area * area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `27.0`,\n right: `15.588457268119894`', /tmp/tmp2ncazwyk.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s * s * (3.0_f64).sqrt()) / 4.0;\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpjk5jldas.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    s * s * 3.0_f64.sqrt() / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.73070893444312`,\n right: `15.588457268119894`', /tmp/tmpjzyuc8qw.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64 * side as f64 * (3.0_f64).sqrt() / 4.0).round();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.0`,\n right: `15.588457268119894`', /tmp/tmpjfzo7rpw.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpmggt3kv8.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpmggt3kv8.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side.pow(2) * 3_f64.sqrt() / 4_f64) as f64;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "error[E0277]: cannot multiply `isize` by `f64`\n --> /tmp/tmp8bjak6vf.rs:3:29\n  |\n3 |     let area = (side.pow(2) * 3_f64.sqrt() / 4_f64) as f64;\n  |                             ^ no implementation for `isize * f64`\n  |\n  = help: the trait `Mul<f64>` is not implemented for `isize`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s.powi(2) * 3.0_f64.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.3247595264191645`,\n right: `15.588457268119894`', /tmp/tmpd5ixeen7.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpcgns17p_.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    (s * (s - a) * (s - a) * (s - a)).sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `NaN`,\n right: `15.588457268119894`', /tmp/tmpofrj2boi.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((side as f64).powi(2) * (3.0_f64).sqrt()).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `242.99999999999997`,\n right: `15.588457268119894`', /tmp/tmp648o45pr.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    let area = (s * s * 3.0_f64.sqrt() / 2.0).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1.2088911733014847`,\n right: `15.588457268119894`', /tmp/tmpbnjxc9p4.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.14062500000000003`,\n right: `15.588457268119894`', /tmp/tmp2txnkrlr.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    s * s * 3.0_f64.sqrt() / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.73070893444312`,\n right: `15.588457268119894`', /tmp/tmpjzyuc8qw.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    let area = s * (s - a) * (s - a) * (s - a);\n    area.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `NaN`,\n right: `15.588457268119894`', /tmp/tmpj4ahyw7e.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0 as f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp6e0uga0w.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let side = side as f64;\n    let area = (side.powi(2) * (3.0_f64.sqrt()) / 4.0) * 3.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `11.69134295108992`,\n right: `15.588457268119894`', /tmp/tmpsl0vkccs.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0 as f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp6e0uga0w.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * side as f64 * side as f64;\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.897114317029974`,\n right: `15.588457268119894`', /tmp/tmp_zhq37l0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * f64::sqrt(3.0) * side as f64 * side as f64) / 2.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `23.382685902179844`,\n right: `15.588457268119894`', /tmp/tmp28boyc51.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * a * a / (6.0 * (a * a - a * a * a).sqrt());\n    (s * s * (s - a) * (s - a) * (s - a)).sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `NaN`,\n right: `15.588457268119894`', /tmp/tmpyflilipg.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpvnu1spf3.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 2.0;\n    let area = s * s * 3.0_f64.sqrt() / 2.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `5.84567147554496`,\n right: `15.588457268119894`', /tmp/tmpek53snox.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0 as f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * (3.0_f64).sqrt() / 4.0;\n    (s * s * (3.0_f64).sqrt() / 4.0).round()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1.0`,\n right: `15.588457268119894`', /tmp/tmpxq8_mb_v.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.14062500000000003`,\n right: `15.588457268119894`', /tmp/tmp2txnkrlr.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0_f64).sqrt() * side as f64 * side as f64;\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.897114317029974`,\n right: `15.588457268119894`', /tmp/tmp4ofsychg.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * ((3.0_f64).sqrt() / 4.0);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpn4bok4ds.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpcgns17p_.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    let area = (s * s * 3.0_f64.sqrt() / 2.0).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1.2088911733014847`,\n right: `15.588457268119894`', /tmp/tmpbnjxc9p4.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64.sqrt() / 4.0)).powi(2);\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmpg1dzix56.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpcgns17p_.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (3.0_f64).sqrt() * s * s;\n    a / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.897114317029974`,\n right: `15.588457268119894`', /tmp/tmpr6m2cr3o.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpcgns17p_.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64.sqrt() / 4.0) * side as f64;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1.299038105676658`,\n right: `15.588457268119894`', /tmp/tmp09ho0vbw.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpmggt3kv8.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64).sqrt() / 4.0) * (s.powi(3) / (6.0 * (6.0_f64).sqrt()));\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7.159456159513793`,\n right: `15.588457268119894`', /tmp/tmpno5i666p.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * (15.0_f64 + 7.0_f64 * 5.0_f64.sqrt())\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2.4886708845461762`,\n right: `15.588457268119894`', /tmp/tmpbt7olugq.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpcgns17p_.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.07031250000000001`,\n right: `15.588457268119894`', /tmp/tmp5onmoo_m.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}