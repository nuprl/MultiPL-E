{
  "name": "mbpp_746_sector_area",
  "language": "rs",
  "prompt": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n\n    let area = (r as f64).powi(2) * a as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmplwm0sy5f.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64).to_radians())\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    let pi = std::f64::consts::PI;\n    Some(0.5 * pi * r * r * a / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmpn9hjdsyg.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmp18d5tx_8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * (a as f64) / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmppf5y7znt.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * (a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpmmu7zt05.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * PI * r as f64 * r as f64;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `PI` in this scope\n --> /tmp/tmpxa5tnpyc.rs:6:37\n  |\n6 |     let area = (a as f64 / 360.0) * PI * r as f64 * r as f64;\n  |                                     ^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::f32::consts::PI;\n  |\n1 | use std::f64::consts::PI;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(a * r * r / 2.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmppsukfzjb.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let pi = std::f64::consts::PI;\n    Some(0.5 * pi * r as f64 * r as f64 * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmpfvw3j0yf.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * PI * r as f64 * r as f64;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `PI` in this scope\n --> /tmp/tmpxa5tnpyc.rs:6:37\n  |\n6 |     let area = (a as f64 / 360.0) * PI * r as f64 * r as f64;\n  |                                     ^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::f32::consts::PI;\n  |\n1 | use std::f64::consts::PI;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * (a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpmmu7zt05.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some(0.5 * r as f64 * r as f64 * a as f64)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmp8xz32xo0.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64) * (r as f64) * (a as f64))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpf9d_n6rg.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * PI * (r as f64).powi(2);\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `PI` in this scope\n --> /tmp/tmpnz43wdi1.rs:6:37\n  |\n6 |     let area = (a as f64 / 360.0) * PI * (r as f64).powi(2);\n  |                                     ^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::f32::consts::PI;\n  |\n1 | use std::f64::consts::PI;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r as f64).powi(2) * (a as f64) / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpqp3i79gn.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * (a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpmmu7zt05.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    let pi = std::f64::consts::PI;\n    Some((a * pi * r * r) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(31.80862561759666)`,\n right: `Some(31.808625617596654)`', /tmp/tmppxzptcgf.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * (a as f64) / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmppf5y7znt.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * a as f64 / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpnnk8rpg5.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * a as f64 / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpnnk8rpg5.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 * std::f64::consts::PI / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * std::f64::consts::PI * (r as f64).powi(2);\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let pi = 3.14;\n    Some((r * r * a * pi) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "error[E0277]: cannot multiply `isize` by `{float}`\n --> /tmp/tmpzbgej_04.rs:7:21\n  |\n7 |     Some((r * r * a * pi) / 360.0)\n  |                     ^ no implementation for `isize * {float}`\n  |\n  = help: the trait `Mul<{float}>` is not implemented for `isize`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some(0.5 * r as f64 * r as f64 * a as f64 * std::f64::consts::PI / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmp06jiptv1.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r.powi(2))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpkla01ni8.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * (a as f64) * std::f64::consts::PI / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r * r)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmphfqd4kz5.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64).to_radians())\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * (a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpmmu7zt05.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some(0.5 * r as f64 * r as f64 * a as f64 * std::f64::consts::PI / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmp06jiptv1.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * a as f64 / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpnnk8rpg5.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * std::f64::consts::PI * (r as f64).powi(2);\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some(0.5 * r as f64 * r as f64 * a as f64)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmp8xz32xo0.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some(0.5 * r as f64 * r as f64 * a as f64)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmp8xz32xo0.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r.powi(2))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpkla01ni8.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * r * r * a * std::f64::consts::PI / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzj8p_o8t.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    let area = (a / 360.0) * PI * r * r;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `PI` in this scope\n --> /tmp/tmpijq26an0.rs:8:30\n  |\n8 |     let area = (a / 360.0) * PI * r * r;\n  |                              ^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::f32::consts::PI;\n  |\n1 | use std::f64::consts::PI;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let pi = std::f64::consts::PI;\n    Some((pi * r as f64 * r as f64 * a as f64 / 360.0) as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * std::f64::consts::PI * (r as f64).powi(2);\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * std::f64::consts::PI * (r as f64).powi(2);\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r as f64).powi(2) * (a as f64) * std::f64::consts::PI / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let pi = std::f64::consts::PI;\n    let area = (pi * (r as f64).powi(2) * (a as f64)) / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r * r)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmphfqd4kz5.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r as f64).powi(2) * (a as f64 / 360.0) * std::f64::consts::PI;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(r * r * a * std::f64::consts::PI / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64).to_radians())\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * PI * (r as f64).powi(2);\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `PI` in this scope\n --> /tmp/tmpnz43wdi1.rs:6:37\n  |\n6 |     let area = (a as f64 / 360.0) * PI * (r as f64).powi(2);\n  |                                     ^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::f32::consts::PI;\n  |\n1 | use std::f64::consts::PI;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * PI * (r as f64).powi(2);\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `PI` in this scope\n --> /tmp/tmpnz43wdi1.rs:6:37\n  |\n6 |     let area = (a as f64 / 360.0) * PI * (r as f64).powi(2);\n  |                                     ^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::f32::consts::PI;\n  |\n1 | use std::f64::consts::PI;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * a as f64 / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpnnk8rpg5.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some(0.5 * (r as f64) * (r as f64) * (a as f64) * std::f64::consts::PI / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmpsyhlbkyr.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some(0.5 * (r as f64) * (r as f64) * (a as f64) * std::f64::consts::PI / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmpsyhlbkyr.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some(0.5 * r as f64 * r as f64 * a as f64)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmp8xz32xo0.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    let a = a * std::f64::consts::PI / 180.0;\n    Some(0.5 * a * r * r)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * (a as f64) / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmppf5y7znt.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * (a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpmmu7zt05.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64).to_radians())\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some(0.5 * r as f64 * r as f64 * a as f64 * std::f64::consts::PI / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmp06jiptv1.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64) * (r as f64) * (a as f64))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpf9d_n6rg.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * a as f64 / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpnnk8rpg5.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let pi = std::f64::consts::PI;\n    Some(0.5 * (pi * r as f64 * r as f64) * (a as f64 / 360.0))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmp3nddky37.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * (a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpmmu7zt05.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64) * (r as f64) * (a as f64))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpf9d_n6rg.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some(0.5 * (r as f64) * (r as f64) * (a as f64))\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmp15y4_s2_.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let pi = std::f64::consts::PI;\n    Some(0.5 * (pi * r as f64 * r as f64) * (a as f64 / 360.0))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmp3nddky37.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * (a as f64) * std::f64::consts::PI / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r.powi(2))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpkla01ni8.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let pi = std::f64::consts::PI;\n    Some((pi * r as f64 * r as f64 * a as f64 / 360.0) as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * PI * r as f64 * r as f64;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `PI` in this scope\n --> /tmp/tmpxa5tnpyc.rs:6:37\n  |\n6 |     let area = (a as f64 / 360.0) * PI * r as f64 * r as f64;\n  |                                     ^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::f32::consts::PI;\n  |\n1 | use std::f64::consts::PI;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * (a as f64) / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmppf5y7znt.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * std::f64::consts::PI * r as f64 * r as f64;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * (a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpmmu7zt05.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r.powi(2))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpkla01ni8.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64).to_radians())\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64 * std::f64::consts::PI / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmpiz9p5fbu.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r.powi(2))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpkla01ni8.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64).to_radians())\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * std::f64::consts::PI * (r as f64).powi(2);\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64).to_radians())\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r * r)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmphfqd4kz5.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64).to_radians())\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * a as f64 / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpnnk8rpg5.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = (a as f64) * std::f64::consts::PI / 180.0;\n    Some(0.5 * (r as f64) * (r as f64) * a)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * PI * r as f64 * r as f64;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `PI` in this scope\n --> /tmp/tmpxa5tnpyc.rs:6:37\n  |\n6 |     let area = (a as f64 / 360.0) * PI * r as f64 * r as f64;\n  |                                     ^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::f32::consts::PI;\n  |\n1 | use std::f64::consts::PI;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r.powi(2))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpkla01ni8.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * (a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpmmu7zt05.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let pi = std::f64::consts::PI;\n    let area = (a as f64 / 360.0) * pi * (r as f64).powi(2);\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some((a * r * r) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmp_t2m_eaw.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some((a * r * r) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmp_t2m_eaw.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * (a as f64) / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmppf5y7znt.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmp18d5tx_8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(((r as f64).powi(2) * a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpgz1533mp.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * std::f64::consts::PI * (r as f64).powi(2);\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r.powi(2))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpkla01ni8.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64).to_radians())\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(((r as f64).powi(2) * a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpgz1533mp.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some(0.5 * (r as f64) * (r as f64) * (a as f64) * std::f64::consts::PI / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmpsyhlbkyr.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64).to_radians())\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    Some(0.5 * a * (r as f64).powi(2))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpjin4dat8.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * PI * (r as f64).powi(2);\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `PI` in this scope\n --> /tmp/tmpnz43wdi1.rs:6:37\n  |\n6 |     let area = (a as f64 / 360.0) * PI * (r as f64).powi(2);\n  |                                     ^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::f32::consts::PI;\n  |\n1 | use std::f64::consts::PI;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r * r * a) as f64 / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmp6hu2psmr.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * PI * r as f64 * r as f64;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `PI` in this scope\n --> /tmp/tmpxa5tnpyc.rs:6:37\n  |\n6 |     let area = (a as f64 / 360.0) * PI * r as f64 * r as f64;\n  |                                     ^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::f32::consts::PI;\n  |\n1 | use std::f64::consts::PI;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some(0.5 * r as f64 * r as f64 * a as f64 * std::f64::consts::PI / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmp06jiptv1.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * (a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpmmu7zt05.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * (a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpmmu7zt05.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r.powi(2))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpkla01ni8.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64).to_radians())\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * a as f64 * std::f64::consts::PI / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 * std::f64::consts::PI / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64 * std::f64::consts::PI / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmpiz9p5fbu.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * (a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpmmu7zt05.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some(0.5 * r as f64 * r as f64 * a as f64)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmp8xz32xo0.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r.powi(2))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpkla01ni8.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some(0.5 * r as f64 * r as f64 * a as f64 * std::f64::consts::PI / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(3.141592653589793)`,\n right: `Some(6.283185307179586)`', /tmp/tmp06jiptv1.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let pi = std::f64::consts::PI;\n    Some(pi * (r as f64) * (r as f64) * (a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64).powi(2) * (a as f64).to_radians())\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * r * r * (a * std::f64::consts::PI / 180.0))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * (a as f64) / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpmmu7zt05.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * a as f64 / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpnnk8rpg5.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * a as f64 / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpnnk8rpg5.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r as f64).powi(2) * a as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpla50c507.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64) * (r as f64) * (a as f64))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpf9d_n6rg.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * a as f64 / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpnnk8rpg5.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (r * r * a) as f64 / 360.0;\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpviqwgsq6.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * (r as f64) * (r as f64) * (a as f64))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpf9d_n6rg.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    Some(0.5 * a * r as f64 * r as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmp00v7uald.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some(0.5 * r as f64 * r as f64 * a as f64)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpx9yyeacl.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    Some((r * r * a) as f64 / 360.0)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpzzaki4e8.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let area = (a as f64 / 360.0) * PI * (r as f64).powi(2);\n    Some(area)\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `PI` in this scope\n --> /tmp/tmpnz43wdi1.rs:6:37\n  |\n6 |     let area = (a as f64 / 360.0) * PI * (r as f64).powi(2);\n  |                                     ^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::f32::consts::PI;\n  |\n1 | use std::f64::consts::PI;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        None\n    } else {\n        Some((r as f64).powi(2) * (a as f64) / 360.0)\n    }\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(2.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmppf5y7znt.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n    if a > 360 {\n        return None;\n    }\n    let a = a as f64;\n    let r = r as f64;\n    Some(0.5 * a * r.powi(2))\n}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n",
      "timestamp": 1666122405,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `Some(360.0)`,\n right: `Some(6.283185307179586)`', /tmp/tmpkla01ni8.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}