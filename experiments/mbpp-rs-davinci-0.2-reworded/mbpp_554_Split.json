{
  "name": "mbpp_554_Split",
  "language": "rs",
  "prompt": "/// Write a rsthon function which takes a vector of integers and only returns the odd ones.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), vec![1, 3, 5]);\n    assert_eq!(candidate(vec![10, 11, 12, 13]), vec![11, 13]);\n    assert_eq!(candidate(vec![7, 8, 9, 1]), vec![7, 9, 1]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut odd_list = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            odd_list.push(i);\n        }\n    }\n    odd_list",
    "    let mut odds = Vec::new();\n    for i in list {\n        if i % 2 == 1 {\n            odds.push(i);\n        }\n    }\n    odds",
    "    let mut odd_list = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            odd_list.push(i);\n        }\n    }\n    odd_list",
    "    let mut odd_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            odd_list.push(i);\n        }\n    }\n    odd_list",
    "    let mut odd_list = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            odd_list.push(i);\n        }\n    }\n    odd_list",
    "    let mut odds = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            odds.push(i);\n        }\n    }\n    odds",
    "    let mut odd_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 1 {\n            odd_list.push(i);\n        }\n    }\n    odd_list",
    "    let mut odd_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            odd_list.push(i);\n        }\n    }\n    odd_list",
    "    list.into_iter().filter(|&x| x % 2 != 0).collect()",
    "    let mut result: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut odd_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            odd_list.push(i);\n        }\n    }\n    odd_list",
    "    let mut result = Vec::new();\n    for i in list {\n        if i % 2 == 1 {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut odds = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            odds.push(i);\n        }\n    }\n    odds",
    "    let mut odd_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            odd_list.push(i);\n        }\n    }\n    odd_list",
    "    let mut result: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 == 1 {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut odd = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            odd.push(i);\n        }\n    }\n    odd",
    "    let mut odd_list = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            odd_list.push(i);\n        }\n    }\n    odd_list",
    "    let mut odd_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            odd_list.push(i);\n        }\n    }\n    odd_list",
    "    let mut odd_list: Vec<isize> = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            odd_list.push(i);\n        }\n    }\n    odd_list",
    "    let mut result = Vec::new();\n    for i in list {\n        if i % 2 != 0 {\n            result.push(i);\n        }\n    }\n    result"
  ]
}