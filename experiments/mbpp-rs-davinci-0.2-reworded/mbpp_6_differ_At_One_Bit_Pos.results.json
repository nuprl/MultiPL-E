{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "rs",
  "prompt": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    if count == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpl7l1fu4s.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let count = count_set_bits(c);\n    if count == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `count_set_bits` in this scope\n --> /tmp/tmp__ydkid3.rs:4:17\n  |\n4 |     let count = count_set_bits(c);\n  |                 ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    (a ^ b) & ((a ^ b) - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp0e72etoa.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    if c & (c - 1) == 0 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpyz3sfbzi.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    if c & (c - 1) == 0 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c = c >> 1;\n    }\n    if count == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpmvbhzb1_.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpm4_z1i_p.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp2j9zy4n2.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp2m2cv1lr.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpm4_z1i_p.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp2m2cv1lr.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpjv_4wfos.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let x = a ^ b;\n    let mut count = 0;\n    while x > 0 {\n        count += 1;\n        x = x & (x - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `x`\n --> /tmp/tmpjt8sqzer.rs:7:9\n  |\n3 |     let x = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `x`\n  |         help: consider making this binding mutable: `mut x`\n...\n7 |         x = x & (x - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpm4_z1i_p.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp0e72etoa.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp9f155mu9.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpyz3sfbzi.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let x = a ^ b;\n    x & (x - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    if c & (c - 1) == 0 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpm4_z1i_p.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let mut c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp2j9zy4n2.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c = c >> 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpe5j7lum3.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    if c & (c - 1) == 0 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c = c >> 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpe5j7lum3.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpm4_z1i_p.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let count = count_set_bits(c);\n    if count == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `count_set_bits` in this scope\n --> /tmp/tmp__ydkid3.rs:4:17\n  |\n4 |     let count = count_set_bits(c);\n  |                 ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let count = c.count_ones();\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpyz3sfbzi.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpyz3sfbzi.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpm4_z1i_p.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let x = a ^ b;\n    x & (x - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let x = a ^ b;\n    x & (x - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmppvug18ur.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    (a ^ b) & ((a ^ b) - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpm4_z1i_p.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    if c & (c - 1) == 0 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpm4_z1i_p.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp2j9zy4n2.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmppz6us90f.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp13m4_x4c.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpm4_z1i_p.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpxdjq7wx5.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let count = c.count_ones();\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpjv_4wfos.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let x = a ^ b;\n    (x & (x - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmphxgfoqba.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c = c >> 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpaxcq0lfa.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c = c >> 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp_w0ialu3.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpl_1o411a.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let mut c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c = c >> 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp04i68q9a.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpyz3sfbzi.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmphxgfoqba.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp13m4_x4c.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmppz6us90f.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpm4_z1i_p.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmppvug18ur.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp2j9zy4n2.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let count = c.count_ones();\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp0e72etoa.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp13m4_x4c.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let x = a ^ b;\n    x & (x - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpxossput0.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpjv_4wfos.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let x = a ^ b;\n    let mut count = 0;\n    while x > 0 {\n        count += 1;\n        x = x & (x - 1);\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `x`\n --> /tmp/tmppoonizoa.rs:7:9\n  |\n3 |     let x = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `x`\n  |         help: consider making this binding mutable: `mut x`\n...\n7 |         x = x & (x - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    if c & (c - 1) == 0 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpyz3sfbzi.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c = c >> 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpfx1cuo6o.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpm4_z1i_p.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmppz6us90f.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpckv9csrt.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmppvug18ur.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpjv_4wfos.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let x = a ^ b;\n    let mut count = 0;\n    while x > 0 {\n        count += 1;\n        x = x & (x - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `x`\n --> /tmp/tmpjt8sqzer.rs:7:9\n  |\n3 |     let x = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `x`\n  |         help: consider making this binding mutable: `mut x`\n...\n7 |         x = x & (x - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c &= c - 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpietedx2p.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c &= c - 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpyz3sfbzi.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpyz3sfbzi.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    if c & (c - 1) == 0 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmppvug18ur.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpm4_z1i_p.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp2j9zy4n2.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c = c >> 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp_w0ialu3.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let x = a ^ b;\n    let mut count = 0;\n    while x > 0 {\n        if x & 1 == 1 {\n            count += 1;\n        }\n        x = x >> 1;\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `x`\n --> /tmp/tmpru8cyj93.rs:9:9\n  |\n3 |     let x = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `x`\n  |         help: consider making this binding mutable: `mut x`\n...\n9 |         x = x >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp0e72etoa.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmppz6us90f.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp2m2cv1lr.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c = c >> 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpfx1cuo6o.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmphxgfoqba.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    if c & (c - 1) == 0 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c = c >> 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpfx1cuo6o.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    if count == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpxz2ofmre.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpyz3sfbzi.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp0e72etoa.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmppvug18ur.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let x = a ^ b;\n    let mut count = 0;\n    while x > 0 {\n        count += 1;\n        x = x & (x - 1);\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `x`\n --> /tmp/tmpmkx9lf9d.rs:7:9\n  |\n3 |     let x = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `x`\n  |         help: consider making this binding mutable: `mut x`\n...\n7 |         x = x & (x - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c = c >> 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp04i68q9a.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    if c & (c - 1) == 0 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp2m2cv1lr.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmphxgfoqba.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpyz3sfbzi.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c = c >> 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp04i68q9a.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    if c & (c - 1) == 0 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp2m2cv1lr.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpyz3sfbzi.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpyz3sfbzi.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp2j9zy4n2.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c = c >> 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpe5j7lum3.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    if c & (c - 1) == 0 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpm4_z1i_p.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c = c >> 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp04i68q9a.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp6klxnqnh.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpjv_4wfos.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpjv_4wfos.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpjv_4wfos.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpckv9csrt.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpyz3sfbzi.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp6klxnqnh.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let mut c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let mut c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    if c & (c - 1) == 0 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c = c >> 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp_w0ialu3.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c = c >> 1;\n    }\n    return count == 1;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpuw16cq7b.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c >> 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += c & 1;\n        c >>= 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpkcykygkj.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp13m4_x4c.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c != 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmppz6us90f.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    if c & (c - 1) == 0 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c &= c - 1;\n    }\n    count == 1\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmpm_xhnqsp.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c &= c - 1;\n  |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        count += 1;\n        c = c & (c - 1);\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmppvug18ur.rs:7:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n7 |         c = c & (c - 1);\n  |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let x = a ^ b;\n    x & (x - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    let mut count = 0;\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1;\n        }\n        c >>= 1;\n    }\n    if count == 1 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `c`\n --> /tmp/tmp13m4_x4c.rs:9:9\n  |\n3 |     let c = a ^ b;\n  |         -\n  |         |\n  |         first assignment to `c`\n  |         help: consider making this binding mutable: `mut c`\n...\n9 |         c >>= 1;\n  |         ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    c & (c - 1) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    let c = a ^ b;\n    (c & (c - 1)) == 0\n}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}