{
  "name": "mbpp_793_last",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = (l + r) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] > x {\n                return m;\n            }\n            l = m + 1;\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return -1;",
    "    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut result = -1;\n    while l <= r {\n        let mid = l + (r - l) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            l = mid + 1;\n        } else if arr[mid as usize] < x {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    result",
    "    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = (low + high) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result",
    "    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            res = m;\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res",
    "    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = (l + r) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 {\n                return m;\n            } else if arr[(m + 1) as usize] != x {\n                return m;\n            } else {\n                l = m + 1;\n            }\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    -1",
    "    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = (l + r) / 2;\n        if arr[m as usize] == x {\n            res = m;\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res",
    "    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result",
    "    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut m = 0;\n    while l <= r {\n        m = (l + r) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] > x {\n                return m;\n            } else {\n                l = m + 1;\n            }\n        } else if arr[m as usize] > x {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return -1;",
    "    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] < x {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    result",
    "    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let mid = l + (r - l) / 2;\n        if arr[mid as usize] == x {\n            res = mid;\n            l = mid + 1;\n        } else if arr[mid as usize] > x {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    res",
    "    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] != x {\n                return m;\n            }\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    -1",
    "    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result",
    "    let mut lo = 0;\n    let mut hi = arr.len() as isize - 1;\n    let mut result = -1;\n    while lo <= hi {\n        let mid = lo + (hi - lo) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            lo = mid + 1;\n        } else if arr[mid as usize] < x {\n            lo = mid + 1;\n        } else {\n            hi = mid - 1;\n        }\n    }\n    result",
    "    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result",
    "    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            if m == arr.len() as isize - 1 || arr[(m + 1) as usize] != x {\n                return m;\n            } else {\n                l = m + 1;\n            }\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    -1",
    "    let mut low = 0;\n    let mut high = arr.len() as isize - 1;\n    let mut result = -1;\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            low = mid + 1;\n        } else if arr[mid as usize] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result",
    "    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    result",
    "    let mut left = 0;\n    let mut right = arr.len() as isize - 1;\n    let mut result = -1;\n\n    while left <= right {\n        let mid = left + (right - left) / 2;\n        if arr[mid as usize] == x {\n            result = mid;\n            left = mid + 1;\n        } else if arr[mid as usize] < x {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    result",
    "    let mut l = 0;\n    let mut r = arr.len() as isize - 1;\n    let mut res = -1;\n    while l <= r {\n        let m = l + (r - l) / 2;\n        if arr[m as usize] == x {\n            res = m;\n            l = m + 1;\n        } else if arr[m as usize] < x {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    res",
    "    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut result = -1;\n\n    while low <= high {\n        let mid = low + (high - low) / 2;\n        if arr[mid] == x {\n            result = mid as isize;\n            low = mid + 1;\n        } else if arr[mid] > x {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    result"
  ]
}