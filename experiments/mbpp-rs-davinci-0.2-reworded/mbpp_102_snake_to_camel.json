{
  "name": "mbpp_102_snake_to_camel",
  "language": "rs",
  "prompt": "/// Write a function to convert a snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"python_program\")), String::from(\"PythonProgram\"));\n    assert_eq!(candidate(String::from(\"python_language\")), String::from(\"PythonLanguage\"));\n    assert_eq!(candidate(String::from(\"programming_language\")), String::from(\"ProgrammingLanguage\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else if first {\n            result.push(c.to_uppercase().next().unwrap());\n            first = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut chars = word.chars();\n    let mut first_char = true;\n\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_uppercase().next().unwrap());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            is_upper = true;\n        } else {\n            if is_upper {\n                result.push(c.to_ascii_uppercase());\n                is_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            if let Some(c) = chars.next() {\n                result.push(c.to_uppercase().next().unwrap());\n            }\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut chars = word.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c == '_' {\n            let next = chars.next().unwrap();\n            result.push(next.to_uppercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push_str(&c.to_uppercase().to_string());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut capitalize = false;\n    for c in word.chars() {\n        if c == '_' {\n            capitalize = true;\n        } else {\n            if capitalize {\n                result.push(c.to_uppercase().next().unwrap());\n                capitalize = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first = true;\n    for c in word.chars() {\n        if c == '_' {\n            first = true;\n        } else {\n            if first {\n                result.push(c.to_uppercase().next().unwrap());\n                first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else {\n            if is_first {\n                result.push(c.to_ascii_uppercase());\n                is_first = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push_str(&c.to_uppercase().to_string());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut result = String::new();\n    let mut first_char = true;\n    for c in word.chars() {\n        if c == '_' {\n            first_char = true;\n        } else {\n            if first_char {\n                result.push(c.to_uppercase().next().unwrap());\n                first_char = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result",
    "    let mut res = String::new();\n    let mut is_first = true;\n    for c in word.chars() {\n        if c == '_' {\n            is_first = true;\n        } else if is_first {\n            res.push(c.to_uppercase().next().unwrap());\n            is_first = false;\n        } else {\n            res.push(c);\n        }\n    }\n    res",
    "    let mut result = String::new();\n    let mut next_upper = false;\n    for c in word.chars() {\n        if c == '_' {\n            next_upper = true;\n        } else {\n            if next_upper {\n                result.push(c.to_uppercase().next().unwrap());\n                next_upper = false;\n            } else {\n                result.push(c);\n            }\n        }\n    }\n    result"
  ]
}