{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the first non-repeated character in a given string.\nfn first_non_repeating_character(str1: String) -> Option<String> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = first_non_repeating_character;\n    assert_eq!(candidate(String::from(\"abcabc\")), None);\n    assert_eq!(candidate(String::from(\"abc\")), Some(String::from(\"a\")));\n    assert_eq!(candidate(String::from(\"ababc\")), Some(String::from(\"c\")));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(&1) => {\n                result = Some(c.to_string());\n                break;\n            }\n            _ => continue,\n        }\n    }\n\n    result",
    "    let mut char_map = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, u32> = HashMap::new();\n    for ch in str1.chars() {\n        let count = map.entry(ch).or_insert(0);\n        *count += 1;\n    }\n    for ch in str1.chars() {\n        if map.get(&ch).unwrap() == &1 {\n            return Some(ch.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if let Some(count) = map.get(&c) {\n            if *count == 1 {\n                return Some(c.to_string());\n            }\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_count = HashMap::new();\n    let mut char_order = Vec::new();\n\n    for c in str1.chars() {\n        char_count.entry(c).and_modify(|e| *e += 1).or_insert(1);\n        char_order.push(c);\n    }\n\n    for c in char_order {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars = str1.chars();\n    let mut char_map = HashMap::new();\n    let mut first_non_repeating_char = None;\n\n    while let Some(c) = chars.next() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for (c, count) in char_map {\n        if count == 1 {\n            first_non_repeating_char = Some(c.to_string());\n            break;\n        }\n    }\n\n    first_non_repeating_char",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for ch in str1.chars() {\n        let count = map.entry(ch).or_insert(0);\n        *count += 1;\n    }\n    for ch in str1.chars() {\n        if map.get(&ch).unwrap() == &1 {\n            return Some(ch.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if let Some(count) = map.get(&c) {\n            if *count == 1 {\n                return Some(c.to_string());\n            }\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n\n    result",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars = str1.chars();\n    let mut char_map = HashMap::new();\n\n    while let Some(c) = chars.next() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for (c, count) in char_map {\n        if count == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    let mut char_order = Vec::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n        if *count == 1 {\n            char_order.push(c);\n        }\n    }\n    for c in char_order {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    let mut char_order = HashMap::new();\n    let mut order = 0;\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n        let char_order_entry = char_order.entry(c).or_insert(0);\n        if *char_order_entry == 0 {\n            *char_order_entry = order;\n            order += 1;\n        }\n    }\n    let mut first_non_repeating_char = None;\n    for (c, count) in char_count {\n        if count == 1 {\n            if first_non_repeating_char.is_none() {\n                first_non_repeating_char = Some(c.to_string());\n            } else {\n                let first_non_repeating_char_order = char_order.get(&first_non_repeating_char.unwrap().chars().next().unwrap()).unwrap();\n                let current_char_order = char_order.get(&c).unwrap();\n                if *current_char_order < *first_non_repeating_char_order {\n                    first_non_repeating_char = Some(c.to_string());\n                }\n            }\n        }\n    }\n    first_non_repeating_char",
    "    let mut char_map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut map = HashMap::new();\n    let mut result = None;\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n    result",
    "    let mut char_count = HashMap::new();\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, u32> = HashMap::new();\n    let mut result = None;\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        let count = char_map.get(&c).unwrap();\n        if *count == 1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n    result",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, u32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n\n    result",
    "    let mut map = HashMap::new();\n    let mut result = None;\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n    result",
    "    let mut map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    let mut char_order: HashMap<char, i32> = HashMap::new();\n    let mut order = 0;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n\n        let order = char_order.entry(c).or_insert(order);\n        *order = order + 1;\n    }\n\n    let mut result = None;\n    let mut min_order = std::i32::MAX;\n\n    for (c, count) in char_count.iter() {\n        if *count == 1 {\n            let order = char_order.get(c).unwrap();\n            if *order < min_order {\n                min_order = *order;\n                result = Some(c.to_string());\n            }\n        }\n    }\n\n    result",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        match chars.get(&c) {\n            Some(count) if *count == 1 => {\n                result = Some(c.to_string());\n                break;\n            }\n            _ => {}\n        }\n    }\n\n    result",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut map = HashMap::new();\n    let mut result = None;\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n    result",
    "    let mut map = HashMap::new();\n    let mut result = String::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result.push(c);\n            break;\n        }\n    }\n    if result.is_empty() {\n        return None;\n    }\n    Some(result)",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n\n    result",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n    result",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n\n    result",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(count) => {\n                if *count == 1 {\n                    return Some(c.to_string());\n                }\n            }\n            None => return None,\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    let mut res = String::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            res.push(c);\n            return Some(res);\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    let mut char_index = HashMap::new();\n    let mut min_index = str1.len();\n    let mut result = None;\n\n    for (index, c) in str1.chars().enumerate() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n        char_index.entry(c).or_insert(index);\n    }\n\n    for (c, count) in &char_count {\n        if *count == 1 && *char_index.get(c).unwrap() < min_index {\n            min_index = *char_index.get(c).unwrap();\n            result = Some(c.to_string());\n        }\n    }\n\n    result",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n    result",
    "    let mut char_counts = HashMap::new();\n    let mut first_non_repeating_char = None;\n\n    for c in str1.chars() {\n        let count = char_counts.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for (c, count) in char_counts.iter() {\n        if *count == 1 {\n            first_non_repeating_char = Some(c.to_string());\n            break;\n        }\n    }\n\n    first_non_repeating_char",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut count = HashMap::new();\n    for c in str1.chars() {\n        let counter = count.entry(c).or_insert(0);\n        *counter += 1;\n    }\n\n    for c in str1.chars() {\n        if count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n    result",
    "    let mut hash_map: HashMap<char, u32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = hash_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if let Some(count) = hash_map.get(&c) {\n            if *count == 1 {\n                result = Some(c.to_string());\n                break;\n            }\n        }\n    }\n\n    result",
    "    let mut chars: Vec<char> = str1.chars().collect();\n    let mut result: Option<String> = None;\n    let mut i = 0;\n    while i < chars.len() {\n        let mut j = 0;\n        let mut found = false;\n        while j < chars.len() {\n            if i != j && chars[i] == chars[j] {\n                found = true;\n                break;\n            }\n            j += 1;\n        }\n        if !found {\n            result = Some(chars[i].to_string());\n            break;\n        }\n        i += 1;\n    }\n    result",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut count = HashMap::new();\n    for c in str1.chars() {\n        let counter = count.entry(c).or_insert(0);\n        *counter += 1;\n    }\n    for c in str1.chars() {\n        if count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c) == Some(&1) {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut count = HashMap::new();\n    let mut result = String::new();\n    let mut first_non_repeating_character = String::new();\n\n    for c in str1.chars() {\n        let counter = count.entry(c).or_insert(0);\n        *counter += 1;\n    }\n\n    for c in str1.chars() {\n        if count[&c] == 1 {\n            first_non_repeating_character = c.to_string();\n            break;\n        }\n    }\n\n    if first_non_repeating_character.is_empty() {\n        return None;\n    }\n\n    Some(first_non_repeating_character)",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n    result",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, usize> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n\n    result",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, u32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n    result",
    "    let mut map = HashMap::new();\n    for ch in str1.chars() {\n        let count = map.entry(ch).or_insert(0);\n        *count += 1;\n    }\n    for ch in str1.chars() {\n        if map.get(&ch).unwrap() == &1 {\n            return Some(ch.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    let mut result = None;\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n    result",
    "    let mut char_map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if let Some(count) = map.get(&c) {\n            if *count == 1 {\n                return Some(c.to_string());\n            }\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    let mut result = None;\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n    result",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: Vec<char> = str1.chars().collect();\n    let mut count: HashMap<char, u32> = HashMap::new();\n    for c in chars.iter() {\n        let counter = count.entry(*c).or_insert(0);\n        *counter += 1;\n    }\n    for c in chars.iter() {\n        if count[c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    let mut first_non_repeating_char: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(1) => {\n                first_non_repeating_char = Some(c.to_string());\n                break;\n            }\n            _ => continue,\n        }\n    }\n\n    first_non_repeating_char",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if let Some(count) = map.get(&c) {\n            if *count == 1 {\n                return Some(c.to_string());\n            }\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    let mut first_non_repeating_char: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(count) => {\n                if *count == 1 {\n                    first_non_repeating_char = Some(c.to_string());\n                    break;\n                }\n            }\n            None => {}\n        }\n    }\n\n    first_non_repeating_char",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n    result",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n\n    result",
    "    let mut chars = str1.chars();\n    let mut char_counts = HashMap::new();\n    let mut char_index = HashMap::new();\n    let mut index = 0;\n\n    while let Some(c) = chars.next() {\n        let count = char_counts.entry(c).or_insert(0);\n        *count += 1;\n\n        let char_index_entry = char_index.entry(c).or_insert(0);\n        *char_index_entry = index;\n\n        index += 1;\n    }\n\n    let mut min_index = std::usize::MAX;\n    let mut min_char = None;\n\n    for (c, count) in char_counts {\n        if count == 1 {\n            let index = *char_index.get(&c).unwrap();\n            if index < min_index {\n                min_index = index;\n                min_char = Some(c);\n            }\n        }\n    }\n\n    min_char.map(|c| c.to_string())",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n\n    result",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    let mut first_non_repeating_character: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(count) => {\n                if *count == 1 {\n                    first_non_repeating_character = Some(c.to_string());\n                    break;\n                }\n            }\n            None => {}\n        }\n    }\n\n    first_non_repeating_character",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for ch in str1.chars() {\n        let count = char_count.entry(ch).or_insert(0);\n        *count += 1;\n    }\n\n    for ch in str1.chars() {\n        if char_count.get(&ch).unwrap() == &1 {\n            return Some(ch.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None"
  ]
}