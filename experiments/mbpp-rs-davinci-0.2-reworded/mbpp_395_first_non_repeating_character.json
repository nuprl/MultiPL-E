{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the first non-repeated character in a given string.\nfn first_non_repeating_character(str1: String) -> Option<String> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = first_non_repeating_character;\n    assert_eq!(candidate(String::from(\"abcabc\")), None);\n    assert_eq!(candidate(String::from(\"abc\")), Some(String::from(\"a\")));\n    assert_eq!(candidate(String::from(\"ababc\")), Some(String::from(\"c\")));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(&1) => {\n                result = Some(c.to_string());\n                break;\n            }\n            _ => continue,\n        }\n    }\n\n    result",
    "    let mut char_map = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, u32> = HashMap::new();\n    for ch in str1.chars() {\n        let count = map.entry(ch).or_insert(0);\n        *count += 1;\n    }\n    for ch in str1.chars() {\n        if map.get(&ch).unwrap() == &1 {\n            return Some(ch.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if let Some(count) = map.get(&c) {\n            if *count == 1 {\n                return Some(c.to_string());\n            }\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_count = HashMap::new();\n    let mut char_order = Vec::new();\n\n    for c in str1.chars() {\n        char_count.entry(c).and_modify(|e| *e += 1).or_insert(1);\n        char_order.push(c);\n    }\n\n    for c in char_order {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars = str1.chars();\n    let mut char_map = HashMap::new();\n    let mut first_non_repeating_char = None;\n\n    while let Some(c) = chars.next() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for (c, count) in char_map {\n        if count == 1 {\n            first_non_repeating_char = Some(c.to_string());\n            break;\n        }\n    }\n\n    first_non_repeating_char",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None"
  ]
}