{
  "name": "mbpp_292_find",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    1 + find(n - m, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    1 + find(n - m, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    (n / m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    1 + find(n - m, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut count = 0;\n    let mut sum = m;\n    while sum <= n {\n        sum += m;\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    1 + find(n - m, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut i = 0;\n    let mut sum = 0;\n    while sum < n {\n        sum += m;\n        i += 1;\n    }\n    i - 1\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpig8uuht1.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r -= m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpl5ckd0u3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t = t + m;\n        q = q + 1;\n    }\n    return q;\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmptc3lrhwc.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut count = 0;\n    let mut sum = 0;\n    while sum < n {\n        sum += m;\n        count += 1;\n    }\n    count - 1\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpezn38ofy.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t <<= 1;\n        q <<= 1;\n    }\n    if t > n {\n        t >>= 1;\n        q >>= 1;\n    }\n    q + find(n - t, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpl5ckd0u3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t = t + m;\n        q = q + 1;\n    }\n    return q - 1;\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpw3xztfrn.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut count = 1;\n    let mut sum = m;\n    while sum + m <= n {\n        sum += m;\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut c = 0;\n    let mut a = n;\n    while a >= m {\n        a -= m;\n        c += 1;\n    }\n    c\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t = t + m;\n        q = q + 1;\n    }\n    return q;\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmptc3lrhwc.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpl5ckd0u3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut res = 0;\n    let mut sum = m;\n    while sum <= n {\n        sum += m;\n        res += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t = t + m;\n        q = q + 1;\n    }\n    return q;\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmptc3lrhwc.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpl5ckd0u3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    1 + find(n - m, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        0\n    } else {\n        1 + find(n - m, m)\n    }\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut i = 0;\n    let mut sum = 0;\n    while sum <= n {\n        sum += m;\n        i += 1;\n    }\n    i - 1\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpl5ckd0u3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r -= m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut res = 0;\n    let mut m = m;\n    while n >= m {\n        m <<= 1;\n        res += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `3`', /tmp/tmpvok09cbj.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t <<= 1;\n        q <<= 1;\n    }\n    if t > n {\n        t >>= 1;\n        q >>= 1;\n    }\n    q + find(n - t, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut quotient = 0;\n    let mut dividend = n;\n    while dividend >= m {\n        dividend -= m;\n        quotient += 1;\n    }\n    quotient\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut i = 0;\n    while n >= m {\n        n -= m;\n        i += 1;\n    }\n    i\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp8fm38isg.rs:5:9\n  |\n2 | fn find(n: isize, m: isize) -> isize {\n  |         - help: consider making this binding mutable: `mut n`\n...\n5 |         n -= m;\n  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut count = 0;\n    let mut sum = m;\n    while sum <= n {\n        count += 1;\n        sum += m;\n    }\n    count\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r -= m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpl5ckd0u3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    1 + find(n - m, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpl5ckd0u3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpl5ckd0u3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut count = 0;\n    let mut sum = m;\n    while sum <= n {\n        sum += m;\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        0\n    } else {\n        1 + find(n - m, m)\n    }\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut count = 0;\n    let mut sum = m;\n    while sum <= n {\n        sum += m;\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    1 + find(n - m, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpl5ckd0u3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    1 + find(n - m, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t <<= 1;\n        q <<= 1;\n    }\n    if t > n {\n        t >>= 1;\n        q >>= 1;\n    }\n    q + find(n - t, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r -= m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t = t + m;\n        q = q + 1;\n    }\n    return q;\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmptc3lrhwc.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t <<= 1;\n        q <<= 1;\n    }\n    if t > n {\n        t >>= 1;\n        q >>= 1;\n    }\n    q + find(n - t, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t <<= 1;\n        q <<= 1;\n    }\n    if t > n {\n        t >>= 1;\n        q >>= 1;\n    }\n    q + find(n - t, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    return q;\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpl5ckd0u3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpl5ckd0u3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r = r - m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    return q - 1;\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpoqutoyii.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q - 1\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`', /tmp/tmpqn7l4wtp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpl5ckd0u3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t = t << 1;\n        q = q << 1;\n    }\n    if t > n {\n        t = t >> 1;\n        q = q >> 1;\n        return q + find(n - t, m);\n    }\n    return q;\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut result = 0;\n    let mut sum = m;\n    while sum <= n {\n        sum += m;\n        result += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut count = 0;\n    let mut sum = m;\n    while sum <= n {\n        sum += m;\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    1 + find(n - m, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpl5ckd0u3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t = t + m;\n        q = q + 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpdtt2wxrr.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    let mut q = 0;\n    let mut r = n;\n    while r >= m {\n        r -= m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    1 + find(n - m, m)\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    n / m\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    return 1 + find(n - m, m);\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut t = m;\n    while t < n {\n        t += m;\n        q += 1;\n    }\n    q\n}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpl5ckd0u3.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}