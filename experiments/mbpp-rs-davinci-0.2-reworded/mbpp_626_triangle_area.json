{
  "name": "mbpp_626_triangle_area",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfn triangle_area(r: isize) -> Option<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(-1), None);\n    assert_eq!(candidate(0), Some(0));\n    assert_eq!(candidate(2), Some(4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (r * 2).pow(2) - (r * 2).pow(2);\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r.pow(2) * (3.0_f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r * r / 2;\n    let c = (a * a + b * b).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    Some(a as isize)",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r / 2;\n    let b = r;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r * r * 3 / 4;\n    let b = (r * r * 3 / 4) as f64;\n    let c = (b.sqrt() / 2.0) as isize;\n    if a % c == 0 {\n        Some(a / c)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = a;\n    let p = (a + b + c) / 2.0;\n    let s = (p * (p - a) * (p - b) * (p - c)).sqrt();\n    if s.is_finite() {\n        Some(s as isize)\n    } else {\n        None\n    }",
    "    let x = r / 2;\n    let y = (r * r - x * x).sqrt() as isize;\n    if y > 0 {\n        Some(x * y / 2)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let r = r as f64;\n    let h = r / 2.0;\n    let a = r * r * PI;\n    let b = 2.0 * r * h;\n    let c = 2.0 * h * h;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let w = (h * h - r * r).sqrt() as isize;\n    Some(w * h / 2)",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = b;\n    let p = (a + b + c) / 2.0;\n    let s = p * (p - a) * (p - b) * (p - c);\n    if s > 0.0 {\n        Some((s.sqrt() * 2.0 / 3.0) as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (r * 2).pow(2) - (r * 2).pow(2);\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }"
  ]
}