{
  "name": "mbpp_626_triangle_area",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfn triangle_area(r: isize) -> Option<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(-1), None);\n    assert_eq!(candidate(0), Some(0));\n    assert_eq!(candidate(2), Some(4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (r * 2).pow(2) - (r * 2).pow(2);\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r.pow(2) * (3.0_f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r * r / 2;\n    let c = (a * a + b * b).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    Some(a as isize)",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r / 2;\n    let b = r;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r * r * 3 / 4;\n    let b = (r * r * 3 / 4) as f64;\n    let c = (b.sqrt() / 2.0) as isize;\n    if a % c == 0 {\n        Some(a / c)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = a;\n    let p = (a + b + c) / 2.0;\n    let s = (p * (p - a) * (p - b) * (p - c)).sqrt();\n    if s.is_finite() {\n        Some(s as isize)\n    } else {\n        None\n    }",
    "    let x = r / 2;\n    let y = (r * r - x * x).sqrt() as isize;\n    if y > 0 {\n        Some(x * y / 2)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let r = r as f64;\n    let h = r / 2.0;\n    let a = r * r * PI;\n    let b = 2.0 * r * h;\n    let c = 2.0 * h * h;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let w = (h * h - r * r).sqrt() as isize;\n    Some(w * h / 2)",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = b;\n    let p = (a + b + c) / 2.0;\n    let s = p * (p - a) * (p - b) * (p - c);\n    if s > 0.0 {\n        Some((s.sqrt() * 2.0 / 3.0) as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (r * 2).pow(2) - (r * 2).pow(2);\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r.pow(2) * (2.0_f64).sqrt() / 4.0;\n    let b = (r.pow(2) - a.powi(2)).sqrt();\n    let c = r.pow(2) - b.powi(2);\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r * 2;\n    let b = (r * 2).pow(2) - r.pow(2);\n    let c = (r * 2).pow(2) - (r / 2).pow(2);\n    let p = (a + b + c) / 2;\n    let s = (p * (p - a) * (p - b) * (p - c)).sqrt();\n    if s.is_nan() {\n        None\n    } else {\n        Some(s as isize)\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = (a * a - b * b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    if r <= 0 {\n        return None;\n    }\n    let a = (r * r * 3).sqrt() / 2;\n    Some(a * a * 3 / 4)",
    "    let r = r as f64;\n    let a = r.sqrt();\n    let b = r - a;\n    let c = r;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = r as f64;\n    let c = 2.0 * a;\n    let p = (a + b + c) / 2.0;\n    let s = (p * (p - a) * (p - b) * (p - c)).sqrt();\n    if s.is_nan() {\n        None\n    } else {\n        Some(s as isize)\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let h = r * 2;\n    let a = h * h;\n    let b = r * r;\n    let c = (a - b) / 2;\n    let d = (a + b) / 2;\n    let e = (c * d) / 2;\n    let f = (e as f64).sqrt() as isize;\n    if f == 0 {\n        None\n    } else {\n        Some(f)\n    }",
    "    let a = r * 2;\n    let b = a / 2;\n    let c = r;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let mut max = 0;\n    let mut max_a = 0;\n    let mut max_b = 0;\n    let mut max_c = 0;\n    for a in 1..r {\n        for b in 1..r {\n            let c = (a * a + b * b).sqrt() as isize;\n            if c > r {\n                continue;\n            }\n            let area = (a * b * c) / 2;\n            if area > max {\n                max = area;\n                max_a = a;\n                max_b = b;\n                max_c = c;\n            }\n        }\n    }\n    if max > 0 {\n        Some(max)\n    } else {\n        None\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let h = r / 2;\n    let a = r * r - h * h;\n    if a < 0 {\n        None\n    } else {\n        Some(a)\n    }",
    "    let a = r * r * 3 / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r + r * r).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    unimplemented!()",
    "    let a = r * r * 3 / 2;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    Some(area)",
    "    let r = r as f64;\n    let a = r.sqrt() * r / 2.0;\n    let b = r.sqrt() * r.sqrt() / 2.0;\n    let c = r;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 4;\n    let b = (r * r * 3 / 4) as f64;\n    let c = b.sqrt() as isize;\n    if a == c * c {\n        Some(a)\n    } else {\n        None\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    unimplemented!()",
    "    let a = r * r * (PI / 2.0).sin();\n    if a > 0.0 {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    Some(area)",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r * r;\n    let b = r * r;\n    let c = 2 * r;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)) as f64;\n    if area < 0.0 {\n        None\n    } else {\n        Some(area.sqrt() as isize)\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = (a * a + b * b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a < 0.0 {\n        None\n    } else {\n        Some(a as isize)\n    }",
    "    let h = r * 2;\n    let a = (h * h) / 2;\n    let b = (r * r) / 2;\n    let c = a - b;\n    let s = (r + r + r) / 2;\n    let area = (s * (s - r) * (s - r) * (s - r)).sqrt();\n    Some(area as isize)",
    "    let a = r * r * 3 / 4;\n    let b = (r * r * 3 / 4) as f64;\n    let c = b.sqrt();\n    let d = c as isize;\n    let e = d * d;\n    let f = a - e;\n    let g = f / 4;\n    let h = g as f64;\n    let i = h.sqrt();\n    let j = i as isize;\n    if j * j * 4 == f {\n        Some(j * j)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin();\n    let b = r.pow(2) * (PI / 2.0).cos();\n    let c = 2.0 * r.pow(2) * (PI / 2.0).sin() * (PI / 2.0).cos();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    // let a = r * 2;\n    // let b = r * 2;\n    // let c = r * 2;\n    // let p = (a + b + c) / 2;\n    // let s = (p * (p - a) * (p - b) * (p - c)).sqrt();\n    // Some(s as isize)\n    None",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = (a * a - b * b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r.pow(2) * (PI / 2.0).sqrt() / 2.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let mut max_area = 0;\n    for i in 1..r {\n        for j in 1..r {\n            let k = (r.pow(2) - i.pow(2) - j.pow(2)).sqrt();\n            if k.is_integer() {\n                let area = (i * j * k) / 2;\n                if area > max_area {\n                    max_area = area;\n                }\n            }\n        }\n    }\n    if max_area == 0 {\n        None\n    } else {\n        Some(max_area)\n    }",
    "    let r = r as f64;\n    let a = r * r * PI / 2.0;\n    let b = a / 2.0;\n    let c = (a * a - b * b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let mut max_area = 0;\n    for a in 1..r {\n        for b in 1..r {\n            let c = (a * a + b * b) as f64;\n            let c = c.sqrt() as isize;\n            if c > r {\n                continue;\n            }\n            let area = (a * b * c) / 2;\n            if area > max_area {\n                max_area = area;\n            }\n        }\n    }\n    if max_area == 0 {\n        return None;\n    }\n    Some(max_area)",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r + r * r).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r as f64;\n    let b = (r as f64) / 2.0;\n    let c = (r as f64) / 2.0;\n    let p = (a + b + c) / 2.0;\n    let s = p * (p - a) * (p - b) * (p - c);\n    if s < 0.0 {\n        None\n    } else {\n        Some((s.sqrt() * 2.0) as isize)\n    }",
    "    let s = r * 2;\n    let a = s * s;\n    let b = (s / 2) * (s / 2);\n    let c = a - b;\n    let d = (c as f64).sqrt() as isize;\n    let e = d / 2;\n    let f = e * e;\n    let g = (f * 2) / d;\n    let h = (g * 2) / d;\n    let i = (h * 2) / d;\n    let j = (i * 2) / d;\n    let k = (j * 2) / d;\n    let l = (k * 2) / d;\n    let m = (l * 2) / d;\n    let n = (m * 2) / d;\n    let o = (n * 2) / d;\n    let p = (o * 2) / d;\n    let q = (p * 2) / d;\n    let t = (q * 2) / d;\n    let u = (t * 2) / d;\n    let v = (u * 2) / d;\n    let w = (v * 2) / d;\n    let x = (w * 2) / d;\n    let y = (x * 2) / d;\n    let z = (y * 2) / d;\n    let aa = (z * 2) / d;\n    let ab = (aa * 2) / d;\n    let ac = (ab * 2) / d;\n    let ad = (ac * 2) / d;\n    let ae = (ad * 2) / d;\n    let af = (ae * 2) / d;\n    let ag = (af * 2) / d;\n    let ah = (ag * 2) / d;\n    let ai = (ah * 2) / d;\n    let aj = (ai * 2) / d;\n    let ak = (aj * 2) / d;\n    let al = (ak * 2) / d;\n    let am = (al * 2) / d;\n    let an = (am * 2) / d;\n    let ao = (an * 2) / d",
    "    let a = r.pow(2) * (PI / 2.0).sqrt() / 2.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let a = r * r * 3 / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 4;\n    let b = (r * r * 3 / 4) as f64;\n    let c = (b.sqrt() / 2.0) as isize;\n    let s = (a + c + c) / 2;\n    let area = (s * (s - a) * (s - c) * (s - c)) as f64;\n    if area.is_nan() {\n        None\n    } else {\n        Some(area.sqrt() as isize)\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (r * 2).pow(2) + (r * 2).pow(2);\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    unimplemented!()",
    "    let x = r * 2;\n    let y = r * r;\n    let z = (x * x) - (y * 4);\n    if z < 0 {\n        return None;\n    }\n    let z = z.sqrt();\n    let z = (x - z) / 2;\n    let z = z * y;\n    Some(z as isize)",
    "    let a = r.pow(2) * (PI / 2.0).sqrt();\n    let b = r.pow(2) - (a / 2.0).powi(2);\n    let c = (b * 2.0).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let r = r as f64;\n    let a = r * r * PI / 2.0;\n    let b = a / 2.0;\n    let c = r;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = a / 2.0;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r.pow(2) * (3.0_f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let a = h * h;\n    let b = r * r;\n    let c = a - b;\n    let d = c / 2;\n    let e = d as f64;\n    let f = e.sqrt();\n    let g = f as isize;\n    let h = g * r;\n    if h == 0 {\n        None\n    } else {\n        Some(h)\n    }",
    "    let area = |a, b, c| {\n        let s = (a + b + c) / 2;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n    };\n    let a = r;\n    let b = r;\n    let c = r * 2;\n    if a + b > c && b + c > a && c + a > b {\n        Some(area(a, b, c) as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r;\n    let c = (a * a + b * b).sqrt();\n    let p = (a + b + c) / 2;\n    let area = (p * (p - a) * (p - b) * (p - c)).sqrt();\n    Some(area as isize)",
    "    let a = r * r * 3 / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let mut max_area = 0;\n    for i in 1..r {\n        for j in 1..r {\n            let k = (i * i + j * j) as f64;\n            let k = k.sqrt() as isize;\n            if k * k == i * i + j * j && k <= r {\n                let area = i * j / 2;\n                if area > max_area {\n                    max_area = area;\n                }\n            }\n        }\n    }\n    if max_area == 0 {\n        None\n    } else {\n        Some(max_area)\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let w = (r * 2).sqrt();\n    let area = (w * h) / 2;\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    Some(a as isize)",
    "    let h = r * 2;\n    let a = h * h;\n    let b = r * r;\n    let c = (a - b) / 2;\n    let d = (a + b) / 2;\n    let e = (c * d) / 2;\n    if e > 0 {\n        Some(e)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let mut max_area = 0;\n    for a in 1..r {\n        for b in 1..r {\n            let c = (a * a + b * b) as f64;\n            if c.sqrt() == (r as f64) {\n                let area = (a * b) / 2;\n                if area > max_area {\n                    max_area = area;\n                }\n            }\n        }\n    }\n    if max_area == 0 {\n        None\n    } else {\n        Some(max_area)\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r + r * r).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let r = r as f64;\n    let a = (r * r * PI) / 2.0;\n    let b = (r * r * PI) / 4.0;\n    let c = (r * r * PI) / 4.0;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let mut max_area = 0;\n    for a in 1..r {\n        for b in 1..r {\n            let c = (a * a + b * b) as f64;\n            if c.sqrt() > r as f64 {\n                continue;\n            }\n            let area = (a * b) / 2;\n            if area > max_area {\n                max_area = area;\n            }\n        }\n    }\n    if max_area == 0 {\n        None\n    } else {\n        Some(max_area)\n    }",
    "    let x = r * 2;\n    let y = r * r;\n    let z = y * 2;\n    let a = x * y;\n    let b = x * z;\n    let c = y * z;\n    let d = a * b;\n    let e = a * c;\n    let f = b * c;\n    let g = d * e;\n    let h = d * f;\n    let i = e * f;\n    let j = g * h;\n    let k = g * i;\n    let l = h * i;\n    let m = j * k;\n    let n = j * l;\n    let o = k * l;\n    let p = m * n;\n    let q = m * o;\n    let r = n * o;\n    let s = p * q;\n    let t = p * r;\n    let u = q * r;\n    let v = s * t;\n    let w = s * u;\n    let x = t * u;\n    let y = v * w;\n    let z = v * x;\n    let aa = w * x;\n    let bb = y * z;\n    let cc = y * aa;\n    let dd = z * aa;\n    let ee = bb * cc;\n    let ff = bb * dd;\n    let gg = cc * dd;\n    let hh = ee * ff;\n    let ii = ee * gg;\n    let jj = ff * gg;\n    let kk = hh * ii;\n    let ll = hh * jj;\n    let mm = ii * jj;\n    let nn = kk * ll;\n    let oo = kk * mm;\n    let pp = ll * mm;\n    let qq = nn * oo;\n    let rr = nn * pp;\n    let ss = oo * pp;\n    let tt = qq * rr;\n    let uu = qq * ss;\n    let vv = rr * ss;\n    let ww = tt * uu;\n    let xx =",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let mut max_area = 0;\n    for a in 1..r {\n        for b in 1..r {\n            let c = (a * a + b * b).sqrt() as isize;\n            if c > r {\n                continue;\n            }\n            let area = (a * b * c) / 2;\n            if area > max_area {\n                max_area = area;\n            }\n        }\n    }\n    if max_area == 0 {\n        None\n    } else {\n        Some(max_area)\n    }",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let h = r * 2;\n    let a = h * h;\n    let b = r * r;\n    let c = (a - b) / 2;\n    if c > 0 {\n        Some(c)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r - a * a - b * b).sqrt() as isize;\n    if a + b > c && a + c > b && b + c > a {\n        Some(a * b / 2)\n    } else {\n        None\n    }",
    "    let mut max_area = 0;\n    for x in 1..r {\n        for y in 1..r {\n            let area = (x * y) / 2;\n            if area > max_area {\n                max_area = area;\n            }\n        }\n    }\n    Some(max_area)",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)) as f64;\n    if area < 0.0 {\n        None\n    } else {\n        Some(area.sqrt() as isize)\n    }",
    "    let a = r * (r - 1) * (r - 2) / 6;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let mut max_area = 0;\n    for x in 1..r {\n        let y = (r.pow(2) - x.pow(2)).sqrt() as isize;\n        let area = x * y / 2;\n        if area > max_area {\n            max_area = area;\n        }\n    }\n    if max_area == 0 {\n        None\n    } else {\n        Some(max_area)\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sqrt() / 2.0;\n    let b = r.pow(2) * (PI / 2.0).sqrt() / 2.0;\n    let c = r.pow(2) * (PI / 2.0).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r + r * r).sqrt() as isize;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    Some(area)",
    "    let a = r.pow(2) * (3.0f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let mut a = 0;\n    let mut b = r;\n    let mut c = r;\n    let mut max_area = 0;\n    while a <= r {\n        while b <= r {\n            while c <= r {\n                let s = (a + b + c) / 2;\n                let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n                if area > max_area {\n                    max_area = area;\n                }\n                c += 1;\n            }\n            b += 1;\n            c = b;\n        }\n        a += 1;\n        b = a;\n        c = b;\n    }\n    Some(max_area)",
    "    unimplemented!()",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = (a * a - b * b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = (r * r * 3).sqrt() / 2;\n    let h = (r * r - a * a).sqrt();\n    Some(a * h / 2)",
    "    let a = r * r;\n    let b = r * r;\n    let c = (2 * r) * (2 * r);\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)) as f64;\n    if area < 0.0 {\n        return None;\n    }\n    Some(area.sqrt() as isize)",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a > 0.0 {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let mut max = 0;\n    for a in 1..r {\n        for b in 1..r {\n            let c = (a * a + b * b) as f64;\n            if c.sqrt() == c.sqrt().round() {\n                let area = (a * b) / 2;\n                if area > max {\n                    max = area;\n                }\n            }\n        }\n    }\n    if max == 0 {\n        None\n    } else {\n        Some(max)\n    }",
    "    let s = r * 2;\n    let a = s * s;\n    let b = (s / 2) * (s / 2);\n    let c = a - b;\n    let d = c.sqrt();\n    let e = d / 2;\n    let f = e * e;\n    let g = b - f;\n    let h = g.sqrt();\n    let i = h * e;\n    Some(i as isize)",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r - a * a - b * b).sqrt() as isize;\n    if a + b > c && a + c > b && b + c > a {\n        Some((a * b * c) / 2)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r - a * a - b * b).sqrt() as isize;\n    if c > 0 {\n        Some(a * b * c)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let w = (r * 2).sqrt();\n    Some(h * w / 2)",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin();\n    let b = r.pow(2) * (PI / 2.0).cos();\n    let c = r.pow(2) * (PI / 2.0).tan();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let p = (a + b + c) / 2;\n    let area = (p * (p - a) * (p - b) * (p - c)) as f64;\n    if area < 0.0 {\n        None\n    } else {\n        Some((area.sqrt() * 100.0).round() as isize)\n    }",
    "    let a = r.pow(2) * (3.0_f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let mut max_area = 0;\n    for a in 1..r {\n        for b in 1..r {\n            let c = (a * a + b * b) as f64;\n            if c.sqrt() == (r as f64) {\n                let area = (a * b) / 2;\n                if area > max_area {\n                    max_area = area;\n                }\n            }\n        }\n    }\n    if max_area == 0 {\n        None\n    } else {\n        Some(max_area)\n    }",
    "    let a = r * r * 3 / 2;\n    if a < 0 {\n        None\n    } else {\n        Some(a)\n    }",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let mut max_area = 0;\n    for i in 1..r {\n        for j in 1..r {\n            let k = (i * i + j * j) as f64;\n            let k = k.sqrt() as isize;\n            if k * k == i * i + j * j && k <= r {\n                let area = i * j / 2;\n                if area > max_area {\n                    max_area = area;\n                }\n            }\n        }\n    }\n    if max_area == 0 {\n        None\n    } else {\n        Some(max_area)\n    }",
    "    let a = r * r * 3 / 2;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    if area > 0 {\n        Some(area)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin();\n    let b = r.pow(2) * (PI / 2.0).cos();\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r as f64;\n    let b = r as f64;\n    let c = (2.0 * r) as f64;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let p = (a + b + c) / 2;\n    let area = (p * (p - a) * (p - b) * (p - c)).sqrt();\n    Some(area as isize)",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    let a = a as isize;\n    Some(a)",
    "    unimplemented!()",
    "    let mut max_area = 0;\n    for a in 1..r {\n        for b in 1..r {\n            let c = (a * a + b * b) as f64;\n            if c.sqrt() == c.sqrt().round() && c.sqrt() <= r as f64 {\n                let area = (a * b) / 2;\n                if area > max_area {\n                    max_area = area;\n                }\n            }\n        }\n    }\n    if max_area == 0 {\n        None\n    } else {\n        Some(max_area)\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r - a * a).sqrt() as isize;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    if area > 0 {\n        Some(area)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let a = (r * r * 3).sqrt();\n    let h = (r * 2) - a;\n    let area = (a * h) / 2;\n    Some(area as isize)",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r + r * r).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let h = r * 2;\n    let a = (h * h) - (r * r);\n    if a < 0 {\n        None\n    } else {\n        Some(a)\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin() as isize;\n    let b = r.pow(2) * (PI / 2.0).cos() as isize;\n    let c = r.pow(2) - a.pow(2) - b.pow(2);\n    let c = c.pow(2);\n    let c = (c as f64).sqrt() as isize;\n    let p = (a + b + c) / 2;\n    let area = (p * (p - a) * (p - b) * (p - c)).pow(2);\n    if area > 0 {\n        Some(area)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r.pow(2) * (PI / 2.0).sin() / 2.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let mut max_area = 0;\n    for a in 1..r {\n        for b in 1..r {\n            let c = (a * a + b * b) as f64;\n            let c = c.sqrt() as isize;\n            if c > r {\n                continue;\n            }\n            let area = (a * b * c) / 2;\n            if area > max_area {\n                max_area = area;\n            }\n        }\n    }\n    if max_area == 0 {\n        None\n    } else {\n        Some(max_area)\n    }",
    "    let x = r / 2;\n    let y = r * r - x * x;\n    if y < 0 {\n        None\n    } else {\n        Some(x * y)\n    }",
    "    let mut area = 0;\n    for i in 1..r {\n        for j in 1..r {\n            let k = (i.pow(2) + j.pow(2)) as f64;\n            let k = k.sqrt() as isize;\n            if k > r {\n                continue;\n            }\n            let a = i * j / 2;\n            if a > area {\n                area = a;\n            }\n        }\n    }\n    if area == 0 {\n        None\n    } else {\n        Some(area)\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin() as isize;\n    let b = r.pow(2) * (PI / 2.0).cos() as isize;\n    let c = (a.pow(2) + b.pow(2)).sqrt() as isize;\n    let s = (a + b + c) / 2;\n    if s > a && s > b && s > c {\n        Some((s * (s - a) * (s - b) * (s - c)).sqrt() as isize)\n    } else {\n        None\n    }",
    "    let mut max_area = 0;\n    let mut max_side = 0;\n    for i in 1..r {\n        let area = (r - i) * i;\n        if area > max_area {\n            max_area = area;\n            max_side = i;\n        }\n    }\n    if max_side == 0 {\n        None\n    } else {\n        Some(max_area)\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin() / 2.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 4;\n    let b = (r * r * 3 / 4) as f64;\n    let c = b.sqrt();\n    let d = c as isize;\n    if d * d + d * d == a {\n        Some(d * d)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = r as f64;\n    let c = (2.0 * a) as f64;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let s = r * 2;\n    let a = (s * (s - r) * (s - r) * (s - r)) as f64;\n    let b = (4.0 * (a.sqrt() / 3.0)) as isize;\n    if b > 0 {\n        Some(b)\n    } else {\n        None\n    }",
    "    let a = r * r;\n    let b = (r / 2) * (r / 2);\n    let c = a - b;\n    let d = (4 * a * b - c * c).sqrt() as isize;\n    let e = a * d;\n    let f = 4 * b;\n    if e % f == 0 {\n        Some(e / f)\n    } else {\n        None\n    }",
    "    let a = r;\n    let b = r;\n    let c = (2 * r) as f64;\n    let s = (a + b + c) as f64 / 2.0;\n    let area = (s * (s - a as f64) * (s - b as f64) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let mut max_area = 0;\n    for x in 1..r {\n        for y in 1..r {\n            let z = (r.pow(2) - x.pow(2) - y.pow(2)).sqrt();\n            if z.is_integer() {\n                let area = (x * y * z) / 2;\n                if area > max_area {\n                    max_area = area;\n                }\n            }\n        }\n    }\n    if max_area > 0 {\n        Some(max_area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let mut max_area = 0;\n    for a in 1..r {\n        for b in 1..r {\n            let c = (a * a + b * b) as f64;\n            let c = c.sqrt() as isize;\n            if c > r {\n                continue;\n            }\n            let area = (a * b * c) / 2;\n            if area > max_area {\n                max_area = area;\n            }\n        }\n    }\n    if max_area == 0 {\n        None\n    } else {\n        Some(max_area)\n    }",
    "    let a = r as f64;\n    let b = r as f64;\n    let c = (2.0 * a) as f64;\n    let p = (a + b + c) / 2.0;\n    let s = (p * (p - a) * (p - b) * (p - c)).sqrt();\n    if s.is_nan() {\n        None\n    } else {\n        Some(s as isize)\n    }",
    "    let h = r * 2;\n    let w = h / 2;\n    let area = (h * w) / 2;\n    Some(area)",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin() / 2.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r;\n    let c = (a * a + b * b).sqrt() as isize;\n    let s = (a + b + c) / 2;\n    Some((s * (s - a) * (s - b) * (s - c)).sqrt() as isize)",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r - a * a).sqrt() as isize;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    Some(area)",
    "    let a = r * r * 3 / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r + r * r).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r * r * 3 / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin();\n    let b = r.pow(2) * (PI / 2.0).cos();\n    let c = r.pow(2) * (PI / 2.0).tan();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let mut max_area = 0;\n    for a in 1..r {\n        for b in 1..r {\n            let c = (a * a + b * b) as f64;\n            let c = c.sqrt() as isize;\n            if c * c == a * a + b * b && c <= r {\n                let area = a * b / 2;\n                if area > max_area {\n                    max_area = area;\n                }\n            }\n        }\n    }\n    if max_area == 0 {\n        None\n    } else {\n        Some(max_area)\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin();\n    let b = r.pow(2) * (PI / 2.0).cos();\n    let c = r.pow(2) * (PI / 2.0).tan();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * (3 as f64).sqrt() / 4.0;\n    if a < 0.0 {\n        None\n    } else {\n        Some(a as isize)\n    }",
    "    let a = (r as f64).sqrt() * 2.0;\n    let b = (a / 2.0).sqrt() * 2.0;\n    let c = (b / 2.0).sqrt() * 2.0;\n    let p = (a + b + c) / 2.0;\n    let s = (p * (p - a) * (p - b) * (p - c)).sqrt();\n    if s.is_finite() {\n        Some(s as isize)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let a = h * h;\n    let b = r * r;\n    let c = a - b;\n    let d = c / 2;\n    let e = d * d;\n    let f = b * e;\n    let g = f.sqrt();\n    let h = g / r;\n    let i = h * 2;\n    let j = i / 3;\n    let k = j * r;\n    let l = k * r;\n    let m = l / 2;\n    Some(m as isize)",
    "    let a = r * r * 3 / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let a = (r * r * 3).sqrt();\n    let s = a / 2;\n    let h = (r * r - s * s).sqrt();\n    Some(s * h / 2)",
    "    let mut max_area = 0;\n    for x in 1..r {\n        let y = (r.pow(2) - x.pow(2)).sqrt() as isize;\n        let area = (x * y) / 2;\n        if area > max_area {\n            max_area = area;\n        }\n    }\n    Some(max_area)",
    "    if r <= 0 {\n        return None;\n    }\n    let a = r * r * (PI / 2.0).sqrt();\n    Some(a as isize)",
    "    let mut max_area = 0;\n    for i in 1..r {\n        for j in 1..r {\n            let k = (r.pow(2) - i.pow(2) - j.pow(2)).sqrt();\n            if k.is_integer() {\n                let area = (i * j * k) / 2;\n                if area > max_area {\n                    max_area = area;\n                }\n            }\n        }\n    }\n    if max_area == 0 {\n        None\n    } else {\n        Some(max_area)\n    }",
    "    let a = r * r * 3 / 2;\n    if a < 0 {\n        None\n    } else {\n        Some(a)\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    let b = a.floor() as isize;\n    if a == b as f64 {\n        Some(b)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = (a * a - b * b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r * r * 3 / 4;\n    let b = (r * r * 3 / 4) as f64;\n    let c = b.sqrt() as isize;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)) as f64;\n    if area < 0.0 {\n        None\n    } else {\n        Some(area.sqrt() as isize)\n    }",
    "    let a = r * r;\n    let b = a / 2;\n    let c = (a - b).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin() / 2.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = r;\n    let p = (a + b + c) / 2;\n    let s = (p * (p - a) * (p - b) * (p - c)).sqrt();\n    if s.is_nan() {\n        None\n    } else {\n        Some(s as isize)\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let h = r * 2;\n    let w = (h * h - r * r).sqrt();\n    Some((h * w) as isize / 2)",
    "    let s = r * 2;\n    let a = s * s;\n    let b = (r * r) * 3;\n    let c = a - b;\n    let d = c / 4;\n    if d < 0 {\n        None\n    } else {\n        Some(d)\n    }",
    "    unimplemented!()",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a > 0.0 {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a < 0.0 {\n        None\n    } else {\n        Some(a as isize)\n    }",
    "    let a = r * r * 3 / 4;\n    let b = r * r * 3 / 4;\n    let c = r * r * 3 / 4;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r.pow(2) * (2.0f64).sqrt() / 4.0;\n    let b = r.pow(2) - a;\n    let c = (b.powi(2) + r.pow(2)).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r as f64;\n    let b = (a * a / 2.0).sqrt();\n    let c = a;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }"
  ]
}