{
  "name": "mbpp_8_square_nums",
  "language": "rs",
  "prompt": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8any89ll.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|n| n * n).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|&x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(2)).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(2)).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x*x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|n| n * n).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpupbs3k6d.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|&x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(2)).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(2)).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares: Vec<isize> = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares: Vec<isize> = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.into_iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squared_nums = Vec::new();\n    for num in nums {\n        squared_nums.push(num * num);\n    }\n    squared_nums\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        result.push(num * num);\n    }\n    result\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x.pow(2)).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8any89ll.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|n| n * n).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squared_nums = Vec::new();\n    for num in nums {\n        squared_nums.push(num * num);\n    }\n    squared_nums\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmpupbs3k6d.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.into_iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8any89ll.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8any89ll.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut squares = Vec::new();\n    for num in nums {\n        squares.push(num * num);\n    }\n    squares\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n    nums.iter().map(|x| x * x).collect()\n}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}