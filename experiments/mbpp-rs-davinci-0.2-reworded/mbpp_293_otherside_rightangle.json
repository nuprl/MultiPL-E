{
  "name": "mbpp_293_otherside_rightangle",
  "language": "rs",
  "prompt": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let a = w as f64;\n    let b = h as f64;\n    (a.powi(2) + b.powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let x = (w.pow(2) + h.pow(2)) as f64;\n    x.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    ((w * w + h * h) as f64).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    ((w.pow(2) + h.pow(2)) as f64).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let x = (w as f64).powi(2) + (h as f64).powi(2);\n    x.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let h_sq = h * h;\n    let w_sq = w * w;\n    let sum = h_sq + w_sq;\n    let result = sum as f64;\n    result.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let x = (w * w + h * h) as f64;\n    x.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()",
    "    let square = |x: isize| -> isize { x * x };\n    let sum = square(w) + square(h);\n    (sum as f64).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let x = w * w + h * h;\n    (x as f64).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    let s = w.powi(2) + h.powi(2);\n    s.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let a = w as f64;\n    let b = h as f64;\n    (a.powi(2) + b.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    ((w.powi(2) + h.powi(2)) as f64).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    ((w * w) + (h * h)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    (w.pow(2) + h.pow(2)) as f64",
    "    let w = w as f64;\n    let h = h as f64;\n    let x = (w * w + h * h).sqrt();\n    x",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()",
    "    (w.pow(2) + h.pow(2) as f64).sqrt()",
    "    ((w.pow(2) + h.pow(2)) as f64).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let mut res = w * w + h * h;\n    res = res as f64;\n    res.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let x = (w * w + h * h) as f64;\n    x.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let a = w as f64;\n    let b = h as f64;\n    let c = (a.powi(2) + b.powi(2)).sqrt();\n    c",
    "    (w.pow(2) + h.pow(2) as f64).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let mut a = w as f64;\n    let mut b = h as f64;\n    let mut c = (a * a + b * b).sqrt();\n    c",
    "    let x = (w * w + h * h) as f64;\n    x.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()",
    "    let a = w as f64;\n    let b = h as f64;\n    let c = (a.powi(2) + b.powi(2)).sqrt();\n    c",
    "    let x = (w * w + h * h) as f64;\n    x.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let a = w as f64;\n    let b = h as f64;\n    (a.powi(2) + b.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    (w.pow(2) + h.pow(2) as f64).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    (w.pow(2) + h.pow(2)) as f64",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    (w.pow(2) + h.pow(2)) as f64",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let a = (w * w + h * h) as f64;\n    a.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    (w.pow(2) + h.pow(2)) as f64",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let mut w = w as f64;\n    let mut h = h as f64;\n    let mut result = 0.0;\n    result = (w.powi(2) + h.powi(2)).sqrt();\n    result",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let sum = (w * w) + (h * h);\n    (sum as f64).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let a = w as f64;\n    let b = h as f64;\n    (a.powi(2) + b.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    let hypotenuse = (w.powi(2) + h.powi(2)).sqrt();\n    hypotenuse",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    (w.pow(2) + h.pow(2)) as f64",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let a = w as f64;\n    let b = h as f64;\n    let c = (a.powi(2) + b.powi(2)).sqrt();\n    c",
    "    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    ((w.pow(2) + h.pow(2)) as f64).sqrt()",
    "    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()",
    "    let mut w = w as f64;\n    let mut h = h as f64;\n    let mut result = 0.0;\n    if w > h {\n        result = (w * w) - (h * h);\n    } else {\n        result = (h * h) - (w * w);\n    }\n    result.sqrt()",
    "    (w.pow(2) + h.pow(2)) as f64"
  ]
}