{
  "name": "mbpp_293_otherside_rightangle",
  "language": "rs",
  "prompt": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let a = w as f64;\n    let b = h as f64;\n    (a.powi(2) + b.powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let x = (w.pow(2) + h.pow(2)) as f64;\n    x.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    ((w * w + h * h) as f64).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    ((w.pow(2) + h.pow(2)) as f64).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()"
  ]
}