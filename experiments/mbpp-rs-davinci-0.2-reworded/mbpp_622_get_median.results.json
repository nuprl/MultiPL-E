{
  "name": "mbpp_622_get_median",
  "language": "rs",
  "prompt": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    let mut median = 0.0;\n\n    while count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        median = (m1 + m2) as f64 / 2.0;\n    } else {\n        median = m2 as f64;\n    }\n\n    median\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.0`,\n right: `16.0`', /tmp/tmph6he02gp.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut arr1 = arr1;\n    let mut arr2 = arr2;\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp19j5nqh7.rs:15:24\n   |\n15 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n15 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp19j5nqh7.rs:17:18\n   |\n17 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp19j5nqh7.rs:19:19\n   |\n19 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp19j5nqh7.rs:21:18\n   |\n21 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpm35rzvo1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm35rzvo1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm35rzvo1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm35rzvo1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp3js8jplu.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut count: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.0`,\n right: `16.0`', /tmp/tmp08i963qq.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfyo_rhi1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        return (m1 + m2) as f64 / 2.0;\n    } else {\n        return m2 as f64;\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpekj8fo_8.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpekj8fo_8.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpekj8fo_8.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpekj8fo_8.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfyo_rhi1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpioim_eln.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut arr1 = arr1;\n    let mut arr2 = arr2;\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp19j5nqh7.rs:15:24\n   |\n15 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n15 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp19j5nqh7.rs:17:18\n   |\n17 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp19j5nqh7.rs:19:19\n   |\n19 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp19j5nqh7.rs:21:18\n   |\n21 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut arr1 = arr1;\n    let mut arr2 = arr2;\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpautjuqjn.rs:16:24\n   |\n16 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n16 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpautjuqjn.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpautjuqjn.rs:20:19\n   |\n20 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpautjuqjn.rs:22:18\n   |\n22 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpioim_eln.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpq_1by2av.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpq_1by2av.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpq_1by2av.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpq_1by2av.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpq_1by2av.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpq_1by2av.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpq_1by2av.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpq_1by2av.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpioim_eln.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        return (m1 + m2) as f64 / 2.0;\n    } else {\n        return m2 as f64;\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7m6fxojs.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7m6fxojs.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7m6fxojs.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7m6fxojs.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfyo_rhi1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfyo_rhi1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut count: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n    let mut median: f64 = 0.0;\n\n    while count <= n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        median = (m1 + m2) as f64 / 2.0;\n    } else {\n        median = m2 as f64;\n    }\n\n    median\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.0`,\n right: `16.0`', /tmp/tmpgxg3lqfm.rs:42:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpioim_eln.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpm35rzvo1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm35rzvo1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm35rzvo1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm35rzvo1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = 0;\n    let mut m2 = 0;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6xx5zpwu.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6xx5zpwu.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6xx5zpwu.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6xx5zpwu.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfbmhv70z.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfbmhv70z.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfbmhv70z.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfbmhv70z.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.0`,\n right: `16.0`', /tmp/tmpy22vyyam.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpm35rzvo1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm35rzvo1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm35rzvo1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm35rzvo1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n+1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpamw4dxdc.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpamw4dxdc.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpamw4dxdc.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpamw4dxdc.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfyo_rhi1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmppd28lvv_.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfyo_rhi1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut arr1 = arr1;\n    let mut arr2 = arr2;\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp19j5nqh7.rs:15:24\n   |\n15 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n15 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp19j5nqh7.rs:17:18\n   |\n17 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp19j5nqh7.rs:19:19\n   |\n19 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp19j5nqh7.rs:21:18\n   |\n21 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp3js8jplu.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfyo_rhi1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpp9wd257u.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp9wd257u.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp9wd257u.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp9wd257u.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    loop {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n        if count == n {\n            break;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp_59ctg47.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_59ctg47.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_59ctg47.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_59ctg47.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut arr1 = arr1;\n    let mut arr2 = arr2;\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpziy8k6mz.rs:22:12\n   |\n22 |         if arr1[i] < arr2[j] {\n   |            ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpziy8k6mz.rs:22:22\n   |\n22 |         if arr1[i] < arr2[j] {\n   |                      ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpziy8k6mz.rs:24:18\n   |\n24 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpziy8k6mz.rs:28:18\n   |\n28 |             m2 = arr2[j];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfyo_rhi1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut arr1 = arr1;\n    let mut arr2 = arr2;\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp3np99034.rs:16:24\n   |\n16 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n16 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3np99034.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3np99034.rs:20:19\n   |\n20 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3np99034.rs:22:18\n   |\n22 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    let mut count = 0;\n    while count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmp3c1fbkvo.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut count: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut count: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        return (m1 + m2) as f64 / 2.0;\n    }\n    return m2 as f64;\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.0`,\n right: `16.0`', /tmp/tmpxcx80g4x.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    for count in 0..(n + 1) {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpz87cyu54.rs:19:12\n   |\n19 |         if arr1[i] < arr2[j] {\n   |            ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpz87cyu54.rs:19:22\n   |\n19 |         if arr1[i] < arr2[j] {\n   |                      ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpz87cyu54.rs:21:18\n   |\n21 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpz87cyu54.rs:25:18\n   |\n25 |             m2 = arr2[j];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut arr1 = arr1;\n    let mut arr2 = arr2;\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfyo_rhi1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp3js8jplu.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    loop {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n        if count == n {\n            break;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp_59ctg47.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_59ctg47.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_59ctg47.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_59ctg47.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    return (m1 + m2) as f64 / 2.0;\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpwuicqsma.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwuicqsma.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwuicqsma.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwuicqsma.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n\n    while count < n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.0`,\n right: `16.0`', /tmp/tmpagkeuzkk.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp3js8jplu.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpioim_eln.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp82hw2q32.rs:12:24\n   |\n12 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp82hw2q32.rs:14:18\n   |\n14 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp82hw2q32.rs:16:19\n   |\n16 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp82hw2q32.rs:18:18\n   |\n18 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.0`,\n right: `16.0`', /tmp/tmpy22vyyam.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut count: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `17.0`,\n right: `16.0`', /tmp/tmp08i963qq.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmpbwf1wkkc.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n {\n        count += 1;\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.0`,\n right: `16.0`', /tmp/tmpbhy5crwa.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpioim_eln.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut count: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else if arr1[i as usize] < arr2[j as usize] {\n            m1 = m2;\n            m2 = arr1[i as usize];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j as usize];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp3js8jplu.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3js8jplu.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    let mut median = 0.0;\n\n    while count <= n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        median = (m1 + m2) as f64 / 2.0;\n    } else {\n        median = m2 as f64;\n    }\n\n    median\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpmvqc6gt2.rs:15:24\n   |\n15 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n15 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmvqc6gt2.rs:17:18\n   |\n17 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmvqc6gt2.rs:19:19\n   |\n19 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmvqc6gt2.rs:21:18\n   |\n21 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpm35rzvo1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm35rzvo1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm35rzvo1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm35rzvo1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmps918g8c7.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmps918g8c7.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmps918g8c7.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmps918g8c7.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    return (m1 + m2) as f64 / 2.0;\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpwuicqsma.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwuicqsma.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwuicqsma.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwuicqsma.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut arr1 = arr1;\n    let mut arr2 = arr2;\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp19j5nqh7.rs:15:24\n   |\n15 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n15 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp19j5nqh7.rs:17:18\n   |\n17 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp19j5nqh7.rs:19:19\n   |\n19 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp19j5nqh7.rs:21:18\n   |\n21 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpioim_eln.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpioim_eln.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfyo_rhi1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmpbwf1wkkc.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    for _ in 0..n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpyqfjnafz.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpyqfjnafz.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpyqfjnafz.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpyqfjnafz.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        return (m1 + m2) as f64 / 2.0;\n    } else {\n        return m2 as f64;\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpekj8fo_8.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpekj8fo_8.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpekj8fo_8.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpekj8fo_8.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmpbwf1wkkc.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfyo_rhi1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpeeew8758.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeeew8758.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeeew8758.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeeew8758.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpa72irn5c.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpa72irn5c.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpa72irn5c.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpa72irn5c.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n {\n        count += 1;\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.0`,\n right: `16.0`', /tmp/tmpbhy5crwa.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfyo_rhi1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfyo_rhi1.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfyo_rhi1.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpp2w4wkpl.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp2w4wkpl.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp2w4wkpl.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp2w4wkpl.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    let mut median = 0.0;\n    while count <= n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        median = (m1 + m2) as f64 / 2.0;\n    } else {\n        median = m2 as f64;\n    }\n    median\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmptrn4aptn.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptrn4aptn.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptrn4aptn.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptrn4aptn.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmpbwf1wkkc.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.0`,\n right: `16.0`', /tmp/tmpax4s4aih.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfbmhv70z.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfbmhv70z.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfbmhv70z.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfbmhv70z.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    let mut median = 0.0;\n\n    while count <= n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        median = (m1 + m2) as f64 / 2.0;\n    } else {\n        median = m2 as f64;\n    }\n\n    median\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpmvqc6gt2.rs:15:24\n   |\n15 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n15 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmvqc6gt2.rs:17:18\n   |\n17 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmvqc6gt2.rs:19:19\n   |\n19 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmvqc6gt2.rs:21:18\n   |\n21 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n {\n        if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `14.0`,\n right: `16.0`', /tmp/tmpwoay303g.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzdip9iqy.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdip9iqy.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n\n    while count < n {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpa72irn5c.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpa72irn5c.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpa72irn5c.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpa72irn5c.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count: isize = 0;\n    let mut m1: isize = -1;\n    let mut m2: isize = -1;\n\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpp9wd257u.rs:14:24\n   |\n14 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n14 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp9wd257u.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp9wd257u.rs:18:19\n   |\n18 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp9wd257u.rs:20:18\n   |\n20 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut count = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    while count < n + 1 {\n        if i == n {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m1 = m2;\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j += 1;\n        }\n        count += 1;\n    }\n    (m1 + m2) as f64 / 2.0\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1665510633,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7aqa9f04.rs:13:24\n   |\n13 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:15:18\n   |\n15 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:17:19\n   |\n17 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aqa9f04.rs:19:18\n   |\n19 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    let mut i = 0;\n    let mut j = 0;\n    let mut m1 = -1;\n    let mut m2 = -1;\n    for _ in 0..(n + 1) / 2 {\n        m1 = m2;\n        if i == n {\n            m2 = arr2[j];\n            j += 1;\n        } else if j == n {\n            m2 = arr1[i];\n            i += 1;\n        } else if arr1[i] < arr2[j] {\n            m2 = arr1[i];\n            i += 1;\n        } else {\n            m2 = arr2[j];\n            j += 1;\n        }\n    }\n    if n % 2 == 0 {\n        (m1 + m2) as f64 / 2.0\n    } else {\n        m2 as f64\n    }\n}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpvygbteq_.rs:12:24\n   |\n12 |         } else if j == n {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12 |         } else if j == n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvygbteq_.rs:13:18\n   |\n13 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvygbteq_.rs:15:19\n   |\n15 |         } else if arr1[i] < arr2[j] {\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvygbteq_.rs:16:18\n   |\n16 |             m2 = arr1[i];\n   |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}