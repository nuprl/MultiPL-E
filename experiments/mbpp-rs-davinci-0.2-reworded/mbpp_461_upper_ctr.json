{
  "name": "mbpp_461_upper_ctr",
  "language": "rs",
  "prompt": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr",
    "    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr"
  ]
}