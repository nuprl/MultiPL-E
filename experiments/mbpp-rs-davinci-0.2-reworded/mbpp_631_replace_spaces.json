{
  "name": "mbpp_631_replace_spaces",
  "language": "rs",
  "prompt": "/// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfn replace_spaces(text: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = replace_spaces;\n    assert_eq!(candidate(String::from(\"Jumanji The Jungle\")), String::from(\"Jumanji_The_Jungle\"));\n    assert_eq!(candidate(String::from(\"The_Avengers\")), String::from(\"The Avengers\"));\n    assert_eq!(candidate(String::from(\"Fast and Furious\")), String::from(\"Fast_and_Furious\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    text.replace(\" \", \"_\")",
    "    text.replace(\" \", \"_\")",
    "    text.replace(\" \", \"_\")",
    "    text.replace(\" \", \"_\").replace(\"_\", \" \")",
    "    text.replace(\" \", \"_\")",
    "    text.replace(\" \", \"_\").replace(\"_\", \" \")",
    "    let mut result = String::new();\n    for c in text.chars() {\n        if c == ' ' {\n            result.push('_');\n        } else if c == '_' {\n            result.push(' ');\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    text.replace(\" \", \"_\").replace(\"_\", \" \")",
    "    text.replace(\" \", \"_\")",
    "    text.replace(\" \", \"_\")",
    "    text.replace(\" \", \"_\")",
    "    text.replace(\" \", \"_\")",
    "    let mut result = String::new();\n    for c in text.chars() {\n        if c == ' ' {\n            result.push('_');\n        } else if c == '_' {\n            result.push(' ');\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    text.replace(\" \", \"_\")",
    "    text.replace(\" \", \"_\")",
    "    text.replace(\" \", \"_\")",
    "    text.replace(\" \", \"_\").replace(\"_\", \" \")",
    "    text.replace(\" \", \"_\")",
    "    text.replace(\" \", \"_\")",
    "    text.replace(\" \", \"_\").replace(\"_\", \" \")"
  ]
}