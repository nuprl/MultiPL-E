{
  "name": "mbpp_573_unique_product",
  "language": "rs",
  "prompt": "/// Write a rsthon function to calculate the product of the unique numbers in a given vector.\nfn unique_product(list_data: Vec<isize>) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = unique_product;\n    assert_eq!(candidate(vec![10, 20, 30, 40, 20, 50, 60, 40]), 720000000);\n    assert_eq!(candidate(vec![1, 2, 3, 1]), 6);\n    assert_eq!(candidate(vec![7, 8, 9, 0, 1, 1]), 0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut product = 1;\n    let mut unique_list = Vec::new();\n    for i in list_data {\n        if !unique_list.contains(&i) {\n            unique_list.push(i);\n            product *= i;\n        }\n    }\n    product",
    "    let mut product = 1;\n    let mut unique_numbers = HashSet::new();\n    for i in list_data {\n        if !unique_numbers.contains(&i) {\n            unique_numbers.insert(i);\n            product *= i;\n        }\n    }\n    product",
    "    let mut product = 1;\n    let mut unique_numbers = HashSet::new();\n    for number in list_data {\n        if !unique_numbers.contains(&number) {\n            unique_numbers.insert(number);\n            product *= number;\n        }\n    }\n    product",
    "    let mut unique_data = Vec::new();\n    for item in list_data {\n        if !unique_data.contains(&item) {\n            unique_data.push(item);\n        }\n    }\n    let mut product = 1;\n    for item in unique_data {\n        product *= item;\n    }\n    product",
    "    let mut product = 1;\n    let mut unique_list = Vec::new();\n    for i in list_data {\n        if !unique_list.contains(&i) {\n            unique_list.push(i);\n            product *= i;\n        }\n    }\n    product",
    "    let mut product = 1;\n    let mut unique_numbers = HashSet::new();\n    for i in list_data {\n        if !unique_numbers.contains(&i) {\n            unique_numbers.insert(i);\n            product *= i;\n        }\n    }\n    product",
    "    let mut product: isize = 1;\n    let mut unique_data: Vec<isize> = Vec::new();\n    for i in list_data {\n        if !unique_data.contains(&i) {\n            unique_data.push(i);\n            product *= i;\n        }\n    }\n    product",
    "    let mut product: isize = 1;\n    let mut unique_numbers: Vec<isize> = Vec::new();\n\n    for i in list_data {\n        if !unique_numbers.contains(&i) {\n            unique_numbers.push(i);\n            product *= i;\n        }\n    }\n\n    product",
    "    let mut product = 1;\n    let mut unique_numbers = HashSet::new();\n    for item in list_data {\n        if !unique_numbers.contains(&item) {\n            unique_numbers.insert(item);\n            product *= item;\n        }\n    }\n    product",
    "    let mut product = 1;\n    let mut unique_numbers: Vec<isize> = Vec::new();\n    for i in list_data {\n        if !unique_numbers.contains(&i) {\n            unique_numbers.push(i);\n            product *= i;\n        }\n    }\n    product",
    "    let mut product = 1;\n    let mut unique_data = Vec::new();\n    for data in list_data {\n        if !unique_data.contains(&data) {\n            unique_data.push(data);\n            product *= data;\n        }\n    }\n    product",
    "    let mut product = 1;\n    for i in list_data {\n        if product % i != 0 {\n            product *= i;\n        }\n    }\n    product",
    "    unimplemented!();",
    "    unimplemented!()",
    "    let mut product = 1;\n    for i in list_data {\n        if list_data.contains(&i) {\n            product *= i;\n        }\n    }\n    product",
    "    let mut unique_list = Vec::new();\n    for i in list_data {\n        if !unique_list.contains(&i) {\n            unique_list.push(i);\n        }\n    }\n    let mut product = 1;\n    for i in unique_list {\n        product *= i;\n    }\n    product",
    "    unimplemented!();",
    "    let mut product = 1;\n    let mut unique_data = Vec::new();\n    for data in list_data {\n        if !unique_data.contains(&data) {\n            unique_data.push(data);\n            product *= data;\n        }\n    }\n    product",
    "    let mut product = 1;\n    let mut unique_numbers = HashSet::new();\n    for i in list_data {\n        if !unique_numbers.contains(&i) {\n            unique_numbers.insert(i);\n            product *= i;\n        }\n    }\n    product",
    "    let mut product = 1;\n    let mut unique_numbers = HashSet::new();\n    for i in list_data {\n        if !unique_numbers.contains(&i) {\n            unique_numbers.insert(i);\n            product *= i;\n        }\n    }\n    product"
  ]
}