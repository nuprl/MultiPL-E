{
  "name": "mbpp_293_otherside_rightangle",
  "language": "rs",
  "prompt": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let a = w as f64;\n    let b = h as f64;\n    (a.powi(2) + b.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = (w.pow(2) + h.pow(2)) as f64;\n    x.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w * w + h * h) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w.pow(2) + h.pow(2)) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = (w as f64).powi(2) + (h as f64).powi(2);\n    x.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let h_sq = h * h;\n    let w_sq = w * w;\n    let sum = h_sq + w_sq;\n    let result = sum as f64;\n    result.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = (w * w + h * h) as f64;\n    x.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let square = |x: isize| -> isize { x * x };\n    let sum = square(w) + square(h);\n    (sum as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = w * w + h * h;\n    (x as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    let s = w.powi(2) + h.powi(2);\n    s.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let a = w as f64;\n    let b = h as f64;\n    (a.powi(2) + b.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    ((w.powi(2) + h.powi(2)) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    ((w * w) + (h * h)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2)) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmpe17665yi.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    let x = (w * w + h * h).sqrt();\n    x\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "error[E0277]: cannot add `f64` to `isize`\n --> /tmp/tmp2c87w20r.rs:3:15\n  |\n3 |     (w.pow(2) + h.pow(2) as f64).sqrt()\n  |               ^ no implementation for `isize + f64`\n  |\n  = help: the trait `Add<f64>` is not implemented for `isize`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w.pow(2) + h.pow(2)) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let mut res = w * w + h * h;\n    res = res as f64;\n    res.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpofloph72.rs:4:11\n  |\n3 |     let mut res = w * w + h * h;\n  |                   ------------- expected due to this value\n4 |     res = res as f64;\n  |           ^^^^^^^^^^ expected `isize`, found `f64`\n\nerror[E0599]: no method named `sqrt` found for type `isize` in the current scope\n --> /tmp/tmpofloph72.rs:5:9\n  |\n5 |     res.sqrt()\n  |         ^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = (w * w + h * h) as f64;\n    x.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let a = w as f64;\n    let b = h as f64;\n    let c = (a.powi(2) + b.powi(2)).sqrt();\n    c\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "error[E0277]: cannot add `f64` to `isize`\n --> /tmp/tmp2c87w20r.rs:3:15\n  |\n3 |     (w.pow(2) + h.pow(2) as f64).sqrt()\n  |               ^ no implementation for `isize + f64`\n  |\n  = help: the trait `Add<f64>` is not implemented for `isize`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let mut a = w as f64;\n    let mut b = h as f64;\n    let mut c = (a * a + b * b).sqrt();\n    c\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = (w * w + h * h) as f64;\n    x.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let a = w as f64;\n    let b = h as f64;\n    let c = (a.powi(2) + b.powi(2)).sqrt();\n    c\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let x = (w * w + h * h) as f64;\n    x.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let a = w as f64;\n    let b = h as f64;\n    (a.powi(2) + b.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "error[E0277]: cannot add `f64` to `isize`\n --> /tmp/tmp2c87w20r.rs:3:15\n  |\n3 |     (w.pow(2) + h.pow(2) as f64).sqrt()\n  |               ^ no implementation for `isize + f64`\n  |\n  = help: the trait `Add<f64>` is not implemented for `isize`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2)) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmpe17665yi.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2)) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmpe17665yi.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let a = (w * w + h * h) as f64;\n    a.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2)) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmpe17665yi.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let mut w = w as f64;\n    let mut h = h as f64;\n    let mut result = 0.0;\n    result = (w.powi(2) + h.powi(2)).sqrt();\n    result\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let sum = (w * w) + (h * h);\n    (sum as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let a = w as f64;\n    let b = h as f64;\n    (a.powi(2) + b.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    let hypotenuse = (w.powi(2) + h.powi(2)).sqrt();\n    hypotenuse\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2)) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmpe17665yi.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let a = w as f64;\n    let b = h as f64;\n    let c = (a.powi(2) + b.powi(2)).sqrt();\n    c\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    ((w.pow(2) + h.pow(2)) as f64).sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    let mut w = w as f64;\n    let mut h = h as f64;\n    let mut result = 0.0;\n    if w > h {\n        result = (w * w) - (h * h);\n    } else {\n        result = (h * h) - (w * w);\n    }\n    result.sqrt()\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.872983346207417`,\n right: `10.63014581273465`', /tmp/tmpej86srgt.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n    (w.pow(2) + h.pow(2)) as f64\n}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `113.0`,\n right: `10.63014581273465`', /tmp/tmpe17665yi.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}