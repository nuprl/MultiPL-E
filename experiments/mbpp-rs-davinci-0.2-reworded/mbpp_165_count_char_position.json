{
  "name": "mbpp_165_count_char_position",
  "language": "rs",
  "prompt": "/// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfn count_char_position(str1: String) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = count_char_position;\n    assert_eq!(candidate(String::from(\"xbcefg\")), 2);\n    assert_eq!(candidate(String::from(\"ABcED\")), 3);\n    assert_eq!(candidate(String::from(\"AbgdeF\")), 5);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut count = 0;\n    let mut str_vec: Vec<char> = str1.chars().collect();\n    str_vec.sort();\n    for i in 0..str_vec.len() {\n        if str_vec[i] == (i as u8 + 97) as char {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str2 = str1.to_lowercase();\n    let mut str3 = str2.chars().collect::<Vec<char>>();\n    str3.sort();\n    for i in 0..str3.len() {\n        if str3[i] as u8 - 97 == i as u8 {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str2 = str1.to_lowercase();\n    let mut str2 = str2.chars().collect::<Vec<char>>();\n    str2.sort();\n    for i in 0..str2.len() {\n        if str2[i] as u8 - 97 == i as u8 {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    for c in str1.chars() {\n        if c.to_lowercase().next().unwrap() as u8 == 97 + i {\n            count += 1;\n        }\n        i += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut str_chars: Vec<char> = str1.chars().collect();\n    str_chars.sort();\n    let mut alphabet_chars: Vec<char> = \"abcdefghijklmnopqrstuvwxyz\".chars().collect();\n    alphabet_chars.sort();\n    for (i, c) in str_chars.iter().enumerate() {\n        if c == &alphabet_chars[i] {\n            count += 1;\n        }\n    }\n    return count;",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str1 = str1.chars().collect::<Vec<char>>();\n    str1.sort();\n    for i in 0..str1.len() {\n        if str1[i] == (i as u8 + 97) as char {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut str_vec: Vec<char> = str1.chars().collect();\n    let mut str_vec_lower: Vec<char> = str1.to_lowercase().chars().collect();\n    str_vec_lower.sort();\n    for i in 0..str_vec.len() {\n        if str_vec[i] == str_vec_lower[i] {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str1 = str1.chars().collect::<Vec<char>>();\n    str1.sort();\n    let mut alphabet = \"abcdefghijklmnopqrstuvwxyz\".chars().collect::<Vec<char>>();\n    alphabet.sort();\n    for i in 0..str1.len() {\n        if str1[i] == alphabet[i] {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str1 = str1.chars().collect::<Vec<char>>();\n    str1.sort();\n    let mut alphabet = \"abcdefghijklmnopqrstuvwxyz\".chars().collect::<Vec<char>>();\n    alphabet.sort();\n    for i in 0..str1.len() {\n        if str1[i] == alphabet[i] {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    for c in str1.chars() {\n        if c as u8 - 97 == str1.find(c).unwrap() as u8 {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str_vec: Vec<char> = str1.chars().collect();\n    str_vec.sort();\n    let mut char_vec: Vec<char> = \"abcdefghijklmnopqrstuvwxyz\".chars().collect();\n    char_vec.sort();\n    for i in 0..str_vec.len() {\n        if str_vec[i] == char_vec[i] {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    for (i, c) in str1.chars().enumerate() {\n        if c as usize - 'a' as usize == i {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str2 = str1.to_lowercase();\n    let mut str3 = str2.chars().collect::<Vec<char>>();\n    str3.sort();\n    for i in 0..str3.len() {\n        if str3[i] as u8 - 97 == i as u8 {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str1 = str1.chars().collect::<Vec<char>>();\n    str1.sort();\n    for (i, c) in str1.iter().enumerate() {\n        if *c == (i as u8 + 97) as char {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    for c in str1.chars() {\n        if c.is_alphabetic() {\n            if c.to_lowercase().to_string() == (i + 97).to_string() {\n                count += 1;\n            }\n            i += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str2 = str1.to_lowercase();\n    let mut str3 = str2.clone();\n    str3.retain(|c| c.is_alphabetic());\n    for (i, c) in str3.chars().enumerate() {\n        if c == (i as u8 + 97) as char {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    for (i, c) in str1.chars().enumerate() {\n        if c.to_lowercase().next().unwrap() as u8 == 97 + i as u8 {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str1 = str1.chars().collect::<Vec<char>>();\n    str1.sort();\n    for i in 0..str1.len() {\n        if str1[i] as u8 - 97 == i as u8 {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str1: Vec<char> = str1.chars().collect();\n    let mut alphabet: Vec<char> = \"abcdefghijklmnopqrstuvwxyz\".chars().collect();\n    for i in 0..str1.len() {\n        if str1[i] == alphabet[i] {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut i = 0;\n    for c in str1.chars() {\n        if c.to_lowercase().next().unwrap() == (i + 97) as u8 as char {\n            count += 1;\n        }\n        i += 1;\n    }\n    count"
  ]
}