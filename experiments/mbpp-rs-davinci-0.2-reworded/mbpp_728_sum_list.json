{
  "name": "mbpp_728_sum_list",
  "language": "rs",
  "prompt": "/// Write a function takes as input two vectors [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfn sum_list(lst1: Vec<isize>, lst2: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = sum_list;\n    assert_eq!(candidate(vec![10, 20, 30], vec![15, 25, 35]), vec![25, 45, 65]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![5, 6, 7]), vec![6, 8, 10]);\n    assert_eq!(candidate(vec![15, 20, 30], vec![15, 45, 75]), vec![30, 65, 105]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut sum = Vec::new();\n    for i in 0..lst1.len() {\n        sum.push(lst1[i] + lst2[i]);\n    }\n    sum",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut sum_lst = Vec::new();\n    for i in 0..lst1.len() {\n        sum_lst.push(lst1[i] + lst2[i]);\n    }\n    sum_lst",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut ret = Vec::new();\n    for i in 0..lst1.len() {\n        ret.push(lst1[i] + lst2[i]);\n    }\n    ret",
    "    let mut sum_list = Vec::new();\n    for (x, y) in lst1.iter().zip(lst2.iter()) {\n        sum_list.push(x + y);\n    }\n    sum_list",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut sum_lst = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        sum_lst.push(a + b);\n    }\n    sum_lst",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut sum_list: Vec<isize> = Vec::new();\n    for i in 0..lst1.len() {\n        sum_list.push(lst1[i] + lst2[i]);\n    }\n    sum_list",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut sum = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        sum.push(a + b);\n    }\n    sum",
    "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut sum_list = Vec::new();\n    for i in 0..lst1.len() {\n        sum_list.push(lst1[i] + lst2[i]);\n    }\n    sum_list",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut result = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        result.push(a + b);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut result = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        result.push(a + b);\n    }\n    result",
    "    let mut lst3 = Vec::new();\n    for i in 0..lst1.len() {\n        lst3.push(lst1[i] + lst2[i]);\n    }\n    lst3",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut res = Vec::new();\n    for i in 0..lst1.len() {\n        res.push(lst1[i] + lst2[i]);\n    }\n    res",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut sum_list = Vec::new();\n    for i in 0..lst1.len() {\n        sum_list.push(lst1[i] + lst2[i]);\n    }\n    sum_list",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut result = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        result.push(a + b);\n    }\n    result",
    "    let mut sum = Vec::new();\n    for i in 0..lst1.len() {\n        sum.push(lst1[i] + lst2[i]);\n    }\n    sum",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut sum = Vec::new();\n    for i in 0..lst1.len() {\n        sum.push(lst1[i] + lst2[i]);\n    }\n    sum",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut sum = Vec::new();\n    for i in 0..lst1.len() {\n        sum.push(lst1[i] + lst2[i]);\n    }\n    sum",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut sum = Vec::new();\n    for i in 0..lst1.len() {\n        sum.push(lst1[i] + lst2[i]);\n    }\n    sum",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut result = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        result.push(a + b);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut sum = Vec::new();\n    for i in 0..lst1.len() {\n        sum.push(lst1[i] + lst2[i]);\n    }\n    sum",
    "    let mut sum_list = Vec::new();\n    for (x, y) in lst1.iter().zip(lst2.iter()) {\n        sum_list.push(x + y);\n    }\n    sum_list",
    "    let mut sum_lst = Vec::new();\n    for i in 0..lst1.len() {\n        sum_lst.push(lst1[i] + lst2[i]);\n    }\n    sum_lst",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut result = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        result.push(a + b);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut res = Vec::new();\n    for i in 0..lst1.len() {\n        res.push(lst1[i] + lst2[i]);\n    }\n    res",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut sum = Vec::new();\n    for i in 0..lst1.len() {\n        sum.push(lst1[i] + lst2[i]);\n    }\n    sum",
    "    let mut res = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        res.push(*a + *b);\n    }\n    res",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut sum_list = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        sum_list.push(*a + *b);\n    }\n    sum_list",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.into_iter().zip(lst2.into_iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(x,y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut sum_lst = Vec::new();\n    for i in 0..lst1.len() {\n        sum_lst.push(lst1[i] + lst2[i]);\n    }\n    sum_lst",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut sum = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        sum.push(a + b);\n    }\n    sum",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut sum_lst = Vec::new();\n    for i in 0..lst1.len() {\n        sum_lst.push(lst1[i] + lst2[i]);\n    }\n    sum_lst",
    "    let mut sum_list: Vec<isize> = Vec::new();\n    for i in 0..lst1.len() {\n        sum_list.push(lst1[i] + lst2[i]);\n    }\n    sum_list",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut lst = Vec::new();\n    for i in 0..lst1.len() {\n        lst.push(lst1[i] + lst2[i]);\n    }\n    lst",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut sum_list = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        sum_list.push(a + b);\n    }\n    sum_list",
    "    let mut sum = Vec::new();\n    for i in 0..lst1.len() {\n        sum.push(lst1[i] + lst2[i]);\n    }\n    sum",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut result = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        result.push(a + b);\n    }\n    result",
    "    let mut sum_list = Vec::new();\n    for i in 0..lst1.len() {\n        sum_list.push(lst1[i] + lst2[i]);\n    }\n    sum_list",
    "    let mut sum_list = Vec::new();\n    for i in 0..lst1.len() {\n        sum_list.push(lst1[i] + lst2[i]);\n    }\n    sum_list",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut sum = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        sum.push(a + b);\n    }\n    sum",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut sum_list: Vec<isize> = Vec::new();\n    for i in 0..lst1.len() {\n        sum_list.push(lst1[i] + lst2[i]);\n    }\n    sum_list",
    "    let mut sum = Vec::new();\n    for i in 0..lst1.len() {\n        sum.push(lst1[i] + lst2[i]);\n    }\n    sum",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut result = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        result.push(a + b);\n    }\n    result",
    "    let mut sum_list = Vec::new();\n    for (i, j) in lst1.iter().zip(lst2.iter()) {\n        sum_list.push(i + j);\n    }\n    sum_list",
    "    let mut sum_lst: Vec<isize> = Vec::new();\n    for i in 0..lst1.len() {\n        sum_lst.push(lst1[i] + lst2[i]);\n    }\n    sum_lst",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut result = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        result.push(a + b);\n    }\n    result",
    "    let mut sum_list: Vec<isize> = Vec::new();\n    for i in 0..lst1.len() {\n        sum_list.push(lst1[i] + lst2[i]);\n    }\n    sum_list",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut sum_lst = Vec::new();\n    for i in 0..lst1.len() {\n        sum_lst.push(lst1[i] + lst2[i]);\n    }\n    sum_lst",
    "    let mut sum_lst = Vec::new();\n    for i in 0..lst1.len() {\n        sum_lst.push(lst1[i] + lst2[i]);\n    }\n    sum_lst",
    "    let mut sum_lst = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        sum_lst.push(a + b);\n    }\n    sum_lst",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut result = vec![];\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut sum_list: Vec<isize> = Vec::new();\n    for i in 0..lst1.len() {\n        sum_list.push(lst1[i] + lst2[i]);\n    }\n    sum_list",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut res = Vec::new();\n    for i in 0..lst1.len() {\n        res.push(lst1[i] + lst2[i]);\n    }\n    res",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut sum_lst = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        sum_lst.push(a + b);\n    }\n    sum_lst",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut result = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        result.push(a + b);\n    }\n    result",
    "    let mut sum_lst = Vec::new();\n    for i in 0..lst1.len() {\n        sum_lst.push(lst1[i] + lst2[i]);\n    }\n    sum_lst",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut sum = Vec::new();\n    for i in 0..lst1.len() {\n        sum.push(lst1[i] + lst2[i]);\n    }\n    sum",
    "    let mut sum_lst = Vec::new();\n    for i in 0..lst1.len() {\n        sum_lst.push(lst1[i] + lst2[i]);\n    }\n    sum_lst",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut sum = vec![];\n    for i in 0..lst1.len() {\n        sum.push(lst1[i] + lst2[i]);\n    }\n    sum",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut res = Vec::new();\n    for i in 0..lst1.len() {\n        res.push(lst1[i] + lst2[i]);\n    }\n    res",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut result = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        result.push(a + b);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..lst1.len() {\n        result.push(lst1[i] + lst2[i]);\n    }\n    result",
    "    let mut res = Vec::new();\n    for i in 0..lst1.len() {\n        res.push(lst1[i] + lst2[i]);\n    }\n    res",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    let mut sum = Vec::new();\n    for i in 0..lst1.len() {\n        sum.push(lst1[i] + lst2[i]);\n    }\n    sum",
    "    let mut res = Vec::new();\n    for i in 0..lst1.len() {\n        res.push(lst1[i] + lst2[i]);\n    }\n    res",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut res = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        res.push(a + b);\n    }\n    res",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(x, y)| x + y).collect()",
    "    let mut sum = Vec::new();\n    for (a, b) in lst1.iter().zip(lst2.iter()) {\n        sum.push(a + b);\n    }\n    sum",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()",
    "    lst1.iter().zip(lst2.iter()).map(|(a, b)| a + b).collect()"
  ]
}