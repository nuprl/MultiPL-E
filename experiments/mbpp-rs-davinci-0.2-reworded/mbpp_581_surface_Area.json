{
  "name": "mbpp_581_surface_Area",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the surface area of a square rsramid with a given base edge and height.\nfn surface_Area(b: isize, s: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = surface_Area;\n    assert_eq!(candidate(3, 4), 33);\n    assert_eq!(candidate(4, 5), 56);\n    assert_eq!(candidate(1, 2), 5);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let l = (b as f64).sqrt() as isize;\n    let a = l * l;\n    let p = 4 * a;\n    let b = p + a;\n    let c = b * s;\n    c",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    let l = b as f64;\n    let h = s as f64;\n    let a = l.powi(2) + 2.0 * l * (h.sqrt());\n    a as isize",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s;\n    return area;",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    let l = (b as f64).sqrt() as isize;\n    let area = l * l + 4 * l * s;\n    return area;",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let area = (b * b) + (2 * b * s.pow(2));\n    area",
    "    let l = (b as f64).sqrt() as isize;\n    let a = l * l;\n    let p = 4 * a;\n    let t = p + a;\n    let h = s * s;\n    let h = h + (s * a);\n    let h = h + (s * p);\n    return h;",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s.sqrt();\n    area as isize",
    "    b * b + 2 * b * s",
    "    let l = (b as f64).sqrt() as isize;\n    let area = l * l + 2 * l * s;\n    area",
    "    let mut area: isize = 0;\n    area = b * b + 2 * b * s;\n    return area;",
    "    b * b + 2 * b * s",
    "    let mut area = 0;\n    area = b * b + 2 * b * s;\n    return area;",
    "    (b * b) + (2 * b * s.sqrt())"
  ]
}