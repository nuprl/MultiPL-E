{
  "name": "mbpp_581_surface_Area",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the surface area of a square rsramid with a given base edge and height.\nfn surface_Area(b: isize, s: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = surface_Area;\n    assert_eq!(candidate(3, 4), 33);\n    assert_eq!(candidate(4, 5), 56);\n    assert_eq!(candidate(1, 2), 5);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let l = (b as f64).sqrt() as isize;\n    let a = l * l;\n    let p = 4 * a;\n    let b = p + a;\n    let c = b * s;\n    c",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    let l = b as f64;\n    let h = s as f64;\n    let a = l.powi(2) + 2.0 * l * (h.sqrt());\n    a as isize",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s;\n    return area;",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    let l = (b as f64).sqrt() as isize;\n    let area = l * l + 4 * l * s;\n    return area;",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let area = (b * b) + (2 * b * s.pow(2));\n    area",
    "    let l = (b as f64).sqrt() as isize;\n    let a = l * l;\n    let p = 4 * a;\n    let t = p + a;\n    let h = s * s;\n    let h = h + (s * a);\n    let h = h + (s * p);\n    return h;",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s.sqrt();\n    area as isize",
    "    b * b + 2 * b * s",
    "    let l = (b as f64).sqrt() as isize;\n    let area = l * l + 2 * l * s;\n    area",
    "    let mut area: isize = 0;\n    area = b * b + 2 * b * s;\n    return area;",
    "    b * b + 2 * b * s",
    "    let mut area = 0;\n    area = b * b + 2 * b * s;\n    return area;",
    "    (b * b) + (2 * b * s.sqrt())",
    "    b * b + 2 * b * s",
    "    (b * b) + (2 * b * s.sqrt())",
    "    b * b + 2 * b * s",
    "    let l = (b as f64).sqrt() as isize;\n    let area = (l * l + (l * l - s * s) * 2) as isize;\n    area",
    "    let mut area = 0;\n    area = b * b + 2 * b * s;\n    area",
    "    b * b + 2 * b * s",
    "    let l = (b as f64).sqrt() as isize;\n    let a = l * l;\n    let p = 4 * a + b * s;\n    return p;",
    "    let area = b * b + 2 * b * s;\n    return area;",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    return b * s + b * b;",
    "    let l = (b as f64).sqrt() as isize;\n    let area = l * l + 2 * l * s;\n    return area;",
    "    let a = b * b;\n    let p = 4 * a;\n    let h = s * b;\n    let q = 2 * h;\n    let r = p + q;\n    return r;",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s;\n    return area;",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s.pow(2).sqrt() as isize;\n    area",
    "    b * b + 2 * b * s",
    "    let l = (b as f64).sqrt() as isize;\n    let area = (l * l) + (4 * (l * s));\n    return area;",
    "    let area = b * b + 2 * b * s.sqrt();\n    area as isize",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s;\n    return area;",
    "    return b * b + 2 * b * s;",
    "    b * b + 2 * b * s",
    "    let mut area = 0;\n    area = b * b + 2 * b * s;\n    return area;",
    "    let area = (b * b) + (2 * b * s.sqrt());\n    return area as isize;",
    "    let area = (b * b) + (2 * b * s.pow(2).sqrt());\n    area as isize",
    "    b * b + 2 * b * s",
    "    return b * s + b * b;",
    "    (b * b) + (2 * b * s)",
    "    let area = b * b + 2 * b * s;\n    return area;",
    "    let area = b * s;\n    let peri = 2 * (b + s);\n    let sa = area + peri;\n    sa",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    let l = (b as f64).sqrt() as isize;\n    let area = l * l + 2 * l * s;\n    area",
    "    let area = b * b + 2 * b * s;\n    return area;",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    (b * b) + (2 * b * s)",
    "    (b * b) + (2 * b * s)",
    "    let area = b * b + 2 * b * s;\n    area",
    "    let area = (b * b) + (2 * b * s.sqrt());\n    return area as isize;",
    "    return b * b + 2 * b * s;",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    (b * b) + (b * s)",
    "    let area = (b * b) + (2 * b * s.pow(2));\n    area",
    "    let l = (b as f64).sqrt() as isize;\n    let area = l * l + 2 * l * s;\n    area",
    "    return b * b + 2 * b * s;",
    "    let a = b * b;\n    let p = 4 * a;\n    let h = s * s;\n    let h = h + a;\n    let h = h.sqrt();\n    let h = h * b;\n    let h = h * 4;\n    let h = h / 2;\n    let h = h + p;\n    return h as isize;",
    "    let area = b * b + 2 * b * s.sqrt();\n    area as isize",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s;\n    return area;",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s.sqrt();\n    area as isize",
    "    let l = (b as f64).sqrt() as isize;\n    let area = l * l + 2 * l * s;\n    area",
    "    b * b + 2 * b * s",
    "    let mut result = 0;\n    result = b * b + 2 * b * s;\n    return result;",
    "    let area = b * b + 2 * b * s;\n    area",
    "    (b * b) + (2 * b * s)",
    "    b * s + b * b",
    "    let area = b * b + 2 * b * s;\n    area",
    "    let area = b * s;\n    let perimeter = b * 4;\n    let l = (perimeter.pow(2) + (4 * area)).sqrt();\n    let base = b.pow(2);\n    let surface_area = (l * base) + (2 * area);\n    surface_area as isize",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let mut result: isize = 0;\n    result = b * b + 2 * b * s;\n    return result;",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let area: isize = b * b + 2 * b * s;\n    return area;",
    "    let area = b * b + 2 * b * s.sqrt();\n    area as isize",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    b * b + 2 * b * s",
    "    let l = (b as f64).sqrt() as isize;\n    let area = l * l * s;\n    area",
    "    let area = b * s;\n    let perimeter = 4 * b;\n    let l = (area / perimeter) as f64;\n    let h = ((l * l + s * s) as f64).sqrt();\n    let area_of_square = b * b;\n    let area_of_triangle = (b * h) as isize / 2;\n    area_of_square + area_of_triangle",
    "    let l = (b as f64).sqrt() as isize;\n    let area = l * l + 2 * l * s;\n    return area;",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let area = b * s;\n    let per = 2 * (b + s);\n    let res = area + per;\n    res",
    "    b * b + 2 * b * s.pow(2).sqrt() as isize",
    "    let area = b * b + 2 * b * s;\n    return area;",
    "    b * b + 2 * b * s",
    "    return b * b + 2 * b * s;",
    "    return b * b + 2 * b * s;",
    "    (b * b) + (2 * b * s)",
    "    b * b + 2 * b * s",
    "    let a = b * b;\n    let p = (b * 4) as f64;\n    let h = s as f64;\n    let l = (h * h + (b / 2) as f64 * (b / 2) as f64).sqrt();\n    let s = (p * l) as isize + a;\n    s",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    return area as isize;",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    (b * b) + (2 * b * s)",
    "    return b * b + 2 * b * s;",
    "    let l = (b as f64).sqrt() as isize;\n    let area = l * l + 2 * l * s;\n    area",
    "    b * b + 2 * b * s",
    "    b * s + b * b",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let mut area = 0;\n    area = b * b + 4 * (b * s);\n    area",
    "    b * b + 2 * b * s",
    "    (b * b) + (2 * b * s)",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let mut area: isize = 0;\n    area = b * b + 2 * b * s;\n    return area;",
    "    (b * b) + (2 * b * s.sqrt())",
    "    let area = (b * b) + (2 * b * s.pow(2));\n    return area;",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let l = (b as f64).sqrt() as isize;\n    let area = 2 * l * s + 2 * l * l;\n    return area;",
    "    let a = b * b;\n    let p = 4 * a;\n    let h = s * s;\n    let l = (b * h) / 2;\n    let r = p + l;\n    return r;",
    "    b * b + 2 * b * s",
    "    (b * b) + (2 * b * s)",
    "    let mut area = 0;\n    area = b * b + 2 * b * s;\n    area",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    let area = b * b + 2 * b * s;\n    area",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s;\n    return area;",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    let a = b * b;\n    let p = 4 * a;\n    let h = s * s;\n    let h1 = h + a;\n    let h2 = h1 * 2;\n    let h3 = h2 + p;\n    return h3;",
    "    b * b + 2 * b * s",
    "    b * b + 2 * b * s",
    "    let mut area = 0;\n    area = b * b + 2 * b * s.sqrt();\n    area",
    "    (b * b) + (2 * b * s)",
    "    b * s + (b * b)",
    "    let mut area = 0;\n    area = b * b + 2 * b * s;\n    return area;",
    "    (b * b) + (2 * b * s.pow(2))",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    let area = (b * b) + (2 * b * s.sqrt());\n    area as isize",
    "    return b * b + 2 * b * s;",
    "    return b * b + 2 * b * s;",
    "    let l = (b as f64).sqrt() as isize;\n    let area = l * l + 2 * l * s;\n    area",
    "    (b * b) + (2 * b * s)",
    "    b * b + 2 * b * s",
    "    let mut area = 0;\n    area = b * b + 2 * b * s;\n    return area;",
    "    b * b + 2 * b * s",
    "    (b * b) + (2 * b * s)",
    "    let l = (b * b + s * s).sqrt();\n    let area = b * b + 2 * b * l;\n    area as isize",
    "    let area = b * b + 2 * b * s.sqrt();\n    area as isize",
    "    (b * b) + (2 * b * s)",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    let area = b * b + 2 * b * s;\n    return area;",
    "    b * b + 2 * b * s",
    "    let mut area = 0;\n    area = b * b + 2 * b * s;\n    area",
    "    b * b + 2 * b * s",
    "    return b * b + 2 * b * s;",
    "    let area = b * b + 2 * b * s;\n    area",
    "    (b * b) + (2 * b * s)",
    "    let area = b * b + 2 * b * s;\n    return area;",
    "    let area = (b * b) + (4 * b * s);\n    return area;",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s;\n    area",
    "    (b * b) + (2 * b * s)",
    "    let area = b * b + 2 * b * s;\n    return area;",
    "    let area = b * b + 2 * b * s.sqrt();\n    area as isize",
    "    let area = (b * b) + (2 * b * s.sqrt());\n    area as isize",
    "    b * b + 2 * b * s",
    "    let area = b * b + 2 * b * s;\n    return area;",
    "    return b * b + 4 * b * s;",
    "    return b * b + 2 * b * s;",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    return area;",
    "    let mut area = 0;\n    area = b * b + 2 * b * s;\n    return area;",
    "    (b * b) + (2 * b * s)",
    "    let area = b * b + 2 * b * s.pow(2).sqrt();\n    area as isize",
    "    let mut area = 0;\n    area = b * b + 2 * b * s;\n    area"
  ]
}