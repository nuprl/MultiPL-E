{
  "name": "mbpp_4_heap_queue_largest",
  "language": "rs",
  "prompt": "/// Write a function to find the n largest integers from a given vector of numbers, returned in descending order.\nfn heap_queue_largest(nums: Vec<isize>, n: isize) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = heap_queue_largest;\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 3), vec![85, 75, 65]);\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 2), vec![85, 75]);\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 5), vec![85, 75, 65, 58, 35]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result",
    "    let mut h = BinaryHeap::new();\n    for num in nums {\n        h.push(num);\n        if h.len() > n as usize {\n            h.pop();\n        }\n    }\n    h.into_sorted_vec()",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result.reverse();\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n        if heap.len() > n as usize {\n            heap.pop();\n        }\n    }\n    let mut result = Vec::new();\n    while !heap.is_empty() {\n        result.push(heap.pop().unwrap());\n    }\n    result.reverse();\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result.reverse();\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = vec![];\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result.reverse();\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    for num in nums {\n        heap.push(num);\n    }\n    let mut result = Vec::new();\n    for _ in 0..n {\n        result.push(heap.pop().unwrap());\n    }\n    result"
  ]
}