{
  "name": "mbpp_12_sort_matrix",
  "language": "rs",
  "prompt": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    let mut sums: Vec<isize> = Vec::new();\n    for i in 0..M.len() {\n        sums.push(M[i].iter().sum());\n    }\n    let mut sorted_indices: Vec<usize> = (0..M.len()).collect();\n    sorted_indices.sort_by_key(|&k| sums[k]);\n    for i in 0..M.len() {\n        M.swap(i, sorted_indices[i]);\n    }\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum = a.iter().fold(0, |acc, &x| acc + x);\n        let b_sum = b.iter().fold(0, |acc, &x| acc + x);\n        a_sum.cmp(&b_sum)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    let mut sums = vec![0; M.len()];\n    for i in 0..M.len() {\n        for j in 0..M[i].len() {\n            sums[i] += M[i][j];\n        }\n    }\n    M.sort_by(|a, b| sums[M.iter().position(|r| r == a).unwrap()].cmp(&sums[M.iter().position(|r| r == b).unwrap()]));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let sum_a: isize = a.iter().sum();\n        let sum_b: isize = b.iter().sum();\n        sum_a.cmp(&sum_b)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a = a.iter().fold(0, |acc, x| acc + x);\n        let b = b.iter().fold(0, |acc, x| acc + x);\n        a.cmp(&b)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|r| r.iter().sum::<isize>());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>())\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum = a.iter().fold(0, |acc, &x| acc + x);\n        let b_sum = b.iter().fold(0, |acc, &x| acc + x);\n        a_sum.cmp(&b_sum)\n    });\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M",
    "    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M"
  ]
}