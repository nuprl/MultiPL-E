{
  "name": "mbpp_61_count_Substrings",
  "language": "rs",
  "prompt": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut count: isize = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let mut sum: isize = 0;\n            for c in sub.chars() {\n                sum += c.to_digit(10).unwrap() as isize;\n            }\n            if sum == sub.len() as isize {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut sum: isize = 0;\n    let mut len: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut n: usize = s.len();\n    let mut arr: Vec<isize> = Vec::new();\n    let mut arr_str: Vec<String> = Vec::new();\n    let mut arr_str_len: Vec<isize> = Vec::new();\n    let mut arr_str_sum: Vec<isize> = Vec::new();\n\n    for c in s.chars() {\n        arr.push(c.to_digit(10).unwrap() as isize);\n    }\n\n    while i < n {\n        j = i;\n        sum = 0;\n        len = 0;\n        while j < n {\n            sum += arr[j];\n            len += 1;\n            arr_str.push(s[i..j + 1].to_string());\n            arr_str_len.push(len);\n            arr_str_sum.push(sum);\n            j += 1;\n        }\n        i += 1;\n    }\n\n    for i in 0..arr_str.len() {\n        if arr_str_sum[i] == arr_str_len[i] {\n            count += 1;\n        }\n    }\n\n    count",
    "    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut str = s.as_bytes();\n    while i < n {\n        while j < n {\n            sum += (str[j] - 48) as isize;\n            length += 1;\n            if sum == length {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i;\n        sum = 0;\n        length = 0;\n    }\n    count",
    "    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let digit = c.to_digit(10).unwrap();\n        sum += digit;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count as isize",
    "    let mut count = 0;\n    let s_vec: Vec<char> = s.chars().collect();\n    let mut sum = 0;\n    for i in 0..s_vec.len() {\n        sum = 0;\n        for j in i..s_vec.len() {\n            sum += s_vec[j].to_digit(10).unwrap() as isize;\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub_str = &s[i..j + 1];\n            let sum = sub_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sum == sub_str.len() as u32 {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let mut sum = 0;\n            for k in i..=j {\n                sum += s.chars().nth(k).unwrap().to_digit(10).unwrap() as isize;\n            }\n            if sum == (j - i + 1) as isize {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let digit = c.to_digit(10).unwrap();\n        sum += digit;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let substr = &s[i..j + 1];\n            if substr.len() == sum_digits(substr) {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut s = s.chars().collect::<Vec<char>>();\n    while i < n {\n        while j < n {\n            sum += s[j].to_digit(10).unwrap() as isize;\n            length += 1;\n            if sum == length {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i;\n        sum = 0;\n        length = 0;\n    }\n    count",
    "    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap() as isize).sum::<isize>();\n            if sum == sub.len() as isize {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n        sum += num;\n        length += 1;\n        if sum == length {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut chars: Vec<char> = s.chars().collect();\n    while i < chars.len() {\n        while j < chars.len() {\n            sum += chars[j].to_digit(10).unwrap() as isize;\n            length += 1;\n            if sum == length {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i;\n        sum = 0;\n        length = 0;\n    }\n    count",
    "    let mut count = 0;\n    let mut sum = 0;\n    let mut length = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = s.len();\n    let mut v: Vec<char> = s.chars().collect();\n    while i < n {\n        while j < n {\n            sum += v[j].to_digit(10).unwrap() as isize;\n            length += 1;\n            if sum == length {\n                count += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i;\n        sum = 0;\n        length = 0;\n    }\n    count",
    "    let mut count = 0;\n    let mut sum = 0;\n    let mut len = 0;\n    for c in s.chars() {\n        let digit = c.to_digit(10).unwrap() as isize;\n        sum += digit;\n        len += 1;\n        if sum == len {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..s.len() {\n        for j in i..s.len() {\n            let sub = &s[i..j + 1];\n            let sum = sub.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n            if sub.len() as u32 == sum {\n                count += 1;\n            }\n        }\n    }\n    count as isize"
  ]
}