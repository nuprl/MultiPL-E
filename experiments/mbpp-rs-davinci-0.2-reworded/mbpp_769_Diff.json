{
  "name": "mbpp_769_Diff",
  "language": "rs",
  "prompt": "/// Write a rsthon function to get the difference between two vectors.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < li1.len() && j < li2.len() {\n        if li1[i] < li2[j] {\n            li3.push(li1[i]);\n            i += 1;\n        } else if li1[i] > li2[j] {\n            j += 1;\n        } else {\n            i += 1;\n            j += 1;\n        }\n    }\n    while i < li1.len() {\n        li3.push(li1[i]);\n        i += 1;\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < li1.len() && j < li2.len() {\n        if li1[i] < li2[j] {\n            li3.push(li1[i]);\n            i += 1;\n        } else if li1[i] > li2[j] {\n            j += 1;\n        } else {\n            i += 1;\n            j += 1;\n        }\n    }\n    while i < li1.len() {\n        li3.push(li1[i]);\n        i += 1;\n    }\n    li3",
    "    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < li1.len() && j < li2.len() {\n        if li1[i] < li2[j] {\n            res.push(li1[i]);\n            i += 1;\n        } else if li1[i] > li2[j] {\n            j += 1;\n        } else {\n            i += 1;\n            j += 1;\n        }\n    }\n    while i < li1.len() {\n        res.push(li1[i]);\n        i += 1;\n    }\n    res",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    return li3;",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    return li3;",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < li1.len() && j < li2.len() {\n        if li1[i] < li2[j] {\n            li3.push(li1[i]);\n            i += 1;\n        } else if li1[i] > li2[j] {\n            j += 1;\n        } else {\n            i += 1;\n            j += 1;\n        }\n    }\n    while i < li1.len() {\n        li3.push(li1[i]);\n        i += 1;\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    return li3;",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    let mut i = 0;\n    while i < li1.len() {\n        li3.push(li1[i] - li2[i]);\n        i += 1;\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1.iter() {\n        if !li2.contains(i) {\n            li3.push(*i);\n        }\n    }\n    for i in li2.iter() {\n        if !li1.contains(i) {\n            li3.push(*i);\n        }\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < li1.len() {\n        li3.push(li1[i] - li2[i]);\n        i += 1;\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    let mut i = 0;\n    while i < li1.len() {\n        li3.push(li1[i] - li2[i]);\n        i += 1;\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < li1.len() && j < li2.len() {\n        if li1[i] < li2[j] {\n            li3.push(li1[i]);\n            i += 1;\n        } else if li1[i] > li2[j] {\n            li3.push(li2[j]);\n            j += 1;\n        } else {\n            i += 1;\n            j += 1;\n        }\n    }\n    while i < li1.len() {\n        li3.push(li1[i]);\n        i += 1;\n    }\n    while j < li2.len() {\n        li3.push(li2[j]);\n        j += 1;\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < li1.len() && j < li2.len() {\n        if li1[i] < li2[j] {\n            li3.push(li1[i]);\n            i += 1;\n        } else if li1[i] > li2[j] {\n            j += 1;\n        } else {\n            i += 1;\n            j += 1;\n        }\n    }\n    while i < li1.len() {\n        li3.push(li1[i]);\n        i += 1;\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    return li3;",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    let mut i: usize = 0;\n    while i < li1.len() {\n        li3.push(li1[i] - li2[i]);\n        i += 1;\n    }\n    return li3;",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    let mut i = 0;\n    while i < li1.len() {\n        li3.push(li1[i] - li2[i]);\n        i += 1;\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    return li3;",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < li1.len() && j < li2.len() {\n        if li1[i] < li2[j] {\n            li3.push(li1[i]);\n            i += 1;\n        } else if li1[i] > li2[j] {\n            j += 1;\n        } else {\n            i += 1;\n            j += 1;\n        }\n    }\n    while i < li1.len() {\n        li3.push(li1[i]);\n        i += 1;\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    return li3;",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    return li3;",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < li1.len() && j < li2.len() {\n        if li1[i] < li2[j] {\n            li3.push(li1[i]);\n            i += 1;\n        } else if li1[i] > li2[j] {\n            j += 1;\n        } else {\n            i += 1;\n            j += 1;\n        }\n    }\n    while i < li1.len() {\n        li3.push(li1[i]);\n        i += 1;\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    return li3;",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    return li3;",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in li1.iter() {\n        if !li2.contains(i) {\n            li3.push(*i);\n        }\n    }\n    for i in li2.iter() {\n        if !li1.contains(i) {\n            li3.push(*i);\n        }\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < li1.len() && j < li2.len() {\n        if li1[i] == li2[j] {\n            i += 1;\n            j += 1;\n        } else if li1[i] < li2[j] {\n            li3.push(li1[i]);\n            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n    while i < li1.len() {\n        li3.push(li1[i]);\n        i += 1;\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < li1.len() && j < li2.len() {\n        if li1[i] < li2[j] {\n            li3.push(li1[i]);\n            i += 1;\n        } else if li1[i] > li2[j] {\n            j += 1;\n        } else {\n            i += 1;\n            j += 1;\n        }\n    }\n    while i < li1.len() {\n        li3.push(li1[i]);\n        i += 1;\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3",
    "    let mut li3 = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3",
    "    let mut li3: Vec<isize> = Vec::new();\n    for i in 0..li1.len() {\n        li3.push(li1[i] - li2[i]);\n    }\n    li3"
  ]
}