{
  "name": "mbpp_806_max_run_uppercase",
  "language": "rs",
  "prompt": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = max(max_run, cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = max(max_run, cur_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp464v3b4m.rs:9:23\n  |\n9 |             max_run = max(max_run, cur_run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp464v3b4m.rs:13:15\n   |\n13 |     max_run = max(max_run, cur_run);\n   |               ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = max_run.max(cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run.max(cur_run)\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for ch in test_str.chars() {\n        if ch.is_uppercase() {\n            run += 1;\n            if run > max_run {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut curr_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            curr_run += 1;\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = std::cmp::max(max_run, cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = std::cmp::max(max_run, cur_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut curr_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            curr_run += 1;\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = max(max_run, cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = max(max_run, cur_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp464v3b4m.rs:9:23\n  |\n9 |             max_run = max(max_run, cur_run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp464v3b4m.rs:13:15\n   |\n13 |     max_run = max(max_run, cur_run);\n   |               ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = max(max_run, cur_run);\n            cur_run = 0;\n        }\n    }\n    max(max_run, cur_run)\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpfzpmm4jm.rs:9:23\n  |\n9 |             max_run = max(max_run, cur_run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpfzpmm4jm.rs:13:5\n   |\n13 |     max(max_run, cur_run)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n            if run > max_run {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = std::cmp::max(max_run, cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = std::cmp::max(max_run, cur_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut curr_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            curr_run += 1;\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = max(max_run, cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = max(max_run, cur_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp464v3b4m.rs:9:23\n  |\n9 |             max_run = max(max_run, cur_run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp464v3b4m.rs:13:15\n   |\n13 |     max_run = max(max_run, cur_run);\n   |               ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            run = 0;\n        }\n        if run > max_run {\n            max_run = run;\n        }\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            max_run = max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max(max_run, current_run)\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpfzwodd0f.rs:9:23\n  |\n9 |             max_run = max(max_run, current_run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpfzwodd0f.rs:13:5\n   |\n13 |     max(max_run, current_run)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = max_run.max(cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run.max(cur_run)\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = max_run.max(cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = max_run.max(cur_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            max_run = max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max(max_run, current_run)\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpfzwodd0f.rs:9:23\n  |\n9 |             max_run = max(max_run, current_run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpfzwodd0f.rs:13:5\n   |\n13 |     max(max_run, current_run)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            max_run = max_run.max(current_run);\n            current_run = 0;\n        }\n    }\n    max_run = max_run.max(current_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            max_run = max(max_run, run);\n            run = 0;\n        }\n    }\n    max(max_run, run)\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp4gsiro3r.rs:9:23\n  |\n9 |             max_run = max(max_run, run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp4gsiro3r.rs:13:5\n   |\n13 |     max(max_run, run)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            max_run = std::cmp::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::cmp::max(max_run, current_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            max_run = max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = max(max_run, current_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpw9ml6jyz.rs:9:23\n  |\n9 |             max_run = max(max_run, current_run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpw9ml6jyz.rs:13:15\n   |\n13 |     max_run = max(max_run, current_run);\n   |               ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            max_run = std::cmp::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::cmp::max(max_run, run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = max_run.max(cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = max_run.max(cur_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        cur_run\n    } else {\n        max_run\n    }\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut curr_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            curr_run += 1;\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if curr_run > max_run {\n        curr_run\n    } else {\n        max_run\n    }\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut curr_run = 0;\n    for ch in test_str.chars() {\n        if ch.is_uppercase() {\n            curr_run += 1;\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        cur_run\n    } else {\n        max_run\n    }\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut curr_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            curr_run += 1;\n            if curr_run > max_run {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            max_run = max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = max(max_run, current_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpw9ml6jyz.rs:9:23\n  |\n9 |             max_run = max(max_run, current_run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpw9ml6jyz.rs:13:15\n   |\n13 |     max_run = max(max_run, current_run);\n   |               ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n\n    if current_run > max_run {\n        max_run = current_run;\n    }\n\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp20wu3e0n.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = max(max_run, cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = max(max_run, cur_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp464v3b4m.rs:9:23\n  |\n9 |             max_run = max(max_run, cur_run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp464v3b4m.rs:13:15\n   |\n13 |     max_run = max(max_run, cur_run);\n   |               ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            max_run = max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = max(max_run, current_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpw9ml6jyz.rs:9:23\n  |\n9 |             max_run = max(max_run, current_run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpw9ml6jyz.rs:13:15\n   |\n13 |     max_run = max(max_run, current_run);\n   |               ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n\n    if current_run > max_run {\n        max_run = current_run;\n    }\n\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = max_run.max(cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = max_run.max(cur_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            max_run = max_run.max(run);\n            run = 0;\n        }\n    }\n    max_run = max_run.max(run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = std::cmp::max(max_run, cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = std::cmp::max(max_run, cur_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut curr_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            curr_run += 1;\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            max_run = std::cmp::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::cmp::max(max_run, run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        run\n    } else {\n        max_run\n    }\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            current_run = 0;\n        }\n        if current_run > max_run {\n            max_run = current_run;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            run = 0;\n        }\n        if run > max_run {\n            max_run = run;\n        }\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = max(max_run, cur_run);\n            cur_run = 0;\n        }\n    }\n    max(max_run, cur_run)\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpfzpmm4jm.rs:9:23\n  |\n9 |             max_run = max(max_run, cur_run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpfzpmm4jm.rs:13:5\n   |\n13 |     max(max_run, cur_run)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut curr_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            curr_run += 1;\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if curr_run > max_run {\n        curr_run\n    } else {\n        max_run\n    }\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max = 0;\n    let mut current = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current += 1;\n        } else {\n            if current > max {\n                max = current;\n            }\n            current = 0;\n        }\n    }\n    if current > max {\n        max = current;\n    }\n    max as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut curr_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            curr_run += 1;\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            max_run = max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = max(max_run, current_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpw9ml6jyz.rs:9:23\n  |\n9 |             max_run = max(max_run, current_run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpw9ml6jyz.rs:13:15\n   |\n13 |     max_run = max(max_run, current_run);\n   |               ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            max_run = max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = max(max_run, run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpzifudhpn.rs:9:23\n  |\n9 |             max_run = max(max_run, run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzifudhpn.rs:13:15\n   |\n13 |     max_run = max(max_run, run);\n   |               ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut curr_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            curr_run += 1;\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            max_run = max_run.max(run);\n            run = 0;\n        }\n    }\n    max_run = max_run.max(run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut curr_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            curr_run += 1;\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            max_run = max_run.max(run);\n            run = 0;\n        }\n    }\n    max_run = max_run.max(run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            max_run = max(max_run, run);\n            run = 0;\n        }\n    }\n    max(max_run, run)\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmp4gsiro3r.rs:9:23\n  |\n9 |             max_run = max(max_run, run);\n  |                       ^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp4gsiro3r.rs:13:5\n   |\n13 |     max(max_run, run)\n   |     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        run\n    } else {\n        max_run\n    }\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run: isize = 0;\n    let mut cur_run: isize = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            max_run = std::cmp::max(max_run, cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = std::cmp::max(max_run, cur_run);\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        cur_run\n    } else {\n        max_run\n    }\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run as isize\n}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}