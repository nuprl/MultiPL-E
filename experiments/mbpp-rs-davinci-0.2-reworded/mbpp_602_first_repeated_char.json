{
  "name": "mbpp_602_first_repeated_char",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the first repeated character in a given string.\nfn first_repeated_char(str1: String) -> Option<String> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = first_repeated_char;\n    assert_eq!(candidate(String::from(\"abcabc\")), Some(String::from(\"a\")));\n    assert_eq!(candidate(String::from(\"abc\")), None);\n    assert_eq!(candidate(String::from(\"123123\")), Some(String::from(\"1\")));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    let mut res: Option<String> = None;\n    for (c, count) in char_map {\n        if count > 1 {\n            res = Some(c.to_string());\n            break;\n        }\n    }\n    res",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for (k, v) in map {\n        if v > 1 {\n            return Some(k.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for ch in str1.chars() {\n        let count = char_count.entry(ch).or_insert(0);\n        *count += 1;\n    }\n\n    for (ch, count) in char_count {\n        if count > 1 {\n            return Some(ch.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    let mut first_repeated_char: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for (key, value) in char_map {\n        if value > 1 {\n            first_repeated_char = Some(key.to_string());\n            break;\n        }\n    }\n\n    first_repeated_char",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (key, value) in char_map {\n        if value > 1 {\n            return Some(key.to_string());\n        }\n    }\n    return None;",
    "    let mut map = HashMap::new();\n    for ch in str1.chars() {\n        let count = map.entry(ch).or_insert(0);\n        *count += 1;\n    }\n    for (key, value) in map {\n        if value > 1 {\n            return Some(key.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (c, count) in char_count {\n        if count > 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() > &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (c, count) in char_map {\n        if count > 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    let mut first_repeated_char: Option<String> = None;\n\n    for ch in str1.chars() {\n        let count = char_map.entry(ch).or_insert(0);\n        *count += 1;\n    }\n\n    for (key, value) in &char_map {\n        if *value > 1 {\n            first_repeated_char = Some(key.to_string());\n            break;\n        }\n    }\n\n    first_repeated_char",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (k, v) in map {\n        if v > 1 {\n            return Some(k.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() > &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for ch in str1.chars() {\n        let count = char_map.entry(ch).or_insert(0);\n        *count += 1;\n    }\n    for (k, v) in char_map {\n        if v > 1 {\n            return Some(k.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    let mut first_char = None;\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n        if *count == 2 {\n            first_char = Some(c.to_string());\n            break;\n        }\n    }\n    first_char",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() > &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (c, count) in chars {\n        if count > 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for (c, count) in char_map {\n        if count > 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        if map.contains_key(&c) {\n            return Some(c.to_string());\n        } else {\n            map.insert(c, 1);\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() > &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] > 1 {\n            return Some(c.to_string());\n        }\n    }\n    None"
  ]
}