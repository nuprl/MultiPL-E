{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "rs",
  "prompt": "/// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nfn max_sub_array_sum_repeated(a: Vec<isize>, n: isize, k: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = max_sub_array_sum_repeated;\n    assert_eq!(candidate(vec![10, 20, -30, -1], 4, 3), 30);\n    assert_eq!(candidate(vec![-1, 10, 20], 3, 2), 59);\n    assert_eq!(candidate(vec![-1, -2, -3], 3, 3), -1);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_k = 0;\n    let mut curr_sum_k = 0;\n    let mut max_sum_k_neg = 0;\n    let mut curr_sum_k_neg = 0;\n    let mut max_sum_k_pos = 0;\n    let mut curr_sum_k_pos = 0;\n    let mut max_sum_k_pos_neg = 0;\n    let mut curr_sum_k_pos_neg = 0;\n    let mut max_sum_k_neg_pos = 0;\n    let mut curr_sum_k_neg_pos = 0;\n    let mut max_sum_k_neg_pos_neg = 0;\n    let mut curr_sum_k_neg_pos_neg = 0;\n    let mut max_sum_k_pos_neg_pos = 0;\n    let mut curr_sum_k_pos_neg_pos = 0;\n    let mut max_sum_k_neg_pos_neg_pos = 0;\n    let mut curr_sum_k_neg_pos_neg_pos = 0;\n    let mut max_sum_k_pos_neg_pos_neg = 0;\n    let mut curr_sum_k_pos_neg_pos_neg = 0;\n    let mut max_sum_k_neg_pos_neg_pos_neg = 0;\n    let mut curr_sum_k_neg_pos_neg_pos_neg = 0;\n    let mut max_sum_k_pos_neg_pos_neg_pos = 0;\n    let mut curr_sum_k_pos_neg_pos_neg_pos = 0;\n    let mut max_sum_k_neg_pos_neg_pos_neg_pos = 0;\n    let mut curr_sum_k_neg_pos_neg_pos_neg_pos = 0;\n    let mut max_sum_k_pos_neg_pos_neg_pos_neg = 0;\n    let mut curr_sum_k_pos_neg_pos_neg_pos_neg =",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n\n    if max_wrap > 0 {\n        return max_sum + (k - 2) * max_wrap;\n    } else {\n        return max_sum;\n    }",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = max(max_sum, curr_sum);\n    }\n    let max_sum_all = max_sum;\n    let mut min_sum = 0;\n    curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n        min_sum = min(min_sum, curr_sum);\n    }\n    let min_sum_all = min_sum;\n    let total_sum: isize = a.iter().sum();\n    if k == 1 {\n        return max_sum_all;\n    }\n    max(\n        max_sum_all,\n        total_sum * k - min_sum_all,\n        total_sum * k - min_sum_all + max_sum_all,\n    )",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n    let max_sum_all = curr_sum;\n    let mut min_sum = std::isize::MAX;\n    curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < min_sum {\n            min_sum = curr_sum;\n        }\n        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    let min_sum_all = curr_sum;\n    let mut ans = max_sum;\n    for i in 1..k {\n        let max_val = max_sum_all + i * min_sum_all;\n        let min_val = min_sum_all + i * max_sum_all;\n        ans = std::cmp::max(ans, std::cmp::max(max_val, min_val));\n    }\n    ans",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut start_min = 0;\n    let mut end_min = 0;\n    let mut s_min = 0;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start_min = s_min;\n            end_min = i;\n        }\n\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s_min = i + 1;\n        }\n    }\n\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n\n    let mut ans = max_so_far;\n\n    if sum > 0 {\n        ans = std::cmp::max(ans, sum * k);\n        ans = std::cmp::max(ans, (sum * (k - 2) + max_so_far));\n    } else {\n        ans = std::cmp::max(ans, max_so_far);\n    }\n\n    if sum < 0 {\n        ans = std::cmp::max(ans, (sum * (k - 2) + min_so_far));\n    }\n\n    ans",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut sum = curr_sum;\n    for i in 0..n {\n        sum = sum - a[i as usize] + a[i as usize] * k;\n        if sum > max_sum {\n            max_sum = sum;\n        }\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut max_element = std::isize::MIN;\n    let mut min_element = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut min_so_far = std::isize::MAX;\n\n    for i in 0..n {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n        if a[i as usize] > max_element {\n            max_element = a[i as usize];\n        }\n\n        min_ending_here = min_ending_here + a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n        if a[i as usize] < min_element {\n            min_element = a[i as usize];\n        }\n    }\n\n    if k == 1 {\n        return max_so_far;\n    }\n\n    let mut max_sum = max_so_far;\n    let mut min_sum = min_so_far;\n    let mut total_sum = 0;\n    for i in 0..n {\n        total_sum += a[i as usize];\n    }\n\n    for i in 2..k + 1 {\n        if max_sum < 0 {\n            max_sum = 0;\n        }\n        max_sum = max_sum + total_sum;\n        if min_sum > 0 {\n            min_sum = 0;\n        }\n        min_sum = min_sum + total_sum;\n    }\n\n    if max_sum < max_element {\n        max_sum = max_element;\n    }\n    if min_sum > min",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = isize::min_value();\n    let mut current_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        current_sum += a[i as usize];\n        if current_sum > max_sum {\n            max_sum = current_sum;\n            start = s;\n            end = i;\n        }\n        if current_sum < 0 {\n            current_sum = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_sum = isize::max_value();\n    let mut current_sum = 0;\n    for i in 0..n {\n        current_sum += a[i as usize];\n        if current_sum < min_sum {\n            min_sum = current_sum;\n        }\n    }\n\n    let mut circular_sum = 0;\n    for i in 0..n {\n        circular_sum += a[i as usize];\n    }\n\n    let mut circular_max_sum = isize::min_value();\n    if circular_sum > max_sum {\n        circular_max_sum = circular_sum * k;\n    } else {\n        circular_max_sum = max_sum + (circular_sum - min_sum) * (k - 1);\n    }\n\n    circular_max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here = max_ending_here + a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n\n    for i in 0..n {\n        temp = temp + a[i as usize];\n        max_wrap = max(max_wrap, temp);\n        if temp < 0 {\n            temp = 0;\n        }\n    }\n\n    let mut max_wrap_k = max_wrap * k;\n\n    if max_wrap_k > max_so_far && max_wrap_k != 0 {\n        max_so_far = max_wrap_k;\n    }\n\n    max_so_far",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n    }\n\n    let mut curr_sum = 0;\n    for i in 0..start {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n\n    let mut curr_sum = 0;\n    for i in (end + 1)..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n\n    max_sum * k - (sum_array(&a) - max_sum)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = std::cmp::max(temp, max_wrap);\n    }\n\n    if max_wrap > 0 {\n        max_wrap *= k;\n        max_wrap = std::cmp::max(max_wrap, max_so_far);\n    } else {\n        max_wrap = max_so_far;\n    }\n\n    max_wrap",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    let mut max_sum = 0;\n    let mut max_index = 0;\n    let mut min_index = 0;\n    let mut min_sum = 0;\n    let mut min_so_far = 0;\n    let mut min_ending_here = 0;\n    let mut max_sum_index = 0;\n    let mut min_sum_index = 0;\n    let mut max_sum_ending_here = 0;\n    let mut min_sum_ending_here = 0;\n    let mut max_sum_so_far = 0;\n    let mut min_sum_so_far = 0;\n    let mut max_sum_start = 0;\n    let mut max_sum_end = 0;\n    let mut min_sum_start = 0;\n    let mut min_sum_end = 0;\n    let mut max_sum_s = 0;\n    let mut min_sum_s = 0;\n    let mut max_sum_i = 0;\n    let mut min_sum_i = 0;\n    let mut max_sum_index_start = 0;\n    let mut max_sum_index_end = 0;\n    let mut min_sum_index_start = 0;\n    let mut min_sum_index_end = 0;\n    let mut max_sum_index_s = 0;\n    let mut min_sum_index_s = 0;\n    let mut max_sum_index_i = 0;\n    let mut min_sum_index_i = 0;\n    let mut max_sum_index_so_far = 0;\n    let mut min_sum_index_so_far = 0;\n    let mut max_sum_index_ending_here = 0;\n    let mut min_sum_index_ending_here = 0;\n    let mut max_sum_index_start_index = 0;\n    let mut max_sum_index_end_index = 0;\n    let mut min_sum_",
    "    let mut max_so_far = isize::min_value();\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut start_ = 0;\n    let mut end_ = 0;\n    let mut s_ = 0;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start_ = s_;\n            end_ = i;\n        }\n\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s_ = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n    }\n\n    max_wrap = max_wrap - min_so_far;\n\n    if k == 1 {\n        return max_so_far;\n    }\n\n    if max_wrap > max_so_far {\n        return max_wrap;\n    }\n\n    max_so_far + (k - 2) * max_wrap",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    let mut flag = true;\n    while i < n * k {\n        max_ending_here += a[i as usize];\n        if flag {\n            max_so_far = max_ending_here;\n            flag = false;\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n    let mut max_wrap_sum = max_wrap + min_ending_here;\n    if k == 1 {\n        return max_so_far;\n    }\n    if max_wrap_sum > max_so_far && max_wrap_sum != 0 {\n        return max_wrap_sum;\n    }\n    let mut max_non_wrap = max_so_far;\n    let mut min_non_wrap = std::isize::MAX;\n    let mut min_ending_here = 0;\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_non_wrap > min_ending_here {\n            min_non_wrap = min_ending_here;\n        }\n        if min_ending_here > 0 {\n            min_ending",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    while i < k * n {\n        max_ending_here += a[(i % n) as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n\n    for i in 0..n {\n        temp += a[i as usize];\n\n        if temp < 0 {\n            temp = 0;\n        }\n\n        max_wrap = max(temp, max_wrap);\n    }\n\n    let mut max_wrap_sum = max_wrap * k;\n\n    if max_wrap_sum < max_so_far {\n        return max_so_far;\n    }\n\n    let mut min_wrap = 0;\n    let mut min_wrap_sum = 0;\n    temp = 0;\n\n    for i in 0..n {\n        temp += a[i as usize];\n\n        if temp > min_wrap {\n            min_wrap = temp;\n        }\n    }\n\n    min_wrap_sum = min_wrap * k;\n\n    let mut total_sum = 0;\n\n    for i in 0..n {\n        total_sum += a[i as usize];\n    }\n\n    let mut max_wrap_sum_new = total_sum + min_wrap_sum;\n\n    if max_wrap_sum_new > max_wrap_sum {\n        max_wrap_sum = max_wrap_sum_new;\n    }\n\n    max(max_so_far, max_wrap_sum)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = max(max_sum, curr_sum);\n    }\n    let max_wrap = curr_sum;\n    let mut min_wrap = 0;\n    curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        min_wrap = min(min_wrap, curr_sum);\n    }\n    let ans1 = max_wrap + (k - 2) * min_wrap;\n    let ans2 = max_wrap + (k - 1) * max_wrap;\n    max(ans1, ans2)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    let mut max_wrap = 0;\n    let mut temp = 0;\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = std::cmp::max(temp, max_wrap);\n    }\n    if max_wrap > 0 {\n        max_wrap *= k;\n        max_so_far = std::cmp::max(max_so_far, max_wrap);\n    }\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n\n    for i in 0..n {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n    }\n\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n\n    for i in 0..n {\n        min_ending_here = min_ending_here + a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n\n    let mut max_wrap = sum - min_so_far;\n    if k == 1 {\n        return max_so_far;\n    }\n    if max_wrap > max_so_far {\n        max_so_far = max_wrap;\n    }\n    max_so_far = max_so_far + (k - 2) * sum;\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut max_element = std::isize::MIN;\n    let mut all_negative = true;\n    for i in 0..n {\n        if a[i as usize] > 0 {\n            all_negative = false;\n        }\n        max_element = std::cmp::max(max_element, a[i as usize]);\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = std::cmp::max(max_sum, curr_sum);\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n        }\n        max_sum_so_far = std::cmp::max(max_sum_so_far, curr_sum_so_far);\n    }\n    if all_negative {\n        return max_element;\n    }\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n    let mut ans = max_sum;\n    for i in 1..k {\n        let temp = max_sum_so_far + (sum * (k - i - 1));\n        ans = std::cmp::max(ans, temp);\n    }\n    ans",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut max_element = a[0];\n    let mut i = 0;\n    while i < n {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n        if max_element < a[i as usize] {\n            max_element = a[i as usize];\n        }\n        i += 1;\n    }\n    if max_so_far == 0 {\n        max_so_far = max_element;\n    }\n    max_so_far * k",
    "    let mut max_so_far = isize::min_value();\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut max_ending_here = a[0];\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 1..n {\n        if a[i] > (max_ending_here + a[i]) {\n            max_ending_here = a[i];\n            s = i;\n        } else {\n            max_ending_here = max_ending_here + a[i];\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut wrap_start = 0;\n    let mut wrap_end = 0;\n    let mut temp = 0;\n\n    for i in 0..n {\n        temp += a[i];\n        if temp < 0 {\n            temp = 0;\n        }\n        if max_wrap < temp {\n            max_wrap = temp;\n            wrap_start = i;\n            wrap_end = i;\n        }\n    }\n\n    let mut max_wrap_sum = max_wrap;\n    for i in 0..n {\n        max_wrap_sum += a[i];\n        if max_wrap_sum < max_wrap {\n            max_wrap_sum = max_wrap;\n        }\n    }\n\n    let mut max_non_wrap = 0;\n    let mut non_wrap_start = 0;\n    let mut non_wrap_end = 0;\n    let mut temp = 0;\n\n    for i in 0..n {\n        temp += a[i];\n        if temp < 0 {\n            temp = 0;\n        }\n        if max_non_wrap < temp {\n            max_non_wrap = temp;\n            non_wrap_start = i;\n            non_wrap_end = i;\n        }\n    }\n\n    let mut max_non_wrap_sum = max_non_wrap;\n    for i in 0..n {\n        max_non_wrap_sum += a[i",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = std::cmp::max(max_sum, curr_sum);\n    let mut max_elem = std::isize::MIN;\n    let mut min_elem = std::isize::MAX;\n    let mut max_elem_index = -1;\n    let mut min_elem_index = -1;\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n            max_elem_index = i;\n        }\n        if a[i as usize] < min_elem {\n            min_elem = a[i as usize];\n            min_elem_index = i;\n        }\n    }\n    if max_elem_index == min_elem_index {\n        return max_sum;\n    }\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    curr_sum -= (n - max_elem_index) * max_elem;\n    curr_sum -= min_elem_index * min_elem;\n    max_sum = std::cmp::max(max_sum, curr_sum);\n    for i in 1..k {\n        curr_sum -= (n - max_elem_index) * max_elem;\n        curr_sum -= min_elem_index * min_elem;\n        curr_sum += n * min_elem;\n        max_sum = std::cmp::max(max_sum, curr_sum);\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    for i in 0..n {\n        curr_sum = curr_sum + a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if max_sum < curr_sum {\n            max_sum = curr_sum;\n        }\n    }\n    for i in 0..n {\n        curr_sum_so_far = curr_sum_so_far + a[i as usize];\n    }\n    if curr_sum_so_far < 0 {\n        max_sum_so_far = max_sum;\n    } else {\n        max_sum_so_far = curr_sum_so_far * k;\n    }\n    for i in 0..n {\n        curr_sum_so_far = curr_sum_so_far - a[i as usize];\n        max_sum_so_far = max(max_sum_so_far, curr_sum_so_far * (k - 1) + max_sum);\n    }\n    max_sum_so_far",
    "    let mut max_sum = 0;\n    let mut max_ending_here = 0;\n    let mut min_ending_here = 0;\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        max_ending_here += a[i as usize];\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n        if max_sum < max_ending_here {\n            max_sum = max_ending_here;\n        }\n        min_ending_here += a[i as usize];\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    let mut max_wrap = sum - min_ending_here;\n    if max_wrap < 0 {\n        max_wrap = 0;\n    }\n    let max_sum_k = max_wrap + max_sum * (k - 2);\n    if max_sum_k > max_sum {\n        return max_sum_k;\n    }\n    max_sum",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        curr_sum += a[i as usize % n];\n        end += 1;\n\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i + 1;\n        }\n\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n\n    for i in 0..start {\n        temp += a[i as usize];\n        if temp > max_wrap {\n            max_wrap = temp;\n        }\n    }\n\n    let mut min_wrap = std::isize::MAX;\n    temp = 0;\n\n    for i in (end + 1)..n {\n        temp += a[i as usize];\n        if temp < min_wrap {\n            min_wrap = temp;\n        }\n    }\n\n    max_wrap + max_so_far + min_wrap * (k - 2)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..(n * k) {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut min_ending_here = 0;\n    let mut min_so_far = std::isize::MAX;\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n    if k == 1 {\n        return max_so_far;\n    }\n    let mut ans = sum * k;\n    if ans > max_so_far {\n        ans = max_so_far;\n    }\n    let mut val = sum * (k - 2);\n    val += max_so_far;\n    if ans < val {\n        ans = val;\n    }\n    val = sum * (k - 2);\n    val += min_so_far;\n    if ans < val {\n        ans = val;\n    }\n    ans",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..k {\n        for j in 0..n {\n            max_ending_here += a[j as usize];\n\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here;\n                start = s;\n                end = j;\n            }\n\n            if max_ending_here < 0 {\n                max_ending_here = 0;\n                s = j + 1;\n            }\n        }\n    }\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = isize::min_value();\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n*k {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i+1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_sum_so_far += a[i as usize];\n    }\n    max_sum = max_sum_so_far;\n    for i in 0..n {\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n            s = i + 1;\n        }\n        if curr_sum_so_far > max_sum_so_far {\n            max_sum_so_far = curr_sum_so_far;\n            start = s;\n            end = i;\n        }\n    }\n    for i in 0..k - 1 {\n        for j in start..end + 1 {\n            curr_sum += a[j as usize];\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..(n * k) {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..(n * k) {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    while i < n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut max_sum_so_far_index = 0;\n    let mut curr_sum_so_far_index = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n            curr_sum_so_far_index = i + 1;\n        } else if curr_sum > curr_sum_so_far {\n            curr_sum_so_far = curr_sum;\n            curr_sum_so_far_index = i;\n        }\n    }\n\n    max_sum_so_far = curr_sum_so_far;\n    max_sum_so_far_index = curr_sum_so_far_index;\n\n    for _ in 1..k {\n        curr_sum = 0;\n        curr_sum_so_far = 0;\n        curr_sum_so_far_index = 0;\n\n        for i in 0..n {\n            curr_sum += a[i as usize];\n            if curr_sum < 0 {\n                curr_sum = 0;\n                curr_sum_so_far_index = i + 1;\n            } else if curr_sum > curr_sum_so_far {\n                curr_sum_so_far = curr_sum;\n                curr_sum_so_far_index = i;\n            }\n        }\n\n        if curr_sum_so_far_index < max_sum_so_far_index {\n            max_sum_so_far += curr_sum_so_far;\n        } else {\n            max_sum_so_far = curr_sum_so_far;\n            max_sum_so_far_index = curr_sum_so_far_index;\n        }\n    }\n\n    max_sum_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    let mut max_wrap = 0;\n    let mut temp = 0;\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = std::cmp::max(temp, max_wrap);\n    }\n    if max_wrap > 0 {\n        max_wrap *= k;\n        max_wrap = std::cmp::max(max_wrap, max_so_far);\n    } else {\n        max_wrap = max_so_far;\n    }\n    max_wrap",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n    let max_wrap = curr_sum;\n    let mut min_sum = std::isize::MAX;\n    curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < min_sum {\n            min_sum = curr_sum;\n        }\n        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    let min_wrap = curr_sum;\n    let mut ans = max_sum;\n    if k == 1 {\n        return ans;\n    }\n    ans = max(ans, max_wrap + (k - 2) * max_wrap + min_wrap);\n    return ans;",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..k {\n        for j in 0..n {\n            max_ending_here += a[j as usize];\n\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here;\n                start = s;\n                end = j;\n            }\n\n            if max_ending_here < 0 {\n                max_ending_here = 0;\n                s = j + 1;\n            }\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = std::cmp::max(max_sum, curr_sum);\n    let mut max_elem = std::isize::MIN;\n    let mut min_elem = std::isize::MAX;\n    let mut max_index = 0;\n    let mut min_index = 0;\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n            max_index = i;\n        }\n        if a[i as usize] < min_elem {\n            min_elem = a[i as usize];\n            min_index = i;\n        }\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    curr_sum -= a[max_index as usize];\n    curr_sum -= a[min_index as usize];\n    max_sum = std::cmp::max(max_sum, curr_sum);\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    curr_sum -= a[max_index as usize];\n    max_sum = std::cmp::max(max_sum, curr_sum);\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    curr_sum -= a[min_index as usize];\n    max_sum = std::cmp::max(max_sum, curr_sum);\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_val = std::isize::MIN;\n    for i in 0..n {\n        max_val = std::cmp::max(max_val, a[i as usize]);\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = std::cmp::max(max_sum, curr_sum);\n    }\n    if max_sum > 0 {\n        max_sum *= k;\n    } else {\n        max_sum = max_val;\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    for i in 0..n {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n    }\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    for i in 0..n {\n        min_ending_here = min_ending_here + a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut max_wrap_ending_here = 0;\n    for i in 0..n {\n        max_wrap_ending_here = max_wrap_ending_here + a[i as usize];\n        if max_wrap_ending_here > max_wrap {\n            max_wrap = max_wrap_ending_here;\n        }\n        if max_wrap_ending_here < 0 {\n            max_wrap_ending_here = 0;\n        }\n    }\n    let mut max_sum = max_so_far;\n    if k > 1 {\n        max_sum = max(max_sum, max_wrap + min_so_far);\n    }\n    if k > 2 {\n        max_sum = max(max_sum, max_wrap + max_so_far);\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut wrap_start = 0;\n    let mut wrap_end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        max_wrap = max_wrap + a[i as usize];\n        if max_wrap < 0 {\n            max_wrap = 0;\n            s = i + 1;\n        }\n    }\n    if max_wrap > 0 {\n        wrap_start = s;\n        wrap_end = n - 1;\n    }\n\n    let mut max_wrap_sum = max_wrap;\n    for i in 1..k {\n        max_wrap_sum = max_wrap_sum + max_wrap;\n    }\n\n    let mut max_non_wrap_sum = max_so_far;\n    for i in 1..k {\n        max_non_wrap_sum = max_non_wrap_sum + max_so_far;\n    }\n\n    if max_wrap_sum > max_non_wrap_sum {\n        return max_wrap_sum;\n    } else {\n        return max_non_wrap_sum;\n    }",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    for i in 0..start {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    for i in (end + 1)..n {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_so_far * k",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = 0;\n    let mut min_elem = 0;\n    let mut min_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        max_sum += a[i as usize];\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        if a[i as usize] < min_elem {\n            min_elem = a[i as usize];\n            min_sum += a[i as usize];\n        }\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    if max_elem <= 0 {\n        return max_elem * k;\n    }\n    if min_elem >= 0 {\n        return max_sum * k;\n    }\n    let mut max_wrap = curr_sum - min_sum;\n    for i in 1..k {\n        if curr_sum > max_wrap {\n            max_wrap = curr_sum;\n        }\n        curr_sum = curr_sum - (n * min_elem);\n    }\n    if max_wrap > max_sum {\n        max_wrap\n    } else {\n        max_sum\n    }",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = std::cmp::max(max_sum, curr_sum);\n    let mut max_elem = *a.iter().max().unwrap();\n    let mut min_elem = *a.iter().min().unwrap();\n    let mut prev_sum = curr_sum;\n    for _ in 1..k {\n        curr_sum = prev_sum + (max_elem * (n - 1)) + min_elem;\n        max_sum = std::cmp::max(max_sum, curr_sum);\n        prev_sum = curr_sum;\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        if sum > max_sum {\n            max_sum = sum;\n            start = s;\n            end = i;\n        }\n        if sum < 0 {\n            sum = 0;\n            s = i + 1;\n        }\n    }\n    let mut min_sum = 0;\n    let mut sum = 0;\n    let mut min_sum_so_far = 0;\n    let mut s = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        if sum < min_sum {\n            min_sum = sum;\n            s = i + 1;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    max_sum_so_far = max_sum;\n    if k > 1 {\n        max_sum_so_far = max_sum + min_sum * (k - 2);\n        let mut sum = 0;\n        for i in 0..n {\n            sum += a[i as usize];\n            if sum > max_sum_so_far {\n                max_sum_so_far = sum;\n            }\n            if sum < 0 {\n                sum = 0;\n            }\n        }\n    }\n    max_sum_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut max_sum_ending_here = 0;\n    let mut max_element = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_element {\n            max_element = a[i as usize];\n        }\n        max_sum_ending_here += a[i as usize];\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0;\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here;\n        }\n    }\n    if max_sum_so_far == 0 {\n        return max_element;\n    }\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n    max_sum = max_sum_so_far;\n    for i in 1..k {\n        curr_sum = (curr_sum + sum) % 1000000007;\n        max_sum = std::cmp::max(max_sum, curr_sum);\n        curr_sum = std::cmp::max(curr_sum, 0);\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here = max_ending_here + a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut max_sum_ending_here = 0;\n    let mut curr_sum_ending_here = 0;\n    let mut i = 0;\n    let mut j = 0;\n    while i < n {\n        curr_sum += a[i as usize];\n        curr_sum_so_far += a[i as usize];\n        curr_sum_ending_here += a[i as usize];\n        if curr_sum_ending_here < 0 {\n            curr_sum_ending_here = 0;\n            j = i + 1;\n        }\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            max_sum_so_far = curr_sum_so_far;\n            max_sum_ending_here = curr_sum_ending_here;\n        }\n        i += 1;\n    }\n    if max_sum_so_far == 0 {\n        return *a.iter().max().unwrap();\n    }\n    let mut sum_of_array = 0;\n    for i in 0..n {\n        sum_of_array += a[i as usize];\n    }\n    let mut max_wrap = sum_of_array - max_sum_so_far;\n    if k == 1 {\n        return max_sum;\n    }\n    let mut max_wrap_sum = max_wrap + max_sum_ending_here;\n    let mut max_wrap_sum_so_far = max_wrap_sum;\n    let mut max_wrap_sum_ending_here = max_wrap_sum;\n    i = j;\n    while i < n {\n        max_wrap_sum_ending_here += a[i as usize];\n        if max_wrap_sum_ending_here < 0 {\n            max",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..(n * k) {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..k {\n        for j in 0..n {\n            max_ending_here += a[j as usize];\n\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here;\n                start = s;\n                end = j;\n            }\n\n            if max_ending_here < 0 {\n                max_ending_here = 0;\n                s = j + 1;\n            }\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut max_element = a[0];\n\n    for i in 0..n {\n        max_element = max(max_element, a[i as usize]);\n        max_sum_so_far += a[i as usize];\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n        }\n        max_sum = max(max_sum, curr_sum_so_far);\n    }\n\n    if max_sum_so_far < 0 {\n        return max_sum;\n    }\n\n    let mut sum = max_sum_so_far * k;\n    sum -= max_sum;\n    sum += max_sum * (k - 2);\n    sum += max_sum_so_far;\n\n    max(sum, max_sum + (max_sum_so_far * (k - 2)))",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if max_sum < curr_sum {\n            max_sum = curr_sum;\n        }\n    }\n    for i in 0..n {\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n        }\n        if max_sum_so_far < curr_sum_so_far {\n            max_sum_so_far = curr_sum_so_far;\n        }\n    }\n    if max_sum_so_far == 0 {\n        return max_sum_so_far;\n    }\n    let mut total_sum = 0;\n    for i in 0..n {\n        total_sum += a[i as usize];\n    }\n    let mut max_wrap = total_sum * (k - 2);\n    max_wrap += max_sum_so_far;\n    max_wrap += max_sum;\n    if max_wrap > max_sum_so_far {\n        return max_wrap;\n    } else {\n        return max_sum_so_far;\n    }",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..(n * k) {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = max(temp, max_wrap);\n    }\n\n    if max_wrap > 0 {\n        return max(max_so_far, max_wrap * k);\n    }\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n\n    while i < n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{}\", max_so_far);\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here = max_ending_here + a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = std::cmp::max(temp, max_wrap);\n    }\n\n    if max_wrap > 0 {\n        max_wrap *= k;\n        max_so_far = std::cmp::max(max_so_far, max_wrap);\n    }\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    let mut max_sum = 0;\n\n    for _ in 0..k {\n        for i in 0..n {\n            max_ending_here += a[i as usize];\n\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n\n            if max_ending_here < 0 {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n        }\n        max_sum += max_so_far;\n        max_so_far = 0;\n        max_ending_here = 0;\n        s = 0;\n    }\n\n    max_sum",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n    let mut curr_sum = 0;\n    for i in 0..start {\n        curr_sum += a[i as usize];\n    }\n    let mut curr_val = curr_sum;\n    for i in start..end + 1 {\n        curr_val += a[i as usize];\n    }\n    let mut max_val = curr_val;\n    for i in 1..k {\n        curr_val = curr_val - curr_sum;\n        curr_sum = 0;\n        for j in 0..start {\n            curr_sum += a[j as usize];\n        }\n        curr_val = curr_val + curr_sum;\n        max_val = std::cmp::max(max_val, curr_val);\n    }\n    max_val",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n        if max_sum < curr_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n    }\n    let mut min_sum = 0;\n    curr_sum = 0;\n    s = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n        if min_sum > curr_sum {\n            min_sum = curr_sum;\n        }\n    }\n    let mut circular_sum = 0;\n    for i in 0..n {\n        circular_sum += a[i as usize];\n    }\n    let mut max_circular_sum = 0;\n    if circular_sum > max_sum {\n        max_circular_sum = circular_sum;\n    } else {\n        max_circular_sum = max_sum;\n    }\n    if k == 1 {\n        return max_circular_sum;\n    }\n    let mut min_value = 0;\n    let mut max_value = 0;\n    for i in start..end + 1 {\n        max_value += a[i as usize];\n    }\n    min_value = max_value;\n    for i in end + 1..n {\n        max_value += a[i as usize];\n        min_value += a[i as usize];\n    }\n    for i in 0..start {\n        max_value += a[i as usize];\n        min_value += a[i as usize];\n    }\n    let mut max_wrap = 0;\n    if circular_sum > 0",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n    let max_wrap_sum = curr_sum;\n    let mut min_wrap_sum = std::isize::MAX;\n    curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < min_wrap_sum {\n            min_wrap_sum = curr_sum;\n        }\n        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    let max_wrap_sum = max_wrap_sum + (k - 2) * min_wrap_sum;\n    if max_wrap_sum > max_sum {\n        max_wrap_sum\n    } else {\n        max_sum\n    }",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = 0;\n    for i in 0..n {\n        max_elem = max(max_elem, a[i as usize]);\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = max(max_sum, curr_sum);\n    }\n    if max_elem < 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut curr_wrap = 0;\n    for i in 0..n {\n        curr_wrap += a[i as usize];\n        if curr_wrap < 0 {\n            curr_wrap = 0;\n        }\n        max_wrap = max(max_wrap, curr_wrap);\n    }\n    max(max_sum, max_wrap * (k - 2) + max_sum)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    let mut neg_count = 0;\n    let mut neg_sum = 0;\n    let mut neg_max = std::isize::MIN;\n    let mut max_sum = std::isize::MIN;\n    let mut max_index = 0;\n    let mut min_index = 0;\n    let mut min_sum = std::isize::MAX;\n    let mut min_max = std::isize::MAX;\n    let mut min_count = 0;\n    let mut sum = 0;\n    let mut max_sum_k = std::isize::MIN;\n    let mut min_sum_k = std::isize::MAX;\n    let mut max_sum_k_index = 0;\n    let mut min_sum_k_index = 0;\n    let mut max_sum_k_count = 0;\n    let mut min_sum_k_count = 0;\n    let mut max_sum_k_sum = 0;\n    let mut min_sum_k_sum = 0;\n    let mut max_sum_k_max = std::isize::MIN;\n    let mut min_sum_k_max = std::isize::MAX;\n    let mut max_sum_k_min = std::isize::MIN;\n    let mut min_sum_k_min = std::isize::MAX;\n    let mut max_sum_k_neg_count = 0;\n    let mut min_sum_k_neg_count = 0;\n    let mut max_sum_k_neg_sum = 0;\n    let mut min_sum_k_neg_sum = 0;\n    let mut max_sum_k_neg_max = std::isize::MIN;\n    let mut min_sum_k_neg_max = std::isize::MAX;\n    let mut max_sum_k_neg_min = std::isize::MIN;\n    let mut min_sum_k_neg_min = std::is",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if max_elem < a[i as usize] {\n            max_elem = a[i as usize];\n        }\n    }\n\n    if curr_sum < 0 {\n        return max_elem * k;\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if max_wrap < curr_sum {\n            max_wrap = curr_sum;\n        }\n    }\n\n    max_sum = curr_sum;\n    for i in 1..k {\n        max_sum += max_wrap;\n    }\n\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut max_ending_here = a[0];\n\n    for i in 1..n {\n        max_ending_here = max(a[i], max_ending_here + a[i]);\n        max_so_far = max(max_so_far, max_ending_here);\n    }\n\n    let mut max_sum = max_so_far;\n    let mut curr_val = 0;\n\n    for i in 0..n {\n        curr_val += a[i];\n        a[i] = -a[i];\n    }\n\n    curr_val = max(curr_val, 0);\n\n    max_so_far = a[0];\n    max_ending_here = a[0];\n\n    for i in 1..n {\n        max_ending_here = max(a[i], max_ending_here + a[i]);\n        max_so_far = max(max_so_far, max_ending_here);\n    }\n\n    max_sum = max(max_sum, curr_val + max_so_far);\n\n    if max_sum == 0 {\n        max_sum = max_so_far;\n    }\n\n    max_sum * k",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut max_sub_array_sum = std::isize::MIN;\n    let mut max_sub_array_start = 0;\n    let mut max_sub_array_end = 0;\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        if i >= n - 1 {\n            if max_sub_array_sum < max_so_far {\n                max_sub_array_sum = max_so_far;\n                max_sub_array_start = start;\n                max_sub_array_end = end;\n            }\n        }\n    }\n    max_sub_array_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    while i < n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n    let mut curr_sum = max_sum;\n    for i in 0..start {\n        curr_sum += a[i as usize];\n        max_sum = std::cmp::max(curr_sum, max_sum);\n    }\n    for i in (end + 1)..n {\n        curr_sum += a[i as usize];\n        max_sum = std::cmp::max(curr_sum, max_sum);\n    }\n    max_sum * k - (k - 1) * (a[start as usize] + a[end as usize])",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    while i < n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut sum_so_far = 0;\n    let mut min_sum_so_far = 0;\n\n    for i in 0..n {\n        sum_so_far += a[i as usize];\n        max_sum_so_far = max(max_sum_so_far, sum_so_far - min_sum_so_far);\n        min_sum_so_far = min(min_sum_so_far, sum_so_far);\n        max_sum = max(max_sum, max_sum_so_far);\n    }\n\n    let max_wrap_sum = sum_so_far - min_sum_so_far;\n    if k == 1 {\n        max_sum\n    } else {\n        max(max_sum, max_wrap_sum + (k - 2) * sum_so_far)\n    }",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..(n * k) {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n] as isize;\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{:?}\", a);\n    println!(\"{:?}\", &a[start as usize..end as usize + 1]);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut sum_so_far = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut start_so_far = 0;\n    let mut end_so_far = 0;\n    let mut max_sum_ending_here = 0;\n    let mut sum_ending_here = 0;\n    let mut max_sum_ending_here_so_far = 0;\n    let mut sum_ending_here_so_far = 0;\n    let mut max_sum_ending_here_index = 0;\n    let mut sum_ending_here_index = 0;\n    let mut max_sum_ending_here_index_so_far = 0;\n    let mut sum_ending_here_index_so_far = 0;\n    let mut max_sum_ending_here_index_so_far_temp = 0;\n    let mut sum_ending_here_index_so_far_temp = 0;\n    let mut max_sum_ending_here_so_far_temp = 0;\n    let mut sum_ending_here_so_far_temp = 0;\n    let mut max_sum_so_far_temp = 0;\n    let mut sum_so_far_temp = 0;\n    let mut max_sum_temp = 0;\n    let mut sum_temp = 0;\n    let mut max_sum_ending_here_temp = 0;\n    let mut sum_ending_here_temp = 0;\n    let mut max_sum_ending_here_index_temp = 0;\n    let mut sum_ending_here_index_temp = 0;\n    let mut max_sum_ending_here_index_so_far_temp_temp = 0;\n    let mut sum_ending_here_index_so_far_temp_temp = 0;\n    let mut max_sum_ending_here_so_far_temp_temp = 0;\n    let mut sum_ending_here_so_far_temp_temp = 0;",
    "    let mut max_so_far = isize::min_value();\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = max(temp, max_wrap);\n    }\n\n    if max_wrap > 0 {\n        return max(max_so_far, max_wrap * k);\n    } else {\n        return max_so_far;\n    }",
    "    let mut max_so_far = isize::min_value();\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = std::cmp::max(temp, max_wrap);\n    }\n\n    if max_wrap > 0 {\n        max_wrap *= k;\n        max_so_far = std::cmp::max(max_so_far, max_wrap);\n    }\n\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if max_sum < curr_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_elem * k;\n    }\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n    let mut ans = max_sum;\n    for i in 1..k {\n        max_sum = max_sum + sum;\n        if ans < max_sum {\n            ans = max_sum;\n        }\n    }\n    ans",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_ele = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_ele {\n            max_ele = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_ele;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut curr_wrap = 0;\n    for i in 0..n {\n        curr_wrap += a[i as usize];\n        if curr_wrap < 0 {\n            curr_wrap = 0;\n        }\n        if curr_wrap > max_wrap {\n            max_wrap = curr_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if max_wrap > max_sum {\n        max_wrap\n    } else {\n        max_sum\n    }",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n    for i in 0..n {\n        temp = temp + a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = max(temp, max_wrap);\n    }\n\n    if max_wrap > 0 {\n        return max(max_so_far, max_wrap * k);\n    } else {\n        return max_so_far;\n    }",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..(n * k) {\n        max_ending_here += a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n*k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    max_sum = max_sum + max_wrap * (k - 2);\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_element = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut max_start = 0;\n    let mut max_end = 0;\n    let mut max_element_index = 0;\n    let mut max_element_start = 0;\n    let mut max_element_end = 0;\n\n    while i < n {\n        if a[i as usize] >= 0 {\n            curr_sum += a[i as usize];\n            if curr_sum > max_sum {\n                max_sum = curr_sum;\n                max_start = start;\n                max_end = i;\n            }\n        } else {\n            curr_sum = 0;\n            start = i + 1;\n        }\n        if a[i as usize] > max_element {\n            max_element = a[i as usize];\n            max_element_index = i;\n            max_element_start = start;\n            max_element_end = i;\n        }\n        i += 1;\n    }\n\n    if max_element < 0 {\n        return max_element;\n    }\n\n    if max_sum == 0 {\n        return max_element;\n    }\n\n    let mut sum = 0;\n    let mut sum_start = 0;\n    let mut sum_end = 0;\n    let mut sum_max = 0;\n\n    i = 0;\n    while i < n {\n        if a[i as usize] >= 0 {\n            sum += a[i as usize];\n        } else {\n            sum = 0;\n            sum_start = i + 1;\n        }\n        if sum > sum_max {\n            sum_max = sum;\n            sum_end = i;\n        }\n        i += 1;\n    }\n\n    if sum_max == max_sum {\n        return sum_max * k;\n    }\n\n    let mut sum_left = 0;\n    let mut sum_left_start = 0;\n    let",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    for i in 0..k - 1 {\n        for j in start..end + 1 {\n            max_ending_here = max_ending_here + a[j as usize];\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here;\n            }\n        }\n    }\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    while i < n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n    for i in 0..n {\n        temp = temp + a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = max(temp, max_wrap);\n    }\n\n    if max_wrap > 0 {\n        max(max_so_far, max_wrap * k)\n    } else {\n        max_so_far\n    }",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = max(max_sum, curr_sum);\n    }\n\n    for i in 0..n {\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n        }\n        max_sum_so_far = max(max_sum_so_far, curr_sum_so_far);\n    }\n\n    if max_sum_so_far < 0 {\n        max_sum_so_far\n    } else {\n        max(max_sum_so_far, max_sum + (k - 2) * max_sum_so_far)\n    }",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..(n * k) {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    while i < n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut max_sum_start = 0;\n    let mut max_sum_end = 0;\n    let mut max_sum_start_temp = 0;\n    let mut max_sum_end_temp = 0;\n\n    for _ in 0..k {\n        for i in 0..n {\n            curr_sum += a[i as usize];\n            if curr_sum > max_sum {\n                max_sum = curr_sum;\n                max_sum_start_temp = s;\n                max_sum_end_temp = i;\n            }\n            if curr_sum < 0 {\n                curr_sum = 0;\n                s = i + 1;\n            }\n        }\n        if max_sum_so_far < max_sum {\n            max_sum_so_far = max_sum;\n            max_sum_start = max_sum_start_temp;\n            max_sum_end = max_sum_end_temp;\n        }\n        max_sum = 0;\n        curr_sum = 0;\n        s = 0;\n    }\n    println!(\"{} {}\", max_sum_start, max_sum_end);\n    max_sum_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    let mut count = 0;\n    let mut max_sub_array_sum = std::isize::MIN;\n\n    while count < k {\n        while i < n {\n            max_ending_here += a[i as usize];\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n            i += 1;\n        }\n        if max_sub_array_sum < max_so_far {\n            max_sub_array_sum = max_so_far;\n        }\n        max_so_far = std::isize::MIN;\n        max_ending_here = 0;\n        start = 0;\n        end = 0;\n        s = 0;\n        i = 0;\n        count += 1;\n    }\n    max_sub_array_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here = max_ending_here + a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut max_sub_array_sum = std::isize::MIN;\n    let mut max_sub_array_start = 0;\n    let mut max_sub_array_end = 0;\n    let mut max_sub_array_size = 0;\n\n    for i in 0..(n * k) {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n\n        if i >= n - 1 {\n            if max_sub_array_sum < max_so_far {\n                max_sub_array_sum = max_so_far;\n                max_sub_array_start = start;\n                max_sub_array_end = end;\n                max_sub_array_size = end - start + 1;\n            } else if max_sub_array_sum == max_so_far && max_sub_array_size < end - start + 1 {\n                max_sub_array_start = start;\n                max_sub_array_end = end;\n                max_sub_array_size = end - start + 1;\n            }\n        }\n    }\n\n    let mut sum = 0;\n    for i in max_sub_array_start..max_sub_array_end + 1 {\n        sum += a[i as usize];\n    }\n\n    sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut max_element = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_element {\n            max_element = a[i as usize];\n        }\n    }\n    if max_element < 0 {\n        return max_element * k;\n    }\n    for i in 0..n {\n        curr_sum = curr_sum - a[i as usize] + a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    max_sum * k",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut curr_sum = max_sum;\n    for i in 0..start {\n        curr_sum += a[i as usize];\n        max_sum = std::cmp::max(max_sum, curr_sum);\n    }\n\n    curr_sum = max_sum;\n    for i in (end + 1)..n {\n        curr_sum += a[i as usize];\n        max_sum = std::cmp::max(max_sum, curr_sum);\n    }\n\n    max_sum * k - (sum_vector(&a) - max_sum)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = isize::min_value();\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n    max_sum = max_sum.max(max_wrap);\n    if k == 1 {\n        return max_sum;\n    }\n    let mut max_wrap_sum = 0;\n    for i in 0..n {\n        max_wrap_sum += a[i as usize];\n    }\n    max_sum = max_sum.max(max_wrap_sum);\n    max_sum = max_sum.max(max_wrap_sum + max_sum);\n    return max_sum;",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut max_sum_ending_here = 0;\n    let mut curr_sum_ending_here = 0;\n    let mut max_sum_ending_here_so_far = 0;\n    let mut curr_sum_ending_here_so_far = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_so_far = isize::min_value();\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n\n    let mut min_so_far = isize::max_value();\n    let mut min_ending_here = 0;\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n\n    let mut max_wrap_sum = max_wrap + min_so_far;\n\n    if k == 1 {\n        return max_so_far;\n    }\n\n    if max_wrap_sum > max_so_far && max_wrap_sum != 0 {\n        return max_wrap_sum;\n    }\n\n    let mut max_non_wrap = max_so_far;\n    for i in 1..k {\n        max_non_wrap = max_non_wrap + max_wrap;\n        if max_non_wrap > max_so_far {\n            max_so_far = max_non_wrap;\n        }\n    }\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n\n    while i < n * k {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..n {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n\n    let max_wrap = (a.iter().sum::<isize>() * k) - max_wrap_sum(a.clone(), n);\n\n    max(max_so_far, max_wrap)",
    "    let mut sum = 0;\n    let mut max_sum = std::isize::MIN;\n    let mut max_sum_end = 0;\n    let mut max_sum_start = 0;\n    let mut start = 0;\n    let mut end = 0;\n\n    for i in 0..n {\n        sum += a[i as usize];\n        if sum > max_sum {\n            max_sum = sum;\n            max_sum_end = i;\n            max_sum_start = start;\n        }\n        if sum < 0 {\n            sum = 0;\n            start = i + 1;\n        }\n    }\n\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        if sum < 0 {\n            sum = 0;\n            start = i + 1;\n        }\n    }\n\n    if sum > 0 {\n        let mut max_wrap = 0;\n        let mut wrap = 0;\n        for i in 0..n {\n            wrap += a[i as usize];\n            if wrap > max_wrap {\n                max_wrap = wrap;\n                end = i;\n            }\n        }\n        let mut sum = 0;\n        for i in 0..n {\n            sum += a[i as usize];\n        }\n        max_wrap = max_wrap + sum * (k - 2);\n        if max_wrap > max_sum {\n            max_sum = max_wrap;\n            max_sum_start = end + 1;\n            max_sum_end = max_sum_start + n - 1;\n        }\n    }\n\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut curr_sum = max_sum;\n    for i in 0..start {\n        curr_sum += a[i as usize];\n        max_sum = std::cmp::max(max_sum, curr_sum);\n    }\n\n    curr_sum = max_sum;\n    for i in (end + 1)..n {\n        curr_sum += a[i as usize];\n        max_sum = std::cmp::max(max_sum, curr_sum);\n    }\n\n    max_sum * k - (sum_array(&a) - max_sum)",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    for i in 0..n {\n        curr_sum += (k - 1) * a[i as usize];\n        max_sum = max(max_sum, curr_sum);\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut max_sum_ending_here = 0;\n    let mut max_element = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_element {\n            max_element = a[i as usize];\n        }\n        max_sum_ending_here += a[i as usize];\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0;\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here;\n        }\n    }\n    if max_sum_so_far == 0 {\n        max_sum_so_far = max_element;\n    }\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n    max_sum = sum * k;\n    max_sum = max_sum.max(max_sum_so_far);\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    max_wrap = max_wrap + max_sum;\n    if k == 1 {\n        return max_sum;\n    }\n    if max_wrap > max_sum {\n        return max_wrap;\n    }\n    max_sum + (k - 2) * max_wrap",
    "    let mut max_sum = 0;\n    let mut max_ending_here = 0;\n    let mut min_ending_here = 0;\n    let mut min_sum = 0;\n    let mut sum = 0;\n\n    for i in 0..n {\n        sum += a[i as usize];\n        max_ending_here += a[i as usize];\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n        if max_sum < max_ending_here {\n            max_sum = max_ending_here;\n        }\n        min_ending_here += a[i as usize];\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n        if min_sum > min_ending_here {\n            min_sum = min_ending_here;\n        }\n    }\n\n    if sum < 0 {\n        max_sum\n    } else {\n        max(max_sum, sum * k - min_sum)\n    }",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n    }\n\n    for i in 0..n {\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n        }\n        if curr_sum_so_far > max_sum_so_far {\n            max_sum_so_far = curr_sum_so_far;\n        }\n    }\n\n    if max_sum_so_far > 0 {\n        max_sum_so_far * k\n    } else {\n        max_sum\n    }",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    while i < n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut curr_val = curr_sum;\n    for i in 0..n {\n        curr_val = curr_val - a[i as usize] + a[i as usize] * k;\n        if curr_val > max_sum {\n            max_sum = curr_val;\n        }\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut e = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n    for i in 0..n {\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far > max_sum_so_far {\n            max_sum_so_far = curr_sum_so_far;\n            e = i;\n        }\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n        }\n    }\n    let mut sum = max_sum_so_far * k;\n    if start > 0 {\n        sum -= max_sum_so_far;\n    }\n    if end < n - 1 {\n        sum -= max_sum_so_far;\n    }\n    sum += max_sum;\n    sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far: isize = 0;\n    let mut max_ending_here: isize = 0;\n    let mut start: usize = 0;\n    let mut end: usize = 0;\n    let mut s: usize = 0;\n\n    for i in 0..n {\n        max_ending_here = max_ending_here + a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i as usize;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i as usize + 1;\n        }\n    }\n\n    let mut max_wrap: isize = 0;\n    let mut temp: isize = 0;\n\n    for i in 0..n {\n        temp += a[i as usize];\n        max_wrap = max(temp, max_wrap);\n    }\n\n    max_wrap = max_wrap * k;\n\n    let mut max_wrap_till_now: isize = 0;\n    let mut min_wrap_till_now: isize = 0;\n\n    for i in 0..n {\n        max_wrap_till_now += a[i as usize];\n        min_wrap_till_now += a[i as usize];\n\n        if max_wrap_till_now > max_wrap {\n            max_wrap_till_now = max_wrap_till_now - max_wrap;\n        }\n\n        if min_wrap_till_now < 0 {\n            min_wrap_till_now = min_wrap_till_now + max_wrap;\n        }\n    }\n\n    let mut max_wrap_sum: isize = 0;\n\n    for i in 0..n {\n        max_wrap_sum += a[i as usize];\n        max_wrap_sum = max(max_wrap_sum, max_wrap_till_now);\n        max_wrap_till_now = max_wrap_till_now - a[i as usize];\n   ",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for _ in 0..k {\n        for i in 0..n {\n            curr_sum += a[i as usize];\n            if curr_sum < 0 {\n                curr_sum = 0;\n            }\n            if max_sum < curr_sum {\n                max_sum = curr_sum;\n            }\n        }\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = isize::min_value();\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n\n    // Handle the case when all numbers in arr[] are negative\n    if max_sum < 0 {\n        max_sum = 0;\n    }\n\n    // Case 2: When all numbers are positive\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        max_sum = max(max_sum, curr_sum);\n    }\n\n    // Case 3: Maximum sum is obtained by including\n    // corner elements.\n    let mut corner_sum = 0;\n    for i in 0..k {\n        corner_sum += a[i as usize];\n    }\n    let mut corner_start = 0;\n    let mut corner_end = k - 1;\n    let mut curr_sum = corner_sum;\n    for i in k..n * 2 {\n        curr_sum += a[i as usize] - a[i as usize - k as usize];\n        if curr_sum > corner_sum {\n            corner_sum = curr_sum;\n            corner_start = i - k + 1;\n            corner_end = i;\n        }\n    }\n\n    // The following three cases are mainly to handle corner elements\n    if corner_start <= end && corner_end >= start {\n        let mut left_sum = isize::min_value();\n        curr_sum = 0;\n        for i in (corner_end + 1)..(end + k) {\n            curr_sum += a[i as usize];\n            left_sum = max(",
    "    let mut max_sum = 0;\n    let mut sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut sum_so_far = 0;\n    let mut i = 0;\n\n    while i < n {\n        sum += a[i as usize];\n        sum_so_far += a[i as usize];\n        if sum > max_sum {\n            max_sum = sum;\n        }\n        if sum_so_far > max_sum_so_far {\n            max_sum_so_far = sum_so_far;\n        }\n        i += 1;\n    }\n\n    let mut total_sum = sum_so_far * k;\n    let mut remaining_sum = total_sum - sum_so_far;\n    if remaining_sum > max_sum_so_far {\n        max_sum_so_far = remaining_sum;\n    }\n\n    let mut j = 0;\n    while j < n {\n        sum = 0;\n        let mut m = 0;\n        while m < n {\n            sum += a[m as usize];\n            if sum > max_sum {\n                max_sum = sum;\n            }\n            m += 1;\n        }\n        j += 1;\n    }\n\n    if max_sum > max_sum_so_far {\n        max_sum\n    } else {\n        max_sum_so_far\n    }",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    while i < n * k {\n        curr_sum += a[i as usize];\n        end += 1;\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_sum",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut e = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum == max_sum {\n            s = i + 1;\n            break;\n        }\n    }\n    let mut curr_sum = 0;\n    for i in (0..n).rev() {\n        curr_sum += a[i as usize];\n        if curr_sum == max_sum {\n            e = i - 1;\n            break;\n        }\n    }\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum == max_sum {\n            e = i;\n            break;\n        }\n    }\n    let mut curr_sum = 0;\n    for i in (0..n).rev() {\n        curr_sum += a[i as usize];\n        if curr_sum == max_sum {\n            s = i;\n            break;\n        }\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n    let mut ans = max_sum;\n    if sum > 0 {\n        ans = max_sum + sum * (k - 2);\n    }\n    if s > e {\n        ans = max(ans, max_",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut max_sum_end_here = 0;\n    let mut curr_sum_end_here = 0;\n    let mut max_sum_start_here = 0;\n    let mut curr_sum_start_here = 0;\n    let mut max_sum_start_here_index = 0;\n    let mut curr_sum_start_here_index = 0;\n    let mut max_sum_end_here_index = 0;\n    let mut curr_sum_end_here_index = 0;\n\n    for i in 0..n {\n        curr_sum_end_here += a[i as usize];\n        if curr_sum_end_here < 0 {\n            curr_sum_end_here = 0;\n            curr_sum_start_here_index = i + 1;\n        }\n        if curr_sum_end_here > max_sum_end_here {\n            max_sum_end_here = curr_sum_end_here;\n            max_sum_start_here_index = curr_sum_start_here_index;\n            max_sum_end_here_index = i;\n        }\n    }\n\n    for i in 0..n {\n        curr_sum_start_here += a[i as usize];\n        if curr_sum_start_here < 0 {\n            curr_sum_start_here = 0;\n            curr_sum_end_here_index = i + 1;\n        }\n        if curr_sum_start_here > max_sum_start_here {\n            max_sum_start_here = curr_sum_start_here;\n            max_sum_end_here_index = curr_sum_end_here_index;\n            max_sum_start_here_index = i;\n        }\n    }\n\n    for i in 0..n {\n        curr_sum_so_far += a[i as usize",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut max_sum = 0;\n    let mut max_start = 0;\n    let mut max_end = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = 0;\n    let mut min_ending_here = 0;\n    let mut min_start = 0;\n    let mut min_end = 0;\n    s = 0;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            min_start = s;\n            min_end = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    if max_so_far > 0 {\n        max_sum = max_so_far * k;\n    }\n\n    let mut min_sum = 0;\n    if min_so_far < 0 {\n        min_sum = min_so_far * k;\n    }\n\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n\n    let mut total_sum = sum * k;\n    let mut prefix_sum = 0;\n    for i in 0..start {\n        prefix_sum += a[i as usize];\n    }\n\n    let mut suffix_sum = 0;\n    for i in (end + 1)..n {\n        suffix_sum += a",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_so_far = std::isize::MIN;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_so_far = std::cmp::max(a[i as usize], max_so_far);\n    }\n\n    if max_so_far < 0 {\n        return max_so_far;\n    }\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        } else if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n    }\n\n    if max_sum == 0 {\n        max_sum = max_so_far;\n    }\n\n    let mut curr_val = max_sum;\n    for i in 0..start {\n        curr_val += a[i as usize];\n        max_sum = std::cmp::max(max_sum, curr_val);\n    }\n\n    curr_val = max_sum;\n    for i in (end + 1)..n {\n        curr_val += a[i as usize];\n        max_sum = std::cmp::max(max_sum, curr_val);\n    }\n\n    max_sum * k - (sum_array(&a) - max_sum)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut max_sum_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n\n    for i in 0..n {\n        max_sum_ending_here += a[i as usize];\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0;\n            s = i + 1;\n        } else if max_sum_ending_here > max_sum_so_far {\n            max_sum_so_far = max_sum_ending_here;\n            start = s;\n            end = i;\n        }\n    }\n\n    if k == 1 {\n        return max_sum_so_far;\n    }\n\n    max_sum = max_sum_so_far;\n    curr_sum = max_sum_so_far;\n    for i in 0..n {\n        curr_sum = curr_sum - a[i as usize] + a[((i + n) % n) as usize];\n        max_sum = max(max_sum, curr_sum);\n    }\n\n    max_sum + (k - 2) * max_sum_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut max_start = 0;\n    let mut max_end = 0;\n    let mut max_sum = std::isize::MIN;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            max_start = s;\n            max_end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut min_start = 0;\n    let mut min_end = 0;\n    let mut min_sum = std::isize::MAX;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            min_start = s;\n            min_end = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut wrap_sum = 0;\n    for i in 0..n {\n        wrap_sum += a[i as usize];\n    }\n\n    if k == 1 {\n        return max_so_far;\n    }\n\n    max_sum = max_so_far;\n    if wrap_sum > 0 {\n        max_sum = max(max_sum, max_so_far + (k - 2) * wrap_sum);\n    }\n\n    max_sum = max(max_sum, max_so_",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n*k {\n        max_ending_here += a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..(n * k) {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far"
  ]
}