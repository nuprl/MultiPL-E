{
  "name": "mbpp_282_sub_list",
  "language": "rs",
  "prompt": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut v = Vec::new();\n    for i in 0..nums1.len() {\n        v.push(nums1[i] - nums2[i]);\n    }\n    v",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result"
  ]
}