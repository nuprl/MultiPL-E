{
  "name": "mbpp_748_capital_words_spaces",
  "language": "rs",
  "prompt": "/// Write a function to put spaces between words starting with capital letters in a given string.\nfn capital_words_spaces(str1: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = capital_words_spaces;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"Python\"));\n    assert_eq!(candidate(String::from(\"PythonProgrammingExamples\")), String::from(\"Python Programming Examples\"));\n    assert_eq!(candidate(String::from(\"GetReadyToBeCodingFreak\")), String::from(\"Get Ready To Be Coding Freak\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = String::new();\n    let mut prev_char = ' ';\n    for c in str1.chars() {\n        if c.is_uppercase() && prev_char != ' ' {\n            result.push(' ');\n        }\n        result.push(c);\n        prev_char = c;\n    }\n    result",
    "    let mut result = String::new();\n    let mut prev_char = ' ';\n\n    for c in str1.chars() {\n        if c.is_uppercase() && prev_char.is_lowercase() {\n            result.push(' ');\n        }\n        result.push(c);\n        prev_char = c;\n    }\n\n    result",
    "    let mut result = String::new();\n    let mut last_char_is_capital = false;\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            if last_char_is_capital {\n                result.push(' ');\n            }\n            last_char_is_capital = true;\n        } else {\n            last_char_is_capital = false;\n        }\n        result.push(c);\n    }\n    result",
    "    let mut res = String::new();\n    let mut prev = ' ';\n    for c in str1.chars() {\n        if prev.is_lowercase() && c.is_uppercase() {\n            res.push(' ');\n        }\n        res.push(c);\n        prev = c;\n    }\n    res",
    "    let mut result = String::new();\n    let mut prev_char_is_capital = false;\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            if prev_char_is_capital {\n                result.push(' ');\n            }\n            prev_char_is_capital = true;\n        } else {\n            prev_char_is_capital = false;\n        }\n        result.push(c);\n    }\n    result",
    "    let mut result = String::new();\n    let mut prev_is_capital = false;\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            if prev_is_capital {\n                result.push(' ');\n            }\n            prev_is_capital = true;\n        } else {\n            prev_is_capital = false;\n        }\n        result.push(c);\n    }\n    result",
    "    let mut result = String::new();\n    let mut last_char_is_capital = false;\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            if last_char_is_capital {\n                result.push(' ');\n            }\n            last_char_is_capital = true;\n        } else {\n            last_char_is_capital = false;\n        }\n        result.push(c);\n    }\n    result",
    "    let mut result = String::new();\n    let mut prev_char = ' ';\n    for c in str1.chars() {\n        if c.is_uppercase() && prev_char != ' ' {\n            result.push(' ');\n        }\n        result.push(c);\n        prev_char = c;\n    }\n    result",
    "    let mut result = String::new();\n    let mut last_char = ' ';\n    for c in str1.chars() {\n        if c.is_uppercase() && last_char.is_lowercase() {\n            result.push(' ');\n        }\n        result.push(c);\n        last_char = c;\n    }\n    result",
    "    let mut result = String::new();\n    let mut last_char = ' ';\n    for c in str1.chars() {\n        if c.is_uppercase() && last_char.is_lowercase() {\n            result.push(' ');\n        }\n        result.push(c);\n        last_char = c;\n    }\n    result",
    "    let mut result = String::new();\n    let mut prev_char = ' ';\n    for c in str1.chars() {\n        if c.is_uppercase() && prev_char.is_lowercase() {\n            result.push(' ');\n        }\n        result.push(c);\n        prev_char = c;\n    }\n    result",
    "    let mut result = String::new();\n    let mut prev_char = ' ';\n    for c in str1.chars() {\n        if prev_char.is_uppercase() && c.is_uppercase() {\n            result.push(' ');\n        }\n        result.push(c);\n        prev_char = c;\n    }\n    result",
    "    let mut result = String::new();\n    let mut prev_char = ' ';\n    for ch in str1.chars() {\n        if prev_char.is_uppercase() && ch.is_lowercase() {\n            result.push(' ');\n        }\n        result.push(ch);\n        prev_char = ch;\n    }\n    result",
    "    let mut result = String::new();\n    let mut last_char = ' ';\n    for c in str1.chars() {\n        if c.is_uppercase() && last_char != ' ' {\n            result.push(' ');\n        }\n        result.push(c);\n        last_char = c;\n    }\n    result",
    "    let mut result = String::new();\n    let mut last_char = ' ';\n    for c in str1.chars() {\n        if c.is_uppercase() && last_char != ' ' {\n            result.push(' ');\n        }\n        result.push(c);\n        last_char = c;\n    }\n    result",
    "    let mut result = String::new();\n    let mut last_char_was_capital = false;\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            if last_char_was_capital {\n                result.push(' ');\n            }\n            last_char_was_capital = true;\n        } else {\n            last_char_was_capital = false;\n        }\n        result.push(c);\n    }\n    result",
    "    let mut result = String::new();\n    let mut prev_char = ' ';\n    for c in str1.chars() {\n        if c.is_uppercase() && prev_char != ' ' {\n            result.push(' ');\n        }\n        result.push(c);\n        prev_char = c;\n    }\n    result",
    "    let mut result = String::new();\n    let mut prev_char = ' ';\n    for c in str1.chars() {\n        if prev_char.is_lowercase() && c.is_uppercase() {\n            result.push(' ');\n        }\n        result.push(c);\n        prev_char = c;\n    }\n    result",
    "    let mut result = String::new();\n    let mut prev_char = ' ';\n    for ch in str1.chars() {\n        if ch.is_uppercase() && prev_char != ' ' {\n            result.push(' ');\n        }\n        result.push(ch);\n        prev_char = ch;\n    }\n    result",
    "    let mut result = String::new();\n    let mut last_char = ' ';\n    for c in str1.chars() {\n        if c.is_uppercase() && last_char.is_lowercase() {\n            result.push(' ');\n        }\n        result.push(c);\n        last_char = c;\n    }\n    result"
  ]
}