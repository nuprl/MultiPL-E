{
  "name": "mbpp_118_string_to_list",
  "language": "rs",
  "prompt": "/// Write a function to convert a string to a vector of strings split on the space character.\nfn string_to_list(string: String) -> Vec<String> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = string_to_list;\n    assert_eq!(candidate(String::from(\"python programming\")), vec![String::from(\"python\"), String::from(\"programming\")]);\n    assert_eq!(candidate(String::from(\"lists tuples strings\")), vec![String::from(\"lists\"), String::from(\"tuples\"), String::from(\"strings\")]);\n    assert_eq!(candidate(String::from(\"write a program\")), vec![String::from(\"write\"), String::from(\"a\"), String::from(\"program\")]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list = Vec::new();\n    let mut current_word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(current_word);\n            current_word = String::new();\n        } else {\n            current_word.push(c);\n        }\n    }\n    list.push(current_word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    for word in string.split_whitespace() {\n        list.push(word.to_string());\n    }\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(' ').map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    for word in string.split_whitespace() {\n        list.push(word.to_string());\n    }\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    for word in string.split_whitespace() {\n        list.push(word.to_string());\n    }\n    list",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    let mut result: Vec<String> = Vec::new();\n    let mut current_word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            result.push(current_word);\n            current_word = String::new();\n        } else {\n            current_word.push(c);\n        }\n    }\n    result.push(current_word);\n    result",
    "    let mut list: Vec<String> = Vec::new();\n    let mut current_word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(current_word);\n            current_word = String::new();\n        } else {\n            current_word.push(c);\n        }\n    }\n    list.push(current_word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(' ').map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list = Vec::new();\n    let mut word = String::new();\n    for ch in string.chars() {\n        if ch == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(ch);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(' ').map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut result = Vec::new();\n    let mut current_word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            result.push(current_word);\n            current_word = String::new();\n        } else {\n            current_word.push(c);\n        }\n    }\n    result.push(current_word);\n    result",
    "    string.split(' ').map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(' ').map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    for word in string.split_whitespace() {\n        list.push(word.to_string());\n    }\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    for s in string.split_whitespace() {\n        list.push(s.to_string());\n    }\n    list",
    "    let mut list = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n\n    list.push(word);\n\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    for word in string.split_whitespace() {\n        list.push(word.to_string());\n    }\n    list",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut current_word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(current_word);\n            current_word = String::new();\n        } else {\n            current_word.push(c);\n        }\n    }\n    list.push(current_word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut result: Vec<String> = Vec::new();\n    let mut current_word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            result.push(current_word);\n            current_word = String::new();\n        } else {\n            current_word.push(c);\n        }\n    }\n    result.push(current_word);\n    result",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    for word in string.split(\" \") {\n        list.push(word.to_string());\n    }\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut current_word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(current_word);\n            current_word = String::new();\n        } else {\n            current_word.push(c);\n        }\n    }\n    list.push(current_word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n\n    list.push(word);\n\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut current_word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(current_word);\n            current_word = String::new();\n        } else {\n            current_word.push(c);\n        }\n    }\n    list.push(current_word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut words: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            words.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    words.push(word);\n    words",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(' ').map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(' ').map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    for word in string.split_whitespace() {\n        list.push(word.to_string());\n    }\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split_whitespace().map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list = Vec::new();\n    let mut word = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    let mut list: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    for c in string.chars() {\n        if c == ' ' {\n            list.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    list.push(word);\n    list",
    "    string.split(\" \").map(|s| s.to_string()).collect()",
    "    string.split(\" \").map(|s| s.to_string()).collect()"
  ]
}