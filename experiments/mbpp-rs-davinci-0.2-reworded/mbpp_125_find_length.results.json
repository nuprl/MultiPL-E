{
  "name": "mbpp_125_find_length",
  "language": "rs",
  "prompt": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n\n        count += 1;\n\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, count);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp0gw00sxp.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmprvuhatg7.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        count += 1;\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, count);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpr5eelxrz.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max(max_diff, count_zero - count_one);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuvsv853l.rs:12:20\n   |\n12 |         max_diff = max(max_diff, count_zero - count_one);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpfkvbskto.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if map.contains_key(&count) {\n            max_length = max(max_length, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp_trt4ebj.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_trt4ebj.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - map[&count]);\n   |                          ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n16 |             max_length = map(max_length, i as isize - map[&count]);\n   |                          ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '1' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpt8hfnp0n.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpt8hfnp0n.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpt8hfnp0n.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp3c59j0hx.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp3c59j0hx.rs:15:23\n   |\n15 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n15 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmptvhgdc4n.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    let mut zero_count = 0;\n    let mut one_count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            one_count += 1;\n        }\n        diff = zero_count - one_count;\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpps56d14s.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for ch in string.chars().rev() {\n        if ch == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpz66hoit4.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp7x1pc0tb.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpi9g6pter.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpi9g6pter.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpnircfmb8.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpfkvbskto.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n\n    for i in 0..string.len() {\n        for j in i..string.len() {\n            if string.chars().nth(j).unwrap() == '0' {\n                count_0 += 1;\n            } else {\n                count_1 += 1;\n            }\n\n            if count_0 == count_1 {\n                max_diff = std::cmp::max(max_diff, (j - i + 1) as isize);\n            }\n        }\n        count_0 = 0;\n        count_1 = 0;\n    }\n\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp29iqlqlg.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmptvhgdc4n.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpkk4uj72w.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    let mut max_diff = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp92f19ar4.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_of_1 = 0;\n    let mut count_of_0 = 0;\n    for c in string.chars() {\n        if c == '1' {\n            count_of_1 += 1;\n        } else {\n            count_of_0 += 1;\n        }\n        max_diff = max_diff.max(count_of_1 - count_of_0);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmptfdbt6ef.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if map.contains_key(&count) {\n            max_length = max(max_length, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp_trt4ebj.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_trt4ebj.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - map[&count]);\n   |                          ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n16 |             max_length = map(max_length, i as isize - map[&count]);\n   |                          ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpaxoq5nnw.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaxoq5nnw.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut count = 0;\n    let mut max_count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        max_count = max(max_count, count);\n    }\n    max_count\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp96v9ic3i.rs:14:21\n   |\n14 |         max_count = max(max_count, count);\n   |                     ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpezysrhpf.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpezysrhpf.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash_map.get(&count).unwrap());\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpi9g6pter.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpkk4uj72w.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_length = max(max_length, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp31nxcn_4.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp31nxcn_4.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - map.get(&count).unwrap());\n   |                          ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_length = map(max_length, i as isize - map.get(&count).unwrap());\n   |                          ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 * 2);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 * 2);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpyz4d914v.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        let diff = count_zero - count_one;\n        if diff < 0 {\n            count_zero = 0;\n            count_one = 0;\n        } else {\n            max_diff = std::cmp::max(max_diff, diff);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmptvhgdc4n.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpfkvbskto.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmprvuhatg7.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, ch) in string.chars().enumerate() {\n        if ch == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpw2rv3s93.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpw2rv3s93.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpipc4kirz.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpx29wlkpt.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpx29wlkpt.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpkk4uj72w.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n\n    zeros = 0;\n    ones = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpd4l48s7k.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmptejt9lkz.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmptejt9lkz.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - hash.get(&count).unwrap());\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpcctdyw9r.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpcctdyw9r.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpfkvbskto.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for i in 0..string.len() {\n        let c = string.chars().nth(i).unwrap();\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp5juwh3ew.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, (count_0 + count_1) as isize);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, (count_0 + count_1) as isize);\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpwrnhgrui.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpqsmenjsl.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpqsmenjsl.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - hash_map.get(&count).unwrap());\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut zeros = 0;\n    let mut ones = 0;\n    let mut max_diff = 0;\n    let mut diff = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n\n        diff = zeros - ones;\n\n        if diff < 0 {\n            diff = -diff;\n        }\n\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpdcv2zc05.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpipc4kirz.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpiiqlug_f.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpiiqlug_f.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpiiqlug_f.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash_map[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut curr_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            curr_diff -= 1;\n        } else {\n            curr_diff += 1;\n        }\n        if curr_diff < 0 {\n            curr_diff = 0;\n        }\n        if curr_diff > max_diff {\n            max_diff = curr_diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmp0mxrlool.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        let diff = (count_zero - count_one).abs();\n        max_diff = max_diff.max(diff);\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp0x69eiqa.rs:14:45\n   |\n14 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    let mut i = 0;\n    let mut j = 0;\n    while j < string.len() {\n        if string.chars().nth(j).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max(max_diff, count_zero - count_one);\n        if max_diff < 0 {\n            while max_diff < 0 {\n                if string.chars().nth(i).unwrap() == '0' {\n                    count_zero -= 1;\n                } else {\n                    count_one -= 1;\n                }\n                i += 1;\n                max_diff = max(max_diff, count_zero - count_one);\n            }\n        }\n        j += 1;\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpccmof1uv.rs:14:20\n   |\n14 |         max_diff = max(max_diff, count_zero - count_one);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpccmof1uv.rs:23:28\n   |\n23 |                 max_diff = max(max_diff, count_zero - count_one);\n   |                            ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmputychuad.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmprvuhatg7.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len: isize = 0;\n    let mut count: isize = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_len = max_len.max(i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp6w_j69eo.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp6w_j69eo.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '1' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_length = max(max_length, i as isize - *map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpks1qt9yt.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpks1qt9yt.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - *map.get(&count).unwrap());\n   |                          ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_length = map(max_length, i as isize - *map.get(&count).unwrap());\n   |                          ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpfkvbskto.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpw1y4zthm.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        diff = count_0 - count_1;\n        if diff < 0 {\n            diff = -diff;\n        }\n        if diff > max_len {\n            max_len = diff;\n        }\n    }\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp5jqk0jg2.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero * 2);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero * 2);\n        }\n    }\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpnemra6kn.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zero_count = 0;\n    let mut one_count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            one_count += 1;\n        }\n        max_diff = max(max_diff, zero_count - one_count);\n        if zero_count < one_count {\n            zero_count = 0;\n            one_count = 0;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpemyb2zlo.rs:12:20\n   |\n12 |         max_diff = max(max_diff, zero_count - one_count);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '1' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmphquv_gyf.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmphquv_gyf.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - hash[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpeacs1sss.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        if count > max_diff {\n            max_diff = count;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    let mut max_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpzojax9p8.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpelet8gv1.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpm4xufoi0.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n        if max_diff == count_1 {\n            count_0 = 0;\n            count_1 = 0;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `6`', /tmp/tmp0pgm35o0.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = std::collections::HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = std::cmp::max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmptsl78qgt.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpfrf6_fu8.rs:12:20\n   |\n12 |         max_diff = max(max_diff, count_0 - count_1);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zero_count = 0;\n    let mut one_count = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            one_count += 1;\n        }\n\n        let diff = (zero_count - one_count).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpghx2vuur.rs:14:45\n   |\n14 |         let diff = (zero_count - one_count).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        let diff = (zeros - ones).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmponxxnex7.rs:12:35\n   |\n12 |         let diff = (zeros - ones).abs();\n   |                                   ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_1 = 0;\n    let mut count_0 = 0;\n    for c in string.chars() {\n        if c == '1' {\n            count_1 += 1;\n        } else {\n            count_0 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_1 - count_0);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmp0d6wfzbe.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpipc4kirz.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count == 0 {\n            max_length = i as isize + 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpjzc5asq6.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpjzc5asq6.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpjzc5asq6.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpeacs1sss.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpfkvbskto.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpxnqog9to.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpxnqog9to.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmputychuad.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_zero - count_one);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpfay0xd0e.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmputychuad.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, (count_0 + count_1) as isize);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, (count_0 + count_1) as isize);\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmprhjotscr.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff -= 1;\n        } else {\n            diff += 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        max_diff = max_diff.max(diff);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpwe57vudd.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpc1wlh3t4.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpc1wlh3t4.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n16 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpkk4uj72w.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmputychuad.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero * 2);\n        }\n    }\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero -= 1;\n        } else {\n            count_one -= 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero * 2);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpas5q8mhv.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpw1y4zthm.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = std::cmp::max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp_k_79tvh.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpmiewq747.rs:5:18\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpmiewq747.rs:5:42\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpmiewq747.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n16 |             max_len = map(max_len, i as isize - map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = std::collections::HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = std::cmp::max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp116_s8u3.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpazmwuaw9.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpazmwuaw9.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 * 2);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 * 2);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpy926hmcz.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        let diff = (count_0 - count_1).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpe5f83iwi.rs:12:40\n   |\n12 |         let diff = (count_0 - count_1).abs();\n   |                                        ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpazmwuaw9.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpazmwuaw9.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpipc4kirz.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpkk4uj72w.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp6xe1jxec.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp6xe1jxec.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if let Some(j) = hash.get(&count) {\n            max_len = max(max_len, i as isize - j);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpev3xz2hg.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpev3xz2hg.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - j);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero * 2);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero * 2);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpavcolwhj.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - *map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpku2c7gx5.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpku2c7gx5.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - *map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - *map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 -= 1;\n        } else {\n            count_1 -= 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp7_p7vo89.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp6umjdhpa.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpbcrzmmb4.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpbcrzmmb4.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpbcrzmmb4.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpkk4uj72w.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpi9g6pter.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len: isize = 0;\n    let mut count: isize = 0;\n    let mut hash: HashMap<isize, isize> = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max_len.max(i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp2aa4arun.rs:5:19\n  |\n5 |     let mut hash: HashMap<isize, isize> = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp2aa4arun.rs:5:43\n  |\n5 |     let mut hash: HashMap<isize, isize> = HashMap::new();\n  |                                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max = 0;\n    let mut count = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count == 0 {\n            max = i as isize + 1;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpjlo6wen2.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_zero - count_one);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpfay0xd0e.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0isize;\n    let mut count_zero = 0isize;\n    let mut count_one = 0isize;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n        if max_diff < 0 {\n            max_diff = 0;\n            count_zero = 0;\n            count_one = 0;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpogxihpsq.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpxd60gywt.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpxd60gywt.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpelet8gv1.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - *map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpku2c7gx5.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpku2c7gx5.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - *map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - *map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero * 2);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero * 2);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpyam5686v.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '1' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_length = std::cmp::max(max_length, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpdm415g3l.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpxk80anzq.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpxk80anzq.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n16 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n\n    count_0 = 0;\n    count_1 = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp4yd05mvq.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpdh3b54da.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpdh3b54da.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    let mut start = 0;\n    let mut end = 0;\n    while end < string.len() {\n        if string.chars().nth(end).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = max(max_diff, end as isize - start as isize + 1);\n        } else if count_0 > count_1 {\n            while count_0 > count_1 {\n                if string.chars().nth(start).unwrap() == '0' {\n                    count_0 -= 1;\n                } else {\n                    count_1 -= 1;\n                }\n                start += 1;\n            }\n        }\n        end += 1;\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpgza9rcmk.rs:15:24\n   |\n15 |             max_diff = max(max_diff, end as isize - start as isize + 1);\n   |                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        if count > max_diff {\n            max_diff = count;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        count += 1;\n        if zeros == ones {\n            max_diff = max(max_diff, count);\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpynpdm09n.rs:15:24\n   |\n15 |             max_diff = max(max_diff, count);\n   |                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpc1wlh3t4.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpc1wlh3t4.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n16 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        let diff = (count_0 - count_1).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpe5f83iwi.rs:12:40\n   |\n12 |         let diff = (count_0 - count_1).abs();\n   |                                        ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max = 0;\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        if count > max {\n            max = count;\n        }\n    }\n    max as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmputychuad.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '1' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp7dvuqnsb.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp7dvuqnsb.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp7dvuqnsb.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if map.contains_key(&count) {\n            max_length = max(max_length, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpncqj17t1.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpncqj17t1.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - map[&count]);\n   |                          ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n16 |             max_length = map(max_length, i as isize - map[&count]);\n   |                          ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpx29wlkpt.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpx29wlkpt.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpg9l4c9ok.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut curr_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            curr_diff += 1;\n        } else {\n            curr_diff -= 1;\n        }\n        if curr_diff < 0 {\n            curr_diff = 0;\n        }\n        max_diff = max(max_diff, curr_diff);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp6lff7zjw.rs:14:20\n   |\n14 |         max_diff = max(max_diff, curr_diff);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        max_diff = max(max_diff, count);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaf7x9i98.rs:14:20\n   |\n14 |         max_diff = max(max_diff, count);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpxk80anzq.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpxk80anzq.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n16 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmputychuad.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut curr_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            curr_diff -= 1;\n        } else {\n            curr_diff += 1;\n        }\n        if curr_diff < 0 {\n            curr_diff = 0;\n        }\n        if curr_diff > max_diff {\n            max_diff = curr_diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmp0mxrlool.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for ch in string.chars().rev() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpvi4xstfx.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp6umjdhpa.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if count < 0 {\n            count = 0;\n        }\n\n        if count > max_diff {\n            max_diff = count;\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n        if count_1 < count_0 {\n            count_1 = 0;\n            count_0 = 0;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpat7eo8mx.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpfkvbskto.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp6umjdhpa.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp383_x1p9.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp383_x1p9.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut len = 0;\n    let mut diff = 0;\n\n    while end < string.len() {\n        if string.chars().nth(end).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n\n        diff = count_0 - count_1;\n        if diff == 0 {\n            len = end - start + 1;\n            if len > max_len {\n                max_len = len;\n            }\n        }\n\n        end += 1;\n    }\n\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp0p27rqfa.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpsjegw952.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpsjegw952.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - hash_map[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmptvhgdc4n.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpi9g6pter.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpfjqdxy94.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, ch) in string.chars().enumerate() {\n        if ch == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpirxbxy9k.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpirxbxy9k.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for ch in string.chars().rev() {\n        if ch == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp4ujlayay.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmptvhgdc4n.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpdt0dexrj.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpdt0dexrj.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpkk4uj72w.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n\n    count_0 = 0;\n    count_1 = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmplop58rnr.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpeacs1sss.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = std::cmp::max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpnu6lys6k.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        count += if c == '1' { 1 } else { -1 };\n        if hash.contains_key(&count) {\n            max_length = max_length.max(i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp82mzkn6q.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for ch in string.chars().rev() {\n        if ch == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp4ujlayay.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpeacs1sss.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmprvuhatg7.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpeacs1sss.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmphnrz7lco.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmphnrz7lco.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - *map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpku2c7gx5.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpku2c7gx5.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - *map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - *map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max(max_diff, count_one - count_zero);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpeswi_se2.rs:12:20\n   |\n12 |         max_diff = max(max_diff, count_one - count_zero);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpg9l4c9ok.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpgbubsv14.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpgbubsv14.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash_map[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpm4xufoi0.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero * 2);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero * 2);\n        }\n    }\n\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp0h841v1k.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpipc4kirz.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpsy87o1ea.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp5afh1ged.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_zero - count_one);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpf7hslf1l.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zero_count = 0;\n    let mut one_count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            one_count += 1;\n        }\n        max_diff = std::cmp::max(max_diff, zero_count - one_count);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpxm__mm4_.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp5jfvjz0e.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp5jfvjz0e.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - hash[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpbu3q5sfs.rs:5:18\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpbu3q5sfs.rs:5:42\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpbu3q5sfs.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpltji4nrc.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = std::collections::HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if let Some(j) = map.get(&count) {\n            max_len = std::cmp::max(max_len, i as isize - j);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmprn6hte3h.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for ch in string.chars().rev() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpvi4xstfx.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpm4xufoi0.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp5afh1ged.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_zero - count_one);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpfay0xd0e.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmptvhgdc4n.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpmbp4hlot.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpmbp4hlot.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpipc4kirz.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpq5x61tvp.rs:5:18\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpq5x61tvp.rs:5:42\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpq5x61tvp.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut zeros = 0;\n    let mut ones = 0;\n    let mut max_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        max_diff = max(max_diff, (zeros - ones).abs());\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpj9ol_tdv.rs:12:20\n   |\n12 |         max_diff = max(max_diff, (zeros - ones).abs());\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpj9ol_tdv.rs:12:49\n   |\n12 |         max_diff = max(max_diff, (zeros - ones).abs());\n   |                                                 ^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0689.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_1 = 0;\n    let mut count_0 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_1 == count_0 {\n            max_diff = std::cmp::max(max_diff, count_1 * 2);\n        }\n    }\n    for i in 0..string.len() {\n        let mut count_1 = 0;\n        let mut count_0 = 0;\n        for j in i..string.len() {\n            if string.chars().nth(j).unwrap() == '0' {\n                count_0 += 1;\n            } else {\n                count_1 += 1;\n            }\n            if count_1 == count_0 {\n                max_diff = std::cmp::max(max_diff, count_1 * 2);\n            }\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpxs3dcwii.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if count == 0 {\n            max_diff = std::cmp::max(max_diff, count);\n        }\n    }\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if count < 0 {\n            max_diff = std::cmp::max(max_diff, count);\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmpeey9c156.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero -= 1;\n        } else {\n            count_one -= 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmptgg9xu0t.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpfoc07nz2.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpx29wlkpt.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpx29wlkpt.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        max_diff = max_diff.max(zeros - ones);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpa9i3kvwi.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        max_diff = std::cmp::max(max_diff, diff);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, ch) in string.chars().enumerate() {\n        count += if ch == '0' { 1 } else { -1 };\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpzr6n5a1s.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzr6n5a1s.rs:10:23\n   |\n10 |             max_len = max(max_len, i as isize - map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n10 |             max_len = map(max_len, i as isize - map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpazmwuaw9.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpazmwuaw9.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n\n    count_0 = 0;\n    count_1 = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp4yd05mvq.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut curr_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            curr_diff += 1;\n        } else {\n            curr_diff -= 1;\n        }\n        if curr_diff < 0 {\n            curr_diff = 0;\n        }\n        max_diff = max(max_diff, curr_diff);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp6lff7zjw.rs:14:20\n   |\n14 |         max_diff = max(max_diff, curr_diff);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpfkvbskto.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zero_count = 0;\n    let mut one_count = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            one_count += 1;\n        }\n\n        let diff = (zero_count - one_count).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpghx2vuur.rs:14:45\n   |\n14 |         let diff = (zero_count - one_count).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n\n        count += 1;\n\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, count);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp0gw00sxp.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpm09jsx36.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpm09jsx36.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - hash[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}