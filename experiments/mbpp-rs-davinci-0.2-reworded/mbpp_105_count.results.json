{
  "name": "mbpp_105_count",
  "language": "rs",
  "prompt": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    lst.iter().filter(|&x| x).count() as isize\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpknojb7rv.rs:3:28\n  |\n3 |     lst.iter().filter(|&x| x).count() as isize\n  |                            ^ expected `bool`, found `&bool`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     lst.iter().filter(|&x| *x).count() as isize\n  |                            +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    lst.iter().fold(0, |acc, &x| if x { acc + 1 } else { acc })\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count: isize = 0;\n    for i in lst {\n        if i == true {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for b in lst {\n        if b {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    lst.iter().filter(|&x| *x).count() as isize\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for x in lst.iter() {\n        if *x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i == true {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    lst.iter().filter(|&x| *x).count() as isize\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut cnt = 0;\n    for i in lst {\n        if i {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut cnt = 0;\n    for i in lst {\n        if i {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut cnt = 0;\n    for b in lst {\n        if b {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for b in lst {\n        if b {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for b in lst.iter() {\n        if *b {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for b in lst {\n        if b {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    lst.iter().fold(0, |acc, x| if *x { acc + 1 } else { acc })\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for elem in lst {\n        if elem {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for b in lst {\n        if b {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for b in lst {\n        if b {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for x in lst {\n        if x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut cnt = 0;\n    for i in lst {\n        if i {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    lst.iter().fold(0, |acc, &x| if x { acc + 1 } else { acc })\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for x in lst {\n        if x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for x in lst {\n        if x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut cnt = 0;\n    for i in lst {\n        if i {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    lst.iter().filter(|&x| *x).count() as isize\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    0\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `2`', /tmp/tmpsibaroiq.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i == true {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    lst.iter().filter(|&x| *x).count() as isize\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for x in lst {\n        if x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for b in lst {\n        if b {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for x in lst {\n        if x {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut cnt = 0;\n    for i in lst {\n        if i {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for item in lst {\n        if item {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut cnt = 0;\n    for i in lst {\n        if i {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n    let mut count = 0;\n    for i in lst {\n        if i {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}