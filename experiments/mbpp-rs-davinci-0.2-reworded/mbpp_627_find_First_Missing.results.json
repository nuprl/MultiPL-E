{
  "name": "mbpp_627_find_First_Missing",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut index = 0;\n    let mut missing_number = 0;\n    let mut found = false;\n    let mut array_length = array.len();\n    while index < array_length {\n        if array[index] != index as isize + 1 {\n            missing_number = index as isize + 1;\n            found = true;\n            break;\n        }\n        index += 1;\n    }\n    if found {\n        missing_number\n    } else {\n        array_length as isize + 1\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmphoxrbuuf.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return array.len() as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp2otrukkp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            }\n            j = m - 1;\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut missing = 1;\n    for i in array {\n        if i == missing {\n            missing += 1;\n        }\n    }\n    missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `0`', /tmp/tmp50z_rwix.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize + 1 {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    if array[i] == i as isize + 1 {\n        i as isize + 2\n    } else {\n        i as isize + 1\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpb4ilrbv_.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 == array[j] {\n            i += 1;\n            j += 1;\n        } else {\n            return array[i] + 1;\n        }\n    }\n    return array[i] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpe5yxxqjc.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `4`', /tmp/tmpyp81k9s2.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `4`', /tmp/tmpyp81k9s2.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpv0qgym7t.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut n = array.len();\n    while j < n {\n        if array[i] != array[j] {\n            if array[i] + 1 != array[j] {\n                return array[i] + 1;\n            }\n            i += 1;\n        }\n        j += 1;\n    }\n    return array[n - 1] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpmq6fh8vm.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut missing = 0;\n    while i < array.len() {\n        if array[i] != j {\n            missing = j;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmp1gs3_uyg.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return (mid + 1) as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    if array[i] == i as isize {\n        return i as isize + 1;\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpv0qgym7t.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    if array[i] == i as isize {\n        i as isize + 1\n    } else {\n        i as isize\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpv0qgym7t.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 != array[j] {\n            return array[i] + 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    return array[i] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpzsotdwkk.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpcu9kp897.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            }\n            j = m - 1;\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut n = array.len();\n    while j < n {\n        if array[i] == array[j] {\n            j += 1;\n        } else if array[i] + 1 == array[j] {\n            i += 1;\n            j += 1;\n        } else {\n            return array[i] + 1;\n        }\n    }\n    return array[n - 1] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpnz207rrq.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpcu9kp897.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `4`', /tmp/tmpyp81k9s2.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp2otrukkp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    let mut result = -1;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            result = mid as isize;\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `4`', /tmp/tmppyil633a.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut n = array.len();\n    while j < n {\n        if array[i] == array[j] {\n            j += 1;\n        } else if array[i] + 1 == array[j] {\n            i += 1;\n            j += 1;\n        } else {\n            return array[i] + 1;\n        }\n    }\n    return array[n - 1] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpnz207rrq.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let n = array.len();\n    while i < n {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return n as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpcu9kp897.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut n = array.len();\n    while j < n {\n        if array[i] == array[j] {\n            j += 1;\n        } else {\n            i += 1;\n            array[i] = array[j];\n            j += 1;\n        }\n    }\n    let mut k = 0;\n    while k <= i {\n        if array[k] != k as isize + 1 {\n            return k as isize + 1;\n        }\n        k += 1;\n    }\n    return i as isize + 2;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "warning: variable does not need to be mutable\n --> /tmp/tmpddspqlhh.rs:5:9\n  |\n5 |     let mut n = array.len();\n  |         ----^\n  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0596]: cannot borrow `array` as mutable, as it is not declared as mutable\n  --> /tmp/tmpddspqlhh.rs:11:13\n   |\n2  | fn find_First_Missing(array: Vec<isize>) -> isize {\n   |                       ----- help: consider changing this to be mutable: `mut array`\n...\n11 |             array[i] = array[j];\n   |             ^^^^^ cannot borrow as mutable\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid > 0 && array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpj3foodbu.rs:12:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut first_missing = 1;\n    for i in array {\n        if i == first_missing {\n            first_missing += 1;\n        }\n    }\n    first_missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `0`', /tmp/tmpacgv16l7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let m = (i + j) / 2;\n        if array[m] == m as isize {\n            i = m + 1;\n        } else {\n            j = m;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp689v8798.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 != array[j] {\n            return array[i] + 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `4`', /tmp/tmp7d_lx_ne.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `4`', /tmp/tmpyp81k9s2.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `4`', /tmp/tmpyp81k9s2.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] == m as isize + 1 {\n            i = m + 1;\n        } else {\n            j = m - 1;\n        }\n    }\n    i as isize + 1\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp7k629cyh.rs:10:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = 0;\n    let mut found = false;\n    while i < array.len() {\n        if array[i] != j {\n            k = i;\n            found = true;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    if found {\n        array[k]\n    } else {\n        array[array.len() - 1] + 1\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `4`', /tmp/tmp6_sxew9e.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp2otrukkp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid > 0 && array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    if array[mid] == mid as isize {\n        return mid as isize + 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpr74unu28.rs:12:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    if array[i] == i as isize {\n        i as isize + 1\n    } else {\n        i as isize\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            }\n            j = m - 1;\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpcu9kp897.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let m = (i + j) / 2;\n        if array[m] == m as isize {\n            i = m + 1;\n        } else {\n            j = m;\n        }\n    }\n    if i == array[i] {\n        i as isize + 1\n    } else {\n        i as isize\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp0c3een6w.rs:13:13\n   |\n13 |     if i == array[i] {\n   |             ^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n13 |     if i == array[i].try_into().unwrap() {\n   |                     ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp2otrukkp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return array.len() as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    if array[i] == i as isize {\n        i as isize + 1\n    } else {\n        i as isize\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    if array[i] == i as isize {\n        i as isize + 1\n    } else {\n        i as isize\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid > 0 && array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    if array[mid] == mid as isize {\n        return mid as isize + 1;\n    }\n    return mid as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp5z7vgt4g.rs:12:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    if i == array.len() - 1 && array[i] == i as isize {\n        i as isize + 1\n    } else {\n        i as isize\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp2otrukkp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid > 0 && array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    if array[mid] == mid as isize {\n        return mid as isize + 1;\n    }\n    return mid as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp5z7vgt4g.rs:12:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize + 1 {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    i as isize + 1\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmp3fi8cc33.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp2otrukkp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = i + (j - i) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid > 0 && array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    if array[mid] == mid as isize {\n        return mid as isize + 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpr74unu28.rs:12:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpcu9kp897.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize + 1 {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    return i as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpi93jflnv.rs:10:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = i + (j - i) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            }\n            j = m - 1;\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `4`', /tmp/tmpyp81k9s2.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpcu9kp897.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 == array[j] {\n            i += 1;\n            j += 1;\n        } else {\n            return array[i] + 1;\n        }\n    }\n    return array[i] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpe5yxxqjc.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return (mid + 1) as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpcu9kp897.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpcu9kp897.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 != array[j] {\n            return array[i] + 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    return array[i] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpzsotdwkk.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut index = 0;\n    let mut result = 0;\n    while index < array.len() {\n        if array[index] != index as isize {\n            result = index as isize;\n            break;\n        }\n        index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `4`', /tmp/tmpcc6da8rr.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut missing = 0;\n    while i < array.len() {\n        if array[i] != j {\n            missing = j;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmp1gs3_uyg.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] == m as isize {\n            i = m + 1;\n        } else {\n            j = m - 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp7i2pldth.rs:10:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut found = false;\n    while i < array.len() {\n        if array[i] != j {\n            found = true;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    if found {\n        j\n    } else {\n        j\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpu7e5pgyd.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpz19c5rzt.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = i + (j - i) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            }\n            j = m - 1;\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp2otrukkp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let m = (i + j) / 2;\n        if array[m] == m as isize {\n            i = m + 1;\n        } else {\n            j = m;\n        }\n    }\n    if array[i] == i as isize {\n        i as isize + 1\n    } else {\n        i as isize\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut min = 0;\n    let mut max = array.len() as isize;\n    let mut mid = 0;\n    while min < max {\n        mid = (min + max) / 2;\n        if array[mid as usize] == mid {\n            min = mid + 1;\n        } else {\n            max = mid;\n        }\n    }\n    return min;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    if array[i] == i as isize {\n        i as isize + 1\n    } else {\n        i as isize\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = i + (j - i) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut min = 1;\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] == min {\n            min += 1;\n            i += 1;\n        } else {\n            return min;\n        }\n    }\n    return min;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmp2s_4zrz8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] == array[j] {\n            j += 1;\n        } else if array[i] + 1 == array[j] {\n            i += 1;\n            j += 1;\n        } else {\n            return array[i] + 1;\n        }\n    }\n    return array[i] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpzftfbtms.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let m = i + (j - i) / 2;\n        if array[m] == m as isize {\n            i = m + 1;\n        } else {\n            j = m;\n        }\n    }\n    if array[i] == i as isize {\n        i as isize + 1\n    } else {\n        i as isize\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return array.len() as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpv0qgym7t.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut missing = 0;\n    while i < array.len() {\n        if array[i] != j {\n            missing = j;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmp1gs3_uyg.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = i + (j - i) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            }\n            j = m - 1;\n        } else {\n            i = m + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpcu9kp897.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 == array[j] {\n            i += 1;\n            j += 1;\n        } else {\n            return array[i] + 1;\n        }\n    }\n    return array[i] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpe5yxxqjc.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut missing = 0;\n    while i < array.len() {\n        if array[i] != j {\n            missing = j;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmp1gs3_uyg.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            }\n            j = m - 1;\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            }\n            j = m - 1;\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid > 0 && array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    if mid == array.len() - 1 {\n        return array.len() as isize;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmprlnxp95l.rs:12:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp2otrukkp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid > 0 && array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp_h2awtl8.rs:12:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}