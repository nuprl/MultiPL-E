{
  "name": "mbpp_632_move_zero",
  "language": "rs",
  "prompt": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut index = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list[index] = num_list[i];\n            index += 1;\n        }\n    }\n    for i in index..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - i - 1] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpxe_o2xtv.rs:13:18\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpxe_o2xtv.rs:13:18\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpxe_o2xtv.rs:13:9\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            zero_count += 1;\n            num_list.remove(index);\n        } else {\n            index += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n            num_list.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    num_list.extend(vec![0; zero_count]);\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n        i += 1;\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[index - zero_count] = num_list[index];\n        }\n        index += 1;\n    }\n    num_list.truncate(num_list.len() - zero_count);\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4]`,\n right: `[1, 2, 3, 4, 0, 0]`', /tmp/tmp2bnyb5mo.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - 1 - i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpqj6crrun.rs:13:9\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - 1 - i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpqj6crrun.rs:13:9\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in num_list.len() - zero_count..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    num_list.extend(vec![0; zero_count]);\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut j = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i];\n            j += 1;\n        }\n    }\n    for i in j..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - 1 - i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpqj6crrun.rs:13:9\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n            num_list.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n            num_list.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - 1 - i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpqj6crrun.rs:13:9\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - 1 - i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpqj6crrun.rs:13:9\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    num_list.extend(vec![0; zero_count]);\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut num_zero = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            num_zero += 1;\n        } else {\n            num_list[i - num_zero] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - num_zero)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() - zero_count {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            num_list.push(0);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            zero_count += 1;\n            num_list.remove(index);\n        } else {\n            index += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in num_list.len() - zero_count..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in num_list.len() - zero_count..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while i < num_list.len() {\n        if num_list[i] != 0 {\n            num_list.swap(i, j);\n            j += 1;\n        }\n        i += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i];\n            count += 1;\n        }\n    }\n    while count < num_list.len() {\n        num_list[count] = 0;\n        count += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut zero_list = Vec::new();\n    let mut non_zero_list = Vec::new();\n\n    for num in num_list {\n        if num == 0 {\n            zero_list.push(num);\n        } else {\n            non_zero_list.push(num);\n        }\n    }\n\n    non_zero_list.append(&mut zero_list);\n\n    non_zero_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut zero_count = 0;\n    let mut num_list = num_list;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else if zero_count > 0 {\n            num_list[i - zero_count] = num_list[i];\n            num_list[i] = 0;\n        }\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut zero_list: Vec<isize> = Vec::new();\n    let mut non_zero_list: Vec<isize> = Vec::new();\n    for num in num_list {\n        if num == 0 {\n            zero_list.push(num);\n        } else {\n            non_zero_list.push(num);\n        }\n    }\n    non_zero_list.append(&mut zero_list);\n    non_zero_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - 1 - i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpqj6crrun.rs:13:9\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - 1 - i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpqj6crrun.rs:13:9\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n            num_list.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_index = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list.swap(i, zero_index);\n            zero_index += 1;\n        }\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_index = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list.swap(i, zero_index);\n            zero_index += 1;\n        }\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - 1 - i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpqj6crrun.rs:13:9\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list[i] = num_list[j];\n            i += 1;\n        }\n        j += 1;\n    }\n    while i < num_list.len() {\n        num_list[i] = 0;\n        i += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - i - 1] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpxe_o2xtv.rs:13:18\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpxe_o2xtv.rs:13:18\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpxe_o2xtv.rs:13:9\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[index - zero_count] = num_list[index];\n        }\n        index += 1;\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - 1 - i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpw5d95unf.rs:15:18\n   |\n15 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpw5d95unf.rs:15:18\n   |\n15 |         num_list[num_list.len() - 1 - i] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpw5d95unf.rs:15:9\n   |\n15 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - 1 - i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpqj6crrun.rs:13:9\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_index = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list.swap(i, zero_index);\n            zero_index += 1;\n        }\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n            num_list.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    num_list.extend(vec![0; zero_count]);\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut index = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list[index] = num_list[i];\n            index += 1;\n        }\n    }\n    while index < num_list.len() {\n        num_list[index] = 0;\n        index += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - i - 1] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpxe_o2xtv.rs:13:18\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpxe_o2xtv.rs:13:18\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpxe_o2xtv.rs:13:9\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in num_list.len() - zero_count..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    let len = num_list.len();\n    while j < len {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - 1 - i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpqj6crrun.rs:13:9\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - i - 1] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpxe_o2xtv.rs:13:18\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpxe_o2xtv.rs:13:18\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpxe_o2xtv.rs:13:9\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut index = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list[index] = num_list[i];\n            index += 1;\n        }\n    }\n    for i in index..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut zero_count = 0;\n    for num in num_list {\n        if num == 0 {\n            zero_count += 1;\n        } else {\n            result.push(num);\n        }\n    }\n    for _ in 0..zero_count {\n        result.push(0);\n    }\n    result\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while i < num_list.len() {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i];\n            j += 1;\n        }\n        i += 1;\n    }\n    while j < num_list.len() {\n        num_list[j] = 0;\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut zero_list: Vec<isize> = Vec::new();\n    let mut non_zero_list: Vec<isize> = Vec::new();\n\n    for num in num_list {\n        if num == 0 {\n            zero_list.push(num);\n        } else {\n            non_zero_list.push(num);\n        }\n    }\n\n    non_zero_list.append(&mut zero_list);\n    non_zero_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while i < num_list.len() {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i];\n            j += 1;\n        }\n        i += 1;\n    }\n    while j < num_list.len() {\n        num_list[j] = 0;\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in num_list.len() - zero_count..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i];\n            count += 1;\n        }\n    }\n    while count < num_list.len() {\n        num_list[count] = 0;\n        count += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            zero_count += 1;\n            num_list.remove(index);\n        } else {\n            index += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[index - zero_count] = num_list[index];\n        }\n        index += 1;\n    }\n    while zero_count > 0 {\n        num_list[num_list.len() - zero_count] = 0;\n        zero_count -= 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123889,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpuy_p4pe8.rs:15:18\n   |\n15 |         num_list[num_list.len() - zero_count] = 0;\n   |         ---------^^^^^^^^^^^^^^--------------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpuy_p4pe8.rs:15:18\n   |\n15 |         num_list[num_list.len() - zero_count] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpuy_p4pe8.rs:15:9\n   |\n15 |         num_list[num_list.len() - zero_count] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            zero_count += 1;\n            num_list.remove(index);\n        } else {\n            index += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while i < num_list.len() {\n        if num_list[i] != 0 {\n            num_list.swap(i, j);\n            j += 1;\n        }\n        i += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in num_list.len() - zero_count..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            num_list.remove(index);\n            zero_count += 1;\n        } else {\n            index += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n            num_list.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[index - zero_count] = num_list[index];\n        }\n        index += 1;\n    }\n    while zero_count > 0 {\n        num_list[num_list.len() - zero_count] = 0;\n        zero_count -= 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123889,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpuy_p4pe8.rs:15:18\n   |\n15 |         num_list[num_list.len() - zero_count] = 0;\n   |         ---------^^^^^^^^^^^^^^--------------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpuy_p4pe8.rs:15:18\n   |\n15 |         num_list[num_list.len() - zero_count] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpuy_p4pe8.rs:15:9\n   |\n15 |         num_list[num_list.len() - zero_count] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[index - zero_count] = num_list[index];\n        }\n        index += 1;\n    }\n    while zero_count > 0 {\n        num_list[num_list.len() - zero_count] = 0;\n        zero_count -= 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123889,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpuy_p4pe8.rs:15:18\n   |\n15 |         num_list[num_list.len() - zero_count] = 0;\n   |         ---------^^^^^^^^^^^^^^--------------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpuy_p4pe8.rs:15:18\n   |\n15 |         num_list[num_list.len() - zero_count] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpuy_p4pe8.rs:15:9\n   |\n15 |         num_list[num_list.len() - zero_count] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n            num_list.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    num_list.extend(vec![0; zero_count]);\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            zero_count += 1;\n            num_list.remove(index);\n        } else {\n            index += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - 1 - i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpqj6crrun.rs:13:9\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n            num_list.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n            num_list.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut j = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i];\n            j += 1;\n        }\n    }\n    for i in j..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_index = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list.swap(i, zero_index);\n            zero_index += 1;\n        }\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            num_list.remove(index);\n            zero_count += 1;\n        } else {\n            index += 1;\n        }\n    }\n    num_list.extend(vec![0; zero_count]);\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_index = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list.swap(i, zero_index);\n            zero_index += 1;\n        }\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n\n    while i < num_list.len() {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i];\n            j += 1;\n        }\n        i += 1;\n    }\n\n    while j < num_list.len() {\n        num_list[j] = 0;\n        j += 1;\n    }\n\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zeros = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zeros += 1;\n        } else {\n            num_list[i - zeros] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zeros)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in num_list.len() - zero_count..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut index = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list[index] = num_list[i];\n            index += 1;\n        }\n    }\n    for i in index..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in num_list.len() - zero_count..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_index = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list.swap(i, zero_index);\n            zero_index += 1;\n        }\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    let len = num_list.len();\n    while i < len {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i];\n            j += 1;\n        }\n        i += 1;\n    }\n    while j < len {\n        num_list[j] = 0;\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i];\n            count += 1;\n        }\n    }\n    while count < num_list.len() {\n        num_list[count] = 0;\n        count += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_index = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list.swap(i, zero_index);\n            zero_index += 1;\n        }\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = 0;\n    while i < num_list.len() {\n        if num_list[i] != 0 {\n            temp = num_list[i];\n            num_list[i] = num_list[j];\n            num_list[j] = temp;\n            j += 1;\n        }\n        i += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n            num_list.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut zero_list: Vec<isize> = Vec::new();\n    let mut non_zero_list: Vec<isize> = Vec::new();\n    for num in num_list {\n        if num == 0 {\n            zero_list.push(num);\n        } else {\n            non_zero_list.push(num);\n        }\n    }\n    non_zero_list.append(&mut zero_list);\n    non_zero_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n            num_list.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - 1 - i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpqj6crrun.rs:13:9\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            zero_count += 1;\n            num_list.remove(index);\n        } else {\n            index += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zeros = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zeros += 1;\n        } else {\n            num_list[i - zeros] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zeros)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - i - 1] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpxe_o2xtv.rs:13:18\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpxe_o2xtv.rs:13:18\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpxe_o2xtv.rs:13:9\n   |\n13 |         num_list[num_list.len() - i - 1] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n            num_list.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    num_list.extend(vec![0; zero_count]);\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in num_list.len() - zero_count..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[index - zero_count] = num_list[index];\n        }\n        index += 1;\n    }\n\n    while zero_count > 0 {\n        num_list[num_list.len() - zero_count] = 0;\n        zero_count -= 1;\n    }\n\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpr2yl830n.rs:17:18\n   |\n17 |         num_list[num_list.len() - zero_count] = 0;\n   |         ---------^^^^^^^^^^^^^^--------------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpr2yl830n.rs:17:18\n   |\n17 |         num_list[num_list.len() - zero_count] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpr2yl830n.rs:17:9\n   |\n17 |         num_list[num_list.len() - zero_count] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_index = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list.swap(i, zero_index);\n            zero_index += 1;\n        }\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in num_list.len() - zero_count..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[index - zero_count] = num_list[index];\n        }\n        index += 1;\n    }\n    num_list.truncate(num_list.len() - zero_count);\n    num_list.extend(vec![0; zero_count]);\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while i < num_list.len() {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i];\n            j += 1;\n        }\n        i += 1;\n    }\n    while j < num_list.len() {\n        num_list[j] = 0;\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in (num_list.len() - zero_count)..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list[i] = num_list[j];\n            i += 1;\n        }\n        j += 1;\n    }\n    while i < num_list.len() {\n        num_list[i] = 0;\n        i += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut index = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] != 0 {\n            num_list[index] = num_list[i];\n            index += 1;\n        }\n    }\n    for i in index..num_list.len() {\n        num_list[i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut index = 0;\n    while index < num_list.len() {\n        if num_list[index] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[index - zero_count] = num_list[index];\n        }\n        index += 1;\n    }\n    for index in (num_list.len() - zero_count)..num_list.len() {\n        num_list[index] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    for i in 0..num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n        } else {\n            num_list[i - zero_count] = num_list[i];\n        }\n    }\n    for i in 0..zero_count {\n        num_list[num_list.len() - 1 - i] = 0;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "error[E0502]: cannot borrow `num_list` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ---------^^^^^^^^^^^^^^---------\n   |         |        |\n   |         |        immutable borrow occurs here\n   |         mutable borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmpqj6crrun.rs:13:18\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |                  ^^^^^^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmpqj6crrun.rs:13:9\n   |\n13 |         num_list[num_list.len() - 1 - i] = 0;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while i < num_list.len() {\n        if num_list[i] != 0 {\n            num_list.swap(i, j);\n            j += 1;\n        }\n        i += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            zero_count += 1;\n            num_list.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut i = 0;\n    let mut j = 0;\n    while j < num_list.len() {\n        if num_list[j] != 0 {\n            num_list.swap(i, j);\n            i += 1;\n        }\n        j += 1;\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut zero_list: Vec<isize> = Vec::new();\n    let mut non_zero_list: Vec<isize> = Vec::new();\n    for num in num_list {\n        if num == 0 {\n            zero_list.push(num);\n        } else {\n            non_zero_list.push(num);\n        }\n    }\n    non_zero_list.extend(zero_list);\n    non_zero_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    let mut num_list = num_list;\n    let mut zero_count = 0;\n    let mut i = 0;\n    while i < num_list.len() {\n        if num_list[i] == 0 {\n            num_list.remove(i);\n            zero_count += 1;\n        } else {\n            i += 1;\n        }\n    }\n    for _ in 0..zero_count {\n        num_list.push(0);\n    }\n    num_list\n}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}