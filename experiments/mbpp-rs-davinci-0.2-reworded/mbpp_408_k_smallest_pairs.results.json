{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "rs",
  "prompt": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n            if heap.len() > k as usize {\n                heap.pop();\n            }\n        }\n    }\n    while let Some(Reverse((_, i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res.reverse();\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp68fvdyyi.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp68fvdyyi.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp68fvdyyi.rs:13:20\n   |\n13 |     while let Some(Reverse((_, i, j))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((-sum, (i, j)));\n            } else {\n                if -sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push((-sum, (i, j)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (sum, (i, j)) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp82392jgs.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n        k -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmpim4580da.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpim4580da.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n        }\n    }\n    let mut res = Vec::new();\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpxhub4vwe.rs:3:20\n  |\n3 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpxhub4vwe.rs:7:23\n  |\n7 |             heap.push(Reverse((sum, (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpxhub4vwe.rs:12:21\n   |\n12 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut pq = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pq.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = pq.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp8bpdcla8.rs:4:18\n  |\n4 |     let mut pq = BinaryHeap::new();\n  |                  ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp8bpdcla8.rs:7:21\n  |\n7 |             pq.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp8bpdcla8.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = pq.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for (i, n1) in nums1.iter().enumerate() {\n        for (j, n2) in nums2.iter().enumerate() {\n            heap.push((*n1 + *n2, *n1, *n2));\n        }\n    }\n    for _ in 0..k {\n        if let Some((_, n1, n2)) = heap.pop() {\n            result.push(vec![n1, n2]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmpdx45bpu3.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpdx45bpu3.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            if heap.len() < k as usize {\n                heap.push((nums1[i] + nums2[j], nums1[i], nums2[j]));\n            } else {\n                if nums1[i] + nums2[j] < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push((nums1[i] + nums2[j], nums1[i], nums2[j]));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (sum, num1, num2) = heap.pop().unwrap();\n        result.push(vec![num1, num2]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmpv7ei5fl5.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpv7ei5fl5.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    res.truncate(k as usize);\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    let mut res = Vec::new();\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpbhcfvtz0.rs:3:20\n  |\n3 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpbhcfvtz0.rs:6:23\n  |\n6 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpbhcfvtz0.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, vec![nums1[i], nums2[j]])));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, vec![nums1[i], nums2[j]])));\n                }\n            }\n        }\n    }\n    for i in heap {\n        res.push(i.0);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpijgi1vfa.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpijgi1vfa.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, vec![nums1[i], nums2[j]])));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpijgi1vfa.rs:13:31\n   |\n13 |                     heap.push(Reverse((sum, vec![nums1[i], nums2[j]])));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push((nums1[i] + nums2[j], i, j));\n        }\n    }\n    for _ in 0..k {\n        if let Some((_, i, j)) = heap.pop() {\n            result.push(vec![nums1[i as usize], nums2[j as usize]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmp1nh7fbvo.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp1nh7fbvo.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return result;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            index1: i,\n            index2: 0,\n        });\n    }\n    let mut count = 0;\n    while count < k && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        result.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        count += 1;\n        if pair.index2 + 1 < nums2.len() {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmppotlh8f2.rs:7:20\n  |\n7 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n --> /tmp/tmppotlh8f2.rs:9:19\n  |\n9 |         heap.push(Pair {\n  |                   ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmppotlh8f2.rs:21:23\n   |\n21 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0422, E0433.\nFor more information about an error, try `rustc --explain E0422`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut pq = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            pq.push(Reverse((sum, (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = pq.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmph6sjsz1p.rs:4:18\n  |\n4 |     let mut pq = BinaryHeap::new();\n  |                  ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmph6sjsz1p.rs:8:21\n  |\n8 |             pq.push(Reverse((sum, (i, j))));\n  |                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmph6sjsz1p.rs:12:21\n   |\n12 |         if let Some(Reverse((_, (i, j)))) = pq.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                let top = heap.peek().unwrap();\n                if sum < top.0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let top = heap.pop().unwrap();\n        result.push(vec![top.0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpw2sem4dw.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpw2sem4dw.rs:9:27\n  |\n9 |                 heap.push(Reverse(sum));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpw2sem4dw.rs:14:31\n   |\n14 |                     heap.push(Reverse(sum));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, usize, usize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while result.len() < k as usize && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmp5is7irtv.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, usize, usize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp5is7irtv.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, usize, usize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.iter().take(k as usize).map(|x| x.to_vec()).collect()\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpmg_a_jv8.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpmg_a_jv8.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmg_a_jv8.rs:11:21\n   |\n11 |         if let Some(Reverse((sum, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut heap = BinaryHeap::new();\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse(sum));\n            if heap.len() > k as usize {\n                heap.pop();\n            }\n        }\n    }\n    while let Some(Reverse(sum)) = heap.pop() {\n        let mut pair = Vec::new();\n        pair.push(sum - nums2[0]);\n        pair.push(nums2[0]);\n        result.push(pair);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmphj6r8mu6.rs:3:20\n  |\n3 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmphj6r8mu6.rs:8:23\n  |\n8 |             heap.push(Reverse(sum));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmphj6r8mu6.rs:14:20\n   |\n14 |     while let Some(Reverse(sum)) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpmg_a_jv8.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpmg_a_jv8.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmg_a_jv8.rs:11:21\n   |\n11 |         if let Some(Reverse((sum, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse(sum) = heap.pop().unwrap();\n        let mut pair = Vec::new();\n        for i in 0..nums1.len() {\n            for j in 0..nums2.len() {\n                if nums1[i] + nums2[j] == sum {\n                    pair.push(nums1[i]);\n                    pair.push(nums2[j]);\n                    break;\n                }\n            }\n            if !pair.is_empty() {\n                break;\n            }\n        }\n        result.push(pair);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpmc8u3jax.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpmc8u3jax.rs:9:27\n  |\n9 |                 heap.push(Reverse(sum));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmc8u3jax.rs:13:31\n   |\n13 |                     heap.push(Reverse(sum));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmc8u3jax.rs:19:13\n   |\n19 |         let Reverse(sum) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return result;\n    }\n    heap.push(Pair {\n        sum: nums1[0] + nums2[0],\n        index1: 0,\n        index2: 0,\n    });\n    visited.insert((0, 0));\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        result.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        k -= 1;\n        if pair.index1 + 1 < nums1.len() && !visited.contains(&(pair.index1 + 1, pair.index2)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1 + 1] + nums2[pair.index2],\n                index1: pair.index1 + 1,\n                index2: pair.index2,\n            });\n            visited.insert((pair.index1 + 1, pair.index2));\n        }\n        if pair.index2 + 1 < nums2.len() && !visited.contains(&(pair.index1, pair.index2 + 1)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n            visited.insert((pair.index1, pair.index2 + 1));\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp311ss_a7.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp311ss_a7.rs:5:23\n  |\n5 |     let mut visited = HashSet::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n --> /tmp/tmp311ss_a7.rs:9:15\n  |\n9 |     heap.push(Pair {\n  |               ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp311ss_a7.rs:20:23\n   |\n20 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp311ss_a7.rs:28:23\n   |\n28 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0422, E0433.\nFor more information about an error, try `rustc --explain E0422`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut pq = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pq.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    let mut count = 0;\n    while count < k && !pq.is_empty() {\n        let Reverse((sum, i, j)) = pq.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n        count += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp3ucs885m.rs:4:18\n  |\n4 |     let mut pq = BinaryHeap::new();\n  |                  ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp3ucs885m.rs:7:21\n  |\n7 |             pq.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp3ucs885m.rs:12:13\n   |\n12 |         let Reverse((sum, i, j)) = pq.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.truncate(k as usize);\n    pairs\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[[1, 2], [1, 4], [1, 6], [3, 2], [3, 4], [3, 6], [7, 2]]`,\n right: `[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]`', /tmp/tmp_u58i727.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push((nums1[i] + nums2[j], nums1[i], nums2[j]));\n        }\n    }\n    for _ in 0..k {\n        if let Some(x) = heap.pop() {\n            result.push(vec![x.1, x.2]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmp2z2vdzo4.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp2z2vdzo4.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut heap = BinaryHeap::new();\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpacs4pm58.rs:3:20\n  |\n3 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpacs4pm58.rs:8:23\n  |\n8 |             heap.push(Reverse((sum, (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpacs4pm58.rs:12:21\n   |\n12 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut heap = BinaryHeap::new();\n    let mut result = Vec::new();\n    let mut visited = HashSet::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return result;\n    }\n    heap.push(Pair {\n        sum: nums1[0] + nums2[0],\n        index1: 0,\n        index2: 0,\n    });\n    visited.insert((0, 0));\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        result.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        if pair.index1 + 1 < nums1.len() && !visited.contains(&(pair.index1 + 1, pair.index2)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1 + 1] + nums2[pair.index2],\n                index1: pair.index1 + 1,\n                index2: pair.index2,\n            });\n            visited.insert((pair.index1 + 1, pair.index2));\n        }\n        if pair.index2 + 1 < nums2.len() && !visited.contains(&(pair.index1, pair.index2 + 1)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n            visited.insert((pair.index1, pair.index2 + 1));\n        }\n        k -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp_z1bfwpx.rs:3:20\n  |\n3 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp_z1bfwpx.rs:5:23\n  |\n5 |     let mut visited = HashSet::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n --> /tmp/tmp_z1bfwpx.rs:9:15\n  |\n9 |     heap.push(Pair {\n  |               ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp_z1bfwpx.rs:19:23\n   |\n19 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp_z1bfwpx.rs:27:23\n   |\n27 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0422, E0433.\nFor more information about an error, try `rustc --explain E0422`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if heap.peek().unwrap().0 < sum {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    for i in 0..heap.len() {\n        let mut tmp = Vec::new();\n        tmp.push(heap.pop().unwrap().0);\n        res.push(tmp);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpdm09h03g.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpdm09h03g.rs:9:27\n  |\n9 |                 heap.push(Reverse(sum));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpdm09h03g.rs:13:31\n   |\n13 |                     heap.push(Reverse(sum));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut heap = BinaryHeap::new();\n    let mut result = vec![];\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    while k > 0 && !heap.is_empty() {\n        let Reverse((_, (i, j))) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        k -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp_tunz5wu.rs:3:20\n  |\n3 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp_tunz5wu.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp_tunz5wu.rs:11:13\n   |\n11 |         let Reverse((_, (i, j))) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res: Vec<Vec<isize>> = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return res;\n    }\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    heap.push((nums1[0] + nums2[0], 0, 0));\n    let mut visited: HashSet<(isize, isize)> = HashSet::new();\n    visited.insert((0, 0));\n    while res.len() < k as usize && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        res.push(vec![nums1[i as usize], nums2[j as usize]]);\n        if i + 1 < nums1.len() as isize && !visited.contains(&(i + 1, j)) {\n            heap.push((nums1[(i + 1) as usize] + nums2[j as usize], i + 1, j));\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() as isize && !visited.contains(&(i, j + 1)) {\n            heap.push((nums1[i as usize] + nums2[(j + 1) as usize], i, j + 1));\n            visited.insert((i, j + 1));\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmpnu83e7v0.rs:7:19\n  |\n7 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpnu83e7v0.rs:7:55\n  |\n7 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpnu83e7v0.rs:9:22\n  |\n9 |     let mut visited: HashSet<(isize, isize)> = HashSet::new();\n  |                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpnu83e7v0.rs:9:48\n  |\n9 |     let mut visited: HashSet<(isize, isize)> = HashSet::new();\n  |                                                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpj4r926w6.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpj4r926w6.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpj4r926w6.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((sum, vec![nums1[i], nums2[j]]));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push((sum, vec![nums1[i], nums2[j]]));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap().1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp5t31sfyl.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp09hyn_tf.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp09hyn_tf.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp09hyn_tf.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n        k -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmpim4580da.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpim4580da.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    if nums1.is_empty() || nums2.is_empty() {\n        return result;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            index1: i,\n            index2: 0,\n        });\n    }\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        result.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        if pair.index2 + 1 < nums2.len() {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n        }\n        k -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpv69f9kht.rs:7:20\n  |\n7 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n --> /tmp/tmpv69f9kht.rs:9:19\n  |\n9 |         heap.push(Pair {\n  |                   ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmpv69f9kht.rs:19:23\n   |\n19 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0422, E0433.\nFor more information about an error, try `rustc --explain E0422`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            let pair = vec![nums1[i], nums2[j]];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, pair)));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, pair)));\n            }\n        }\n    }\n    while !heap.is_empty() {\n        result.push(heap.pop().unwrap().1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpstic17j5.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpstic17j5.rs:10:27\n   |\n10 |                 heap.push(Reverse((sum, pair)));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpstic17j5.rs:13:27\n   |\n13 |                 heap.push(Reverse((sum, pair)));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpi5cfy63_.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpi5cfy63_.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpi5cfy63_.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while let Some(Reverse((sum, (i, j)))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp1pncs5c8.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp1pncs5c8.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp1pncs5c8.rs:13:31\n   |\n13 |                     heap.push(Reverse((sum, (i, j))));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp1pncs5c8.rs:18:20\n   |\n18 |     while let Some(Reverse((sum, (i, j)))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpf3e_2q8x.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpf3e_2q8x.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpf3e_2q8x.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.into_iter().take(k as usize).collect()\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while result.len() < k as usize && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmps7xlvjf3.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmps7xlvjf3.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                if let Some(Reverse((max, _, _))) = heap.peek() {\n                    if sum < *max {\n                        heap.pop();\n                        heap.push(Reverse((sum, i, j)));\n                    }\n                }\n            }\n        }\n    }\n    while let Some(Reverse((_, i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp1s9vhtht.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp1s9vhtht.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, i, j)));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp1s9vhtht.rs:11:29\n   |\n11 |                 if let Some(Reverse((max, _, _))) = heap.peek() {\n   |                             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp1s9vhtht.rs:14:35\n   |\n14 |                         heap.push(Reverse((sum, i, j)));\n   |                                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp1s9vhtht.rs:20:20\n   |\n20 |     while let Some(Reverse((_, i, j))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            let pair = vec![nums1[i], nums2[j]];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, pair)));\n            } else {\n                let top = heap.peek().unwrap();\n                if sum < top.0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, pair)));\n                }\n            }\n        }\n    }\n    for i in heap {\n        result.push(i.1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpepqf9kli.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpepqf9kli.rs:10:27\n   |\n10 |                 heap.push(Reverse((sum, pair)));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpepqf9kli.rs:15:31\n   |\n15 |                     heap.push(Reverse((sum, pair)));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, (i, j))));\n            }\n        }\n    }\n    let mut result = Vec::new();\n    while let Some(Reverse((sum, (i, j)))) = heap.pop() {\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp243xzf_e.rs:3:20\n  |\n3 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp243xzf_e.rs:8:27\n  |\n8 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp243xzf_e.rs:11:27\n   |\n11 |                 heap.push(Reverse((sum, (i, j))));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp243xzf_e.rs:16:20\n   |\n16 |     while let Some(Reverse((sum, (i, j)))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp2z81wc2i.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp2z81wc2i.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp2z81wc2i.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for num1 in nums1 {\n        for num2 in nums2.iter() {\n            pairs.push(vec![num1, *num2]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    for i in heap {\n        res.push(vec![i.0, i.1]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp3scropmn.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp3scropmn.rs:9:27\n  |\n9 |                 heap.push(Reverse(sum));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp3scropmn.rs:13:31\n   |\n13 |                     heap.push(Reverse(sum));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpf3e_2q8x.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpf3e_2q8x.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpf3e_2q8x.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    let mut count = 0;\n    while count < k && !heap.is_empty() {\n        let Reverse((_, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        count += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp_zvai0qa.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp_zvai0qa.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp_zvai0qa.rs:12:13\n   |\n12 |         let Reverse((_, i, j)) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpmg_a_jv8.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpmg_a_jv8.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmg_a_jv8.rs:11:21\n   |\n11 |         if let Some(Reverse((sum, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n        k -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmpim4580da.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpim4580da.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut heap = BinaryHeap::new();\n    let mut res = vec![];\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse(sum) = heap.pop().unwrap();\n        let mut tmp = vec![];\n        for i in 0..nums1.len() {\n            for j in 0..nums2.len() {\n                if nums1[i] + nums2[j] == sum {\n                    tmp.push(nums1[i]);\n                    tmp.push(nums2[j]);\n                    res.push(tmp);\n                    break;\n                }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpebo2_lye.rs:3:20\n  |\n3 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpebo2_lye.rs:9:27\n  |\n9 |                 heap.push(Reverse(sum));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpebo2_lye.rs:13:31\n   |\n13 |                     heap.push(Reverse(sum));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpebo2_lye.rs:19:13\n   |\n19 |         let Reverse(sum) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut nums1 = nums1.clone();\n    let mut nums2 = nums2.clone();\n    nums1.sort();\n    nums2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    while i < nums1.len() && j < nums2.len() && result.len() < k as usize {\n        if nums1[i] + nums2[j] < 0 {\n            i += 1;\n        } else if nums1[i] + nums2[j] > 0 {\n            j += 1;\n        } else {\n            result.push(vec![nums1[i], nums2[j]]);\n            i += 1;\n            j += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[]`,\n right: `[[1, 2], [1, 4]]`', /tmp/tmpuiztwtg6.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((sum, (i, j)));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push((sum, (i, j)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (sum, (i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpa2zlhgzt.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.truncate(k as usize);\n    pairs\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[[1, 2], [1, 4], [1, 6], [3, 2], [3, 4], [3, 6], [7, 2]]`,\n right: `[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]`', /tmp/tmp_u58i727.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n        k -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmpim4580da.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpim4580da.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                let (sum, _) = heap.peek().unwrap().0;\n                if sum > &sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (sum, (i, j)) = heap.pop().unwrap().0;\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmphoupylf2.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmphoupylf2.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmphoupylf2.rs:14:31\n   |\n14 |                     heap.push(Reverse((sum, (i, j))));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut heap = BinaryHeap::new();\n    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n            if heap.len() > k as usize {\n                heap.pop();\n            }\n        }\n    }\n    while let Some(Reverse((_, (i, j)))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res.reverse();\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmphyrknnq4.rs:3:20\n  |\n3 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmphyrknnq4.rs:8:23\n  |\n8 |             heap.push(Reverse((sum, (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmphyrknnq4.rs:14:20\n   |\n14 |     while let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpto_nyp7_.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpto_nyp7_.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpto_nyp7_.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs: Vec<Vec<isize>> = vec![];\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n\n    if nums1.len() == 0 || nums2.len() == 0 || k == 0 {\n        return result;\n    }\n\n    heap.push(Pair {\n        sum: nums1[0] + nums2[0],\n        index1: 0,\n        index2: 0,\n    });\n\n    visited.insert((0, 0));\n\n    for _ in 0..k {\n        if heap.is_empty() {\n            break;\n        }\n\n        let pair = heap.pop().unwrap();\n\n        result.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n\n        if pair.index1 + 1 < nums1.len() && !visited.contains(&(pair.index1 + 1, pair.index2)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1 + 1] + nums2[pair.index2],\n                index1: pair.index1 + 1,\n                index2: pair.index2,\n            });\n            visited.insert((pair.index1 + 1, pair.index2));\n        }\n\n        if pair.index2 + 1 < nums2.len() && !visited.contains(&(pair.index1, pair.index2 + 1)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n            visited.insert((pair.index1, pair.index2 + 1));\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp_s3jwdpe.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp_s3jwdpe.rs:5:23\n  |\n5 |     let mut visited = HashSet::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp_s3jwdpe.rs:11:15\n   |\n11 |     heap.push(Pair {\n   |               ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp_s3jwdpe.rs:29:23\n   |\n29 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp_s3jwdpe.rs:38:23\n   |\n38 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0422, E0433.\nFor more information about an error, try `rustc --explain E0422`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 < sum {\n                    break;\n                } else {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((sum, (i, j))) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp7pr7na2d.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp7pr7na2d.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp7pr7na2d.rs:16:31\n   |\n16 |                     heap.push(Reverse((sum, (i, j))));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp7pr7na2d.rs:22:13\n   |\n22 |         let Reverse((sum, (i, j))) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        } else {\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmptqf5hhsf.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmptqf5hhsf.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmptqf5hhsf.rs:11:21\n   |\n11 |         if let Some(Reverse((sum, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                let top = heap.peek().unwrap();\n                if sum < top.0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let top = heap.pop().unwrap();\n        result.push(vec![top.0, top.0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpudxjq1al.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpudxjq1al.rs:9:27\n  |\n9 |                 heap.push(Reverse(sum));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpudxjq1al.rs:14:31\n   |\n14 |                     heap.push(Reverse(sum));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpui530ehp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpui530ehp.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpui530ehp.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while let Some(Reverse((_, (i, j)))) = heap.pop() {\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpfsglbh7d.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpfsglbh7d.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpfsglbh7d.rs:14:31\n   |\n14 |                     heap.push(Reverse((sum, (i, j))));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpfsglbh7d.rs:19:20\n   |\n19 |     while let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for &n1 in &nums1 {\n        for &n2 in &nums2 {\n            pairs.push(vec![n1, n2]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]).then(a[1].cmp(&b[1])));\n    pairs.into_iter().take(k as usize).collect()\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[[1, 2], [1, 4], [1, 6], [3, 2], [3, 4], [3, 6], [7, 2]]`,\n right: `[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]`', /tmp/tmphp8cnx35.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs: Vec<Vec<isize>> = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    if nums1.is_empty() || nums2.is_empty() {\n        return res;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            index1: i,\n            index2: 0,\n        });\n    }\n    for _ in 0..k {\n        if let Some(pair) = heap.pop() {\n            res.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n            if pair.index2 + 1 < nums2.len() {\n                heap.push(Pair {\n                    sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                    index1: pair.index1,\n                    index2: pair.index2 + 1,\n                });\n            }\n        } else {\n            break;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpy3aexski.rs:7:20\n  |\n7 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n --> /tmp/tmpy3aexski.rs:9:19\n  |\n9 |         heap.push(Pair {\n  |                   ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmpy3aexski.rs:19:27\n   |\n19 |                 heap.push(Pair {\n   |                           ^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0422, E0433.\nFor more information about an error, try `rustc --explain E0422`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for (i, num1) in nums1.iter().enumerate() {\n        for (j, num2) in nums2.iter().enumerate() {\n            let sum = num1 + num2;\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, i, j)));\n                }\n            }\n        }\n    }\n    while let Some(Reverse((_, i, j))) = heap.pop() {\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp_rop_ey0.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp_rop_ey0.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, i, j)));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp_rop_ey0.rs:14:31\n   |\n14 |                     heap.push(Reverse((sum, i, j)));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp_rop_ey0.rs:19:20\n   |\n19 |     while let Some(Reverse((_, i, j))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 < sum {\n                    break;\n                } else {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((sum, (i, j))) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp7pr7na2d.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp7pr7na2d.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp7pr7na2d.rs:16:31\n   |\n16 |                     heap.push(Reverse((sum, (i, j))));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp7pr7na2d.rs:22:13\n   |\n22 |         let Reverse((sum, (i, j))) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if heap.peek().unwrap().0 > sum {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse(sum) = heap.pop().unwrap();\n        let mut pair = vec![];\n        for i in 0..nums1.len() {\n            for j in 0..nums2.len() {\n                if nums1[i] + nums2[j] == sum {\n                    pair.push(nums1[i]);\n                    pair.push(nums2[j]);\n                    break;\n                }\n            }\n            if pair.len() > 0 {\n                break;\n            }\n        }\n        result.push(pair);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpjazd0_6i.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpjazd0_6i.rs:9:27\n  |\n9 |                 heap.push(Reverse(sum));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpjazd0_6i.rs:13:31\n   |\n13 |                     heap.push(Reverse(sum));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpjazd0_6i.rs:19:13\n   |\n19 |         let Reverse(sum) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpyl95_695.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpyl95_695.rs:8:23\n  |\n8 |             heap.push(Reverse((sum, (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpyl95_695.rs:12:21\n   |\n12 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res: Vec<Vec<isize>> = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                if let Some(Reverse((s, _, _))) = heap.peek() {\n                    if sum < *s {\n                        heap.pop();\n                        heap.push(Reverse((sum, i, j)));\n                    }\n                }\n            }\n        }\n    }\n    while let Some(Reverse((sum, i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpexrtiqvo.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpexrtiqvo.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, i, j)));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpexrtiqvo.rs:11:29\n   |\n11 |                 if let Some(Reverse((s, _, _))) = heap.peek() {\n   |                             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpexrtiqvo.rs:14:35\n   |\n14 |                         heap.push(Reverse((sum, i, j)));\n   |                                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpexrtiqvo.rs:20:20\n   |\n20 |     while let Some(Reverse((sum, i, j))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    let mut i = 0;\n    while i < k && !heap.is_empty() {\n        let Reverse((_, x, y)) = heap.pop().unwrap();\n        res.push(vec![nums1[x], nums2[y]]);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpzxwxpep5.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpzxwxpep5.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpzxwxpep5.rs:12:13\n   |\n12 |         let Reverse((_, x, y)) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n        k -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmpim4580da.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpim4580da.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpkipg3zjv.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpkipg3zjv.rs:8:23\n  |\n8 |             heap.push(Reverse((sum, i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpkipg3zjv.rs:12:21\n   |\n12 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    for i in 0..heap.len() {\n        result.push(vec![heap.pop().unwrap().0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpqnxsuxs7.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpqnxsuxs7.rs:9:27\n  |\n9 |                 heap.push(Reverse(sum));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpqnxsuxs7.rs:13:31\n   |\n13 |                     heap.push(Reverse(sum));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    if nums1.is_empty() || nums2.is_empty() {\n        return res;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            index1: i,\n            index2: 0,\n        });\n    }\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        res.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        if pair.index2 + 1 < nums2.len() {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n        }\n        k -= 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpx0akmy2p.rs:7:20\n  |\n7 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n --> /tmp/tmpx0akmy2p.rs:9:19\n  |\n9 |         heap.push(Pair {\n  |                   ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmpx0akmy2p.rs:19:23\n   |\n19 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0422, E0433.\nFor more information about an error, try `rustc --explain E0422`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpui530ehp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpui530ehp.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpui530ehp.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpto_nyp7_.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpto_nyp7_.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpto_nyp7_.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res: Vec<Vec<isize>> = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpc21gw1gf.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpc21gw1gf.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpc21gw1gf.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpto_nyp7_.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpto_nyp7_.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpto_nyp7_.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, (i, j))));\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (_, (i, j)) = heap.pop().unwrap().0;\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpv7nsbfrr.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpv7nsbfrr.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpv7nsbfrr.rs:12:27\n   |\n12 |                 heap.push(Reverse((sum, (i, j))));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut pq = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pq.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = pq.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp89pw6sc0.rs:4:18\n  |\n4 |     let mut pq = BinaryHeap::new();\n  |                  ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp89pw6sc0.rs:7:21\n  |\n7 |             pq.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp89pw6sc0.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = pq.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpj4r926w6.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpj4r926w6.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpj4r926w6.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    while k > 0 && !heap.is_empty() {\n        let Reverse((_, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        k -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp0s9zdi_1.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp0s9zdi_1.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp0s9zdi_1.rs:11:13\n   |\n11 |         let Reverse((_, i, j)) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        } else {\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpxo_bsu0o.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpxo_bsu0o.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpxo_bsu0o.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpi5cfy63_.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpi5cfy63_.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpi5cfy63_.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpmoz2wcyp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpmoz2wcyp.rs:8:23\n  |\n8 |             heap.push(Reverse((sum, (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmoz2wcyp.rs:12:21\n   |\n12 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpto_nyp7_.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpto_nyp7_.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpto_nyp7_.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, usize, usize)> = BinaryHeap::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return res;\n    }\n    heap.push((nums1[0] + nums2[0], nums1[0], 0, 0));\n    while res.len() < k as usize && !heap.is_empty() {\n        let (sum, num1, i, j) = heap.pop().unwrap();\n        res.push(vec![num1, nums2[j]]);\n        if i + 1 < nums1.len() {\n            heap.push((nums1[i + 1] + nums2[j], nums1[i + 1], i + 1, j));\n        }\n        if i == 0 && j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], nums1[i], i, j + 1));\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmpxbvn9xhe.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, usize, usize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpxbvn9xhe.rs:4:62\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, usize, usize)> = BinaryHeap::new();\n  |                                                              ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while result.len() < k as usize && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmps7xlvjf3.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmps7xlvjf3.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, i, j)));\n            }\n        }\n    }\n    while let Some(Reverse((_, i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpslndgvgd.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpslndgvgd.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, i, j)));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpslndgvgd.rs:12:27\n   |\n12 |                 heap.push(Reverse((sum, i, j)));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpslndgvgd.rs:16:20\n   |\n16 |     while let Some(Reverse((_, i, j))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpui530ehp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpui530ehp.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpui530ehp.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < nums1.len() && j < nums2.len() {\n        let sum = nums1[i] + nums2[j];\n        if visited.insert((i, j)) {\n            heap.push(Reverse((sum, (i, j))));\n        }\n        if i == nums1.len() - 1 {\n            j += 1;\n        } else if j == nums2.len() - 1 {\n            i += 1;\n        } else {\n            if nums1[i + 1] + nums2[j] <= nums1[i] + nums2[j + 1] {\n                i += 1;\n            } else {\n                j += 1;\n            }\n        }\n    }\n    while k > 0 && !heap.is_empty() {\n        let Reverse((_, (i, j))) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        k -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpuxvg93_c.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpuxvg93_c.rs:5:23\n  |\n5 |     let mut visited = HashSet::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpuxvg93_c.rs:11:23\n   |\n11 |             heap.push(Reverse((sum, (i, j))));\n   |                       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpuxvg93_c.rs:26:13\n   |\n26 |         let Reverse((_, (i, j))) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    for Reverse((_, (i, j))) in heap {\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpjz5v36p6.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpjz5v36p6.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpjz5v36p6.rs:13:31\n   |\n13 |                     heap.push(Reverse((sum, (i, j))));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpjz5v36p6.rs:18:9\n   |\n18 |     for Reverse((_, (i, j))) in heap {\n   |         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push((-sum, (i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some((_, (i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpcgrvfitu.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    let mut i = 0;\n    while i < k && !heap.is_empty() {\n        let (sum, (i, j)) = heap.pop().unwrap().0;\n        res.push(vec![nums1[i], nums2[j]]);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpipfo_gn8.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpipfo_gn8.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((-sum, (i, j)));\n            } else {\n                if sum > -heap.peek().unwrap().0 {\n                    break;\n                } else {\n                    heap.pop();\n                    heap.push((-sum, (i, j)));\n                }\n            }\n        }\n    }\n    while let Some((_, (i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpdaeu7tvm.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, (i, j))));\n            }\n        }\n    }\n    while let Some(Reverse((_, (i, j)))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpzos9wunn.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpzos9wunn.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpzos9wunn.rs:12:27\n   |\n12 |                 heap.push(Reverse((sum, (i, j))));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpzos9wunn.rs:16:20\n   |\n16 |     while let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for n1 in nums1 {\n        for n2 in nums2.iter() {\n            pairs.push(vec![n1, *n2]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.truncate(k as usize);\n    pairs\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[[1, 2], [1, 4], [1, 6], [3, 2], [3, 4], [3, 6], [7, 2]]`,\n right: `[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]`', /tmp/tmpx5viptn9.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpmg_a_jv8.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpmg_a_jv8.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmg_a_jv8.rs:11:21\n   |\n11 |         if let Some(Reverse((sum, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpto_nyp7_.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpto_nyp7_.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpto_nyp7_.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpui530ehp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpui530ehp.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpui530ehp.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = vec![vec![false; nums2.len()]; nums1.len()];\n    heap.push(Reverse((nums1[0] + nums2[0], 0, 0)));\n    visited[0][0] = true;\n    while k > 0 && !heap.is_empty() {\n        let Reverse((sum, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if i + 1 < nums1.len() && !visited[i + 1][j] {\n            heap.push(Reverse((nums1[i + 1] + nums2[j], i + 1, j)));\n            visited[i + 1][j] = true;\n        }\n        if j + 1 < nums2.len() && !visited[i][j + 1] {\n            heap.push(Reverse((nums1[i] + nums2[j + 1], i, j + 1)));\n            visited[i][j + 1] = true;\n        }\n        k -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpzd_l389w.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpzd_l389w.rs:6:15\n  |\n6 |     heap.push(Reverse((nums1[0] + nums2[0], 0, 0)));\n  |               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpzd_l389w.rs:9:13\n  |\n9 |         let Reverse((sum, i, j)) = heap.pop().unwrap();\n  |             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpzd_l389w.rs:12:23\n   |\n12 |             heap.push(Reverse((nums1[i + 1] + nums2[j], i + 1, j)));\n   |                       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpzd_l389w.rs:16:23\n   |\n16 |             heap.push(Reverse((nums1[i] + nums2[j + 1], i, j + 1)));\n   |                       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpui530ehp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpui530ehp.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpui530ehp.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpmg_a_jv8.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpmg_a_jv8.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmg_a_jv8.rs:11:21\n   |\n11 |         if let Some(Reverse((sum, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, (i, j))));\n            }\n        }\n    }\n    while let Some(Reverse((_, (i, j)))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpimlf3z0m.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpimlf3z0m.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpimlf3z0m.rs:12:27\n   |\n12 |                 heap.push(Reverse((sum, (i, j))));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpimlf3z0m.rs:16:20\n   |\n16 |     while let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res: Vec<Vec<isize>> = vec![];\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push((nums1[i] + nums2[j], nums1[i], nums2[j]));\n        }\n    }\n    for _ in 0..k {\n        if let Some(x) = heap.pop() {\n            res.push(vec![x.1, x.2]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmpdjborm3q.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpdjborm3q.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return res;\n    }\n    heap.push(Pair {\n        sum: nums1[0] + nums2[0],\n        index1: 0,\n        index2: 0,\n    });\n    visited.insert((0, 0));\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        res.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        k -= 1;\n        if pair.index1 + 1 < nums1.len() && !visited.contains(&(pair.index1 + 1, pair.index2)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1 + 1] + nums2[pair.index2],\n                index1: pair.index1 + 1,\n                index2: pair.index2,\n            });\n            visited.insert((pair.index1 + 1, pair.index2));\n        }\n        if pair.index2 + 1 < nums2.len() && !visited.contains(&(pair.index1, pair.index2 + 1)) {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n            visited.insert((pair.index1, pair.index2 + 1));\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp6ppznxhc.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp6ppznxhc.rs:5:23\n  |\n5 |     let mut visited = HashSet::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n --> /tmp/tmp6ppznxhc.rs:9:15\n  |\n9 |     heap.push(Pair {\n  |               ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp6ppznxhc.rs:20:23\n   |\n20 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp6ppznxhc.rs:28:23\n   |\n28 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0422, E0433.\nFor more information about an error, try `rustc --explain E0422`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpmoz2wcyp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpmoz2wcyp.rs:8:23\n  |\n8 |             heap.push(Reverse((sum, (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmoz2wcyp.rs:12:21\n   |\n12 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = vec![];\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    let mut visited: HashSet<(isize, isize)> = HashSet::new();\n    if nums1.len() == 0 || nums2.len() == 0 || k == 0 {\n        return result;\n    }\n    heap.push((nums1[0] + nums2[0], 0, 0));\n    visited.insert((0, 0));\n    while result.len() < k as usize && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i as usize], nums2[j as usize]]);\n        if i + 1 < nums1.len() as isize && !visited.contains(&(i + 1, j)) {\n            heap.push((nums1[(i + 1) as usize] + nums2[j as usize], i + 1, j));\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() as isize && !visited.contains(&(i, j + 1)) {\n            heap.push((nums1[i as usize] + nums2[(j + 1) as usize], i, j + 1));\n            visited.insert((i, j + 1));\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmp3n8bbh9u.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp3n8bbh9u.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3n8bbh9u.rs:5:22\n  |\n5 |     let mut visited: HashSet<(isize, isize)> = HashSet::new();\n  |                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp3n8bbh9u.rs:5:48\n  |\n5 |     let mut visited: HashSet<(isize, isize)> = HashSet::new();\n  |                                                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpto_nyp7_.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpto_nyp7_.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpto_nyp7_.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut heap = BinaryHeap::new();\n    let mut res = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return res;\n    }\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            i,\n            j: 0,\n        });\n    }\n    while k > 0 && heap.len() > 0 {\n        let pair = heap.pop().unwrap();\n        res.push(vec![nums1[pair.i], nums2[pair.j]]);\n        if pair.j + 1 < nums2.len() {\n            heap.push(Pair {\n                sum: nums1[pair.i] + nums2[pair.j + 1],\n                i: pair.i,\n                j: pair.j + 1,\n            });\n        }\n        k -= 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpkdeberus.rs:3:20\n  |\n3 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n --> /tmp/tmpkdeberus.rs:9:19\n  |\n9 |         heap.push(Pair {\n  |                   ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmpkdeberus.rs:19:23\n   |\n19 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0422, E0433.\nFor more information about an error, try `rustc --explain E0422`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                let (sum, (i, j)) = heap.peek().unwrap().0;\n                if sum > nums1[i] + nums2[j] {\n                    heap.pop();\n                    heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n                }\n            }\n        }\n    }\n    while let Some(Reverse((sum, (i, j)))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp_vdbr5my.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp_vdbr5my.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp_vdbr5my.rs:14:31\n   |\n14 |                     heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp_vdbr5my.rs:19:20\n   |\n19 |     while let Some(Reverse((sum, (i, j)))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((sum, (i, j))) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmprqr5bx0j.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmprqr5bx0j.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmprqr5bx0j.rs:13:31\n   |\n13 |                     heap.push(Reverse((sum, (i, j))));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmprqr5bx0j.rs:19:13\n   |\n19 |         let Reverse((sum, (i, j))) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpui530ehp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpui530ehp.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpui530ehp.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for n1 in nums1 {\n        for n2 in nums2.iter() {\n            pairs.push(vec![n1, *n2]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.into_iter().take(k as usize).collect()\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[[1, 2], [1, 4], [1, 6], [3, 2], [3, 4], [3, 6], [7, 2]]`,\n right: `[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]`', /tmp/tmpv9qe7_ma.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((-sum, (i, j)));\n            } else {\n                let (top_sum, _) = heap.peek().unwrap();\n                if -top_sum > sum {\n                    heap.pop();\n                    heap.push((-sum, (i, j)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (_, (i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpyekxfa4k.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    let mut visited: HashSet<(isize, isize)> = HashSet::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((sum, i as isize, j as isize));\n                visited.insert((i as isize, j as isize));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push((sum, i as isize, j as isize));\n                    visited.insert((i as isize, j as isize));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        res.push(vec![nums1[i as usize], nums2[j as usize]]);\n    }\n    res.reverse();\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmpvti6qauh.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpvti6qauh.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpvti6qauh.rs:5:22\n  |\n5 |     let mut visited: HashSet<(isize, isize)> = HashSet::new();\n  |                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpvti6qauh.rs:5:48\n  |\n5 |     let mut visited: HashSet<(isize, isize)> = HashSet::new();\n  |                                                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpui530ehp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpui530ehp.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpui530ehp.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return res;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            index: (i, 0),\n        });\n    }\n    while k > 0 && !heap.is_empty() {\n        let Pair { sum, index } = heap.pop().unwrap();\n        res.push(vec![nums1[index.0], nums2[index.1]]);\n        if index.1 + 1 < nums2.len() {\n            heap.push(Pair {\n                sum: nums1[index.0] + nums2[index.1 + 1],\n                index: (index.0, index.1 + 1),\n            });\n        }\n        k -= 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp9okja3ct.rs:7:20\n  |\n7 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n --> /tmp/tmp9okja3ct.rs:9:19\n  |\n9 |         heap.push(Pair {\n  |                   ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp9okja3ct.rs:15:13\n   |\n15 |         let Pair { sum, index } = heap.pop().unwrap();\n   |             ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp9okja3ct.rs:18:23\n   |\n18 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0422, E0433.\nFor more information about an error, try `rustc --explain E0422`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.into_iter().take(k as usize).collect()\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return result;\n    }\n    let mut heap: BinaryHeap<(isize, usize, usize)> = BinaryHeap::new();\n    heap.push((nums1[0] + nums2[0], 0, 0));\n    let mut visited: HashSet<(usize, usize)> = HashSet::new();\n    visited.insert((0, 0));\n    while result.len() < k as usize && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if i + 1 < nums1.len() && !visited.contains(&(i + 1, j)) {\n            heap.push((nums1[i + 1] + nums2[j], i + 1, j));\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() && !visited.contains(&(i, j + 1)) {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n            visited.insert((i, j + 1));\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmp2vs3d6ot.rs:7:19\n  |\n7 |     let mut heap: BinaryHeap<(isize, usize, usize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp2vs3d6ot.rs:7:55\n  |\n7 |     let mut heap: BinaryHeap<(isize, usize, usize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp2vs3d6ot.rs:9:22\n  |\n9 |     let mut visited: HashSet<(usize, usize)> = HashSet::new();\n  |                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp2vs3d6ot.rs:9:48\n  |\n9 |     let mut visited: HashSet<(usize, usize)> = HashSet::new();\n  |                                                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    if nums1.is_empty() || nums2.is_empty() {\n        return res;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, i, j)));\n                }\n            }\n        }\n    }\n    while let Some(Reverse((_, i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp6zvn8fti.rs:7:20\n  |\n7 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp6zvn8fti.rs:12:27\n   |\n12 |                 heap.push(Reverse((sum, i, j)));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp6zvn8fti.rs:17:31\n   |\n17 |                     heap.push(Reverse((sum, i, j)));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp6zvn8fti.rs:22:20\n   |\n22 |     while let Some(Reverse((_, i, j))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, i, j)));\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((_, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp3ni9793u.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp3ni9793u.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, i, j)));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp3ni9793u.rs:12:27\n   |\n12 |                 heap.push(Reverse((sum, i, j)));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp3ni9793u.rs:17:13\n   |\n17 |         let Reverse((_, i, j)) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            let mut pair = vec![nums1[i], nums2[j]];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n                result.push(pair);\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse(sum));\n                result.push(pair);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp9jfcd_dj.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp9jfcd_dj.rs:10:27\n   |\n10 |                 heap.push(Reverse(sum));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp9jfcd_dj.rs:14:27\n   |\n14 |                 heap.push(Reverse(sum));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut heap = BinaryHeap::new();\n    let mut res = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 || k == 0 {\n        return res;\n    }\n    heap.push(Pair {\n        sum: nums1[0] + nums2[0],\n        index1: 0,\n        index2: 0,\n    });\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        res.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        if pair.index1 + 1 < nums1.len() {\n            heap.push(Pair {\n                sum: nums1[pair.index1 + 1] + nums2[pair.index2],\n                index1: pair.index1 + 1,\n                index2: pair.index2,\n            });\n        }\n        if pair.index1 == 0 && pair.index2 + 1 < nums2.len() {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n        }\n        k -= 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmplj1v3po8.rs:3:20\n  |\n3 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n --> /tmp/tmplj1v3po8.rs:8:15\n  |\n8 |     heap.push(Pair {\n  |               ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmplj1v3po8.rs:17:23\n   |\n17 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmplj1v3po8.rs:24:23\n   |\n24 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0422, E0433.\nFor more information about an error, try `rustc --explain E0422`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpto_nyp7_.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpto_nyp7_.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpto_nyp7_.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                let Reverse(max) = heap.peek().unwrap();\n                if sum < max {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    for Reverse(sum) in heap {\n        result.push(vec![sum]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpab3p6jcl.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpab3p6jcl.rs:9:27\n  |\n9 |                 heap.push(Reverse(sum));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpab3p6jcl.rs:11:21\n   |\n11 |                 let Reverse(max) = heap.peek().unwrap();\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpab3p6jcl.rs:14:31\n   |\n14 |                     heap.push(Reverse(sum));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpab3p6jcl.rs:19:9\n   |\n19 |     for Reverse(sum) in heap {\n   |         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 < sum {\n                    break;\n                }\n                heap.push(Reverse((sum, i, j)));\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((sum, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpmqk1fbwl.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpmqk1fbwl.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, i, j)));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmqk1fbwl.rs:15:27\n   |\n15 |                 heap.push(Reverse((sum, i, j)));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmqk1fbwl.rs:21:13\n   |\n21 |         let Reverse((sum, i, j)) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpto_nyp7_.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpto_nyp7_.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpto_nyp7_.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            let pair = vec![nums1[i], nums2[j]];\n            heap.push(Reverse((sum, pair)));\n        }\n    }\n    let mut count = 0;\n    while count < k as usize && !heap.is_empty() {\n        let Reverse((_, pair)) = heap.pop().unwrap();\n        result.push(pair);\n        count += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpv1p4sa91.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpv1p4sa91.rs:9:23\n  |\n9 |             heap.push(Reverse((sum, pair)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpv1p4sa91.rs:14:13\n   |\n14 |         let Reverse((_, pair)) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for n1 in nums1 {\n        for n2 in nums2.iter() {\n            pairs.push(vec![n1, *n2]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.iter().take(k as usize).cloned().collect()\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[[1, 2], [1, 4], [1, 6], [3, 2], [3, 4], [3, 6], [7, 2]]`,\n right: `[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]`', /tmp/tmpbvqycqom.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                if let Some(Reverse((_, (i1, j1)))) = heap.peek() {\n                    if sum < nums1[*i1] + nums2[*j1] {\n                        heap.pop();\n                        heap.push(Reverse((sum, (i, j))));\n                    }\n                }\n            }\n        }\n    }\n    while let Some(Reverse((_, (i, j)))) = heap.pop() {\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmplxiaxnva.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmplxiaxnva.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmplxiaxnva.rs:11:29\n   |\n11 |                 if let Some(Reverse((_, (i1, j1)))) = heap.peek() {\n   |                             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmplxiaxnva.rs:14:35\n   |\n14 |                         heap.push(Reverse((sum, (i, j))));\n   |                                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmplxiaxnva.rs:20:20\n   |\n20 |     while let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.truncate(k as usize);\n    pairs\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[[1, 2], [1, 4], [1, 6], [3, 2], [3, 4], [3, 6], [7, 2]]`,\n right: `[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]`', /tmp/tmp_u58i727.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    while heap.len() > 0 {\n        let sum = heap.pop().unwrap().0;\n        let mut vec = Vec::new();\n        for i in 0..nums1.len() {\n            for j in 0..nums2.len() {\n                if nums1[i] + nums2[j] == sum {\n                    vec.push(nums1[i]);\n                    vec.push(nums2[j]);\n                    result.push(vec);\n                    break;\n                }\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp1odge3y5.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp1odge3y5.rs:9:27\n  |\n9 |                 heap.push(Reverse(sum));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp1odge3y5.rs:13:31\n   |\n13 |                     heap.push(Reverse(sum));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs: Vec<Vec<isize>> = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return result;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            index1: i,\n            index2: 0,\n        });\n    }\n    for _ in 0..k {\n        if let Some(pair) = heap.pop() {\n            result.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n            if pair.index2 + 1 < nums2.len() {\n                heap.push(Pair {\n                    sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                    index1: pair.index1,\n                    index2: pair.index2 + 1,\n                });\n            }\n        } else {\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpc47akk7x.rs:7:20\n  |\n7 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n --> /tmp/tmpc47akk7x.rs:9:19\n  |\n9 |         heap.push(Pair {\n  |                   ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmpc47akk7x.rs:19:27\n   |\n19 |                 heap.push(Pair {\n   |                           ^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0422, E0433.\nFor more information about an error, try `rustc --explain E0422`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for (i, n1) in nums1.iter().enumerate() {\n        for (j, n2) in nums2.iter().enumerate() {\n            heap.push((n1 + n2, *n1, *n2));\n        }\n    }\n    for _ in 0..k {\n        if let Some((_, n1, n2)) = heap.pop() {\n            result.push(vec![n1, n2]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmpegqkn_nh.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpegqkn_nh.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.into_iter().take(k as usize).collect()\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpj4r926w6.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpj4r926w6.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpj4r926w6.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push((nums1[i] + nums2[j], i, j));\n        }\n    }\n    for _ in 0..k {\n        if let Some((_, i, j)) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmple7htjnz.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmple7htjnz.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push((nums1[i] + nums2[j], i, j));\n        }\n    }\n    for _ in 0..k {\n        if let Some((_, i, j)) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmpz8pg57yu.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpz8pg57yu.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    let mut count = 0;\n    while count < k && !heap.is_empty() {\n        let Reverse((sum, i, j)) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n        count += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmproh_3_6k.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmproh_3_6k.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmproh_3_6k.rs:12:13\n   |\n12 |         let Reverse((sum, i, j)) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut heap = BinaryHeap::new();\n    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, nums1[i], nums2[j])));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, nums1[i], nums2[j])));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let top = heap.pop().unwrap();\n        result.push(vec![top.1, top.2]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpawdd9bd3.rs:3:20\n  |\n3 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpawdd9bd3.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, nums1[i], nums2[j])));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpawdd9bd3.rs:14:31\n   |\n14 |                     heap.push(Reverse((sum, nums1[i], nums2[j])));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while result.len() < k as usize && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmps7xlvjf3.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmps7xlvjf3.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpkmtt34uv.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpkmtt34uv.rs:8:23\n  |\n8 |             heap.push(Reverse((sum, i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpkmtt34uv.rs:12:21\n   |\n12 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((sum, (i, j)));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push((sum, (i, j)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let (_, (i, j)) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpa0lv_tqz.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, i, j)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((_, i, j)) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpw0pfyxio.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpw0pfyxio.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, i, j)));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpw0pfyxio.rs:14:31\n   |\n14 |                     heap.push(Reverse((sum, i, j)));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpw0pfyxio.rs:20:13\n   |\n20 |         let Reverse((_, i, j)) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpui530ehp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpui530ehp.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpui530ehp.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpkmtt34uv.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpkmtt34uv.rs:8:23\n  |\n8 |             heap.push(Reverse((sum, i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpkmtt34uv.rs:12:21\n   |\n12 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    for i in 0..heap.len() {\n        let sum = heap.pop().unwrap().0;\n        for j in 0..nums1.len() {\n            for k in 0..nums2.len() {\n                if sum == nums1[j] + nums2[k] {\n                    result.push(vec![nums1[j], nums2[k]]);\n                }\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp6d7_h3p4.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp6d7_h3p4.rs:9:27\n  |\n9 |                 heap.push(Reverse(sum));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp6d7_h3p4.rs:13:31\n   |\n13 |                     heap.push(Reverse(sum));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    let mut res = vec![];\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmprx1je7bn.rs:3:20\n  |\n3 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmprx1je7bn.rs:6:23\n  |\n6 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmprx1je7bn.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    let mut count = 0;\n    while count < k && !heap.is_empty() {\n        let Reverse((_, i, j)) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n        count += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpn6aufv9d.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpn6aufv9d.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpn6aufv9d.rs:12:13\n   |\n12 |         let Reverse((_, i, j)) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            let pair = vec![nums1[i], nums2[j]];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, pair)));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, pair)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let top = heap.pop().unwrap();\n        result.push(top.1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpnweqtxas.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpnweqtxas.rs:10:27\n   |\n10 |                 heap.push(Reverse((sum, pair)));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpnweqtxas.rs:15:31\n   |\n15 |                     heap.push(Reverse((sum, pair)));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1665510144,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpmg_a_jv8.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpmg_a_jv8.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmg_a_jv8.rs:11:21\n   |\n11 |         if let Some(Reverse((sum, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse(sum));\n            if heap.len() > k as usize {\n                heap.pop();\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse(sum) = heap.pop().unwrap();\n        let mut pair = vec![];\n        for i in 0..nums1.len() {\n            for j in 0..nums2.len() {\n                if nums1[i] + nums2[j] == sum {\n                    pair.push(nums1[i]);\n                    pair.push(nums2[j]);\n                    res.push(pair);\n                    break;\n                }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpfzt2xyml.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpfzt2xyml.rs:8:23\n  |\n8 |             heap.push(Reverse(sum));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpfzt2xyml.rs:15:13\n   |\n15 |         let Reverse(sum) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = vec![];\n    if nums1.is_empty() || nums2.is_empty() {\n        return result;\n    }\n    let mut min_heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if min_heap.len() < k as usize {\n                min_heap.push(Reverse((sum, nums1[i], nums2[j])));\n            } else {\n                let top = min_heap.peek().unwrap();\n                if top.0 > sum {\n                    min_heap.pop();\n                    min_heap.push(Reverse((sum, nums1[i], nums2[j])));\n                }\n            }\n        }\n    }\n    while !min_heap.is_empty() {\n        let Reverse((_, a, b)) = min_heap.pop().unwrap();\n        result.push(vec![a, b]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmptclp4z1c.rs:7:24\n  |\n7 |     let mut min_heap = BinaryHeap::new();\n  |                        ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmptclp4z1c.rs:12:31\n   |\n12 |                 min_heap.push(Reverse((sum, nums1[i], nums2[j])));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmptclp4z1c.rs:17:35\n   |\n17 |                     min_heap.push(Reverse((sum, nums1[i], nums2[j])));\n   |                                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmptclp4z1c.rs:23:13\n   |\n23 |         let Reverse((_, a, b)) = min_heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse(sum));\n                }\n            }\n        }\n    }\n    for i in 0..heap.len() {\n        res.push(vec![heap.pop().unwrap().0]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpg57wq3fp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpg57wq3fp.rs:9:27\n  |\n9 |                 heap.push(Reverse(sum));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpg57wq3fp.rs:13:31\n   |\n13 |                     heap.push(Reverse(sum));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpf3e_2q8x.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpf3e_2q8x.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpf3e_2q8x.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp09hyn_tf.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp09hyn_tf.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp09hyn_tf.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = HashSet::new();\n    heap.push(Pair {\n        first: nums1[0],\n        second: nums2[0],\n        first_index: 0,\n        second_index: 0,\n    });\n    visited.insert((0, 0));\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        result.push(vec![pair.first, pair.second]);\n        if pair.first_index + 1 < nums1.len() && !visited.contains(&(pair.first_index + 1, pair.second_index)) {\n            heap.push(Pair {\n                first: nums1[pair.first_index + 1],\n                second: nums2[pair.second_index],\n                first_index: pair.first_index + 1,\n                second_index: pair.second_index,\n            });\n            visited.insert((pair.first_index + 1, pair.second_index));\n        }\n        if pair.second_index + 1 < nums2.len() && !visited.contains(&(pair.first_index, pair.second_index + 1)) {\n            heap.push(Pair {\n                first: nums1[pair.first_index],\n                second: nums2[pair.second_index + 1],\n                first_index: pair.first_index,\n                second_index: pair.second_index + 1,\n            });\n            visited.insert((pair.first_index, pair.second_index + 1));\n        }\n        k -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp96g9zhy7.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp96g9zhy7.rs:5:23\n  |\n5 |     let mut visited = HashSet::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n --> /tmp/tmp96g9zhy7.rs:6:15\n  |\n6 |     heap.push(Pair {\n  |               ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp96g9zhy7.rs:17:23\n   |\n17 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp96g9zhy7.rs:26:23\n   |\n26 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0422, E0433.\nFor more information about an error, try `rustc --explain E0422`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    for Reverse((_, (i, j))) in heap {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpnmfbqid0.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpnmfbqid0.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpnmfbqid0.rs:13:31\n   |\n13 |                     heap.push(Reverse((sum, (i, j))));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpnmfbqid0.rs:18:9\n   |\n18 |     for Reverse((_, (i, j))) in heap {\n   |         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                if sum < heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((sum, (i, j))) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp6ywqivb8.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp6ywqivb8.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp6ywqivb8.rs:13:31\n   |\n13 |                     heap.push(Reverse((sum, (i, j))));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp6ywqivb8.rs:19:13\n   |\n19 |         let Reverse((sum, (i, j))) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]).then(a[1].cmp(&b[1])));\n    pairs.into_iter().take(k as usize).collect()\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[[1, 2], [1, 4], [1, 6], [3, 2], [3, 4], [3, 6], [7, 2]]`,\n right: `[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]`', /tmp/tmpdj7v1lag.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, usize, usize)> = BinaryHeap::new();\n    if nums1.is_empty() || nums2.is_empty() {\n        return res;\n    }\n    heap.push((nums1[0] + nums2[0], 0, 0));\n    let mut visited: HashSet<(usize, usize)> = HashSet::new();\n    visited.insert((0, 0));\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n        if i + 1 < nums1.len() && !visited.contains(&(i + 1, j)) {\n            heap.push((nums1[i + 1] + nums2[j], i + 1, j));\n            visited.insert((i + 1, j));\n        }\n        if j + 1 < nums2.len() && !visited.contains(&(i, j + 1)) {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n            visited.insert((i, j + 1));\n        }\n        k -= 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmp0n96jv80.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, usize, usize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp0n96jv80.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, usize, usize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp0n96jv80.rs:9:22\n  |\n9 |     let mut visited: HashSet<(usize, usize)> = HashSet::new();\n  |                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp0n96jv80.rs:9:48\n  |\n9 |     let mut visited: HashSet<(usize, usize)> = HashSet::new();\n  |                                                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp09hyn_tf.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp09hyn_tf.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp09hyn_tf.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                if let Some(Reverse((top, _, _))) = heap.peek() {\n                    if sum < *top {\n                        heap.pop();\n                        heap.push(Reverse((sum, i, j)));\n                    }\n                }\n            }\n        }\n    }\n    while let Some(Reverse((_, i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpmnuzigod.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpmnuzigod.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, i, j)));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmnuzigod.rs:11:29\n   |\n11 |                 if let Some(Reverse((top, _, _))) = heap.peek() {\n   |                             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmnuzigod.rs:14:35\n   |\n14 |                         heap.push(Reverse((sum, i, j)));\n   |                                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmnuzigod.rs:20:20\n   |\n20 |     while let Some(Reverse((_, i, j))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    let mut count = 0;\n    while count < k && !heap.is_empty() {\n        let Reverse((sum, i, j)) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n        count += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp2gmuf5xo.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp2gmuf5xo.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp2gmuf5xo.rs:12:13\n   |\n12 |         let Reverse((sum, i, j)) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs: Vec<Vec<isize>> = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.iter().take(k as usize).map(|x| x.clone()).collect()\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.truncate(k as usize);\n    pairs\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[[1, 2], [1, 4], [1, 6], [3, 2], [3, 4], [3, 6], [7, 2]]`,\n right: `[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]`', /tmp/tmp_u58i727.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, i, j)));\n            }\n        }\n    }\n    for Reverse((_, i, j)) in heap {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpf1o0i_em.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpf1o0i_em.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, i, j)));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpf1o0i_em.rs:12:27\n   |\n12 |                 heap.push(Reverse((sum, i, j)));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpf1o0i_em.rs:16:9\n   |\n16 |     for Reverse((_, i, j)) in heap {\n   |         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, (i, j))));\n            } else {\n                let top = heap.peek().unwrap();\n                if sum < top.0 {\n                    heap.pop();\n                    heap.push(Reverse((sum, (i, j))));\n                }\n            }\n        }\n    }\n    while let Some(Reverse((_, (i, j)))) = heap.pop() {\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpo7wz8h5y.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpo7wz8h5y.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, (i, j))));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpo7wz8h5y.rs:14:31\n   |\n14 |                     heap.push(Reverse((sum, (i, j))));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpo7wz8h5y.rs:19:20\n   |\n19 |     while let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpf3e_2q8x.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpf3e_2q8x.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpf3e_2q8x.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                if heap.peek().unwrap().0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, i, j)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((sum, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpzlgi6r1k.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpzlgi6r1k.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, i, j)));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpzlgi6r1k.rs:13:31\n   |\n13 |                     heap.push(Reverse((sum, i, j)));\n   |                               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpzlgi6r1k.rs:19:13\n   |\n19 |         let Reverse((sum, i, j)) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmplnsela9h.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmplnsela9h.rs:8:23\n  |\n8 |             heap.push(Reverse((sum, i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmplnsela9h.rs:12:21\n   |\n12 |         if let Some(Reverse((sum, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    if nums1.len() == 0 || nums2.len() == 0 || k == 0 {\n        return result;\n    }\n    for i in 0..nums1.len() {\n        heap.push((nums1[i] + nums2[0], i, 0));\n    }\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        if j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], i, j + 1));\n        }\n        k -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmprksnjcrq.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmprksnjcrq.rs:4:55\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n  |                                                       ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut heap = BinaryHeap::new();\n    let mut result = Vec::new();\n    if nums1.is_empty() || nums2.is_empty() {\n        return result;\n    }\n    heap.push(Reverse((nums1[0] + nums2[0], 0, 0)));\n    let mut visited = vec![vec![false; nums2.len()]; nums1.len()];\n    visited[0][0] = true;\n    while k > 0 && !heap.is_empty() {\n        let Reverse((sum, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n        k -= 1;\n        if i + 1 < nums1.len() && !visited[i + 1][j] {\n            heap.push(Reverse((nums1[i + 1] + nums2[j], i + 1, j)));\n            visited[i + 1][j] = true;\n        }\n        if j + 1 < nums2.len() && !visited[i][j + 1] {\n            heap.push(Reverse((nums1[i] + nums2[j + 1], i, j + 1)));\n            visited[i][j + 1] = true;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpwbiu9m9v.rs:3:20\n  |\n3 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpwbiu9m9v.rs:8:15\n  |\n8 |     heap.push(Reverse((nums1[0] + nums2[0], 0, 0)));\n  |               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpwbiu9m9v.rs:12:13\n   |\n12 |         let Reverse((sum, i, j)) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpwbiu9m9v.rs:16:23\n   |\n16 |             heap.push(Reverse((nums1[i + 1] + nums2[j], i + 1, j)));\n   |                       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpwbiu9m9v.rs:20:23\n   |\n20 |             heap.push(Reverse((nums1[i] + nums2[j + 1], i, j + 1)));\n   |                       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut pq = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pq.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = pq.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp_nswx2m2.rs:4:18\n  |\n4 |     let mut pq = BinaryHeap::new();\n  |                  ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp_nswx2m2.rs:7:21\n  |\n7 |             pq.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp_nswx2m2.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = pq.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.truncate(k as usize);\n    pairs\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[[1, 2], [1, 4], [1, 6], [3, 2], [3, 4], [3, 6], [7, 2]]`,\n right: `[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]`', /tmp/tmp_u58i727.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, usize, usize)> = BinaryHeap::new();\n    if nums1.len() == 0 || nums2.len() == 0 || k == 0 {\n        return res;\n    }\n    heap.push((nums1[0] + nums2[0], nums1[0], 0, 0));\n    while k > 0 && !heap.is_empty() {\n        let (sum, num1, i, j) = heap.pop().unwrap();\n        res.push(vec![num1, nums2[j]]);\n        if i + 1 < nums1.len() {\n            heap.push((nums1[i + 1] + nums2[j], nums1[i + 1], i + 1, j));\n        }\n        if i == 0 && j + 1 < nums2.len() {\n            heap.push((nums1[i] + nums2[j + 1], nums1[i], i, j + 1));\n        }\n        k -= 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `BinaryHeap` in this scope\n --> /tmp/tmpiuxxmj42.rs:4:19\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, usize, usize)> = BinaryHeap::new();\n  |                   ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpiuxxmj42.rs:4:62\n  |\n4 |     let mut heap: BinaryHeap<(isize, isize, usize, usize)> = BinaryHeap::new();\n  |                                                              ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpmoz2wcyp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpmoz2wcyp.rs:8:23\n  |\n8 |             heap.push(Reverse((sum, (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpmoz2wcyp.rs:12:21\n   |\n12 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpto_nyp7_.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpto_nyp7_.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpto_nyp7_.rs:11:21\n   |\n11 |         if let Some(Reverse((_, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpui530ehp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpui530ehp.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpui530ehp.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse(sum));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse(sum));\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse(sum) = heap.pop().unwrap();\n        let mut pair = vec![];\n        for i in 0..nums1.len() {\n            for j in 0..nums2.len() {\n                if nums1[i] + nums2[j] == sum {\n                    pair.push(nums1[i]);\n                    pair.push(nums2[j]);\n                    res.push(pair);\n                    pair = vec![];\n                }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp5iahozou.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp5iahozou.rs:9:27\n  |\n9 |                 heap.push(Reverse(sum));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp5iahozou.rs:12:27\n   |\n12 |                 heap.push(Reverse(sum));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp5iahozou.rs:17:13\n   |\n17 |         let Reverse(sum) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpui530ehp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpui530ehp.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpui530ehp.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.into_iter().take(k as usize).collect()\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, i, j)));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((sum, i, j))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpv9_q25cl.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpv9_q25cl.rs:8:23\n  |\n8 |             heap.push(Reverse((sum, i, j)));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpv9_q25cl.rs:12:21\n   |\n12 |         if let Some(Reverse((sum, i, j))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    let mut visited = vec![vec![false; nums2.len()]; nums1.len()];\n    if nums1.is_empty() || nums2.is_empty() {\n        return res;\n    }\n    heap.push(Pair {\n        x: 0,\n        y: 0,\n        sum: nums1[0] + nums2[0],\n    });\n    visited[0][0] = true;\n    while k > 0 && !heap.is_empty() {\n        let p = heap.pop().unwrap();\n        res.push(vec![nums1[p.x], nums2[p.y]]);\n        if p.x + 1 < nums1.len() && !visited[p.x + 1][p.y] {\n            heap.push(Pair {\n                x: p.x + 1,\n                y: p.y,\n                sum: nums1[p.x + 1] + nums2[p.y],\n            });\n            visited[p.x + 1][p.y] = true;\n        }\n        if p.y + 1 < nums2.len() && !visited[p.x][p.y + 1] {\n            heap.push(Pair {\n                x: p.x,\n                y: p.y + 1,\n                sum: nums1[p.x] + nums2[p.y + 1],\n            });\n            visited[p.x][p.y + 1] = true;\n        }\n        k -= 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp1hewtlzp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n --> /tmp/tmp1hewtlzp.rs:9:15\n  |\n9 |     heap.push(Pair {\n  |               ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp1hewtlzp.rs:19:23\n   |\n19 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror[E0422]: cannot find struct, variant or union type `Pair` in this scope\n  --> /tmp/tmp1hewtlzp.rs:27:23\n   |\n27 |             heap.push(Pair {\n   |                       ^^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0422, E0433.\nFor more information about an error, try `rustc --explain E0422`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else if sum < heap.peek().unwrap().0 {\n                heap.pop();\n                heap.push(Reverse((sum, i, j)));\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((_, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp_tgigi7r.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp_tgigi7r.rs:9:27\n  |\n9 |                 heap.push(Reverse((sum, i, j)));\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp_tgigi7r.rs:12:27\n   |\n12 |                 heap.push(Reverse((sum, i, j)));\n   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp_tgigi7r.rs:17:13\n   |\n17 |         let Reverse((_, i, j)) = heap.pop().unwrap();\n   |             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpui530ehp.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpui530ehp.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpui530ehp.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmpf8cyc3hv.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmpf8cyc3hv.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmpf8cyc3hv.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs: Vec<Vec<isize>> = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.iter().take(k as usize).map(|x| x.to_vec()).collect()\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut result = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n --> /tmp/tmp2z81wc2i.rs:4:20\n  |\n4 |     let mut heap = BinaryHeap::new();\n  |                    ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::BinaryHeap;\n  |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Reverse` in this scope\n --> /tmp/tmp2z81wc2i.rs:7:23\n  |\n7 |             heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this tuple struct\n  |\n1 | use std::cmp::Reverse;\n  |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Reverse` in this scope\n  --> /tmp/tmp2z81wc2i.rs:11:21\n   |\n11 |         if let Some(Reverse((_, (i, j)))) = heap.pop() {\n   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this tuple struct\n   |\n1  | use std::cmp::Reverse;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433, E0531.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    let mut pairs = Vec::new();\n\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n\n    pairs.into_iter().take(k as usize).collect()\n}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[[1, 2], [1, 4], [1, 6], [3, 2], [3, 4], [3, 6], [7, 2]]`,\n right: `[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]`', /tmp/tmp15v0n4sj.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}