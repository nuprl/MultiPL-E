{
  "name": "mbpp_759_is_decimal",
  "language": "rs",
  "prompt": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            count += 1;\n        }\n    }\n    if count > 1 {\n        return false;\n    }\n    let mut nums: Vec<&str> = num.split('.').collect();\n    if nums.len() == 1 {\n        return nums[0].parse::<i32>().is_ok();\n    }\n    if nums[1].len() > 2 {\n        return false;\n    }\n    nums[0].parse::<i32>().is_ok() && nums[1].parse::<i32>().is_ok()",
    "    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)",
    "    let mut is_decimal = false;\n    let mut decimal_count = 0;\n    let mut decimal_index = 0;\n    let mut is_negative = false;\n    let mut is_positive = false;\n    let mut is_zero = false;\n    let mut is_digit = false;\n    let mut is_digit_after_decimal = false;\n    let mut is_digit_before_decimal = false;\n    let mut is_digit_after_negative = false;\n    let mut is_digit_after_positive = false;\n    let mut is_digit_after_zero = false;\n    let mut is_digit_before_decimal_after_negative = false;\n    let mut is_digit_before_decimal_after_positive = false;\n    let mut is_digit_before_decimal_after_zero = false;\n    let mut is_digit_after_decimal_after_negative = false;\n    let mut is_digit_after_decimal_after_positive = false;\n    let mut is_digit_after_decimal_after_zero = false;\n\n    for (i, c) in num.chars().enumerate() {\n        if c == '-' {\n            if is_negative || is_positive || is_zero || is_digit || is_digit_after_decimal || is_digit_before_decimal {\n                return false;\n            }\n            is_negative = true;\n        } else if c == '+' {\n            if is_negative || is_positive || is_zero || is_digit || is_digit_after_decimal || is_digit_before_decimal {\n                return false;\n            }\n            is_positive = true;\n        } else if c == '0' {\n            if is_negative || is_positive || is_zero || is_digit || is_digit_after_decimal || is_digit_before_decimal {\n                return false;\n            }\n            is_zero = true;\n        } else if c == '.' {\n            if decimal_count > 0 || is_negative || is_positive || is_zero || is_digit || is_digit_after_decimal || is_digit",
    "    let mut count = 0;\n    let mut decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal {\n            count += 1;\n        }\n    }\n    count == 2",
    "    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)",
    "    let mut num = num.chars();\n    let mut decimal = false;\n    let mut precision = 0;\n    while let Some(c) = num.next() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal {\n            precision += 1;\n        }\n    }\n    precision == 2",
    "    let re = Regex::new(r\"^\\d*\\.\\d{2}$\").unwrap();\n    re.is_match(&num)",
    "    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    let mut decimal_index = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_index = i;\n            break;\n        }\n    }\n    if decimal_index == 0 {\n        return false;\n    }\n    let decimal_part = &num[decimal_index + 1..];\n    if decimal_part.len() > 2 {\n        return false;\n    }\n    return true;",
    "    let mut chars = num.chars();\n    let mut seen_decimal = false;\n    let mut seen_digit = false;\n    let mut seen_precision = 0;\n    while let Some(c) = chars.next() {\n        match c {\n            '0'...'9' => {\n                seen_digit = true;\n                if seen_decimal {\n                    seen_precision += 1;\n                }\n            }\n            '.' => {\n                if seen_decimal {\n                    return false;\n                }\n                seen_decimal = true;\n            }\n            _ => return false,\n        }\n    }\n    seen_digit && seen_precision <= 2",
    "    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count == 2",
    "    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)",
    "    let mut is_decimal = false;\n    let mut decimal_count = 0;\n    let mut is_negative = false;\n    let mut is_positive = false;\n    let mut is_zero = false;\n    let mut is_digit = false;\n    let mut is_dot = false;\n    let mut is_precision = false;\n\n    for c in num.chars() {\n        if c == '-' {\n            if is_negative || is_positive || is_zero || is_digit {\n                return false;\n            }\n            is_negative = true;\n        } else if c == '+' {\n            if is_negative || is_positive || is_zero || is_digit {\n                return false;\n            }\n            is_positive = true;\n        } else if c == '0' {\n            if is_zero || is_digit {\n                return false;\n            }\n            is_zero = true;\n        } else if c.is_digit(10) {\n            if is_zero || is_digit {\n                return false;\n            }\n            is_digit = true;\n        } else if c == '.' {\n            if is_dot {\n                return false;\n            }\n            is_dot = true;\n        } else {\n            return false;\n        }\n        if is_dot {\n            decimal_count += 1;\n        }\n        if decimal_count > 2 {\n            return false;\n        }\n    }\n    is_decimal = true;\n    is_decimal",
    "    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)",
    "    let mut iter = num.chars();\n    let mut has_decimal = false;\n    let mut has_digit = false;\n    while let Some(c) = iter.next() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            has_digit = true;\n        } else {\n            return false;\n        }\n    }\n    if has_decimal && has_digit {\n        let mut iter = num.chars();\n        let mut decimal_count = 0;\n        while let Some(c) = iter.next() {\n            if c == '.' {\n                break;\n            }\n            decimal_count += 1;\n        }\n        if decimal_count > 1 {\n            return false;\n        }\n        let mut iter = num.chars().rev();\n        let mut decimal_count = 0;\n        while let Some(c) = iter.next() {\n            if c == '.' {\n                break;\n            }\n            decimal_count += 1;\n        }\n        if decimal_count > 2 {\n            return false;\n        }\n        return true;\n    }\n    false",
    "    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n            continue;\n        }\n        if !decimal_found {\n            continue;\n        }\n        decimal_count += 1;\n        if decimal_count > 2 {\n            return false;\n        }\n    }\n    true",
    "    let mut num = num.chars();\n    let mut dot_count = 0;\n    let mut digit_count = 0;\n    while let Some(c) = num.next() {\n        if c == '.' {\n            dot_count += 1;\n            if dot_count > 1 {\n                return false;\n            }\n        } else if c.is_digit(10) {\n            digit_count += 1;\n            if digit_count > 2 {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    true",
    "    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count == 2",
    "    let mut iter = num.chars();\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    let mut digit_count = 0;\n    while let Some(c) = iter.next() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n            continue;\n        }\n        if !c.is_digit(10) {\n            return false;\n        }\n        if decimal_found {\n            decimal_count += 1;\n        }\n        digit_count += 1;\n    }\n    if decimal_count > 2 {\n        return false;\n    }\n    if digit_count == 0 {\n        return false;\n    }\n    true",
    "    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count == 2",
    "    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2"
  ]
}