{
  "name": "mbpp_771_check_expression",
  "language": "rs",
  "prompt": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n\n    stack.is_empty()",
    "    let mut stack = Vec::new();\n    for c in exp.chars() {\n        if c == '(' || c == '{' || c == '[' {\n            stack.push(c);\n        } else {\n            if stack.is_empty() {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '[' | '{' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '(' | '[' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()",
    "    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()",
    "    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !is_matching_pair(top, c) {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '{' | '[' | '(' => stack.push(c),\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()",
    "    let mut stack: Vec<char> = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            '}' => {\n                if stack.pop() != Some('{') {\n                    return false;\n                }\n            }\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()",
    "    let mut stack = Vec::new();\n    for c in exp.chars() {\n        match c {\n            '(' | '{' | '[' => stack.push(c),\n            ')' | '}' | ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                let top = stack.pop().unwrap();\n                if !((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')) {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()"
  ]
}