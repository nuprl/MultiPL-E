{
  "name": "mbpp_583_catalan_number",
  "language": "rs",
  "prompt": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan / (num + 1)",
    "    let mut catalan_numbers = vec![1, 1];\n\n    for i in 2..=num {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n\n    catalan_numbers[num as usize]",
    "    if num <= 1 {\n        1\n    } else {\n        let mut res = 0;\n        for i in 0..num {\n            res += catalan_number(i) * catalan_number(num - i - 1);\n        }\n        res\n    }",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n\n    for i in 2..=num {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n\n    catalan[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n\n    for i in 2..=num {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        1\n    } else {\n        let mut res = 0;\n        for i in 0..num {\n            res += catalan_number(i) * catalan_number(num - i - 1);\n        }\n        res\n    }",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n\n    for i in 2..=num {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    let mut catalan: Vec<isize> = vec![0; num as usize + 1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan_numbers = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)",
    "    let mut catalan = Vec::new();\n    catalan.push(1);\n    catalan.push(1);\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan[j] * catalan[i - j - 1];\n        }\n        catalan.push(sum);\n    }\n    catalan[num as usize]",
    "    let mut catalan_numbers = vec![1, 1];\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan / (num + 1)",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    let mut catalan: isize = 1;\n    let mut n: isize = num;\n    let mut r: isize = 1;\n\n    if num <= 1 {\n        return 1;\n    }\n\n    while n >= 0 {\n        catalan *= n;\n        n -= 1;\n    }\n\n    while r >= 1 {\n        catalan /= r;\n        r -= 1;\n    }\n\n    return catalan;",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res",
    "    let mut catalan_numbers = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n\n    catalan_numbers[num as usize]",
    "    let mut c = vec![0; (num + 1) as usize];\n    c[0] = 1;\n    c[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            c[i as usize] += c[j as usize] * c[(i - j - 1) as usize];\n        }\n    }\n    c[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan: Vec<isize> = vec![0; (num + 1) as usize];\n\n    catalan[0] = 1;\n    catalan[1] = 1;\n\n    for i in 2..=num {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n\n    catalan[num as usize]",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan = vec![0; num as usize + 1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    let mut catalan = vec![0; num as usize + 1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)",
    "    let mut catalan = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    let mut catalan_numbers: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan_number = 1;\n    let mut i = 1;\n    while i <= num {\n        catalan_number = catalan_number * (2 * num - i + 1) / i;\n        i += 1;\n    }\n    catalan_number",
    "    let mut catalan_numbers: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]",
    "    if num == 0 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        1\n    } else {\n        let mut res = 0;\n        for i in 0..num {\n            res += catalan_number(i) * catalan_number(num - i - 1);\n        }\n        res\n    }",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        1\n    } else {\n        let mut res = 0;\n        for i in 0..num {\n            res += catalan_number(i) * catalan_number(num - i - 1);\n        }\n        res\n    }",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res",
    "    let mut result = 1;\n    for i in 0..num {\n        result *= (num + i);\n        result /= (i + 1);\n    }\n    result / (num + 1)",
    "    let mut catalan_numbers: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan_numbers = vec![1, 1];\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]",
    "    let mut catalan_number = 1;\n    for i in 0..num {\n        catalan_number = catalan_number * (2 * num - i) / (i + 1);\n    }\n    catalan_number",
    "    let mut catalan: isize = 1;\n    let mut i: isize = 1;\n    while i <= num {\n        catalan *= (2 * num - i + 1);\n        catalan /= i;\n        i += 1;\n    }\n    catalan / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut result = 0;\n    for i in 0..num {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    result",
    "    if num <= 1 {\n        1\n    } else {\n        let mut res = 0;\n        for i in 0..num {\n            res += catalan_number(i) * catalan_number(num - i - 1);\n        }\n        res\n    }",
    "    let mut catalan_numbers = vec![1; (num + 1) as usize];\n    for i in 1..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut result = 1;\n    for i in 0..num {\n        result = result * (2 * num - i) / (i + 1);\n    }\n    result / (num + 1)",
    "    let mut catalan = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan: isize = 1;\n    let mut i: isize = 0;\n    while i < num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n        i += 1;\n    }\n    catalan",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan = vec![0; num as usize + 1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    let mut catalan: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    let mut catalan: isize = 0;\n    if num <= 1 {\n        return 1;\n    }\n    for i in 0..num {\n        catalan += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return catalan;",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan_numbers = vec![1];\n    for i in 1..num {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]",
    "    if num == 0 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num == 0 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan_numbers = vec![1];\n    for i in 1..num {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut result = 0;\n    for i in 0..num {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    result",
    "    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res",
    "    let mut result = 1;\n    for i in 0..num {\n        result = result * (2 * num - i) / (i + 1);\n    }\n    result / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    let mut result = 1;\n    for i in 0..num {\n        result = result * (2 * num - i) / (i + 1);\n    }\n    result / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan = vec![0; num as usize + 1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan_numbers: Vec<isize> = vec![1, 1];\n\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n\n    catalan_numbers[num as usize]",
    "    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        1\n    } else {\n        let mut res = 0;\n        for i in 0..num {\n            res += catalan_number(i) * catalan_number(num - i - 1);\n        }\n        res\n    }",
    "    let mut catalan_numbers = vec![1, 1];\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res",
    "    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan_numbers: Vec<isize> = vec![1, 1];\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan_numbers = vec![1, 1];\n\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n\n    catalan_numbers[num as usize]",
    "    let mut result = 1;\n    for i in 0..num {\n        result = result * (2 * num - i) / (i + 1);\n    }\n    result / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut result = 0;\n    for i in 0..num {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    result",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan_numbers = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]",
    "    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result",
    "    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result",
    "    let mut result = 1;\n    for i in 0..num {\n        result = result * (2 * num - i) / (i + 1);\n    }\n    result / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan: isize = 1;\n    let mut n: isize = num;\n    let mut r: isize = num;\n\n    if num <= 1 {\n        return 1;\n    }\n\n    for _ in 0..num {\n        catalan *= n;\n        n -= 1;\n    }\n\n    for _ in 0..num {\n        catalan /= r;\n        r -= 1;\n    }\n\n    catalan",
    "    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result / (num + 1)",
    "    let mut catalan: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan_numbers = vec![1, 1];\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]",
    "    let mut result = 1;\n    for i in 0..num {\n        result = result * (2 * num - i) / (i + 1);\n    }\n    result / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n\n    catalan[num as usize]",
    "    if num <= 1 {\n        1\n    } else {\n        let mut res = 0;\n        for i in 0..num {\n            res += catalan_number(i) * catalan_number(num - i - 1);\n        }\n        res\n    }",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res",
    "    let mut c = 1;\n    for i in 0..num {\n        c = c * (2 * num - i) / (i + 1);\n    }\n    c / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan_numbers: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n\n    catalan_numbers[num as usize]",
    "    let mut catalan: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut c: isize = 1;\n    for i in 0..num {\n        c = c * (2 * num - i) / (i + 1);\n    }\n    c / (num + 1)",
    "    if num == 0 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res"
  ]
}