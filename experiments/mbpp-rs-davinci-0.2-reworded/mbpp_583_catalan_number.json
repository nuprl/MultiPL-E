{
  "name": "mbpp_583_catalan_number",
  "language": "rs",
  "prompt": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan / (num + 1)",
    "    let mut catalan_numbers = vec![1, 1];\n\n    for i in 2..=num {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n\n    catalan_numbers[num as usize]",
    "    if num <= 1 {\n        1\n    } else {\n        let mut res = 0;\n        for i in 0..num {\n            res += catalan_number(i) * catalan_number(num - i - 1);\n        }\n        res\n    }",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n\n    for i in 2..=num {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n\n    catalan[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n\n    for i in 2..=num {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        1\n    } else {\n        let mut res = 0;\n        for i in 0..num {\n            res += catalan_number(i) * catalan_number(num - i - 1);\n        }\n        res\n    }",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)",
    "    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res",
    "    let mut catalan = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n\n    for i in 2..=num {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    let mut catalan: Vec<isize> = vec![0; num as usize + 1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]",
    "    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)"
  ]
}