{
  "name": "mbpp_743_rotate_right",
  "language": "rs",
  "prompt": "/// Write a function to rotate a given vector by specified number of items to the right direction. https://www.geeksforgeeks.org/rsthon-program-right-rotate-vector-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = Vec::new();\n    let n = list.len() as isize;\n    for i in 0..n {\n        result.push(list[((i + m) % n) as usize]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..list.len() {\n        result.push(list[((i as isize) + m) as usize % list.len()]);\n    }\n    result",
    "    let mut result = Vec::new();\n    let len = list.len();\n    let m = m % len as isize;\n    for i in 0..len {\n        result.push(list[(i + m as usize) % len]);\n    }\n    result",
    "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..list.len() {\n        result.push(list[(i + m as usize) % list.len()]);\n    }\n    result",
    "    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    if m == 0 {\n        return list;\n    }\n    let mut i = 0;\n    let mut j = n - m;\n    while i < j {\n        list.swap(i as usize, j as usize);\n        i += 1;\n        j += 1;\n    }\n    i = n - m;\n    j = n - 1;\n    while i < j {\n        list.swap(i as usize, j as usize);\n        i += 1;\n        j += 1;\n    }\n    i = 0;\n    j = n - 1;\n    while i < j {\n        list.swap(i as usize, j as usize);\n        i += 1;\n        j += 1;\n    }\n    list",
    "    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if n == 0 || m == 0 {\n        return list;\n    }\n    m = m % n;\n    if m < 0 {\n        m = m + n;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list",
    "    let mut list = list;\n    let mut m = m;\n    let len = list.len() as isize;\n    m = m % len;\n    if m == 0 {\n        return list;\n    }\n    let mut i = 0;\n    let mut j = len - m - 1;\n    while i < j {\n        list.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    i = len - m;\n    j = len - 1;\n    while i < j {\n        list.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    i = 0;\n    j = len - 1;\n    while i < j {\n        list.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    list",
    "    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        m -= 1;\n    }\n    list",
    "    let mut list = list;\n    let mut m = m;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = 0;\n    let mut gcd = 0;\n    let n = list.len();\n    while m != 0 {\n        if m < 0 {\n            m = m + n as isize;\n        }\n        gcd = gcd_euclid(m, n as isize);\n        for j in 0..gcd {\n            temp = list[j as usize];\n            i = j;\n            while true {\n                let k = i + m;\n                if k >= n as isize {\n                    k = k - n as isize;\n                }\n                if k == j {\n                    break;\n                }\n                list[i as usize] = list[k as usize];\n                i = k;\n            }\n            list[i as usize] = temp;\n        }\n        m = m - 1;\n    }\n    list",
    "    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    if m > len as isize {\n        m = m % len as isize;\n    }\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        i += 1;\n    }\n    list",
    "    let mut list = list;\n    let n = list.len() as isize;\n    let m = m % n;\n    list.rotate_right(m as usize);\n    list",
    "    let mut result = Vec::new();\n    let mut list = list;\n    let n = list.len() as isize;\n    let m = m % n;\n    let mut count = 0;\n    while count < n {\n        result.push(list[(n - m + count) as usize % n as usize]);\n        count += 1;\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut list = list;\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        result.push(last);\n    }\n    result.append(&mut list);\n    result",
    "    let mut list = list;\n    let mut m = m;\n    let mut i = 0;\n    while m > 0 {\n        let temp = list[i];\n        list[i] = list[i + 1];\n        list[i + 1] = temp;\n        i += 1;\n        m -= 1;\n    }\n    list",
    "    let mut list = list;\n    let n = list.len() as isize;\n    let m = m % n;\n    let mut temp = vec![0; m as usize];\n    for i in 0..m {\n        temp[i as usize] = list[(n - m + i) as usize];\n    }\n    for i in (m..n).rev() {\n        list[i as usize] = list[(i - m) as usize];\n    }\n    for i in 0..m {\n        list[i as usize] = temp[i as usize];\n    }\n    list",
    "    let mut list = list;\n    let n = list.len() as isize;\n    let m = m % n;\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list",
    "    let mut list = list;\n    let len = list.len();\n    let m = m % len as isize;\n    let mut temp = Vec::new();\n    for i in 0..m {\n        temp.push(list[len - m as usize + i as usize]);\n    }\n    for i in 0..len - m as usize {\n        list[len - i as usize - 1] = list[len - m as usize - i as usize - 1];\n    }\n    for i in 0..m {\n        list[i as usize] = temp[i as usize];\n    }\n    list",
    "    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    if m > len as isize {\n        m = m % len as isize;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[len - 1];\n        for j in (1..len).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list",
    "    let mut result = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        result.push(list[((i + m) % len) as usize]);\n    }\n    result",
    "    let mut list = list;\n    let mut m = m;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = 0;\n    let n = list.len() as isize;\n    while m > 0 {\n        temp = list[n - 1];\n        for i in (0..n - 1).rev() {\n            list[i + 1] = list[i];\n        }\n        list[0] = temp;\n        m -= 1;\n    }\n    list"
  ]
}