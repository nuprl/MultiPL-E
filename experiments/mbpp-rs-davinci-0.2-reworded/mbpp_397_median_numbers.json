{
  "name": "mbpp_397_median_numbers",
  "language": "rs",
  "prompt": "/// Write a function to find the median of three numbers.\nfn median_numbers(a: isize, b: isize, c: isize) -> f64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = median_numbers;\n    assert_eq!(candidate(25, 55, 65), 55.0);\n    assert_eq!(candidate(20, 10, 30), 20.0);\n    assert_eq!(candidate(15, 45, 75), 45.0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let m = v[1];\n    let n = v[0] + v[2];\n    let d = n as f64 / 2.0;\n    if m as f64 == d {\n        d\n    } else {\n        m as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let n = v.len();\n    if n % 2 == 0 {\n        (v[n / 2] + v[n / 2 - 1]) as f64 / 2.0\n    } else {\n        v[n / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[(v.len() / 2) - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let n = v.len();\n    if n % 2 == 0 {\n        (v[n / 2] + v[n / 2 - 1]) as f64 / 2.0\n    } else {\n        v[n / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64)",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let len = v.len();\n    if len % 2 == 0 {\n        (v[len / 2] + v[len / 2 - 1]) as f64 / 2.0\n    } else {\n        v[len / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut numbers = [a, b, c];\n    numbers.sort();\n    if numbers.len() % 2 == 0 {\n        (numbers[numbers.len() / 2] + numbers[numbers.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        numbers[numbers.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let a = v[v.len() / 2];\n        let b = v[v.len() / 2 - 1];\n        (a + b) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let n = v.len();\n    if n % 2 == 0 {\n        (v[n / 2] + v[n / 2 - 1]) as f64 / 2.0\n    } else {\n        v[n / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let n = v.len() as f64;\n    if n % 2.0 == 0.0 {\n        (v[(n / 2.0) as usize] + v[(n / 2.0 - 1.0) as usize]) as f64 / 2.0\n    } else {\n        v[(n / 2.0) as usize] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut nums = [a, b, c];\n    nums.sort();\n    if nums.len() % 2 == 0 {\n        (nums[nums.len() / 2] + nums[nums.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        nums[nums.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[(v.len() / 2) - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let m = v[1];\n    let l = v[0];\n    let r = v[2];\n    if m == l {\n        (m + r) as f64 / 2.0\n    } else {\n        m as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let (a, b, c) = (v[0], v[1], v[2]);\n    if a + b == c {\n        (a + b) as f64 / 2.0\n    } else if a + c == b {\n        (a + c) as f64 / 2.0\n    } else if b + c == a {\n        (b + c) as f64 / 2.0\n    } else {\n        b as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let len = v.len();\n    if len % 2 == 0 {\n        (v[len / 2] + v[len / 2 - 1]) as f64 / 2.0\n    } else {\n        v[len / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 1 {\n        v[v.len() / 2] as f64\n    } else {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v[1];\n    let left = v[0];\n    let right = v[2];\n    if mid - left == right - mid {\n        mid as f64\n    } else {\n        (left + right) as f64 / 2.0\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[(v.len() / 2) - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    match v.len() {\n        1 => v[0] as f64,\n        2 => (v[0] + v[1]) as f64 / 2.0,\n        3 => v[1] as f64,\n        _ => 0.0,\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let n = v.len();\n    if n % 2 == 0 {\n        (v[n / 2 - 1] + v[n / 2]) as f64 / 2.0\n    } else {\n        v[n / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 1 {\n        v[v.len() / 2] as f64\n    } else {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let m = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[m] + v[m - 1]) as f64 / 2.0\n    } else {\n        v[m] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut numbers = [a, b, c];\n    numbers.sort();\n    if numbers.len() % 2 == 0 {\n        let mid = numbers.len() / 2;\n        (numbers[mid - 1] + numbers[mid]) as f64 / 2.0\n    } else {\n        numbers[numbers.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64 + v[2] as f64) / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64 + v[2] as f64) / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let median = v[1];\n    median as f64",
    "    let mut numbers = [a, b, c];\n    numbers.sort();\n    if numbers.len() % 2 == 0 {\n        (numbers[numbers.len() / 2] + numbers[numbers.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        numbers[numbers.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64 + v[2] as f64) / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let m = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[m - 1] + v[m]) as f64 / 2.0\n    } else {\n        v[m] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    median(&v)",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let (a, b, c) = (v[0], v[1], v[2]);\n    if a == b && b == c {\n        a as f64\n    } else if a == b {\n        b as f64\n    } else if b == c {\n        b as f64\n    } else {\n        c as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let median = v[1];\n    (median as f64)",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let n = v.len();\n    if n % 2 == 0 {\n        (v[n / 2 - 1] + v[n / 2]) as f64 / 2.0\n    } else {\n        v[n / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let len = v.len();\n    if len % 2 == 0 {\n        let mid = len / 2;\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[len / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v[1];\n    if mid == a {\n        return a as f64;\n    } else if mid == b {\n        return b as f64;\n    } else {\n        return c as f64;\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[(v.len() / 2) - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut numbers = [a, b, c];\n    numbers.sort();\n    numbers[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }"
  ]
}