{
  "name": "mbpp_572_two_unique_nums",
  "language": "rs",
  "prompt": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums",
    "    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums",
    "    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums",
    "    let mut nums_set = HashSet::new();\n    for num in nums {\n        nums_set.insert(num);\n    }\n    nums_set.into_iter().collect()",
    "    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums",
    "    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n\n    for num in nums {\n        if seen.contains(&num) {\n            continue;\n        }\n\n        seen.insert(num);\n        result.push(num);\n    }\n\n    result",
    "    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        while i < nums.len() - 1 && nums[i] == nums[i + 1] {\n            i += 1;\n        }\n        i += 1;\n    }\n    result",
    "    let mut nums_set = HashSet::new();\n    for num in nums {\n        nums_set.insert(num);\n    }\n    nums_set.into_iter().collect()",
    "    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums",
    "    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums",
    "    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums",
    "    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums",
    "    let mut unique_nums = Vec::new();\n    for n in nums {\n        if !unique_nums.contains(&n) {\n            unique_nums.push(n);\n        }\n    }\n    unique_nums",
    "    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums",
    "    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums",
    "    let mut nums = nums;\n    nums.sort();\n    let mut res = Vec::new();\n    for i in 0..nums.len() {\n        if i == 0 {\n            res.push(nums[i]);\n        } else if nums[i] != nums[i - 1] {\n            res.push(nums[i]);\n        }\n    }\n    res",
    "    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums",
    "    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums",
    "    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == 0 || nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result",
    "    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result"
  ]
}