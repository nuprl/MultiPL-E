{
  "name": "mbpp_807_first_odd",
  "language": "rs",
  "prompt": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for i in nums {\n        if i % 2 != 0 {\n            return i;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for i in nums {\n        if i % 2 != 0 {\n            return i;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut first_odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            first_odd = num;\n            break;\n        }\n    }\n    first_odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for i in nums {\n        if i % 2 == 1 {\n            return i;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&x| x % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpwk5zihl2.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for i in nums {\n        if i % 2 != 0 {\n            odd = i;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|x| x % 2 == 1).next().unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpth863hht.rs:3:30\n  |\n3 |     nums.iter().filter(|x| x % 2 == 1).next().unwrap()\n  |                            - ^ - {integer}\n  |                            |\n  |                            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `x`\n  |\n3 |     nums.iter().filter(|x| *x % 2 == 1).next().unwrap()\n  |                            +\n\nerror[E0308]: mismatched types\n --> /tmp/tmpth863hht.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().filter(|x| x % 2 == 1).next().unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().filter(|x| x % 2 == 1).next().unwrap()\n  |     +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|x| x % 2 != 0).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpqqxzfx71.rs:3:28\n  |\n3 |     nums.iter().find(|x| x % 2 != 0).unwrap()\n  |                          - ^ - {integer}\n  |                          |\n  |                          &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `x`\n  |\n3 |     nums.iter().find(|x| *x % 2 != 0).unwrap()\n  |                          +\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqqxzfx71.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|x| x % 2 != 0).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|x| x % 2 != 0).unwrap()\n  |     +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|x| x % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp3au37tp2.rs:3:28\n  |\n3 |     nums.iter().find(|x| x % 2 == 1).unwrap()\n  |                          - ^ - {integer}\n  |                          |\n  |                          &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `x`\n  |\n3 |     nums.iter().find(|x| *x % 2 == 1).unwrap()\n  |                          +\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3au37tp2.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|x| x % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|x| x % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&x| x % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpwk5zihl2.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&x| x % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpwk5zihl2.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&x| x % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpwk5zihl2.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&n| n % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmppfkzpff_.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|&n| n % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|&n| n % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&x| x % 2 != 0).unwrap_or(&0).clone()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    // TODO: implement this function\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `1`', /tmp/tmpwz8vl0h3.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&x| x % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpwk5zihl2.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x| x % 2 != 0).next().unwrap_or(&0).clone()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 == 1 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut first_odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            first_odd = num;\n            break;\n        }\n    }\n    first_odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 != 0 {\n            return n;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&x| x % 2 != 0).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpwpx5vm7s.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|&x| x % 2 != 0).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|&x| x % 2 != 0).unwrap()\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&x| x % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpwk5zihl2.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut first_odd = 0;\n    for num in nums {\n        if num % 2 == 1 {\n            first_odd = num;\n            break;\n        }\n    }\n    first_odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&x| x % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpwk5zihl2.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&x| x % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpwk5zihl2.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for n in nums {\n        if n % 2 == 1 {\n            result = n;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 == 1 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 != 0 {\n            return n;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 == 1 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in nums {\n        if i % 2 != 0 {\n            result = i;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for i in nums {\n        if i % 2 != 0 {\n            odd = i;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for i in nums {\n        if i % 2 != 0 {\n            odd = i;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for n in nums {\n        if n % 2 == 1 {\n            result = n;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&x| x % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpwk5zihl2.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut first_odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            first_odd = num;\n            break;\n        }\n    }\n    first_odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for i in nums {\n        if i % 2 != 0 {\n            odd = i;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 == 1 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 == 1 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < nums.len() {\n        if nums[i] % 2 == 1 {\n            return nums[i];\n        }\n        i += 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for n in nums {\n        if n % 2 == 1 {\n            odd = n;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 != 0 {\n            return n;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut first_odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            first_odd = num;\n            break;\n        }\n    }\n    first_odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x| x % 2 == 1).next().unwrap().clone()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x| x % 2 == 1).next().unwrap_or(&0).clone()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 == 1 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 != 0 {\n            return n;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&n| n % 2 != 0).next().unwrap().clone()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|x| x % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp3au37tp2.rs:3:28\n  |\n3 |     nums.iter().find(|x| x % 2 == 1).unwrap()\n  |                          - ^ - {integer}\n  |                          |\n  |                          &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `x`\n  |\n3 |     nums.iter().find(|x| *x % 2 == 1).unwrap()\n  |                          +\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3au37tp2.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|x| x % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|x| x % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut first_odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            first_odd = num;\n            break;\n        }\n    }\n    first_odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut first_odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            first_odd = num;\n            break;\n        }\n    }\n    first_odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut first_odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            first_odd = num;\n            break;\n        }\n    }\n    first_odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&n| n % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmppfkzpff_.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|&n| n % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|&n| n % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut first_odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            first_odd = num;\n            break;\n        }\n    }\n    first_odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut first_odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            first_odd = num;\n            break;\n        }\n    }\n    first_odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&n| n % 2 != 0).next().unwrap_or(&0)\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmppoyw5vlo.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().filter(|&n| n % 2 != 0).next().unwrap_or(&0)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().filter(|&n| n % 2 != 0).next().unwrap_or(&0)\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 == 1 {\n            return n;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 != 0 {\n            return n;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = None;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = Some(num);\n            break;\n        }\n    }\n    odd.unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&x| x % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpwk5zihl2.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut first_odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            first_odd = num;\n            break;\n        }\n    }\n    first_odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 == 1 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut first_odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            first_odd = num;\n            break;\n        }\n    }\n    first_odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 == 1 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 == 1 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|x| x % 2 != 0).nth(0).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpz9p3gne4.rs:3:30\n  |\n3 |     nums.iter().filter(|x| x % 2 != 0).nth(0).unwrap()\n  |                            - ^ - {integer}\n  |                            |\n  |                            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `x`\n  |\n3 |     nums.iter().filter(|x| *x % 2 != 0).nth(0).unwrap()\n  |                            +\n\nerror[E0308]: mismatched types\n --> /tmp/tmpz9p3gne4.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().filter(|x| x % 2 != 0).nth(0).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().filter(|x| x % 2 != 0).nth(0).unwrap()\n  |     +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for n in nums {\n        if n % 2 != 0 {\n            result = n;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut res = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            res = num;\n            break;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut odd = 0;\n    for num in nums {\n        if num % 2 == 1 {\n            odd = num;\n            break;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    nums.iter().find(|&x| x % 2 == 1).unwrap()\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpwk5zihl2.rs:3:5\n  |\n2 | fn first_odd(nums: Vec<isize>) -> isize {\n  |                                   ----- expected `isize` because of return type\n3 |     nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n3 |     *nums.iter().find(|&x| x % 2 == 1).unwrap()\n  |     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 != 0 {\n            return n;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for n in nums {\n        if n % 2 != 0 {\n            return n;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 != 0 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 != 0 {\n            return num;\n        }\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for num in nums {\n        if num % 2 == 1 {\n            result = num;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n    for num in nums {\n        if num % 2 == 1 {\n            return num;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}