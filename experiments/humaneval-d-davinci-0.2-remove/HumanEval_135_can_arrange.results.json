{
  "language": "d",
  "name": "HumanEval_135_can_arrange",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i+1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp5u0twyli.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp5u0twyli.can_arrange(long[]) [0x427d58]\n??:? void tmp5u0twyli.__unittest_L23_C1() [0x427dcc]\n??:? void tmp5u0twyli.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpat2pmk2h.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpat2pmk2h.__unittest_L23_C1() [0x427e38]\n??:? void tmpat2pmk2h.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i + 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpdf2vzjlc.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpdf2vzjlc.can_arrange(long[]) [0x427d58]\n??:? void tmpdf2vzjlc.__unittest_L23_C1() [0x427dcc]\n??:? void tmpdf2vzjlc.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long max_index = -1;\n    foreach(i, e; arr)\n    {\n        if(e > max)\n        {\n            max = e;\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbh9158av.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281c5]\n??:? void tmpbh9158av.__unittest_L25_C1() [0x427dd3]\n??:? void tmpbh9158av.__modtest() [0x427f48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b042]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430684]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430161]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b019]\n??:? runModuleUnitTests [0x42bf85]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428614]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i + 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpdf2vzjlc.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpdf2vzjlc.can_arrange(long[]) [0x427d58]\n??:? void tmpdf2vzjlc.__unittest_L23_C1() [0x427dcc]\n??:? void tmpdf2vzjlc.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n        }\n    }\n    long[] arr2 = new long[max + 1];\n    for (long i = 0; i < arr.length; i++)\n    {\n        arr2[arr[i]] = i;\n    }\n    long max2 = 0;\n    for (long i = 0; i < arr2.length; i++)\n    {\n        if (arr2[i] > max2)\n        {\n            max2 = arr2[i];\n        }\n    }\n    return max2;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpenhw02qt.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x4282c5]\n??:? void tmpenhw02qt.__unittest_L36_C1() [0x427ed3]\n??:? void tmpenhw02qt.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c37f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b212]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43049d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43094c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430429]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1e9]\n??:? runModuleUnitTests [0x42c155]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428788]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplbymf6is.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmplbymf6is.__unittest_L23_C1() [0x427e38]\n??:? void tmplbymf6is.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3jbdqian.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp3jbdqian.__unittest_L25_C1() [0x427df3]\n??:? void tmp3jbdqian.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--) \n    {\n        if (arr[i] >= max) \n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5yzn5war.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp5yzn5war.__unittest_L25_C1() [0x427def]\n??:? void tmp5yzn5war.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmtgpu9gw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpmtgpu9gw.__unittest_L27_C1() [0x427de3]\n??:? void tmpmtgpu9gw.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6vn3slzy.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6vn3slzy.__unittest_L25_C1() [0x427def]\n??:? void tmp6vn3slzy.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmtgpu9gw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpmtgpu9gw.__unittest_L27_C1() [0x427de3]\n??:? void tmpmtgpu9gw.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = arr.length - 1; i > 0; i--) \n    {\n        if (arr[i] >= arr[i - 1]) \n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpq0qbv903.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpq0qbv903.__unittest_L23_C1() [0x427de3]\n??:? void tmpq0qbv903.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long res = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            res = i - 1;\n            break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx3bx0yuj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpx3bx0yuj.__unittest_L24_C1() [0x427de7]\n??:? void tmpx3bx0yuj.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n            return max_index;\n        }\n        max = v;\n        max_index = i;\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdlzqhibp.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmpdlzqhibp.__unittest_L26_C1() [0x427ddb]\n??:? void tmpdlzqhibp.__modtest() [0x427f50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3hui37os.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp3hui37os.__unittest_L25_C1() [0x427df3]\n??:? void tmp3hui37os.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6vn3slzy.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6vn3slzy.__unittest_L25_C1() [0x427def]\n??:? void tmp6vn3slzy.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0) return -1;\n    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n        else if (arr[i] == max)\n        {\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpf0mygwe1.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428255]\n??:? void tmpf0mygwe1.__unittest_L30_C1() [0x427e63]\n??:? void tmpf0mygwe1.__modtest() [0x427fd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b146]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430788]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430265]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b11d]\n??:? runModuleUnitTests [0x42c089]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428718]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsquphpwv.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428205]\n??:? void tmpsquphpwv.__unittest_L25_C1() [0x427e13]\n??:? void tmpsquphpwv.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c263]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430289]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430215]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]\n??:? runModuleUnitTests [0x42c039]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n        }\n    }\n    long[] arr2 = new long[max + 1];\n    for (long i = 0; i < arr.length; i++)\n    {\n        arr2[arr[i]] = i;\n    }\n    long max2 = 0;\n    for (long i = 0; i < arr2.length; i++)\n    {\n        if (arr2[i] > max2)\n        {\n            max2 = arr2[i];\n        }\n    }\n    return max2;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpenhw02qt.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x4282c5]\n??:? void tmpenhw02qt.__unittest_L36_C1() [0x427ed3]\n??:? void tmpenhw02qt.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c37f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b212]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43049d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43094c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430429]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1e9]\n??:? runModuleUnitTests [0x42c155]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428788]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i + 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpdf2vzjlc.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpdf2vzjlc.can_arrange(long[]) [0x427d58]\n??:? void tmpdf2vzjlc.__unittest_L23_C1() [0x427dcc]\n??:? void tmpdf2vzjlc.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n            return max_index;\n        }\n        else\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr4sabept.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmpr4sabept.__unittest_L29_C1() [0x427dfb]\n??:? void tmpr4sabept.__modtest() [0x427f70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i + 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpdf2vzjlc.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpdf2vzjlc.can_arrange(long[]) [0x427d58]\n??:? void tmpdf2vzjlc.__unittest_L23_C1() [0x427dcc]\n??:? void tmpdf2vzjlc.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long index = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            if (i - 1 > max)\n            {\n                max = i - 1;\n                index = i - 1;\n            }\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj4qk913r.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4281fd]\n??:? void tmpj4qk913r.__unittest_L28_C1() [0x427e0b]\n??:? void tmpj4qk913r.__modtest() [0x427f80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430281]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430730]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43020d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c5]\n??:? runModuleUnitTests [0x42c031]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long res = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            res = i - 1;\n            break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx3bx0yuj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpx3bx0yuj.__unittest_L24_C1() [0x427de7]\n??:? void tmpx3bx0yuj.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    foreach(i, v; arr)\n    {\n        if(v < arr[i - 1])\n            max = max(max, i - 1);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf2q6n_99.d(17): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2q6n_99.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long res = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n        {\n            res = i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqf6lo0x8.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpqf6lo0x8.__unittest_L23_C1() [0x427deb]\n??:? void tmpqf6lo0x8.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            if (maxIndex == -1)\n            {\n                maxIndex = i;\n                max = arr[i];\n            }\n            else\n            {\n                if (arr[i] > max)\n                {\n                    maxIndex = i;\n                    max = arr[i];\n                }\n            }\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpczcyk1di.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42827d]\n??:? void tmpczcyk1di.__unittest_L36_C1() [0x427fb3]\n??:? void tmpczcyk1di.__modtest() [0x427ffc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b16e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430301]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43028d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b145]\n??:? runModuleUnitTests [0x42c0b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428740]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n            return max_index;\n        }\n        else\n        {\n            max = e;\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnyl_wpix.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmpnyl_wpix.__unittest_L29_C1() [0x427ddb]\n??:? void tmpnyl_wpix.__modtest() [0x427f50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpadzw2fye.d(83): Error: semicolon expected, not `unittest`\n/tmp/tmpadzw2fye.d(83): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpadzw2fye.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3qljut14.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428205]\n??:? void tmp3qljut14.__unittest_L25_C1() [0x427e13]\n??:? void tmp3qljut14.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c263]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430289]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430215]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]\n??:? runModuleUnitTests [0x42c039]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long maxIndex = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfrrvzosh.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpfrrvzosh.__unittest_L25_C1() [0x427def]\n??:? void tmpfrrvzosh.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++) \n    {\n        if (arr[i] > arr[i + 1]) \n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqpebxoei.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqpebxoei.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n            continue;\n        if (arr[i] > max)\n            max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3u5ws9b0.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42820d]\n??:? void tmp3u5ws9b0.__unittest_L23_C1() [0x427e6c]\n??:? void tmp3u5ws9b0.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]\n??:? runModuleUnitTests [0x42c041]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcr6iyh9h.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428205]\n??:? void tmpcr6iyh9h.__unittest_L25_C1() [0x427e13]\n??:? void tmpcr6iyh9h.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c263]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430289]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430215]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]\n??:? runModuleUnitTests [0x42c039]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmtgpu9gw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpmtgpu9gw.__unittest_L27_C1() [0x427de3]\n??:? void tmpmtgpu9gw.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n            continue;\n        if (arr[i] > max)\n            max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3u5ws9b0.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42820d]\n??:? void tmp3u5ws9b0.__unittest_L23_C1() [0x427e6c]\n??:? void tmp3u5ws9b0.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]\n??:? runModuleUnitTests [0x42c041]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long n = arr.length;\n    long max = arr[n-1];\n    long index = -1;\n    for(long i = n-2; i >= 0; i--)\n    {\n        if(arr[i] <= max)\n        {\n            index = i;\n            max = max(max, arr[i]);\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr_fgs7p7.d(21): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_fgs7p7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmtgpu9gw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpmtgpu9gw.__unittest_L27_C1() [0x427de3]\n??:? void tmpmtgpu9gw.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    long index = -1;\n    foreach(long i; arr)\n    {\n        index++;\n        if(i <= max)\n        {\n            max = i;\n            max_index = index;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbuvmx2e8.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281c5]\n??:? void tmpbuvmx2e8.__unittest_L27_C1() [0x427dd3]\n??:? void tmpbuvmx2e8.__modtest() [0x427f48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b042]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430684]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430161]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b019]\n??:? runModuleUnitTests [0x42bf85]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428614]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long res = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            res = i - 1;\n            break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx3bx0yuj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpx3bx0yuj.__unittest_L24_C1() [0x427de7]\n??:? void tmpx3bx0yuj.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3jbdqian.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp3jbdqian.__unittest_L25_C1() [0x427df3]\n??:? void tmp3jbdqian.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i-1])\n        {\n            if (i > max)\n            {\n                max = i;\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpcw7u9we0.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpcw7u9we0.can_arrange(long[]) [0x427d4f]\n??:? void tmpcw7u9we0.__unittest_L26_C1() [0x427dcc]\n??:? void tmpcw7u9we0.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n            return max_index;\n        }\n        else\n        {\n            max = e;\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnyl_wpix.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmpnyl_wpix.__unittest_L29_C1() [0x427ddb]\n??:? void tmpnyl_wpix.__modtest() [0x427f50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i + 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpdf2vzjlc.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpdf2vzjlc.can_arrange(long[]) [0x427d58]\n??:? void tmpdf2vzjlc.__unittest_L23_C1() [0x427dcc]\n??:? void tmpdf2vzjlc.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i + 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpdf2vzjlc.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpdf2vzjlc.can_arrange(long[]) [0x427d58]\n??:? void tmpdf2vzjlc.__unittest_L23_C1() [0x427dcc]\n??:? void tmpdf2vzjlc.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < max)\n        {\n            return max_index;\n        }\n        else\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0kipxhrk.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4281f5]\n??:? void tmp0kipxhrk.__unittest_L29_C1() [0x427dff]\n??:? void tmp0kipxhrk.__modtest() [0x427f74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c253]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430279]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430728]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430205]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]\n??:? runModuleUnitTests [0x42c029]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long result = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i-1])\n        {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpotkdgcu9.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpotkdgcu9.can_arrange(long[]) [0x427d58]\n??:? void tmpotkdgcu9.__unittest_L24_C1() [0x427dcc]\n??:? void tmpotkdgcu9.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    foreach(i; 0 .. arr.length)\n    {\n        if(arr[i] < arr[i - 1])\n        {\n            max = max(max, i - 1);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptw_uc13a.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptw_uc13a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long last = arr[0];\n    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v < last)\n        {\n            index = i;\n        }\n        last = v;\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmptkwckunk.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmptkwckunk.can_arrange(long[]) [0x427d0b]\n??:? void tmptkwckunk.__unittest_L25_C1() [0x427f32]\n??:? void tmptkwckunk.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n            continue;\n        if (i > max)\n            max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkncu8fye.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpkncu8fye.__unittest_L23_C1() [0x427e44]\n??:? void tmpkncu8fye.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n            max = v;\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpi5ei8uqq.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281c5]\n??:? void tmpi5ei8uqq.__unittest_L25_C1() [0x427dcf]\n??:? void tmpi5ei8uqq.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b042]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430684]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430161]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b019]\n??:? runModuleUnitTests [0x42bf85]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428614]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6vn3slzy.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6vn3slzy.__unittest_L25_C1() [0x427def]\n??:? void tmp6vn3slzy.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long res = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            res = i - 1;\n            break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx3bx0yuj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpx3bx0yuj.__unittest_L24_C1() [0x427de7]\n??:? void tmpx3bx0yuj.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuo51yxcz.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpuo51yxcz.__unittest_L25_C1() [0x427de7]\n??:? void tmpuo51yxcz.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i + 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpdf2vzjlc.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpdf2vzjlc.can_arrange(long[]) [0x427d58]\n??:? void tmpdf2vzjlc.__unittest_L23_C1() [0x427dcc]\n??:? void tmpdf2vzjlc.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e > max)\n        {\n            max = e;\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplylmxo6s.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281c5]\n??:? void tmplylmxo6s.__unittest_L25_C1() [0x427dd3]\n??:? void tmplylmxo6s.__modtest() [0x427f48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b042]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430684]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430161]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b019]\n??:? runModuleUnitTests [0x42bf85]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428614]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n        }\n        else\n        {\n            return i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxf62e_4x.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpxf62e_4x.__unittest_L27_C1() [0x427e44]\n??:? void tmpxf62e_4x.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i-1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpsb2oa_xb.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpsb2oa_xb.can_arrange(long[]) [0x427d58]\n??:? void tmpsb2oa_xb.__unittest_L23_C1() [0x427dcc]\n??:? void tmpsb2oa_xb.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long index = -1;\n    foreach(i,v; arr)\n    {\n        if(v <= max)\n        {\n            index = i;\n        }\n        else\n        {\n            max = v;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplbymf6is.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmplbymf6is.__unittest_L23_C1() [0x427e38]\n??:? void tmplbymf6is.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i + 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpdf2vzjlc.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpdf2vzjlc.can_arrange(long[]) [0x427d58]\n??:? void tmpdf2vzjlc.__unittest_L23_C1() [0x427dcc]\n??:? void tmpdf2vzjlc.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < max)\n        {\n            if (arr[i] > index)\n            {\n                index = arr[i];\n            }\n        }\n        else\n        {\n            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpswv0zqqo.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42823d]\n??:? void tmpswv0zqqo.__unittest_L31_C1() [0x427f77]\n??:? void tmpswv0zqqo.__modtest() [0x427fc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b12e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430770]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43024d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b105]\n??:? runModuleUnitTests [0x42c071]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428700]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6vn3slzy.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6vn3slzy.__unittest_L25_C1() [0x427def]\n??:? void tmp6vn3slzy.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n            return index;\n        }\n        else\n        {\n            max = arr[i];\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpweqkzm_x.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmpweqkzm_x.__unittest_L29_C1() [0x427dfb]\n??:? void tmpweqkzm_x.__modtest() [0x427f70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i-1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpt4_6jfzs.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428286]\n??:? long tmpt4_6jfzs.can_arrange(long[]) [0x427d4f]\n??:? void tmpt4_6jfzs.__unittest_L23_C1() [0x427dc4]\n??:? void tmpt4_6jfzs.__modtest() [0x427f54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n            return maxIndex;\n        }\n        max = v;\n        maxIndex = i;\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7gccczdx.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmp7gccczdx.__unittest_L26_C1() [0x427ddb]\n??:? void tmp7gccczdx.__modtest() [0x427f50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7fj1z3ly.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp7fj1z3ly.__unittest_L25_C1() [0x427def]\n??:? void tmp7fj1z3ly.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0) return -1;\n    long max = arr[0];\n    long index = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5b5a5vly.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42821d]\n??:? void tmp5b5a5vly.__unittest_L26_C1() [0x427e27]\n??:? void tmp5b5a5vly.__modtest() [0x427f9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c27b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b10e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e5]\n??:? runModuleUnitTests [0x42c051]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286e0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long result = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            result = i - 1;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm0hj2fvz.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpm0hj2fvz.__unittest_L24_C1() [0x427de7]\n??:? void tmpm0hj2fvz.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (i == 0)\n        {\n            max = arr[i];\n        }\n        else\n        {\n            if (arr[i] > max)\n            {\n                max = arr[i];\n            }\n            else\n            {\n                return i - 1;\n            }\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjbt_tud2.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428225]\n??:? void tmpjbt_tud2.__unittest_L34_C1() [0x427e33]\n??:? void tmpjbt_tud2.__modtest() [0x427fa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c283]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b116]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430758]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430235]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ed]\n??:? runModuleUnitTests [0x42c059]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286e8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmtgpu9gw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpmtgpu9gw.__unittest_L27_C1() [0x427de3]\n??:? void tmpmtgpu9gw.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            if (arr[i] > max)\n            {\n                max = arr[i];\n                maxIndex = i;\n            }\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3b92b_u4.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42823d]\n??:? void tmp3b92b_u4.__unittest_L28_C1() [0x427f73]\n??:? void tmp3b92b_u4.__modtest() [0x427fbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b12e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430770]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43024d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b105]\n??:? runModuleUnitTests [0x42c071]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428700]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmtgpu9gw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpmtgpu9gw.__unittest_L27_C1() [0x427de3]\n??:? void tmpmtgpu9gw.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n        }\n        else\n        {\n            return i - 1;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgyn3bk26.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmpgyn3bk26.__unittest_L27_C1() [0x427df7]\n??:? void tmpgyn3bk26.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long res = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            res = i - 1;\n            break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx3bx0yuj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpx3bx0yuj.__unittest_L24_C1() [0x427de7]\n??:? void tmpx3bx0yuj.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmtgpu9gw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpmtgpu9gw.__unittest_L27_C1() [0x427de3]\n??:? void tmpmtgpu9gw.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    foreach(i, v; arr)\n    {\n        if(v < arr[i-1])\n            max = max(max, i-1);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjj0rdz4m.d(17): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjj0rdz4m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n            if(i > index)\n                index = i;\n        }\n        else\n            max = e;\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuc9jicai.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpuc9jicai.__unittest_L27_C1() [0x427ddf]\n??:? void tmpuc9jicai.__modtest() [0x427f54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b052]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430694]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430171]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b029]\n??:? runModuleUnitTests [0x42bf95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428624]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3qljut14.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428205]\n??:? void tmp3qljut14.__unittest_L25_C1() [0x427e13]\n??:? void tmp3qljut14.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c263]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430289]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430215]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]\n??:? runModuleUnitTests [0x42c039]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6vn3slzy.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6vn3slzy.__unittest_L25_C1() [0x427def]\n??:? void tmp6vn3slzy.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v > max)\n        {\n            max = v;\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp3qt60tb.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpp3qt60tb.__unittest_L25_C1() [0x427de7]\n??:? void tmpp3qt60tb.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmtgpu9gw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpmtgpu9gw.__unittest_L27_C1() [0x427de3]\n??:? void tmpmtgpu9gw.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n            index = i;\n        }\n        else\n        {\n            max = v;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n            maxIndex = i;\n        }\n        max = max(max, arr[i]);\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1dzdpmbv.d(21): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1dzdpmbv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n            continue;\n        if (arr[i] > max)\n            max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3u5ws9b0.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42820d]\n??:? void tmp3u5ws9b0.__unittest_L23_C1() [0x427e6c]\n??:? void tmp3u5ws9b0.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]\n??:? runModuleUnitTests [0x42c041]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < max)\n        {\n            return max_index;\n        }\n        else\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0kipxhrk.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4281f5]\n??:? void tmp0kipxhrk.__unittest_L29_C1() [0x427dff]\n??:? void tmp0kipxhrk.__modtest() [0x427f74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c253]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430279]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430728]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430205]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]\n??:? runModuleUnitTests [0x42c029]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0)\n        return -1;\n    if (arr.length == 1)\n        return 0;\n    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp917oxfxn.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428225]\n??:? void tmp917oxfxn.__unittest_L29_C1() [0x427e33]\n??:? void tmp917oxfxn.__modtest() [0x427fa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c283]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b116]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430758]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430235]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ed]\n??:? runModuleUnitTests [0x42c059]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286e8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long result = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            result = i - 1;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm0hj2fvz.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpm0hj2fvz.__unittest_L24_C1() [0x427de7]\n??:? void tmpm0hj2fvz.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcr6iyh9h.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428205]\n??:? void tmpcr6iyh9h.__unittest_L25_C1() [0x427e13]\n??:? void tmpcr6iyh9h.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c263]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430289]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430215]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]\n??:? runModuleUnitTests [0x42c039]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfhu0c9ka.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpfhu0c9ka.__unittest_L25_C1() [0x427def]\n??:? void tmpfhu0c9ka.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i + 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpdf2vzjlc.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpdf2vzjlc.can_arrange(long[]) [0x427d58]\n??:? void tmpdf2vzjlc.__unittest_L23_C1() [0x427dcc]\n??:? void tmpdf2vzjlc.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n            continue;\n        else\n            max = max(max, i);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9fnt6zuw.d(19): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9fnt6zuw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long n = arr.length;\n    long[] dp = new long[n];\n    dp[0] = -1;\n    for (long i = 1; i < n; i++) \n    {\n        if (arr[i] < arr[i - 1]) \n        {\n            dp[i] = i - 1;\n        } \n        else \n        {\n            long j = dp[i - 1];\n            while (j != -1 && arr[i] >= arr[j]) \n            {\n                j = dp[j];\n            }\n            dp[i] = j;\n        }\n    }\n    return dp[n - 1];\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp77g9ezxx.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42834d]\n??:? void tmp77g9ezxx.__unittest_L34_C1() [0x427f5b]\n??:? void tmp77g9ezxx.__modtest() [0x4280d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c407]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b29a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430525]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b271]\n??:? runModuleUnitTests [0x42c1dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428810]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long res = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            res = i - 1;\n            break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx3bx0yuj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpx3bx0yuj.__unittest_L24_C1() [0x427de7]\n??:? void tmpx3bx0yuj.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmtgpu9gw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpmtgpu9gw.__unittest_L27_C1() [0x427de3]\n??:? void tmpmtgpu9gw.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmprfg4v6gi.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmprfg4v6gi.can_arrange(long[]) [0x427d58]\n??:? void tmprfg4v6gi.__unittest_L23_C1() [0x427dcc]\n??:? void tmprfg4v6gi.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long max_index = -1;\n    foreach(i, e; arr)\n    {\n        if(e > max)\n        {\n            max = e;\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbh9158av.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281c5]\n??:? void tmpbh9158av.__unittest_L25_C1() [0x427dd3]\n??:? void tmpbh9158av.__modtest() [0x427f48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b042]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430684]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430161]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b019]\n??:? runModuleUnitTests [0x42bf85]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428614]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8gk9t82a.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp8gk9t82a.__unittest_L25_C1() [0x427df3]\n??:? void tmp8gk9t82a.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n            continue;\n        if (i > max)\n            max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkncu8fye.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpkncu8fye.__unittest_L23_C1() [0x427e44]\n??:? void tmpkncu8fye.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n            continue;\n        if (arr[i] > max)\n            max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3u5ws9b0.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42820d]\n??:? void tmp3u5ws9b0.__unittest_L23_C1() [0x427e6c]\n??:? void tmp3u5ws9b0.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]\n??:? runModuleUnitTests [0x42c041]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] <= max)\n        {\n            max_index = i;\n        }\n        else\n        {\n            max = arr[i];\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4o9zoxoj.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp4o9zoxoj.__unittest_L28_C1() [0x427def]\n??:? void tmp4o9zoxoj.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long res = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            res = i - 1;\n            break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx3bx0yuj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpx3bx0yuj.__unittest_L24_C1() [0x427de7]\n??:? void tmpx3bx0yuj.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6vn3slzy.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6vn3slzy.__unittest_L25_C1() [0x427def]\n??:? void tmp6vn3slzy.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3qljut14.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428205]\n??:? void tmp3qljut14.__unittest_L25_C1() [0x427e13]\n??:? void tmp3qljut14.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c263]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430289]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430215]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]\n??:? runModuleUnitTests [0x42c039]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n            index = i;\n        }\n        else\n        {\n            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n            return max_index;\n        }\n        else\n        {\n            max = v;\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsl61op0d.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmpsl61op0d.__unittest_L29_C1() [0x427ddb]\n??:? void tmpsl61op0d.__modtest() [0x427f50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--) \n    {\n        if (arr[i] >= max) \n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5yzn5war.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp5yzn5war.__unittest_L25_C1() [0x427def]\n??:? void tmp5yzn5war.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n            return maxIndex;\n        }\n        else\n        {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4gkamxtx.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428215]\n??:? void tmp4gkamxtx.__unittest_L29_C1() [0x427e1f]\n??:? void tmp4gkamxtx.__modtest() [0x427f94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c273]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b106]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430299]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430748]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430225]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0dd]\n??:? runModuleUnitTests [0x42c049]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuq_w08ia.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpuq_w08ia.__unittest_L25_C1() [0x427df3]\n??:? void tmpuq_w08ia.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n            return max_index;\n        }\n        else\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr4sabept.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmpr4sabept.__unittest_L29_C1() [0x427dfb]\n??:? void tmpr4sabept.__modtest() [0x427f70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] <= arr[i + 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv78iyyy_.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpv78iyyy_.__unittest_L23_C1() [0x427e40]\n??:? void tmpv78iyyy_.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfhu0c9ka.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpfhu0c9ka.__unittest_L25_C1() [0x427def]\n??:? void tmpfhu0c9ka.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmphz53luen.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428286]\n??:? long tmphz53luen.can_arrange(long[]) [0x427d4f]\n??:? void tmphz53luen.__unittest_L23_C1() [0x427dc4]\n??:? void tmphz53luen.__modtest() [0x427f54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160732
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n            max_index = i;\n        }\n        else\n        {\n            max = arr[i];\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long maxIndex = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp13addlfg.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp13addlfg.__unittest_L25_C1() [0x427df3]\n??:? void tmp13addlfg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long i = arr.length - 1;\n    while (i > 0 && arr[i] >= arr[i - 1])\n        i--;\n    return i - 1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2bdv7h62.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmp2bdv7h62.__unittest_L18_C1() [0x427dd7]\n??:? void tmp2bdv7h62.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c22b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]\n??:? runModuleUnitTests [0x42c001]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428690]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < max)\n        {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp21zm0axp.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp21zm0axp.__unittest_L25_C1() [0x427df3]\n??:? void tmp21zm0axp.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfhu0c9ka.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpfhu0c9ka.__unittest_L25_C1() [0x427def]\n??:? void tmpfhu0c9ka.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n            continue;\n        if (arr[i] > max)\n            max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3u5ws9b0.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42820d]\n??:? void tmp3u5ws9b0.__unittest_L23_C1() [0x427e6c]\n??:? void tmp3u5ws9b0.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]\n??:? runModuleUnitTests [0x42c041]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--) \n    {\n        if (arr[i] <= max) \n        {\n            max_index = i;\n        }\n        else \n        {\n            max = arr[i];\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfulzvab4.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpfulzvab4.__unittest_L28_C1() [0x427def]\n??:? void tmpfulzvab4.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160732
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfhu0c9ka.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpfhu0c9ka.__unittest_L25_C1() [0x427def]\n??:? void tmpfhu0c9ka.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long res = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            res = i - 1;\n            break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx3bx0yuj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpx3bx0yuj.__unittest_L24_C1() [0x427de7]\n??:? void tmpx3bx0yuj.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long[] arr2 = new long[arr.length];\n    for (long i = 0; i < arr.length; i++)\n    {\n        arr2[i] = arr[i];\n    }\n    sort(arr2);\n    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] == arr2[i])\n        {\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7qarc9co.d(18): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qarc9co.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n        {\n            index = i;\n        }\n        else\n        {\n            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n            continue;\n        if (i > max)\n            max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkncu8fye.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpkncu8fye.__unittest_L23_C1() [0x427e44]\n??:? void tmpkncu8fye.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++) \n    {\n        if (arr[i] <= arr[i - 1]) \n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpuei1wrza.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpuei1wrza.can_arrange(long[]) [0x427d58]\n??:? void tmpuei1wrza.__unittest_L23_C1() [0x427dd0]\n??:? void tmpuei1wrza.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160732
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] <= max)\n        {\n            max_index = i;\n        }\n        else\n        {\n            max = arr[i];\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4o9zoxoj.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp4o9zoxoj.__unittest_L28_C1() [0x427def]\n??:? void tmp4o9zoxoj.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmtgpu9gw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpmtgpu9gw.__unittest_L27_C1() [0x427de3]\n??:? void tmpmtgpu9gw.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n            continue;\n        if (arr[i] > max)\n            max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3u5ws9b0.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42820d]\n??:? void tmp3u5ws9b0.__unittest_L23_C1() [0x427e6c]\n??:? void tmp3u5ws9b0.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]\n??:? runModuleUnitTests [0x42c041]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfhu0c9ka.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpfhu0c9ka.__unittest_L25_C1() [0x427def]\n??:? void tmpfhu0c9ka.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6vn3slzy.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6vn3slzy.__unittest_L25_C1() [0x427def]\n??:? void tmp6vn3slzy.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] <= max)\n        {\n            max_index = i;\n        }\n        else\n        {\n            max = arr[i];\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4o9zoxoj.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp4o9zoxoj.__unittest_L28_C1() [0x427def]\n??:? void tmp4o9zoxoj.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3qljut14.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428205]\n??:? void tmp3qljut14.__unittest_L25_C1() [0x427e13]\n??:? void tmp3qljut14.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c263]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430289]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430215]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]\n??:? runModuleUnitTests [0x42c039]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long max_index = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            if (max_index == -1 || arr[i] > arr[max_index])\n            {\n                max_index = i;\n            }\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5z0fwcpu.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428235]\n??:? void tmp5z0fwcpu.__unittest_L27_C1() [0x427f6b]\n??:? void tmp5z0fwcpu.__modtest() [0x427fb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c293]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b126]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430768]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430245]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0fd]\n??:? runModuleUnitTests [0x42c069]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160732
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpludm_seg.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpludm_seg.can_arrange(long[]) [0x427d58]\n??:? void tmpludm_seg.__unittest_L23_C1() [0x427dcc]\n??:? void tmpludm_seg.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160732
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long[] sorted = arr.dup;\n    sorted.sort;\n    foreach(i, e; arr)\n    {\n        if(e == sorted[i])\n            return i;\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnruuqhj8.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnruuqhj8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    foreach(i, v; arr)\n    {\n        if(v <= arr[i - 1])\n            max = max(max, i - 1);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp21lsne2d.d(17): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp21lsne2d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++) \n    {\n        if (arr[i] <= arr[i - 1]) \n        {\n            max = max(max, i - 1);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8h62gqd1.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8h62gqd1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > arr[i-1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp5dh11b0p.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428286]\n??:? long tmp5dh11b0p.can_arrange(long[]) [0x427d4f]\n??:? void tmp5dh11b0p.__unittest_L23_C1() [0x427dc4]\n??:? void tmp5dh11b0p.__modtest() [0x427f54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160732
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmtgpu9gw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpmtgpu9gw.__unittest_L27_C1() [0x427de3]\n??:? void tmpmtgpu9gw.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfhu0c9ka.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpfhu0c9ka.__unittest_L25_C1() [0x427def]\n??:? void tmpfhu0c9ka.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long n = arr.length;\n    long[] dp = new long[n];\n    dp[0] = -1;\n    for (long i = 1; i < n; i++) \n    {\n        if (arr[i] < arr[i - 1]) \n        {\n            dp[i] = i - 1;\n        } \n        else \n        {\n            long j = dp[i - 1];\n            while (j != -1 && arr[i] >= arr[j]) \n            {\n                j = dp[j];\n            }\n            dp[i] = j;\n        }\n    }\n    return dp[n - 1];\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp77g9ezxx.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42834d]\n??:? void tmp77g9ezxx.__unittest_L34_C1() [0x427f5b]\n??:? void tmp77g9ezxx.__modtest() [0x4280d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c407]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b29a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430525]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b271]\n??:? runModuleUnitTests [0x42c1dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428810]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i + 1])\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpdf2vzjlc.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmpdf2vzjlc.can_arrange(long[]) [0x427d58]\n??:? void tmpdf2vzjlc.__unittest_L23_C1() [0x427dcc]\n??:? void tmpdf2vzjlc.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < max)\n        {\n            if (arr[i] > index)\n            {\n                index = arr[i];\n            }\n        }\n        else\n        {\n            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpswv0zqqo.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42823d]\n??:? void tmpswv0zqqo.__unittest_L31_C1() [0x427f77]\n??:? void tmpswv0zqqo.__modtest() [0x427fc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b12e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430770]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43024d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b105]\n??:? runModuleUnitTests [0x42c071]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428700]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long max_index = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsvqh8o4u.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpsvqh8o4u.__unittest_L25_C1() [0x427def]\n??:? void tmpsvqh8o4u.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            max = i;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmtgpu9gw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpmtgpu9gw.__unittest_L27_C1() [0x427de3]\n??:? void tmpmtgpu9gw.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long res = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n            res = i - 1;\n            break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx3bx0yuj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpx3bx0yuj.__unittest_L24_C1() [0x427de7]\n??:? void tmpx3bx0yuj.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = max(max, i - 1);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvg2l2j53.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvg2l2j53.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660160732
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = max(max, i - 1);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvg2l2j53.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvg2l2j53.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660160732
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = 0;\n    long max_index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfhu0c9ka.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpfhu0c9ka.__unittest_L25_C1() [0x427def]\n??:? void tmpfhu0c9ka.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160731
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] >= max)\n        {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6vn3slzy.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6vn3slzy.__unittest_L25_C1() [0x427def]\n??:? void tmp6vn3slzy.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660160730
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n            \n*/\nlong can_arrange(long[] arr) \n{\n    long max = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            max = i - 1;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmp4tx99reh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42828e]\n??:? long tmp4tx99reh.can_arrange(long[]) [0x427d58]\n??:? void tmp4tx99reh.__unittest_L23_C1() [0x427dd0]\n??:? void tmp4tx99reh.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "stdout": "",
      "timestamp": 1660160730
    }
  ]
}