{
  "language": "d",
  "name": "HumanEval_102_choose_num",
  "results": [
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    if (y % 2 == 0)\n        return y;\n    return -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm1mo8oef.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpm1mo8oef.__unittest_L21_C1() [0x427a7d]\n??:? void tmpm1mo8oef.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y) \n    {\n        return -1;\n    }\n    else \n    {\n        long i = x;\n        while (i <= y) \n        {\n            if (i % 2 == 0) \n            {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn3nlj6ua.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpn3nlj6ua.__unittest_L31_C1() [0x427a7d]\n??:? void tmpn3nlj6ua.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if(x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if(result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6bvif1nd.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp6bvif1nd.__unittest_L28_C1() [0x427a79]\n??:? void tmp6bvif1nd.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    for (; x <= y; x += 2)\n    {\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprc4yiw2l.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmprc4yiw2l.__unittest_L28_C1() [0x427b01]\n??:? void tmprc4yiw2l.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x % 2 == 0)\n        return x;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw6qqn0ry.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpw6qqn0ry.__unittest_L20_C1() [0x427a61]\n??:? void tmpw6qqn0ry.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptsxv_4lo.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmptsxv_4lo.__unittest_L20_C1() [0x427a61]\n??:? void tmptsxv_4lo.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if(x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if(result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6bvif1nd.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp6bvif1nd.__unittest_L28_C1() [0x427a79]\n??:? void tmp6bvif1nd.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x += 1;\n    }\n    if (y % 2 == 0)\n    {\n        if (y > x)\n        {\n            result = y;\n        }\n    }\n    else\n    {\n        y -= 1;\n        if (y > x)\n        {\n            result = y;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp12xonci0.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e4d]\n??:? void tmp12xonci0.__unittest_L39_C1() [0x427b21]\n??:? void tmp12xonci0.__modtest() [0x427bcc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]\n??:? runModuleUnitTests [0x42b949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42829c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if(x > y)\n    {\n        return -1;\n    }\n    else\n    {\n        long max = x;\n        for(long i = x; i <= y; i++)\n        {\n            if(i % 2 == 0)\n            {\n                if(i > max)\n                {\n                    max = i;\n                }\n            }\n        }\n        if(max % 2 == 0)\n        {\n            return max;\n        }\n        else\n        {\n            return -1;\n        }\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\n/*\n    This function takes a positive integer number n and returns the \n    biggest even integer number that is in the range [1, n] inclusive. If \n    there's no such number, then the function should return -1.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv4anjz3s.d(23): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv4anjz3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvmlmuebr.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpvmlmuebr.__unittest_L23_C1() [0x427adf]\n??:? void tmpvmlmuebr.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++) \n    {\n        if (i % 2 == 0) \n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long z = -1;\n    if (x > y)\n    {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n    if (x % 2 == 0)\n    {\n        z = x;\n    }\n    else\n    {\n        x++;\n        if (x % 2 == 0)\n        {\n            z = x;\n        }\n    }\n    if (z > y)\n    {\n        z = -1;\n    }\n    return z;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ncsbyj8.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmp6ncsbyj8.__unittest_L38_C1() [0x427ab9]\n??:? void tmp6ncsbyj8.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    for (; x <= y; x += 2)\n    {\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprc4yiw2l.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmprc4yiw2l.__unittest_L28_C1() [0x427b01]\n??:? void tmprc4yiw2l.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1) \n    {\n        if(i % 2 == 0) \n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    for (; x <= y; x++)\n    {\n        if (x % 2 == 0)\n        {\n            max = max(max, x);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnsfm5m3s.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnsfm5m3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long z = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            z = i;\n        }\n    }\n    return z;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long num = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            num = i;\n        }\n    }\n    return num;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long z = -1;\n    if (x % 2 == 0)\n    {\n        z = x;\n    }\n    else\n    {\n        z = x + 1;\n    }\n    if (z > y)\n    {\n        return -1;\n    }\n    else\n    {\n        return z;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj4srru45.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpj4srru45.__unittest_L31_C1() [0x427a79]\n??:? void tmpj4srru45.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptsxv_4lo.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmptsxv_4lo.__unittest_L20_C1() [0x427a61]\n??:? void tmptsxv_4lo.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv2mxcknv.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpv2mxcknv.__unittest_L24_C1() [0x427a65]\n??:? void tmpv2mxcknv.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if(x>y)\n        return -1;\n    if(x%2==0)\n        return x;\n    else\n        return x+1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_cn_71y.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpp_cn_71y.__unittest_L20_C1() [0x427a61]\n??:? void tmpp_cn_71y.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    long i = x;\n    while (i <= y)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptsxv_4lo.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmptsxv_4lo.__unittest_L20_C1() [0x427a61]\n??:? void tmptsxv_4lo.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvmlmuebr.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpvmlmuebr.__unittest_L23_C1() [0x427adf]\n??:? void tmpvmlmuebr.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvmlmuebr.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpvmlmuebr.__unittest_L23_C1() [0x427adf]\n??:? void tmpvmlmuebr.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2winvsbz.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp2winvsbz.__unittest_L19_C1() [0x427a61]\n??:? void tmp2winvsbz.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvmlmuebr.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpvmlmuebr.__unittest_L23_C1() [0x427adf]\n??:? void tmpvmlmuebr.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long maxEven = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            maxEven = max(maxEven, i);\n        }\n    }\n    return maxEven;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg2yrrz40.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg2yrrz40.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptsxv_4lo.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmptsxv_4lo.__unittest_L20_C1() [0x427a61]\n??:? void tmptsxv_4lo.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    long i = x;\n    while (i <= y)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y) \n    {\n        return -1;\n    }\n    else if (x % 2 == 0) \n    {\n        return x;\n    }\n    else \n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0gx_4vb_.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp0gx_4vb_.__unittest_L26_C1() [0x427a61]\n??:? void tmp0gx_4vb_.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvmlmuebr.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpvmlmuebr.__unittest_L23_C1() [0x427adf]\n??:? void tmpvmlmuebr.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x % 2 == 0)\n        return x;\n    else if (x + 1 == y)\n        return -1;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0njg41fl.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmp0njg41fl.__unittest_L22_C1() [0x427a7d]\n??:? void tmp0njg41fl.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvmlmuebr.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpvmlmuebr.__unittest_L23_C1() [0x427adf]\n??:? void tmpvmlmuebr.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    // your code here\n    long max = -1;\n    for(long i = x; i <= y; i++)\n    {\n        if(i % 2 == 0)\n        {\n            if(i > max)\n            {\n                max = i;\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            if(i > max)\n            {\n                max = i;\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if(x > y)\n        return -1;\n    if(x % 2 == 0)\n        return x;\n    return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnqzgmu2u.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpnqzgmu2u.__unittest_L19_C1() [0x427a61]\n??:? void tmpnqzgmu2u.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long r = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            r = i;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptsxv_4lo.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmptsxv_4lo.__unittest_L20_C1() [0x427a61]\n??:? void tmptsxv_4lo.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6x11_3lq.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6x11_3lq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprcujr0mk.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcujr0mk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x % 2 == 0)\n        return x;\n    else if (x % 2 == 1)\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg70ftkn5.d(11): Error: function `tmpg70ftkn5.choose_num` no `return exp;` or `assert(0);` at end of function\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg70ftkn5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if(x > y)\n    {\n        return result;\n    }\n    else\n    {\n        foreach(i; x..y)\n        {\n            if(i % 2 == 0)\n            {\n                result = i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpq41kf3tr.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpq41kf3tr.__unittest_L30_C1() [0x427aef]\n??:? void tmpq41kf3tr.__modtest() [0x427bc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            if(i > max)\n            {\n                max = i;\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprcujr0mk.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcujr0mk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    if (x > y)\n    {\n        return -1;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5_ylyug1.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmp5_ylyug1.__unittest_L28_C1() [0x427a71]\n??:? void tmp5_ylyug1.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if(x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    for(; x <= y; x += 2)\n    {\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy454m92e.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpy454m92e.__unittest_L28_C1() [0x427b01]\n??:? void tmpy454m92e.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            if(i > max)\n            {\n                max = i;\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\n/*\nThis function takes a positive number n and returns the sum of all\n    the numbers in the range [1, n] inclusive.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6zppxiqk.d(23): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zppxiqk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if(x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if(result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6bvif1nd.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp6bvif1nd.__unittest_L28_C1() [0x427a79]\n??:? void tmp6bvif1nd.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long z;\n    if (x % 2 == 0)\n        z = x;\n    else\n        z = x + 1;\n    for (; z <= y; z += 2)\n    {\n        if (z % 2 == 0)\n            return z;\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxks8242d.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpxks8242d.__unittest_L25_C1() [0x427a99]\n??:? void tmpxks8242d.__modtest() [0x427bc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long zzz = 0;\n    long aaaa = 0;\n    long bbbb = 0\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnjv_im1w.d(80): Error: semicolon expected, not `unittest`\n/tmp/tmpnjv_im1w.d(80): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnjv_im1w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if(x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if(result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6bvif1nd.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp6bvif1nd.__unittest_L28_C1() [0x427a79]\n??:? void tmp6bvif1nd.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv2mxcknv.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpv2mxcknv.__unittest_L24_C1() [0x427a65]\n??:? void tmpv2mxcknv.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++) \n    {\n        if (i % 2 == 0) \n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    for (; x <= y; x += 2)\n    {\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprc4yiw2l.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmprc4yiw2l.__unittest_L28_C1() [0x427b01]\n??:? void tmprc4yiw2l.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x % 2 == 0)\n        return x;\n    else if (x + 1 == y)\n        return -1;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long num = -1;\n    if (x > y)\n    {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n    if (x % 2 == 0)\n    {\n        num = x;\n    }\n    else\n    {\n        num = x + 1;\n    }\n    if (num > y)\n    {\n        num = -1;\n    }\n    return num;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmzaxitix.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmpmzaxitix.__unittest_L34_C1() [0x427aa1]\n??:? void tmpmzaxitix.__modtest() [0x427bc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    long i = x;\n    while (i <= y)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        long max = max(x, y);\n        long min = min(x, y);\n        for (long i = max; i >= min; i--)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpl7zelwb_.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpl7zelwb_.d(21): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl7zelwb_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x += 1;\n    }\n    for (; x <= y; x += 2)\n    {\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprmlhhnw3.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmprmlhhnw3.__unittest_L28_C1() [0x427b01]\n??:? void tmprmlhhnw3.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x % 2 == 0)\n        return x;\n    else if (x % 2 == 1)\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg70ftkn5.d(11): Error: function `tmpg70ftkn5.choose_num` no `return exp;` or `assert(0);` at end of function\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg70ftkn5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    for (; x <= y; x++)\n    {\n        if (x % 2 == 0)\n        {\n            max = max(max, x);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnsfm5m3s.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnsfm5m3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x % 2 == 0)\n        return x;\n    else\n        return x + 1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpilsa_9cm.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpilsa_9cm.__unittest_L18_C1() [0x427a51]\n??:? void tmpilsa_9cm.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprcujr0mk.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcujr0mk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if(x > y)\n        return -1;\n    if(x % 2 != 0)\n        x++;\n    if(y % 2 != 0)\n        y--;\n    if(x > y)\n        return -1;\n    return y;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6x11_3lq.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6x11_3lq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x == y)\n        return x % 2 == 0 ? x : -1;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqex_r0aq.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpqex_r0aq.__unittest_L20_C1() [0x427a6d]\n??:? void tmpqex_r0aq.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    // your code here\n    long max = -1;\n    for(long i = x; i <= y; i++)\n    {\n        if(i % 2 == 0)\n        {\n            if(i > max)\n            {\n                max = i;\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y) \n    {\n        return -1;\n    }\n    else \n    {\n        long max = x;\n        for (long i = x; i <= y; i++) \n        {\n            if (i % 2 == 0 && i > max) \n            {\n                max = i;\n            }\n        }\n        if (max % 2 == 0) \n        {\n            return max;\n        }\n        else \n        {\n            return -1;\n        }\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9fxbrty9.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmp9fxbrty9.__unittest_L34_C1() [0x427aa1]\n??:? void tmp9fxbrty9.__modtest() [0x427bc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    // your code here\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvz9xq2_l.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpvz9xq2_l.__unittest_L29_C1() [0x427a79]\n??:? void tmpvz9xq2_l.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    // your code here\n    long max = -1;\n    for(long i = x; i <= y; i++)\n    {\n        if(i % 2 == 0)\n        {\n            if(i > max)\n            {\n                max = i;\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    for (; x <= y; x++)\n    {\n        if (x % 2 == 0)\n        {\n            max = max(max, x);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnsfm5m3s.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnsfm5m3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\n/*\n    This function takes two positive numbers x and y and returns the\n    biggest odd integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps5a401kc.d(23): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5a401kc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    for (; x <= y; x += 2)\n    {\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprc4yiw2l.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmprc4yiw2l.__unittest_L28_C1() [0x427b01]\n??:? void tmprc4yiw2l.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x == y)\n        return x % 2 == 0 ? x : -1;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqex_r0aq.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpqex_r0aq.__unittest_L20_C1() [0x427a6d]\n??:? void tmpqex_r0aq.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long num = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            num = i;\n        }\n    }\n    return num;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6x11_3lq.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6x11_3lq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    for (; x <= y; x += 2)\n    {\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprc4yiw2l.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmprc4yiw2l.__unittest_L28_C1() [0x427b01]\n??:? void tmprc4yiw2l.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2winvsbz.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp2winvsbz.__unittest_L19_C1() [0x427a61]\n??:? void tmp2winvsbz.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvmlmuebr.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpvmlmuebr.__unittest_L23_C1() [0x427adf]\n??:? void tmpvmlmuebr.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2winvsbz.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp2winvsbz.__unittest_L19_C1() [0x427a61]\n??:? void tmp2winvsbz.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2winvsbz.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp2winvsbz.__unittest_L19_C1() [0x427a61]\n??:? void tmp2winvsbz.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++) \n    {\n        if (i % 2 == 0) \n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x % 2 == 0)\n        return x;\n    else if (x + 1 == y)\n        return -1;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptsxv_4lo.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmptsxv_4lo.__unittest_L20_C1() [0x427a61]\n??:? void tmptsxv_4lo.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if(x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if(result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6bvif1nd.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp6bvif1nd.__unittest_L28_C1() [0x427a79]\n??:? void tmp6bvif1nd.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    for (; x <= y; x++)\n    {\n        if (x % 2 == 0)\n        {\n            max = max(max, x);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnsfm5m3s.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnsfm5m3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    // your code here\n    long max = -1;\n    for(long i = x; i <= y; i++)\n    {\n        if(i % 2 == 0)\n        {\n            if(i > max)\n            {\n                max = i;\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprcujr0mk.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcujr0mk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6x11_3lq.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6x11_3lq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    // your code here\n    long max = -1;\n    for(long i = x; i <= y; i++)\n    {\n        if(i % 2 == 0)\n        {\n            if(i > max)\n            {\n                max = i;\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6x11_3lq.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6x11_3lq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (; x <= y; x++)\n    {\n        if (x % 2 == 0)\n        {\n            result = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprcujr0mk.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcujr0mk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    for (; x <= y; x += 2)\n    {\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprc4yiw2l.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmprc4yiw2l.__unittest_L28_C1() [0x427b01]\n??:? void tmprc4yiw2l.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (; x <= y; x++)\n    {\n        if (x % 2 == 0)\n        {\n            result = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        return -1;\n    }\n    else\n    {\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpng1twgsk.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpng1twgsk.__unittest_L31_C1() [0x427a75]\n??:? void tmpng1twgsk.__modtest() [0x427b9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++) \n    {\n        if (i % 2 == 0) \n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptsxv_4lo.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmptsxv_4lo.__unittest_L20_C1() [0x427a61]\n??:? void tmptsxv_4lo.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv2mxcknv.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpv2mxcknv.__unittest_L24_C1() [0x427a65]\n??:? void tmpv2mxcknv.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (; x <= y; x++)\n    {\n        if (x % 2 == 0)\n        {\n            result = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if(x > y)\n        return -1;\n    if(x % 2 == 0)\n        return x;\n    return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnqzgmu2u.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpnqzgmu2u.__unittest_L19_C1() [0x427a61]\n??:? void tmpnqzgmu2u.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprcujr0mk.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcujr0mk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x == y)\n        return (x % 2 == 0) ? x : -1;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprnw7h1eg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmprnw7h1eg.__unittest_L20_C1() [0x427a6d]\n??:? void tmprnw7h1eg.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if(x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if(result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6bvif1nd.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp6bvif1nd.__unittest_L28_C1() [0x427a79]\n??:? void tmp6bvif1nd.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if(x > y)\n        return -1;\n    if(x % 2 == 0)\n        return x;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxg9kdg5j.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpxg9kdg5j.__unittest_L20_C1() [0x427a61]\n??:? void tmpxg9kdg5j.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8jp15z9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpk8jp15z9.__unittest_L28_C1() [0x427a79]\n??:? void tmpk8jp15z9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    if (y % 2 == 0)\n    {\n        result = y;\n    }\n    else\n    {\n        y--;\n    }\n    if (x > y)\n    {\n        return -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp40zb5rqj.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmp40zb5rqj.__unittest_L36_C1() [0x427a9d]\n??:? void tmp40zb5rqj.__modtest() [0x427bc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2winvsbz.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp2winvsbz.__unittest_L19_C1() [0x427a61]\n??:? void tmp2winvsbz.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2winvsbz.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp2winvsbz.__unittest_L19_C1() [0x427a61]\n??:? void tmp2winvsbz.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2winvsbz.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp2winvsbz.__unittest_L19_C1() [0x427a61]\n??:? void tmp2winvsbz.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    for (long i = x; i <= y; i++) \n    {\n        if (i % 2 == 0) \n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnjsp7igi.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnjsp7igi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n            \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163918
    }
  ]
}