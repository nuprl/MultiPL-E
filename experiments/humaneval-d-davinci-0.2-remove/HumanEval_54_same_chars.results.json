{
  "language": "d",
  "name": "HumanEval_54_same_chars",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kmhtu02.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk_p15q1b.d(13): Error: no property `sort` for type `char[]`\n/tmp/tmpk_p15q1b.d(14): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk_p15q1b.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (c; s0)\n    {\n        if (s1.count(c) != s0.count(c))\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphoi5_60r.d(14): Error: no property `count` for type `string`\n/tmp/tmphoi5_60r.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphoi5_60r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n    foreach (i; 0 .. 256) if (c0[i] != c1[i]) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzuwb4u65.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4282d5]\n??:? void tmpzuwb4u65.__unittest_L18_C1() [0x427ec5]\n??:? void tmpzuwb4u65.__modtest() [0x428058]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b142]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430359]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]\n??:? runModuleUnitTests [0x42c085]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428798]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n    foreach (i; 0 .. 256) if (c0[i] != c1[i]) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzuwb4u65.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4282d5]\n??:? void tmpzuwb4u65.__unittest_L18_C1() [0x427ec5]\n??:? void tmpzuwb4u65.__modtest() [0x428058]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b142]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430359]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]\n??:? runModuleUnitTests [0x42c085]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428798]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto chars0 = s0.dup;\n    auto chars1 = s1.dup;\n    chars0.sort;\n    chars1.sort;\n    return chars0 == chars1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprcjytkqf.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmprcjytkqf.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcjytkqf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg72k6rs3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n    return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx3ini5f8.d(13): Error: no property `sort` for type `char[]`\n/tmp/tmpx3ini5f8.d(14): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx3ini5f8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6lxkw8tz.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp6lxkw8tz.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lxkw8tz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    foreach (i, c; s0_sorted) \n    {\n        if (c != s1_sorted[i]) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzr2ee2uq.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpzr2ee2uq.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzr2ee2uq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdox2o8p_.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpdox2o8p_.d(15): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdox2o8p_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    foreach (i, c; s0_sorted)\n    {\n        if (c != s1_sorted[i])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6zjf30bp.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp6zjf30bp.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zjf30bp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    foreach (c; s0)\n    {\n        if (s1.count(c) != s0.count(c)) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4meheaxg.d(13): Error: no property `count` for type `string`\n/tmp/tmp4meheaxg.d(13): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4meheaxg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3oov8d00.d(13): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp3oov8d00.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3oov8d00.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n            return false;\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsztxd7dw.d(23): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsztxd7dw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    char[] c0 = s0.dup;\n    char[] c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp__kwt7qu.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmp__kwt7qu.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__kwt7qu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    foreach (c; s0) {\n        if (s1.count(c) != s0.count(c)) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu5lam787.d(12): Error: no property `count` for type `string`\n/tmp/tmpu5lam787.d(12): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu5lam787.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_chars = s0.chars;\n    auto s1_chars = s1.chars;\n    sort(s0_chars);\n    sort(s1_chars);\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp71_sgtei.d(12): Error: no property `chars` for type `string`\n/tmp/tmp71_sgtei.d(13): Error: no property `chars` for type `string`\n/tmp/tmp71_sgtei.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp71_sgtei.d(15): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp71_sgtei.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    int[] count = new int[256];\n    foreach (c; s0)\n        count[c]++;\n    foreach (c; s1)\n        count[c]--;\n    foreach (c; count)\n        if (c != 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdi2w1b4x.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpdi2w1b4x.__unittest_L20_C1() [0x427e71]\n??:? void tmpdi2w1b4x.__modtest() [0x428004]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43037d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43082c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430309]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]\n??:? runModuleUnitTests [0x42c035]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428748]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    int[] cnt = new int[256];\n    foreach (c; s0)\n        cnt[c]++;\n    foreach (c; s1)\n        cnt[c]--;\n    foreach (c; cnt)\n        if (c != 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx5crls0_.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpx5crls0_.__unittest_L20_C1() [0x427e71]\n??:? void tmpx5crls0_.__modtest() [0x428004]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43037d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43082c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430309]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]\n??:? runModuleUnitTests [0x42c035]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428748]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    foreach (char c; s0) \n    {\n        if (s1.count(c) != s0.count(c)) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm4le8ss5.d(14): Error: no property `count` for type `string`\n/tmp/tmpm4le8ss5.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm4le8ss5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3oov8d00.d(13): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp3oov8d00.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3oov8d00.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kmhtu02.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpydzjjrkb.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpydzjjrkb.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpydzjjrkb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7cp_dzzi.d(11): Error: no property `sort` for type `char[]`\n/tmp/tmp7cp_dzzi.d(12): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7cp_dzzi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    foreach (c; s0) {\n        if (s1.count(c) != s0.count(c)) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu5lam787.d(12): Error: no property `count` for type `string`\n/tmp/tmpu5lam787.d(12): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu5lam787.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto a = s0.dup;\n    auto b = s1.dup;\n    a.sort;\n    b.sort;\n    return a == b;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgjpi1158.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpgjpi1158.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjpi1158.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n    return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx3ini5f8.d(13): Error: no property `sort` for type `char[]`\n/tmp/tmpx3ini5f8.d(14): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx3ini5f8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (c; s0)\n    {\n        if (s1.count(c) != s0.count(c))\n            return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyd1smy7w.d(19): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyd1smy7w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kmhtu02.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpydzjjrkb.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpydzjjrkb.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpydzjjrkb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    foreach (i, c; s0) \n    {\n        if (s1.count(c) == 0) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4rrpbzgt.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4rrpbzgt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg72k6rs3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    int[] counts = new int[256];\n    foreach (c; s0)\n        counts[c]++;\n    foreach (c; s1)\n        counts[c]--;\n    foreach (c; counts)\n        if (c != 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_wsydudm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmp_wsydudm.__unittest_L20_C1() [0x427e71]\n??:? void tmp_wsydudm.__modtest() [0x428004]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43037d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43082c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430309]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]\n??:? runModuleUnitTests [0x42c035]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428748]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg72k6rs3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpydzjjrkb.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpydzjjrkb.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpydzjjrkb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    foreach (i, c; s0) \n    {\n        if (s1.count(c) == 0) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4rrpbzgt.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4rrpbzgt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    foreach (i, c; s0) \n    {\n        if (s1.count(c) == 0) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4rrpbzgt.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4rrpbzgt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n    return a0 == a1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo_9j9z_f.d(18): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo_9j9z_f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxcg6pk4c.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpxcg6pk4c.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxcg6pk4c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n    return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2p8cgf00.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmp2p8cgf00.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p8cgf00.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkz2byu4w.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpkz2byu4w.__unittest_L18_C1() [0x427f5d]\n??:? void tmpkz2byu4w.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg72k6rs3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpydzjjrkb.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpydzjjrkb.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpydzjjrkb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3ipdp2i2.d(16): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ipdp2i2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg72k6rs3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_chars = s0.toCharArray;\n    auto s1_chars = s1.toCharArray;\n    sort(s0_chars);\n    sort(s1_chars);\n    return s0_chars == s1_chars;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpekx76lo3.d(18): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpekx76lo3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphb3aqeq3.d(16): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphb3aqeq3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    foreach (i, c; s0_sorted)\n    {\n        if (c != s1_sorted[i])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6zjf30bp.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp6zjf30bp.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zjf30bp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6lxkw8tz.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp6lxkw8tz.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lxkw8tz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpn2xrymsg.d(18): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn2xrymsg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto m0 = map!(char, int)();\n    auto m1 = map!(char, int)();\n    foreach (c; s0)\n        m0[c]++;\n    foreach (c; s1)\n        m1[c]++;\n    foreach (c; m0.keys)\n        if (m0[c] != m1[c])\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1yikz1_g.d(12): Error: template instance `map!(char, int)` template `map` is not defined\n/tmp/tmp1yikz1_g.d(13): Error: template instance `map!(char, int)` template `map` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1yikz1_g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg72k6rs3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n    return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2p8cgf00.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmp2p8cgf00.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p8cgf00.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3oov8d00.d(13): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp3oov8d00.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3oov8d00.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7cp_dzzi.d(11): Error: no property `sort` for type `char[]`\n/tmp/tmp7cp_dzzi.d(12): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7cp_dzzi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoyw53_on.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4282d5]\n??:? void tmpoyw53_on.__unittest_L23_C1() [0x427ec5]\n??:? void tmpoyw53_on.__modtest() [0x428058]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b142]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430359]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]\n??:? runModuleUnitTests [0x42c085]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428798]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6lxkw8tz.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp6lxkw8tz.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lxkw8tz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6lxkw8tz.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp6lxkw8tz.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lxkw8tz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0) {\n        c0[c]++;\n    }\n    foreach (c; s1) {\n        c1[c]++;\n    }\n    foreach (i; 0 .. 256) {\n        if (c0[i] != c1[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa2t5351l.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4282c5]\n??:? void tmpa2t5351l.__unittest_L25_C1() [0x427eb5]\n??:? void tmpa2t5351l.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428788]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto s0_chars = s0.dup.sort;\n    auto s1_chars = s1.dup.sort;\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3eq12gww.d(11): Error: no property `sort` for type `char[]`\n/tmp/tmp3eq12gww.d(12): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3eq12gww.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    int[] cnt = new int[256];\n    foreach (c; s0)\n        cnt[c]++;\n    foreach (c; s1)\n        cnt[c]--;\n    foreach (c; cnt)\n        if (c != 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx5crls0_.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpx5crls0_.__unittest_L20_C1() [0x427e71]\n??:? void tmpx5crls0_.__modtest() [0x428004]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43037d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43082c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430309]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]\n??:? runModuleUnitTests [0x42c035]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428748]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n    return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2p8cgf00.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmp2p8cgf00.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p8cgf00.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto s0_chars = s0.chars;\n    auto s1_chars = s1.chars;\n    sort(s0_chars);\n    sort(s1_chars);\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp95b_e54u.d(11): Error: no property `chars` for type `string`\n/tmp/tmp95b_e54u.d(12): Error: no property `chars` for type `string`\n/tmp/tmp95b_e54u.d(13): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp95b_e54u.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp95b_e54u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kmhtu02.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    foreach (i, c; s0) \n    {\n        if (s1.indexOf(c) == -1) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfnpt_yzj.d(14): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfnpt_yzj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    foreach (c; s0) \n    {\n        if (s1.count(c) == 0) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwkd57mu2.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkd57mu2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3ipdp2i2.d(16): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ipdp2i2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7cp_dzzi.d(11): Error: no property `sort` for type `char[]`\n/tmp/tmp7cp_dzzi.d(12): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7cp_dzzi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7cp_dzzi.d(11): Error: no property `sort` for type `char[]`\n/tmp/tmp7cp_dzzi.d(12): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7cp_dzzi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3uvcstgy.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3uvcstgy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    foreach (i, c; s0) \n    {\n        if (s1.indexOf(c) == -1) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfnpt_yzj.d(14): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfnpt_yzj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7cp_dzzi.d(11): Error: no property `sort` for type `char[]`\n/tmp/tmp7cp_dzzi.d(12): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7cp_dzzi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (immutable c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgfbdjppq.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgfbdjppq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kmhtu02.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwx1_tydp.d(13): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwx1_tydp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_chars = s0.dup.sort;\n    auto s1_chars = s1.dup.sort;\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5iau6uoi.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp5iau6uoi.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5iau6uoi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n    return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2p8cgf00.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmp2p8cgf00.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p8cgf00.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (c; s0)\n    {\n        if (s1.count(c) != s0.count(c))\n            return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyd1smy7w.d(19): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyd1smy7w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    for (int i = 0; i < s0.length; i++)\n    {\n        if (s0[i] != s1[i])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6b49_cjk.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427f05]\n??:? void tmp6b49_cjk.__unittest_L19_C1() [0x427af1]\n??:? void tmp6b49_cjk.__modtest() [0x427c84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc9f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab32]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcc5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430174]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc51]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab09]\n??:? runModuleUnitTests [0x42ba75]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6lxkw8tz.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp6lxkw8tz.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lxkw8tz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    foreach (i, c; s0) \n    {\n        if (s1.count(c) == 0) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4rrpbzgt.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4rrpbzgt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_chars = s0.dup.sort;\n    auto s1_chars = s1.dup.sort;\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5iau6uoi.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp5iau6uoi.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5iau6uoi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_chars = s0.to!char[];\n    auto s1_chars = s1.to!char[];\n    sort(s0_chars);\n    sort(s1_chars);\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq05zhuv4.d(12): Error: no property `to` for type `string`\n/tmp/tmpq05zhuv4.d(13): Error: no property `to` for type `string`\n/tmp/tmpq05zhuv4.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpq05zhuv4.d(15): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq05zhuv4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_chars = s0.dup;\n    auto s1_chars = s1.dup;\n    s0_chars.sort;\n    s1_chars.sort;\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz96oq470.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpz96oq470.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz96oq470.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kmhtu02.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    int[] counts = new int[256];\n    foreach (c; s0) counts[c]++;\n    foreach (c; s1) counts[c]--;\n    foreach (c; counts) if (c != 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv00k6ezb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428295]\n??:? void tmpv00k6ezb.__unittest_L17_C1() [0x427e81]\n??:? void tmpv00k6ezb.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43038d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430319]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428758]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg72k6rs3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg72k6rs3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    int[] chars = new int[256];\n    foreach (c; s0) \n        chars[c]++;\n    foreach (c; s1) \n        chars[c]--;\n    foreach (c; chars) \n        if (c != 0) \n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqzi74goi.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428295]\n??:? void tmpqzi74goi.__unittest_L22_C1() [0x427e81]\n??:? void tmpqzi74goi.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43038d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430319]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428758]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_chars = s0.toCharArray();\n    auto s1_chars = s1.toCharArray();\n    sort(s0_chars);\n    sort(s1_chars);\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptq18fp3l.d(12): Error: no property `toCharArray` for type `string`\n/tmp/tmptq18fp3l.d(13): Error: no property `toCharArray` for type `string`\n/tmp/tmptq18fp3l.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmptq18fp3l.d(15): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptq18fp3l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg72k6rs3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_chars = s0.dup;\n    auto s1_chars = s1.dup;\n    std.algorithm.sort(s0_chars);\n    std.algorithm.sort(s1_chars);\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbspsow52.d(14): Error: undefined identifier `algorithm` in package `std`\n/tmp/tmpbspsow52.d(15): Error: undefined identifier `algorithm` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbspsow52.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    // Check if the words have the same length.\n    if (s0.length != s1.length)\n        return false;\n    // Check if the words have the same characters.\n    foreach (c; s0)\n    {\n        if (s1.count(c) != s0.count(c))\n            return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjykhy6fs.d(21): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjykhy6fs.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_chars = s0.toCharArray();\n    auto s1_chars = s1.toCharArray();\n    sort(s0_chars);\n    sort(s1_chars);\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptq18fp3l.d(12): Error: no property `toCharArray` for type `string`\n/tmp/tmptq18fp3l.d(13): Error: no property `toCharArray` for type `string`\n/tmp/tmptq18fp3l.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmptq18fp3l.d(15): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptq18fp3l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_chars = s0.dup.sort();\n    auto s1_chars = s1.dup.sort();\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0y0zzd1g.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp0y0zzd1g.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0y0zzd1g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp11797bg0.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4282c5]\n??:? void tmp11797bg0.__unittest_L21_C1() [0x427eb5]\n??:? void tmp11797bg0.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428788]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpieu6ttgv.d(11): Error: no property `sort` for type `char[]`\n/tmp/tmpieu6ttgv.d(12): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpieu6ttgv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3uvcstgy.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3uvcstgy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n    foreach (i; 0 .. 256) if (c0[i] != c1[i]) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzuwb4u65.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4282d5]\n??:? void tmpzuwb4u65.__unittest_L18_C1() [0x427ec5]\n??:? void tmpzuwb4u65.__modtest() [0x428058]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b142]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430359]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]\n??:? runModuleUnitTests [0x42c085]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428798]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    int[] counts = new int[256];\n    foreach (c; s0) \n        counts[c]++;\n    foreach (c; s1) \n        counts[c]--;\n    foreach (c; counts) \n        if (c != 0) \n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptcjg943q.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428295]\n??:? void tmptcjg943q.__unittest_L22_C1() [0x427e81]\n??:? void tmptcjg943q.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43038d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430319]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428758]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpn2xrymsg.d(18): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn2xrymsg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    foreach (c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprjfn1fck.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjfn1fck.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n    return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpukchuf3g.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpukchuf3g.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpukchuf3g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdox2o8p_.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpdox2o8p_.d(15): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdox2o8p_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n    return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2p8cgf00.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmp2p8cgf00.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p8cgf00.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    // Check if the words have the same length.\n    if (s0.length != s1.length) return false;\n    // Check if the words have the same characters.\n    foreach (c; s0) {\n        if (s1.count(c) != s0.count(c)) return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprche7yl5.d(18): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprche7yl5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3uvcstgy.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3uvcstgy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpieu6ttgv.d(11): Error: no property `sort` for type `char[]`\n/tmp/tmpieu6ttgv.d(12): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpieu6ttgv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    auto s0_chars = s0.chars;\n    auto s1_chars = s1.chars;\n    sort(s0_chars);\n    sort(s1_chars);\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsb5mpofk.d(10): Error: no property `chars` for type `string`\n/tmp/tmpsb5mpofk.d(11): Error: no property `chars` for type `string`\n/tmp/tmpsb5mpofk.d(12): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpsb5mpofk.d(13): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsb5mpofk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5_5htev1.d(12): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp5_5htev1.d(13): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_5htev1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    foreach (c; s0) \n    {\n        if (s1.count(c) == 0) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwkd57mu2.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkd57mu2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpn2xrymsg.d(18): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn2xrymsg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0_knq49w.d(10): Error: no property `sort` for type `char[]`\n/tmp/tmp0_knq49w.d(11): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0_knq49w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n    foreach (i; 0 .. 256) if (c0[i] != c1[i]) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzuwb4u65.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4282d5]\n??:? void tmpzuwb4u65.__unittest_L18_C1() [0x427ec5]\n??:? void tmpzuwb4u65.__modtest() [0x428058]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b142]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430359]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]\n??:? runModuleUnitTests [0x42c085]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428798]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    foreach (i, c; s0_sorted) \n    {\n        if (c != s1_sorted[i]) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmfuyaoyx.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpmfuyaoyx.d(13): Error: no property `sort` for type `char[]`\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (c; s0)\n    {\n        if (s1.count(c) != s0.count(c))\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphoi5_60r.d(14): Error: no property `count` for type `string`\n/tmp/tmphoi5_60r.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphoi5_60r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n    return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpukchuf3g.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpukchuf3g.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpukchuf3g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg72k6rs3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoyw53_on.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4282d5]\n??:? void tmpoyw53_on.__unittest_L23_C1() [0x427ec5]\n??:? void tmpoyw53_on.__modtest() [0x428058]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b142]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430359]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]\n??:? runModuleUnitTests [0x42c085]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428798]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    else\n    {\n        auto s0_sorted = s0.dup.sort;\n        auto s1_sorted = s1.dup.sort;\n        return s0_sorted == s1_sorted;\n    }\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy9m12p_5.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpy9m12p_5.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9m12p_5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6lxkw8tz.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp6lxkw8tz.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lxkw8tz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    int[] count0 = new int[256];\n    int[] count1 = new int[256];\n    foreach (c; s0) count0[c]++;\n    foreach (c; s1) count1[c]++;\n    foreach (i; 0 .. 256) if (count0[i] != count1[i]) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6wpibxhg.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4282d5]\n??:? void tmp6wpibxhg.__unittest_L18_C1() [0x427ec5]\n??:? void tmp6wpibxhg.__modtest() [0x428058]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b142]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430359]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]\n??:? runModuleUnitTests [0x42c085]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428798]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpydzjjrkb.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpydzjjrkb.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpydzjjrkb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_chars = s0.dup.sort;\n    auto s1_chars = s1.dup.sort;\n    foreach (i, c; s0_chars)\n    {\n        if (c != s1_chars[i])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpiqf7ch6j.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpiqf7ch6j.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiqf7ch6j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3uvcstgy.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3uvcstgy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxcg6pk4c.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpxcg6pk4c.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxcg6pk4c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk_p15q1b.d(13): Error: no property `sort` for type `char[]`\n/tmp/tmpk_p15q1b.d(14): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk_p15q1b.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kmhtu02.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfs3sigga.d(10): Error: no property `sort` for type `char[]`\n/tmp/tmpfs3sigga.d(11): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfs3sigga.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoyw53_on.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4282d5]\n??:? void tmpoyw53_on.__unittest_L23_C1() [0x427ec5]\n??:? void tmpoyw53_on.__modtest() [0x428058]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b142]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430359]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]\n??:? runModuleUnitTests [0x42c085]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428798]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kmhtu02.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6lxkw8tz.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp6lxkw8tz.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lxkw8tz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    bool[] used = new bool[s1.length];\n    foreach (c; s0)\n    {\n        bool found = false;\n        for (int i = 0; i < s1.length; i++)\n        {\n            if (s1[i] == c && !used[i])\n            {\n                used[i] = true;\n                found = true;\n                break;\n            }\n        }\n        if (!found)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprfqyfwgk.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4280e5]\n??:? void tmprfqyfwgk.__unittest_L28_C1() [0x427d5d]\n??:? void tmprfqyfwgk.__modtest() [0x427e68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430039]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ffc5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad85]\n??:? runModuleUnitTests [0x42bcf1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kmhtu02.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto a = s0.dup;\n    auto b = s1.dup;\n    a.sort;\n    b.sort;\n    return a == b;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxk57r35j.d(13): Error: no property `sort` for type `char[]`\n/tmp/tmpxk57r35j.d(14): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxk57r35j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfakdr5d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    char[] c0 = s0.dup;\n    char[] c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpeig88ccw.d(13): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpeig88ccw.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeig88ccw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpodkq84jw.d(18): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpodkq84jw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3oov8d00.d(13): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp3oov8d00.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3oov8d00.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kmhtu02.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_chars = s0.dup.sort;\n    auto s1_chars = s1.dup.sort;\n    foreach (i, c; s0_chars) {\n        if (c != s1_chars[i])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptghabg3o.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmptghabg3o.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptghabg3o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    foreach (c; s0)\n    {\n        if (s1.count(c) != s0.count(c))\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphoi5_60r.d(14): Error: no property `count` for type `string`\n/tmp/tmphoi5_60r.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphoi5_60r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7cp_dzzi.d(11): Error: no property `sort` for type `char[]`\n/tmp/tmp7cp_dzzi.d(12): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7cp_dzzi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkz2byu4w.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpkz2byu4w.__unittest_L18_C1() [0x427f5d]\n??:? void tmpkz2byu4w.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vaqsru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpydzjjrkb.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpydzjjrkb.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpydzjjrkb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    int[] count = new int[256];\n    foreach (c; s0)\n        count[c]++;\n    foreach (c; s1)\n        count[c]--;\n    foreach (c; count)\n        if (c != 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplvx18z0x.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428295]\n??:? void tmplvx18z0x.__unittest_L22_C1() [0x427e81]\n??:? void tmplvx18z0x.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43038d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430319]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428758]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp11797bg0.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4282c5]\n??:? void tmp11797bg0.__unittest_L21_C1() [0x427eb5]\n??:? void tmp11797bg0.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428788]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxcg6pk4c.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmpxcg6pk4c.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxcg6pk4c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`\n/tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kmhtu02.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdox2o8p_.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpdox2o8p_.d(15): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdox2o8p_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    int[] cnt = new int[256];\n    foreach (c; s0) cnt[c]++;\n    foreach (c; s1) cnt[c]--;\n    foreach (c; cnt) if (c != 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpq7jxugam.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428295]\n??:? void tmpq7jxugam.__unittest_L17_C1() [0x427e81]\n??:? void tmpq7jxugam.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43038d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430319]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428758]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n    foreach (i, c; s0) \n    {\n        if (s1.count(c) == 0) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4rrpbzgt.d(14): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4rrpbzgt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164516
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpn2xrymsg.d(18): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn2xrymsg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have the same characters.\n                            \n*/\nbool same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`\n/tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg72k6rs3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164515
    }
  ]
}