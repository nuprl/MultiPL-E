{
  "language": "d",
  "name": "HumanEval_93_encode",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(isLower(c))\n            c = toupper(c);\n        else if(isUpper(c))\n            c = tolower(c);\n        else if(c == 'a')\n            c = 'c';\n        else if(c == 'e')\n            c = 'g';\n        else if(c == 'i')\n            c = 'k';\n        else if(c == 'o')\n            c = 'q';\n        else if(c == 'u')\n            c = 'y';\n        else if(c == 'A')\n            c = 'C';\n        else if(c == 'E')\n            c = 'G';\n        else if(c == 'I')\n            c = 'K';\n        else if(c == 'O')\n            c = 'Q';\n        else if(c == 'U')\n            c = 'Y';\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp325m7utw.d(18): Error: undefined identifier `isLower`\n/tmp/tmp325m7utw.d(19): Error: undefined identifier `toupper`\n/tmp/tmp325m7utw.d(20): Error: undefined identifier `isUpper`\n/tmp/tmp325m7utw.d(21): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp325m7utw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            result ~= (c + 2);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgdj5d38w.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmpgdj5d38w.__unittest_L41_C1() [0x427cc2]\n??:? void tmpgdj5d38w.__modtest() [0x427ea0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42caa7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43038d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430319]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b98d]\n??:? runModuleUnitTests [0x42c87d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42856c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isAlpha(c)) \n        {\n            if(isUpper(c)) \n            {\n                c = toLower(c);\n            } \n            else \n            {\n                c = toUpper(c);\n            }\n            switch(c) \n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_gkx45pt.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmp_gkx45pt.d(20): Error: undefined identifier `isUpper`\n/tmp/tmp_gkx45pt.d(22): Error: undefined identifier `toLower`\n/tmp/tmp_gkx45pt.d(26): Error: undefined identifier `toUpper`\n/tmp/tmp_gkx45pt.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_gkx45pt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c - 'A' + 'a';\n        }\n        else if(c == 'a')\n        {\n            result ~= 'c';\n        }\n        else if(c == 'e')\n        {\n            result ~= 'g';\n        }\n        else if(c == 'i')\n        {\n            result ~= 'k';\n        }\n        else if(c == 'o')\n        {\n            result ~= 'q';\n        }\n        else if(c == 'u')\n        {\n            result ~= 'w';\n        }\n        else if(c == 'A')\n        {\n            result ~= 'C';\n        }\n        else if(c == 'E')\n        {\n            result ~= 'G';\n        }\n        else if(c == 'I')\n        {\n            result ~= 'K';\n        }\n        else if(c == 'O')\n        {\n            result ~= 'Q';\n        }\n        else if(c == 'U')\n        {\n            result ~= 'W';\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_9ajzkbo.d(77): unittest failure\n----------------\n??:? _d_unittestp [0x42836d]\n??:? void tmp_9ajzkbo.__unittest_L73_C1() [0x427f0e]\n??:? void tmp_9ajzkbo.__modtest() [0x4280ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ccf7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bc06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbdd]\n??:? runModuleUnitTests [0x42cacd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0qviip7b.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4280bd]\n??:? void tmp0qviip7b.__unittest_L33_C1() [0x427c62]\n??:? void tmp0qviip7b.__modtest() [0x427e40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ca47]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43032d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b92d]\n??:? runModuleUnitTests [0x42c81d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42850c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encodedMessage = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        encodedMessage ~= c;\n    }\n    return encodedMessage;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7u0qd5mc.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp7u0qd5mc.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp7u0qd5mc.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp7u0qd5mc.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7u0qd5mc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_htmz7yv.d(20): Error: C style cast illegal, use `cast(char)(c - 'a' + 'A')`\n/tmp/tmp_htmz7yv.d(24): Error: C style cast illegal, use `cast(char)(c - 'A' + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_htmz7yv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n    char[] result = new char[message.length];\n    foreach(i, c; message)\n    {\n        if(isUpper(c))\n        {\n            result[i] = toLower(c);\n        }\n        else if(isLower(c))\n        {\n            result[i] = toUpper(c);\n        }\n        else\n        {\n            result[i] = c;\n        }\n        foreach(v; vowels)\n        {\n            if(result[i] == v)\n            {\n                result[i] = v + 2;\n            }\n        }\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp50wu0pxw.d(15): Error: a struct is not a valid initializer for a `char[]`\n/tmp/tmp50wu0pxw.d(19): Error: undefined identifier `isUpper`\n/tmp/tmp50wu0pxw.d(21): Error: undefined identifier `toLower`\n/tmp/tmp50wu0pxw.d(23): Error: undefined identifier `isLower`\n/tmp/tmp50wu0pxw.d(25): Error: undefined identifier `toUpper`\n/tmp/tmp50wu0pxw.d(35): Error: cannot implicitly convert expression `cast(int)v + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp50wu0pxw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isAlpha(c)) \n        {\n            if(isLower(c)) \n            {\n                c = toUpper(c);\n            }\n            else \n            {\n                c = toLower(c);\n            }\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') \n            {\n                c = c + 2;\n            }\n            else if(c == 'Y') \n            {\n                c = 'A';\n            }\n            else if(c == 'Z') \n            {\n                c = 'B';\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpik4xxzoh.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpik4xxzoh.d(20): Error: undefined identifier `isLower`\n/tmp/tmpik4xxzoh.d(22): Error: undefined identifier `toUpper`\n/tmp/tmpik4xxzoh.d(26): Error: undefined identifier `toLower`\n/tmp/tmpik4xxzoh.d(30): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpik4xxzoh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa9d0k64i.d(20): Error: undefined identifier `toUpper`\n/tmp/tmpa9d0k64i.d(24): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9d0k64i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphjspgdq7.d(18): Error: undefined identifier `isUpper`\n/tmp/tmphjspgdq7.d(19): Error: undefined identifier `toLower`\n/tmp/tmphjspgdq7.d(20): Error: undefined identifier `isLower`\n/tmp/tmphjspgdq7.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjspgdq7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result ~= tolower(c);\n            }\n            else\n            {\n                result ~= toupper(c);\n            }\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf4kuytxd.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpf4kuytxd.d(20): Error: undefined identifier `isupper`\n/tmp/tmpf4kuytxd.d(22): Error: undefined identifier `tolower`\n/tmp/tmpf4kuytxd.d(26): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4kuytxd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpss6slxa8.d(20): Error: no property `toUpper` for type `immutable(char)`\n/tmp/tmpss6slxa8.d(24): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpss6slxa8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n                result ~= toLower(c);\n            }\n            else\n            {\n                result ~= toUpper(c);\n            }\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8uuc_zoh.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmp8uuc_zoh.d(20): Error: undefined identifier `isUpper`\n/tmp/tmp8uuc_zoh.d(22): Error: undefined identifier `toLower`\n/tmp/tmp8uuc_zoh.d(26): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8uuc_zoh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n                c = toLower(c);\n            }\n            else\n            {\n                c = toUpper(c);\n            }\n            switch(c)\n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'y':\n                    c = 'a';\n                    break;\n                case 'b':\n                    c = 'd';\n                    break;\n                case 'f':\n                    c = 'h';\n                    break;\n                case 'j':\n                    c = 'l';\n                    break;\n                case 'p':\n                    c = 'r';\n                    break;\n                case 'v':\n                    c = 'z';\n                    break;\n                case 'z':\n                    c = 'b';\n                    break;\n                case 'c':\n                    c = 'e';\n                    break;\n                case 'g':\n                    c = 'i';\n                    break;\n                case 'k':\n                    c = 'm';\n                    break;\n                case 'q':\n                    c = 's';\n                    break;\n                case 'w':\n                    c = 'a';\n                    break;\n                case 'd':\n                    c = 'f';\n                    break;\n                case 'h':\n                    c = 'j';\n                    break;\n                case 'l':\n                    c = 'n';\n                    break;\n                case 'r':\n                    c = 't';\n                    break;\n                case 'x':\n                    c = 'c';\n                    break;\n                case 's':\n                    c = 'u';\n                    break;\n                case 'n':\n                    c = 'p';\n                    break;\n                case 't':\n                    c = 'v';\n                    break;\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphy8zo903.d(105): Error: found `unittest` instead of statement\n/tmp/tmphy8zo903.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphy8zo903.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphy8zo903.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphy8zo903.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpss6slxa8.d(20): Error: no property `toUpper` for type `immutable(char)`\n/tmp/tmpss6slxa8.d(24): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpss6slxa8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result ~= c + ('A' - 'a');\n        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result ~= c + ('a' - 'A');\n        }\n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8_069hvz.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4280b5]\n??:? void tmp8_069hvz.__unittest_L33_C1() [0x427c56]\n??:? void tmp8_069hvz.__modtest() [0x427e34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ca3f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430325]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b925]\n??:? runModuleUnitTests [0x42c815]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428504]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c.isUpper)\n        {\n            result ~= c.toLower;\n        }\n        else if(c.isLower)\n        {\n            result ~= c.toUpper;\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr0px8_uu.d(18): Error: no property `isUpper` for type `immutable(char)`\n/tmp/tmpr0px8_uu.d(20): Error: no property `toLower` for type `immutable(char)`\n/tmp/tmpr0px8_uu.d(22): Error: no property `isLower` for type `immutable(char)`\n/tmp/tmpr0px8_uu.d(24): Error: no property `toUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr0px8_uu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                result ~= toUpper(c);\n            }\n            else\n            {\n                result ~= toLower(c);\n            }\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmi6p4u02.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpmi6p4u02.d(20): Error: undefined identifier `isLower`\n/tmp/tmpmi6p4u02.d(22): Error: undefined identifier `toUpper`\n/tmp/tmpmi6p4u02.d(26): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmi6p4u02.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa9d0k64i.d(20): Error: undefined identifier `toUpper`\n/tmp/tmpa9d0k64i.d(24): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9d0k64i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                if(c == 'Z')\n                {\n                    result ~= 'b';\n                }\n                else if(c == 'Y')\n                {\n                    result ~= 'a';\n                }\n                else\n                {\n                    result ~= tolower(c) + 2;\n                }\n            }\n            else\n            {\n                if(c == 'z')\n                {\n                    result ~= 'B';\n                }\n                else if(c == 'y')\n                {\n                    result ~= 'A';\n                }\n                else\n                {\n                    result ~= toupper(c) + 2;\n                }\n            }\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp48ym2kk2.d(18): Error: undefined identifier `isalpha`\n/tmp/tmp48ym2kk2.d(20): Error: undefined identifier `isupper`\n/tmp/tmp48ym2kk2.d(32): Error: undefined identifier `tolower`\n/tmp/tmp48ym2kk2.d(47): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48ym2kk2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2unu4gq9.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2unu4gq9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if (c >= 'a' && c <= 'z') \n        {\n            result ~= (char)('A' + (c - 'a'));\n        } \n        else if (c >= 'A' && c <= 'Z') \n        {\n            result ~= (char)('a' + (c - 'A'));\n        } \n        else if (c == 'a') \n        {\n            result ~= 'c';\n        } \n        else if (c == 'e') \n        {\n            result ~= 'g';\n        } \n        else if (c == 'i') \n        {\n            result ~= 'k';\n        } \n        else if (c == 'o') \n        {\n            result ~= 'q';\n        } \n        else if (c == 'u') \n        {\n            result ~= 'w';\n        } \n        else if (c == 'A') \n        {\n            result ~= 'C';\n        } \n        else if (c == 'E') \n        {\n            result ~= 'G';\n        } \n        else if (c == 'I') \n        {\n            result ~= 'K';\n        } \n        else if (c == 'O') \n        {\n            result ~= 'Q';\n        } \n        else if (c == 'U') \n        {\n            result ~= 'W';\n        } \n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2zbqnxqb.d(20): Error: C style cast illegal, use `cast(char)('A' + (c - 'a'))`\n/tmp/tmp2zbqnxqb.d(24): Error: C style cast illegal, use `cast(char)('a' + (c - 'A'))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zbqnxqb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                c = toUpper(c);\n            }\n            else\n            {\n                c = toLower(c);\n            }\n            switch(c)\n            {\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpag596sgi.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpag596sgi.d(20): Error: undefined identifier `isLower`\n/tmp/tmpag596sgi.d(22): Error: undefined identifier `toUpper`\n/tmp/tmpag596sgi.d(26): Error: undefined identifier `toLower`\n/tmp/tmpag596sgi.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpag596sgi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if (isAlpha(c)) \n        {\n            if (isUpper(c)) \n            {\n                c = toLower(c);\n            }\n            else \n            {\n                c = toUpper(c);\n            }\n        }\n        switch(c) \n        {\n            case 'a':\n                c = 'c';\n                break;\n            case 'e':\n                c = 'g';\n                break;\n            case 'i':\n                c = 'k';\n                break;\n            case 'o':\n                c = 'q';\n                break;\n            case 'u':\n                c = 'y';\n                break;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpl0eqslv6.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpl0eqslv6.d(20): Error: undefined identifier `isUpper`\n/tmp/tmpl0eqslv6.d(22): Error: undefined identifier `toLower`\n/tmp/tmpl0eqslv6.d(26): Error: undefined identifier `toUpper`\n/tmp/tmpl0eqslv6.d(29): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl0eqslv6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n        }\n        else if(c == 'a')\n        {\n            c = 'c';\n        }\n        else if(c == 'e')\n        {\n            c = 'g';\n        }\n        else if(c == 'i')\n        {\n            c = 'k';\n        }\n        else if(c == 'o')\n        {\n            c = 'q';\n        }\n        else if(c == 'u')\n        {\n            c = 'w';\n        }\n        else if(c == 'A')\n        {\n            c = 'C';\n        }\n        else if(c == 'E')\n        {\n            c = 'G';\n        }\n        else if(c == 'I')\n        {\n            c = 'K';\n        }\n        else if(c == 'O')\n        {\n            c = 'Q';\n        }\n        else if(c == 'U')\n        {\n            c = 'W';\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwh6umm3a.d(20): Error: undefined identifier `toupper`\n/tmp/tmpwh6umm3a.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwh6umm3a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_htmz7yv.d(20): Error: C style cast illegal, use `cast(char)(c - 'a' + 'A')`\n/tmp/tmp_htmz7yv.d(24): Error: C style cast illegal, use `cast(char)(c - 'A' + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_htmz7yv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                c = toUpper(c);\n            }\n            else\n            {\n                c = toLower(c);\n            }\n            switch(c)\n            {\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n                case 'Y':\n                    c = 'A';\n                    break;\n                case 'B':\n                    c = 'D';\n                    break;\n                case 'F':\n                    c = 'H';\n                    break;\n                case 'J':\n                    c = 'L';\n                    break;\n                case 'P':\n                    c = 'R';\n                    break;\n                case 'V':\n                    c = 'Z';\n                    break;\n                case 'Z':\n                    c = 'B';\n                    break;\n                case 'C':\n                    c = 'E';\n                    break;\n                case 'G':\n                    c = 'I';\n                    break;\n                case 'K':\n                    c = 'M';\n                    break;\n                case 'Q':\n                    c = 'S';\n                    break;\n                case 'W':\n                    c = 'A';\n                    break;\n                case 'D':\n                    c = 'F';\n                    break;\n                case 'H':\n                    c = 'J';\n                    break;\n                case 'L':\n                    c = 'N';\n                    break;\n                case 'R':\n                    c = 'T';\n                    break;\n                case 'X':\n                    c = 'B';\n                    break;\n                case 'M':\n                    c = 'O';\n                    break;\n                case 'N':\n                    c = 'P';\n                    break;\n                case 'S':\n                    c = 'U';\n                    break;\n               \nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc89xcxhf.d(106): Error: found `unittest` instead of statement\n/tmp/tmpc89xcxhf.d(116): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpc89xcxhf.d(116): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpc89xcxhf.d(116): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc89xcxhf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpss6slxa8.d(20): Error: no property `toUpper` for type `immutable(char)`\n/tmp/tmpss6slxa8.d(24): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpss6slxa8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result ~= tolower(c);\n            }\n            else\n            {\n                result ~= toupper(c);\n            }\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf4kuytxd.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpf4kuytxd.d(20): Error: undefined identifier `isupper`\n/tmp/tmpf4kuytxd.d(22): Error: undefined identifier `tolower`\n/tmp/tmpf4kuytxd.d(26): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4kuytxd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isUpper(c)) \n        {\n            c = toLower(c);\n        }\n        else if(isLower(c)) \n        {\n            c = toUpper(c);\n        }\n        switch(c) \n        {\n            case 'a':\n                c = 'c';\n                break;\n            case 'e':\n                c = 'g';\n                break;\n            case 'i':\n                c = 'k';\n                break;\n            case 'o':\n                c = 'q';\n                break;\n            case 'u':\n                c = 'y';\n                break;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjnngbjhh.d(18): Error: undefined identifier `isUpper`\n/tmp/tmpjnngbjhh.d(20): Error: undefined identifier `toLower`\n/tmp/tmpjnngbjhh.d(22): Error: undefined identifier `isLower`\n/tmp/tmpjnngbjhh.d(24): Error: undefined identifier `toUpper`\n/tmp/tmpjnngbjhh.d(26): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjnngbjhh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa9d0k64i.d(20): Error: undefined identifier `toUpper`\n/tmp/tmpa9d0k64i.d(24): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9d0k64i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= char(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= char(c - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi22jzn3e.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpi22jzn3e.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi22jzn3e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isAlpha(c)) \n        {\n            if(isUpper(c)) \n            {\n                result ~= toLower(c);\n            } \n            else \n            {\n                result ~= toUpper(c);\n            }\n        } \n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxja93uft.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpxja93uft.d(20): Error: undefined identifier `isUpper`\n/tmp/tmpxja93uft.d(22): Error: undefined identifier `toLower`\n/tmp/tmpxja93uft.d(26): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxja93uft.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result ~= tolower(c);\n            }\n            else\n            {\n                result ~= toupper(c);\n            }\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf4kuytxd.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpf4kuytxd.d(20): Error: undefined identifier `isupper`\n/tmp/tmpf4kuytxd.d(22): Error: undefined identifier `tolower`\n/tmp/tmpf4kuytxd.d(26): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4kuytxd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4gayl24d.d(20): Error: undefined identifier `toUpper`\n/tmp/tmp4gayl24d.d(24): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4gayl24d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isAlpha(c)) \n        {\n            if(isLower(c)) \n            {\n                c = toUpper(c);\n            } \n            else \n            {\n                c = toLower(c);\n            }\n            switch(c) \n            {\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n                case 'Y':\n                    c = 'A';\n                    break;\n                case 'C':\n                    c = 'E';\n                    break;\n                case 'G':\n                    c = 'I';\n                    break;\n                case 'K':\n                    c = 'O';\n                    break;\n                case 'Q':\n                    c = 'U';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp43va82af.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmp43va82af.d(20): Error: undefined identifier `isLower`\n/tmp/tmp43va82af.d(22): Error: undefined identifier `toUpper`\n/tmp/tmp43va82af.d(26): Error: undefined identifier `toLower`\n/tmp/tmp43va82af.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43va82af.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n        }\n        else if(c == 'a')\n        {\n            c = 'c';\n        }\n        else if(c == 'e')\n        {\n            c = 'g';\n        }\n        else if(c == 'i')\n        {\n            c = 'k';\n        }\n        else if(c == 'o')\n        {\n            c = 'q';\n        }\n        else if(c == 'u')\n        {\n            c = 'w';\n        }\n        else if(c == 'A')\n        {\n            c = 'C';\n        }\n        else if(c == 'E')\n        {\n            c = 'G';\n        }\n        else if(c == 'I')\n        {\n            c = 'K';\n        }\n        else if(c == 'O')\n        {\n            c = 'Q';\n        }\n        else if(c == 'U')\n        {\n            c = 'W';\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwh6umm3a.d(20): Error: undefined identifier `toupper`\n/tmp/tmpwh6umm3a.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwh6umm3a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4gayl24d.d(20): Error: undefined identifier `toUpper`\n/tmp/tmp4gayl24d.d(24): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4gayl24d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isAlpha(c)) \n        {\n            if(isUpper(c)) \n            {\n                if(c == 'Z') \n                {\n                    result ~= 'B';\n                }\n                else if(c == 'Y') \n                {\n                    result ~= 'A';\n                }\n                else \n                {\n                    result ~= toLower(c) + 2;\n                }\n            }\n            else \n            {\n                if(c == 'z') \n                {\n                    result ~= 'b';\n                }\n                else if(c == 'y') \n                {\n                    result ~= 'a';\n                }\n                else \n                {\n                    result ~= c + 2;\n                }\n            }\n        }\n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_pjt0pmd.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmp_pjt0pmd.d(20): Error: undefined identifier `isUpper`\n/tmp/tmp_pjt0pmd.d(32): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_pjt0pmd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result ~= to!string(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result ~= to!string(c - 'A' + 'a');\n        }\n        else \n        {\n            result ~= to!string(c);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdkffnqsq.d(20): Error: template instance `to!string` template `to` is not defined\n/tmp/tmpdkffnqsq.d(24): Error: template instance `to!string` template `to` is not defined\n/tmp/tmpdkffnqsq.d(28): Error: template instance `to!string` template `to` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdkffnqsq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if (isUpper(c))\n            result ~= toLower(c);\n        else if (isLower(c))\n            result ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfb2ulobn.d(18): Error: undefined identifier `isUpper`\n/tmp/tmpfb2ulobn.d(19): Error: undefined identifier `toLower`\n/tmp/tmpfb2ulobn.d(20): Error: undefined identifier `isLower`\n/tmp/tmpfb2ulobn.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfb2ulobn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n            result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n            result ~= 'y';\n        else if(c == 'A')\n            result ~= 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n            result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n        else if(c >= 'a' && c <= 'z')\n            result ~= (char)(c - 32);\n        else if(c >= 'A' && c <= 'Z')\n            result ~= (char)(c + 32);\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuxxnv9x9.d(39): Error: C style cast illegal, use `cast(char)(c - 32)`\n/tmp/tmpuxxnv9x9.d(41): Error: C style cast illegal, use `cast(char)(c + 32)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxxnv9x9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk199hdfe.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpk199hdfe.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpk199hdfe.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmpk199hdfe.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk199hdfe.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isAlpha(c)) \n        {\n            if(isUpper(c)) \n            {\n                result ~= toLower(c);\n            }\n            else \n            {\n                result ~= toUpper(c);\n            }\n        }\n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5nvyv593.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmp5nvyv593.d(20): Error: undefined identifier `isUpper`\n/tmp/tmp5nvyv593.d(22): Error: undefined identifier `toLower`\n/tmp/tmp5nvyv593.d(26): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5nvyv593.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isAlpha(c)) \n        {\n            if(isUpper(c)) \n            {\n                c = toLower(c);\n            }\n            else \n            {\n                c = toUpper(c);\n            }\n            switch(c) \n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpacopajba.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpacopajba.d(20): Error: undefined identifier `isUpper`\n/tmp/tmpacopajba.d(22): Error: undefined identifier `toLower`\n/tmp/tmpacopajba.d(26): Error: undefined identifier `toUpper`\n/tmp/tmpacopajba.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpacopajba.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length; i++) \n    {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') \n        {\n            c = toupper(c);\n        }\n        else if (c >= 'A' && c <= 'Z') \n        {\n            c = tolower(c);\n        }\n        else \n        {\n            result += c;\n            continue;\n        }\n        switch (c) \n        {\n            case 'A':\n                c = 'C';\n                break;\n            case 'E':\n                c = 'G';\n                break;\n            case 'I':\n                c = 'K';\n                break;\n            case 'O':\n                c = 'Q';\n                break;\n            case 'U':\n                c = 'Y';\n                break;\n            case 'a':\n                c = 'c';\n                break;\n            case 'e':\n                c = 'g';\n                break;\n            case 'i':\n                c = 'k';\n                break;\n            case 'o':\n                c = 'q';\n                break;\n            case 'u':\n                c = 'y';\n                break;\n        }\n        result += c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5mfswxjc.d(21): Error: undefined identifier `toupper`\n/tmp/tmp5mfswxjc.d(25): Error: undefined identifier `tolower`\n/tmp/tmp5mfswxjc.d(29): Error: slice `result` is not mutable\n/tmp/tmp5mfswxjc.d(32): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\n/tmp/tmp5mfswxjc.d(65): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5mfswxjc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= to!string(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= to!string(c - 'A' + 'a');\n        }\n        else\n        {\n            result ~= to!string(c);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp394sk6vd.d(20): Error: template instance `to!string` template `to` is not defined\n/tmp/tmp394sk6vd.d(24): Error: template instance `to!string` template `to` is not defined\n/tmp/tmp394sk6vd.d(28): Error: template instance `to!string` template `to` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp394sk6vd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isAlpha(c)) \n        {\n            if(isUpper(c)) \n            {\n                c = toLower(c);\n            }\n            else \n            {\n                c = toUpper(c);\n            }\n            switch(c) \n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpacopajba.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpacopajba.d(20): Error: undefined identifier `isUpper`\n/tmp/tmpacopajba.d(22): Error: undefined identifier `toLower`\n/tmp/tmpacopajba.d(26): Error: undefined identifier `toUpper`\n/tmp/tmpacopajba.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpacopajba.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp__x3pp7n.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__x3pp7n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2unu4gq9.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2unu4gq9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(isUpper(c))\n        {\n            encoded ~= toLower(c);\n        }\n        else if(isLower(c))\n        {\n            encoded ~= toUpper(c);\n        }\n        else\n        {\n            encoded ~= c;\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpey_lwi41.d(18): Error: undefined identifier `isUpper`\n/tmp/tmpey_lwi41.d(20): Error: undefined identifier `toLower`\n/tmp/tmpey_lwi41.d(22): Error: undefined identifier `isLower`\n/tmp/tmpey_lwi41.d(24): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpey_lwi41.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                c = toUpper(c);\n            }\n            else\n            {\n                c = toLower(c);\n            }\n            switch(c)\n            {\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpag596sgi.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpag596sgi.d(20): Error: undefined identifier `isLower`\n/tmp/tmpag596sgi.d(22): Error: undefined identifier `toUpper`\n/tmp/tmpag596sgi.d(26): Error: undefined identifier `toLower`\n/tmp/tmpag596sgi.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpag596sgi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp__x3pp7n.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__x3pp7n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n                result ~= toLower(c);\n            }\n            else\n            {\n                result ~= toUpper(c);\n            }\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8uuc_zoh.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmp8uuc_zoh.d(20): Error: undefined identifier `isUpper`\n/tmp/tmp8uuc_zoh.d(22): Error: undefined identifier `toLower`\n/tmp/tmp8uuc_zoh.d(26): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8uuc_zoh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphjspgdq7.d(18): Error: undefined identifier `isUpper`\n/tmp/tmphjspgdq7.d(19): Error: undefined identifier `toLower`\n/tmp/tmphjspgdq7.d(20): Error: undefined identifier `isLower`\n/tmp/tmphjspgdq7.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjspgdq7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                result ~= toUpper(c);\n            }\n            else\n            {\n                result ~= toLower(c);\n            }\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1t897yhd.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmp1t897yhd.d(20): Error: undefined identifier `isLower`\n/tmp/tmp1t897yhd.d(22): Error: undefined identifier `toUpper`\n/tmp/tmp1t897yhd.d(26): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1t897yhd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n                c = toLower(c);\n            }\n            else\n            {\n                c = toUpper(c);\n            }\n            if(c == 'a')\n            {\n                c = 'c';\n            }\n            else if(c == 'e')\n            {\n                c = 'g';\n            }\n            else if(c == 'i')\n            {\n                c = 'k';\n            }\n            else if(c == 'o')\n            {\n                c = 'q';\n            }\n            else if(c == 'u')\n            {\n                c = 'w';\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx_wa_ft9.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpx_wa_ft9.d(20): Error: undefined identifier `isUpper`\n/tmp/tmpx_wa_ft9.d(22): Error: undefined identifier `toLower`\n/tmp/tmpx_wa_ft9.d(26): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_wa_ft9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbkw6qxd8.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpbkw6qxd8.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpbkw6qxd8.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmpbkw6qxd8.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkw6qxd8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n                result ~= toLower(c);\n            }\n            else\n            {\n                result ~= toUpper(c);\n            }\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxaswdj3_.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpxaswdj3_.d(20): Error: undefined identifier `isUpper`\n/tmp/tmpxaswdj3_.d(22): Error: undefined identifier `toLower`\n/tmp/tmpxaswdj3_.d(26): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxaswdj3_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = 'a' + (c - 'a' + 2) % 5;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = 'A' + (c - 'A' + 2) % 5;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpshvun1qh.d(20): Error: cannot modify `immutable` expression `c`\n/tmp/tmpshvun1qh.d(24): Error: cannot modify `immutable` expression `c`\n/tmp/tmpshvun1qh.d(28): Error: cannot modify `immutable` expression `c`\n/tmp/tmpshvun1qh.d(32): Error: cannot modify `immutable` expression `c`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpshvun1qh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isAlpha(c)) \n        {\n            if(isUpper(c)) \n            {\n                c = toLower(c);\n            } \n            else \n            {\n                c = toUpper(c);\n            }\n            switch(c) \n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_gkx45pt.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmp_gkx45pt.d(20): Error: undefined identifier `isUpper`\n/tmp/tmp_gkx45pt.d(22): Error: undefined identifier `toLower`\n/tmp/tmp_gkx45pt.d(26): Error: undefined identifier `toUpper`\n/tmp/tmp_gkx45pt.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_gkx45pt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result ~= (char)(c - 'a' + 'A');\n        } \n        else if(c >= 'A' && c <= 'Z') \n        {\n            result ~= (char)(c - 'A' + 'a');\n        } \n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt79zt_fa.d(20): Error: C style cast illegal, use `cast(char)(c - 'a' + 'A')`\n/tmp/tmpt79zt_fa.d(24): Error: C style cast illegal, use `cast(char)(c - 'A' + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt79zt_fa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                c = toUpper(c);\n            }\n            else\n            {\n                c = toLower(c);\n            }\n            switch(c)\n            {\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpag596sgi.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpag596sgi.d(20): Error: undefined identifier `isLower`\n/tmp/tmpag596sgi.d(22): Error: undefined identifier `toUpper`\n/tmp/tmpag596sgi.d(26): Error: undefined identifier `toLower`\n/tmp/tmpag596sgi.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpag596sgi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_htmz7yv.d(20): Error: C style cast illegal, use `cast(char)(c - 'a' + 'A')`\n/tmp/tmp_htmz7yv.d(24): Error: C style cast illegal, use `cast(char)(c - 'A' + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_htmz7yv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isAlpha(c)) \n        {\n            if(isLower(c)) \n            {\n                result ~= toUpper(c);\n            } \n            else \n            {\n                result ~= toLower(c);\n            }\n        } \n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkt0podu8.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpkt0podu8.d(20): Error: undefined identifier `isLower`\n/tmp/tmpkt0podu8.d(22): Error: undefined identifier `toUpper`\n/tmp/tmpkt0podu8.d(26): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkt0podu8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n                c = toLower(c);\n            }\n            else\n            {\n                c = toUpper(c);\n            }\n        }\n        switch(c)\n        {\n            case 'a':\n                c = 'c';\n                break;\n            case 'e':\n                c = 'g';\n                break;\n            case 'i':\n                c = 'k';\n                break;\n            case 'o':\n                c = 'q';\n                break;\n            case 'u':\n                c = 'y';\n                break;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpphd_tus4.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpphd_tus4.d(20): Error: undefined identifier `isUpper`\n/tmp/tmpphd_tus4.d(22): Error: undefined identifier `toLower`\n/tmp/tmpphd_tus4.d(26): Error: undefined identifier `toUpper`\n/tmp/tmpphd_tus4.d(32): Error: cannot modify `immutable` expression `c`\n/tmp/tmpphd_tus4.d(35): Error: cannot modify `immutable` expression `c`\n/tmp/tmpphd_tus4.d(38): Error: cannot modify `immutable` expression `c`\n/tmp/tmpphd_tus4.d(41): Error: cannot modify `immutable` expression `c`\n/tmp/tmpphd_tus4.d(44): Error: cannot modify `immutable` expression `c`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpphd_tus4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxlr0x9nk.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpxlr0x9nk.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpxlr0x9nk.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmpxlr0x9nk.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxlr0x9nk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2unu4gq9.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2unu4gq9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= char(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= char(c - 'A' + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            result ~= char(c + 2);\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            result ~= char(c + 2);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0j_ili8s.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp0j_ili8s.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp0j_ili8s.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp0j_ili8s.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0j_ili8s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n        }\n        switch(c)\n        {\n            case 'A':\n                c = 'C';\n                break;\n            case 'E':\n                c = 'G';\n                break;\n            case 'I':\n                c = 'K';\n                break;\n            case 'O':\n                c = 'Q';\n                break;\n            case 'U':\n                c = 'Y';\n                break;\n            case 'a':\n                c = 'c';\n                break;\n            case 'e':\n                c = 'g';\n                break;\n            case 'i':\n                c = 'k';\n                break;\n            case 'o':\n                c = 'q';\n                break;\n            case 'u':\n                c = 'y';\n                break;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv30dcji5.d(20): Error: undefined identifier `toupper`\n/tmp/tmpv30dcji5.d(24): Error: undefined identifier `tolower`\n/tmp/tmpv30dcji5.d(26): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv30dcji5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n        }\n        else\n        {\n            c = c;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmply3ts2u7.d(20): Error: undefined identifier `toupper`\n/tmp/tmply3ts2u7.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmply3ts2u7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpss6slxa8.d(20): Error: no property `toUpper` for type `immutable(char)`\n/tmp/tmpss6slxa8.d(24): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpss6slxa8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp__x3pp7n.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__x3pp7n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_htmz7yv.d(20): Error: C style cast illegal, use `cast(char)(c - 'a' + 'A')`\n/tmp/tmp_htmz7yv.d(24): Error: C style cast illegal, use `cast(char)(c - 'A' + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_htmz7yv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n        }\n        else if(c == 'a')\n        {\n            c = 'c';\n        }\n        else if(c == 'e')\n        {\n            c = 'g';\n        }\n        else if(c == 'i')\n        {\n            c = 'k';\n        }\n        else if(c == 'o')\n        {\n            c = 'q';\n        }\n        else if(c == 'u')\n        {\n            c = 'w';\n        }\n        else if(c == 'A')\n        {\n            c = 'C';\n        }\n        else if(c == 'E')\n        {\n            c = 'G';\n        }\n        else if(c == 'I')\n        {\n            c = 'K';\n        }\n        else if(c == 'O')\n        {\n            c = 'Q';\n        }\n        else if(c == 'U')\n        {\n            c = 'W';\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwh6umm3a.d(20): Error: undefined identifier `toupper`\n/tmp/tmpwh6umm3a.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwh6umm3a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            encoded ~= toUpper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encoded ~= toLower(c);\n        }\n        else\n        {\n            encoded ~= c;\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv6z2xfap.d(20): Error: undefined identifier `toUpper`\n/tmp/tmpv6z2xfap.d(24): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv6z2xfap.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result ~= c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result ~= c - 'A' + 'a';\n        }\n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpba2buf8b.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4280bd]\n??:? void tmpba2buf8b.__unittest_L33_C1() [0x427c62]\n??:? void tmpba2buf8b.__modtest() [0x427e40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ca47]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43032d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b92d]\n??:? runModuleUnitTests [0x42c81d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42850c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4h4g6vln.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4280bd]\n??:? void tmp4h4g6vln.__unittest_L33_C1() [0x427c62]\n??:? void tmp4h4g6vln.__modtest() [0x427e40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ca47]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43032d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b92d]\n??:? runModuleUnitTests [0x42c81d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42850c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= char(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= char(c - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi22jzn3e.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpi22jzn3e.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi22jzn3e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphjspgdq7.d(18): Error: undefined identifier `isUpper`\n/tmp/tmphjspgdq7.d(19): Error: undefined identifier `toLower`\n/tmp/tmphjspgdq7.d(20): Error: undefined identifier `isLower`\n/tmp/tmphjspgdq7.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjspgdq7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                c = toUpper(c);\n            }\n            else\n            {\n                c = toLower(c);\n            }\n            switch(c)\n            {\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp31qauqf1.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmp31qauqf1.d(20): Error: undefined identifier `isLower`\n/tmp/tmp31qauqf1.d(22): Error: undefined identifier `toUpper`\n/tmp/tmp31qauqf1.d(26): Error: undefined identifier `toLower`\n/tmp/tmp31qauqf1.d(31): Error: cannot modify `immutable` expression `c`\n/tmp/tmp31qauqf1.d(34): Error: cannot modify `immutable` expression `c`\n/tmp/tmp31qauqf1.d(37): Error: cannot modify `immutable` expression `c`\n/tmp/tmp31qauqf1.d(40): Error: cannot modify `immutable` expression `c`\n/tmp/tmp31qauqf1.d(43): Error: cannot modify `immutable` expression `c`\n/tmp/tmp31qauqf1.d(46): Error: cannot modify `immutable` expression `c`\n/tmp/tmp31qauqf1.d(49): Error: cannot modify `immutable` expression `c`\n/tmp/tmp31qauqf1.d(52): Error: cannot modify `immutable` expression `c`\n/tmp/tmp31qauqf1.d(55): Error: cannot modify `immutable` expression `c`\n/tmp/tmp31qauqf1.d(58): Error: cannot modify `immutable` expression `c`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp31qauqf1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2unu4gq9.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2unu4gq9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                result ~= toUpper(c);\n            }\n            else\n            {\n                result ~= toLower(c);\n            }\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1t897yhd.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmp1t897yhd.d(20): Error: undefined identifier `isLower`\n/tmp/tmp1t897yhd.d(22): Error: undefined identifier `toUpper`\n/tmp/tmp1t897yhd.d(26): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1t897yhd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'a';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' + 2) % 26 + 'A';\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp781098p5.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428055]\n??:? void tmp781098p5.__unittest_L33_C1() [0x427bf6]\n??:? void tmp781098p5.__modtest() [0x427dd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d1]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284a4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n                c = tolower(c);\n            }\n            else \n            {\n                c = toupper(c);\n            }\n            switch(c) \n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv43617zh.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpv43617zh.d(20): Error: undefined identifier `isupper`\n/tmp/tmpv43617zh.d(22): Error: undefined identifier `tolower`\n/tmp/tmpv43617zh.d(26): Error: undefined identifier `toupper`\n/tmp/tmpv43617zh.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv43617zh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isAlpha(c)) \n        {\n            if(isUpper(c)) \n            {\n                c = toLower(c);\n            }\n            else \n            {\n                c = toUpper(c);\n            }\n            switch(c) \n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpacopajba.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpacopajba.d(20): Error: undefined identifier `isUpper`\n/tmp/tmpacopajba.d(22): Error: undefined identifier `toLower`\n/tmp/tmpacopajba.d(26): Error: undefined identifier `toUpper`\n/tmp/tmpacopajba.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpacopajba.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c.isUpper)\n            result ~= c.toLower;\n        else if(c.isLower)\n            result ~= c.toUpper;\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp01n0e33y.d(18): Error: no property `isUpper` for type `char`\n/tmp/tmp01n0e33y.d(19): Error: no property `toLower` for type `char`\n/tmp/tmp01n0e33y.d(20): Error: no property `isLower` for type `char`\n/tmp/tmp01n0e33y.d(21): Error: no property `toUpper` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01n0e33y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n            }\n            else\n            {\n                c = toupper(c);\n            }\n        }\n        switch(c)\n        {\n            case 'a':\n                c = 'c';\n                break;\n            case 'e':\n                c = 'g';\n                break;\n            case 'i':\n                c = 'k';\n                break;\n            case 'o':\n                c = 'q';\n                break;\n            case 'u':\n                c = 'y';\n                break;\n            default:\n                break;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpeh9i1vel.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpeh9i1vel.d(20): Error: undefined identifier `isupper`\n/tmp/tmpeh9i1vel.d(22): Error: undefined identifier `tolower`\n/tmp/tmpeh9i1vel.d(26): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeh9i1vel.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                result ~= toUpper(c);\n            }\n            else\n            {\n                result ~= toLower(c);\n            }\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmi6p4u02.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpmi6p4u02.d(20): Error: undefined identifier `isLower`\n/tmp/tmpmi6p4u02.d(22): Error: undefined identifier `toUpper`\n/tmp/tmpmi6p4u02.d(26): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmi6p4u02.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            encoded ~= (char)(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encoded ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n            encoded ~= c;\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp91t62vri.d(20): Error: C style cast illegal, use `cast(char)(c - 'a' + 'A')`\n/tmp/tmp91t62vri.d(24): Error: C style cast illegal, use `cast(char)(c - 'A' + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp91t62vri.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa9d0k64i.d(20): Error: undefined identifier `toUpper`\n/tmp/tmpa9d0k64i.d(24): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9d0k64i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbkw6qxd8.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpbkw6qxd8.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpbkw6qxd8.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmpbkw6qxd8.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkw6qxd8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_htmz7yv.d(20): Error: C style cast illegal, use `cast(char)(c - 'a' + 'A')`\n/tmp/tmp_htmz7yv.d(24): Error: C style cast illegal, use `cast(char)(c - 'A' + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_htmz7yv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n                c = tolower(c);\n            } \n            else \n            {\n                c = toupper(c);\n            }\n        }\n        switch(c) \n        {\n            case 'a':\n                c = 'c';\n                break;\n            case 'e':\n                c = 'g';\n                break;\n            case 'i':\n                c = 'k';\n                break;\n            case 'o':\n                c = 'q';\n                break;\n            case 'u':\n                c = 'y';\n                break;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2y6p_rwy.d(18): Error: undefined identifier `isalpha`\n/tmp/tmp2y6p_rwy.d(20): Error: undefined identifier `isupper`\n/tmp/tmp2y6p_rwy.d(22): Error: undefined identifier `tolower`\n/tmp/tmp2y6p_rwy.d(26): Error: undefined identifier `toupper`\n/tmp/tmp2y6p_rwy.d(29): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y6p_rwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphne00ovc.d(20): Error: undefined identifier `toupper`\n/tmp/tmphne00ovc.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphne00ovc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    // Write your code here\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzdlklngm.d(21): Error: undefined identifier `toupper`\n/tmp/tmpzdlklngm.d(25): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzdlklngm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2unu4gq9.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2unu4gq9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5u2ivpqf.d(20): Error: no property `toUpper` for type `char`\n/tmp/tmp5u2ivpqf.d(24): Error: no property `toLower` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5u2ivpqf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n        }\n        else if(c == 'a')\n        {\n            c = 'c';\n        }\n        else if(c == 'e')\n        {\n            c = 'g';\n        }\n        else if(c == 'i')\n        {\n            c = 'k';\n        }\n        else if(c == 'o')\n        {\n            c = 'q';\n        }\n        else if(c == 'u')\n        {\n            c = 'w';\n        }\n        else if(c == 'A')\n        {\n            c = 'C';\n        }\n        else if(c == 'E')\n        {\n            c = 'G';\n        }\n        else if(c == 'I')\n        {\n            c = 'K';\n        }\n        else if(c == 'O')\n        {\n            c = 'Q';\n        }\n        else if(c == 'U')\n        {\n            c = 'W';\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy3_g7hre.d(20): Error: undefined identifier `toupper`\n/tmp/tmpy3_g7hre.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3_g7hre.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c - 'A' + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            result ~= (char)(c + 2);\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            result ~= (char)(c + 2);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_yo40l2h.d(20): Error: C style cast illegal, use `cast(char)(c - 'a' + 'A')`\n/tmp/tmp_yo40l2h.d(24): Error: C style cast illegal, use `cast(char)(c - 'A' + 'a')`\n/tmp/tmp_yo40l2h.d(28): Error: C style cast illegal, use `cast(char)(c + 2)`\n/tmp/tmp_yo40l2h.d(32): Error: C style cast illegal, use `cast(char)(c + 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_yo40l2h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpss6slxa8.d(20): Error: no property `toUpper` for type `immutable(char)`\n/tmp/tmpss6slxa8.d(24): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpss6slxa8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n                encoded ~= toLower(c);\n            }\n            else\n            {\n                encoded ~= toUpper(c);\n            }\n        }\n        else\n        {\n            encoded ~= c;\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmav82m1t.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpmav82m1t.d(20): Error: undefined identifier `isUpper`\n/tmp/tmpmav82m1t.d(22): Error: undefined identifier `toLower`\n/tmp/tmpmav82m1t.d(26): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmav82m1t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                c = toUpper(c);\n            }\n            else\n            {\n                c = toLower(c);\n            }\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            {\n                c = c + 2;\n            }\n            else if(c == 'Y')\n            {\n                c = 'A';\n            }\n            else if(c == 'Z')\n            {\n                c = 'B';\n            }\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5ig_7254.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmp5ig_7254.d(20): Error: undefined identifier `isLower`\n/tmp/tmp5ig_7254.d(22): Error: undefined identifier `toUpper`\n/tmp/tmp5ig_7254.d(26): Error: undefined identifier `toLower`\n/tmp/tmp5ig_7254.d(30): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ig_7254.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2unu4gq9.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2unu4gq9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n            }\n            else\n            {\n                c = toupper(c);\n            }\n            switch(c)\n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'y':\n                    c = 'a';\n                    break;\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n                case 'Y':\n                    c = 'A';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1k43mvaa.d(18): Error: undefined identifier `isalpha`\n/tmp/tmp1k43mvaa.d(20): Error: undefined identifier `isupper`\n/tmp/tmp1k43mvaa.d(22): Error: undefined identifier `tolower`\n/tmp/tmp1k43mvaa.d(26): Error: undefined identifier `toupper`\n/tmp/tmp1k43mvaa.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1k43mvaa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= char(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= char(c - 'A' + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            result ~= char(c + 2);\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            result ~= char(c + 2);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0983r612.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp0983r612.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp0983r612.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp0983r612.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0983r612.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result ~= tolower(c);\n            }\n            else\n            {\n                result ~= toupper(c);\n            }\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf4kuytxd.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpf4kuytxd.d(20): Error: undefined identifier `isupper`\n/tmp/tmpf4kuytxd.d(22): Error: undefined identifier `tolower`\n/tmp/tmpf4kuytxd.d(26): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4kuytxd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5u2ivpqf.d(20): Error: no property `toUpper` for type `char`\n/tmp/tmp5u2ivpqf.d(24): Error: no property `toLower` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5u2ivpqf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphne00ovc.d(20): Error: undefined identifier `toupper`\n/tmp/tmphne00ovc.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphne00ovc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isAlpha(c)) \n        {\n            if(isLower(c)) \n            {\n                result ~= toUpper(c);\n            }\n            else \n            {\n                result ~= toLower(c);\n            }\n        }\n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv_39662n.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpv_39662n.d(20): Error: undefined identifier `isLower`\n/tmp/tmpv_39662n.d(22): Error: undefined identifier `toUpper`\n/tmp/tmpv_39662n.d(26): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv_39662n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                c = toUpper(c);\n            }\n            else\n            {\n                c = toLower(c);\n            }\n            switch(c)\n            {\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n            }\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbtmqay43.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpbtmqay43.d(20): Error: undefined identifier `isLower`\n/tmp/tmpbtmqay43.d(22): Error: undefined identifier `toUpper`\n/tmp/tmpbtmqay43.d(26): Error: undefined identifier `toLower`\n/tmp/tmpbtmqay43.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbtmqay43.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpss6slxa8.d(20): Error: no property `toUpper` for type `immutable(char)`\n/tmp/tmpss6slxa8.d(24): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpss6slxa8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result ~= tolower(c);\n            }\n            else\n            {\n                result ~= toupper(c);\n            }\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf4kuytxd.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpf4kuytxd.d(20): Error: undefined identifier `isupper`\n/tmp/tmpf4kuytxd.d(22): Error: undefined identifier `tolower`\n/tmp/tmpf4kuytxd.d(26): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4kuytxd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result ~= tolower(c);\n            }\n            else\n            {\n                result ~= toupper(c);\n            }\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf4kuytxd.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpf4kuytxd.d(20): Error: undefined identifier `isupper`\n/tmp/tmpf4kuytxd.d(22): Error: undefined identifier `tolower`\n/tmp/tmpf4kuytxd.d(26): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4kuytxd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            encoded ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encoded ~= tolower(c);\n        }\n        else\n        {\n            encoded ~= c;\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvop6mz7r.d(20): Error: undefined identifier `toupper`\n/tmp/tmpvop6mz7r.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvop6mz7r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n        }\n        else if(c == 'a')\n        {\n            c = 'c';\n        }\n        else if(c == 'e')\n        {\n            c = 'g';\n        }\n        else if(c == 'i')\n        {\n            c = 'k';\n        }\n        else if(c == 'o')\n        {\n            c = 'q';\n        }\n        else if(c == 'u')\n        {\n            c = 'w';\n        }\n        else if(c == 'A')\n        {\n            c = 'C';\n        }\n        else if(c == 'E')\n        {\n            c = 'G';\n        }\n        else if(c == 'I')\n        {\n            c = 'K';\n        }\n        else if(c == 'O')\n        {\n            c = 'Q';\n        }\n        else if(c == 'U')\n        {\n            c = 'W';\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy3_g7hre.d(20): Error: undefined identifier `toupper`\n/tmp/tmpy3_g7hre.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3_g7hre.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxlr0x9nk.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpxlr0x9nk.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpxlr0x9nk.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmpxlr0x9nk.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxlr0x9nk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n            }\n            else\n            {\n                c = toupper(c);\n            }\n            switch(c)\n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'y':\n                    c = 'a';\n                    break;\n                case 'b':\n                    c = 'd';\n                    break;\n                case 'f':\n                    c = 'h';\n                    break;\n                case 'j':\n                    c = 'l';\n                    break;\n                case 'p':\n                    c = 'r';\n                    break;\n                case 'v':\n                    c = 'z';\n                    break;\n                case 'z':\n                    c = 'b';\n                    break;\n                case 'c':\n                    c = 'e';\n                    break;\n                case 'g':\n                    c = 'i';\n                    break;\n                case 'k':\n                    c = 'm';\n                    break;\n                case 'q':\n                    c = 's';\n                    break;\n                case 'w':\n                    c = 'a';\n                    break;\n                case 'd':\n                    c = 'f';\n                    break;\n                case 'h':\n                    c = 'j';\n                    break;\n                case 'l':\n                    c = 'n';\n                    break;\n                case 'r':\n                    c = 't';\n                    break;\n                case 'x':\n                    c = 'c';\n                    break;\n                case 'm':\n                    c = 'o';\n                    break;\n                case 'n':\n                    c = 'p';\n                    break;\n                case 's':\n                    c = 'u';\n                    break;\n               \nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2b68n8ym.d(106): Error: found `unittest` instead of statement\n/tmp/tmp2b68n8ym.d(116): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2b68n8ym.d(116): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2b68n8ym.d(116): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2b68n8ym.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpss6slxa8.d(20): Error: no property `toUpper` for type `immutable(char)`\n/tmp/tmpss6slxa8.d(24): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpss6slxa8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp__x3pp7n.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__x3pp7n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c - 'A' + 'a';\n        }\n        else if(c == 'a')\n        {\n            result ~= 'c';\n        }\n        else if(c == 'e')\n        {\n            result ~= 'g';\n        }\n        else if(c == 'i')\n        {\n            result ~= 'k';\n        }\n        else if(c == 'o')\n        {\n            result ~= 'q';\n        }\n        else if(c == 'u')\n        {\n            result ~= 'w';\n        }\n        else if(c == 'A')\n        {\n            result ~= 'C';\n        }\n        else if(c == 'E')\n        {\n            result ~= 'G';\n        }\n        else if(c == 'I')\n        {\n            result ~= 'K';\n        }\n        else if(c == 'O')\n        {\n            result ~= 'Q';\n        }\n        else if(c == 'U')\n        {\n            result ~= 'W';\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_9ajzkbo.d(77): unittest failure\n----------------\n??:? _d_unittestp [0x42836d]\n??:? void tmp_9ajzkbo.__unittest_L73_C1() [0x427f0e]\n??:? void tmp_9ajzkbo.__modtest() [0x4280ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ccf7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bc06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbdd]\n??:? runModuleUnitTests [0x42cacd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= char(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= char(c - 'A' + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            result ~= char(c + 2);\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            result ~= char(c + 2);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0983r612.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp0983r612.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp0983r612.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp0983r612.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0983r612.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n            result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n            result ~= 'w';\n        else if(c == 'A')\n            result ~= 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n            result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'W';\n        else if(c >= 'a' && c <= 'z')\n            result ~= c.toUpper;\n        else if(c >= 'A' && c <= 'Z')\n            result ~= c.toLower;\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfw9lgd13.d(39): Error: no property `toUpper` for type `immutable(char)`\n/tmp/tmpfw9lgd13.d(41): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfw9lgd13.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n                c = tolower(c);\n            }\n            else \n            {\n                c = toupper(c);\n            }\n            switch(c) \n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'y':\n                    c = 'a';\n                    break;\n                case 'b':\n                    c = 'd';\n                    break;\n                case 'f':\n                    c = 'h';\n                    break;\n                case 'j':\n                    c = 'l';\n                    break;\n                case 'p':\n                    c = 'r';\n                    break;\n                case 'v':\n                    c = 'z';\n                    break;\n                case 'z':\n                    c = 'b';\n                    break;\n                case 'c':\n                    c = 'e';\n                    break;\n                case 'g':\n                    c = 'i';\n                    break;\n                case 'k':\n                    c = 'm';\n                    break;\n                case 'q':\n                    c = 's';\n                    break;\n                case 'w':\n                    c = 'a';\n                    break;\n                case 'd':\n                    c = 'f';\n                    break;\n                case 'h':\n                    c = 'j';\n                    break;\n                case 'l':\n                    c = 'n';\n                    break;\n                case 'r':\n                    c = 't';\n                    break;\n                case 'x':\n                    c = 'c';\n                    break;\n                case 'm':\n                    c = 'o';\n                    break;\n                case 'n':\n                    c = 'p';\n                    break;\n                case 's':\n                    c = 'u';\n\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg10x558x.d(105): Error: found `unittest` instead of statement\n/tmp/tmpg10x558x.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpg10x558x.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpg10x558x.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg10x558x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if (c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa1fla6kg.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpa1fla6kg.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpa1fla6kg.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmpa1fla6kg.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1fla6kg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                encoded ~= tolower(c);\n            }\n            else\n            {\n                encoded ~= toupper(c);\n            }\n        }\n        else\n        {\n            encoded ~= c;\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5rvvgxrx.d(18): Error: undefined identifier `isalpha`\n/tmp/tmp5rvvgxrx.d(20): Error: undefined identifier `isupper`\n/tmp/tmp5rvvgxrx.d(22): Error: undefined identifier `tolower`\n/tmp/tmp5rvvgxrx.d(26): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5rvvgxrx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c == 'a')\n            result ~= 'c';\n        else if(c == 'A')\n            result ~= 'C';\n        else if(c == 'e')\n            result ~= 'g';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c == 'i')\n            result ~= 'k';\n        else if(c == 'I')\n            result ~= 'K';\n        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'O')\n            result ~= 'Q';\n        else if(c == 'u')\n            result ~= 'w';\n        else if(c == 'U')\n            result ~= 'W';\n        else if(c == 'y')\n            result ~= 'a';\n        else if(c == 'Y')\n            result ~= 'A';\n        else if(c == 'z')\n            result ~= 'b';\n        else if(c == 'Z')\n            result ~= 'B';\n        else if(c >= 'a' && c <= 'z')\n            result ~= (char)(c + 2);\n        else if(c >= 'A' && c <= 'Z')\n            result ~= (char)(c + 2);\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpal90j2f0.d(47): Error: C style cast illegal, use `cast(char)(c + 2)`\n/tmp/tmpal90j2f0.d(49): Error: C style cast illegal, use `cast(char)(c + 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpal90j2f0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_htmz7yv.d(20): Error: C style cast illegal, use `cast(char)(c - 'a' + 'A')`\n/tmp/tmp_htmz7yv.d(24): Error: C style cast illegal, use `cast(char)(c - 'A' + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_htmz7yv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result ~= c.toUpper;\n        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result ~= c.toLower;\n        }\n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ooias_t.d(20): Error: no property `toUpper` for type `char`\n/tmp/tmp4ooias_t.d(24): Error: no property `toLower` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ooias_t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            encoded ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encoded ~= tolower(c);\n        }\n        else if(c == 'a')\n        {\n            encoded ~= 'c';\n        }\n        else if(c == 'e')\n        {\n            encoded ~= 'g';\n        }\n        else if(c == 'i')\n        {\n            encoded ~= 'k';\n        }\n        else if(c == 'o')\n        {\n            encoded ~= 'q';\n        }\n        else if(c == 'u')\n        {\n            encoded ~= 'w';\n        }\n        else if(c == 'A')\n        {\n            encoded ~= 'C';\n        }\n        else if(c == 'E')\n        {\n            encoded ~= 'G';\n        }\n        else if(c == 'I')\n        {\n            encoded ~= 'K';\n        }\n        else if(c == 'O')\n        {\n            encoded ~= 'Q';\n        }\n        else if(c == 'U')\n        {\n            encoded ~= 'W';\n        }\n        else\n        {\n            encoded ~= c;\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjsworxu8.d(20): Error: undefined identifier `toupper`\n/tmp/tmpjsworxu8.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjsworxu8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbkw6qxd8.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpbkw6qxd8.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpbkw6qxd8.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmpbkw6qxd8.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkw6qxd8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n                c = tolower(c);\n            }\n            else \n            {\n                c = toupper(c);\n            }\n            switch(c) \n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'y':\n                    c = 'a';\n                    break;\n                case 'b':\n                    c = 'd';\n                    break;\n                case 'f':\n                    c = 'h';\n                    break;\n                case 'j':\n                    c = 'l';\n                    break;\n                case 'p':\n                    c = 'r';\n                    break;\n                case 'v':\n                    c = 'z';\n                    break;\n                case 'z':\n                    c = 'b';\n                    break;\n                case 'c':\n                    c = 'e';\n                    break;\n                case 'g':\n                    c = 'i';\n                    break;\n                case 'k':\n                    c = 'm';\n                    break;\n                case 'q':\n                    c = 's';\n                    break;\n                case 'w':\n                    c = 'a';\n                    break;\n                case 'd':\n                    c = 'f';\n                    break;\n                case 'h':\n                    c = 'j';\n                    break;\n                case 'l':\n                    c = 'n';\n                    break;\n                case 'r':\n                    c = 't';\n                    break;\n                case 'x':\n                    c = 'c';\n                    break;\n                case 'm':\n                    c = 'o';\n                    break;\n                case 'n':\n                    c = 'p';\n                    break;\n                case 's':\n                    c = 'u';\n\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg10x558x.d(105): Error: found `unittest` instead of statement\n/tmp/tmpg10x558x.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpg10x558x.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpg10x558x.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg10x558x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n                c = toLower(c);\n            }\n            else\n            {\n                c = toUpper(c);\n            }\n            switch(c)\n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'y':\n                    c = 'a';\n                    break;\n                default:\n                    c = c + 2;\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2rvkvh53.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmp2rvkvh53.d(20): Error: undefined identifier `isUpper`\n/tmp/tmp2rvkvh53.d(22): Error: undefined identifier `toLower`\n/tmp/tmp2rvkvh53.d(26): Error: undefined identifier `toUpper`\n/tmp/tmp2rvkvh53.d(31): Error: cannot modify `immutable` expression `c`\n/tmp/tmp2rvkvh53.d(34): Error: cannot modify `immutable` expression `c`\n/tmp/tmp2rvkvh53.d(37): Error: cannot modify `immutable` expression `c`\n/tmp/tmp2rvkvh53.d(40): Error: cannot modify `immutable` expression `c`\n/tmp/tmp2rvkvh53.d(43): Error: cannot modify `immutable` expression `c`\n/tmp/tmp2rvkvh53.d(46): Error: cannot modify `immutable` expression `c`\n/tmp/tmp2rvkvh53.d(49): Error: cannot modify `immutable` expression `c`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rvkvh53.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv2dezcvr.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42804d]\n??:? void tmpv2dezcvr.__unittest_L33_C1() [0x427bf2]\n??:? void tmpv2dezcvr.__modtest() [0x427dd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c9]\n??:? runModuleUnitTests [0x42c4b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42849c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp__x3pp7n.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp__x3pp7n.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__x3pp7n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n            }\n            else\n            {\n                c = toupper(c);\n            }\n            switch(c)\n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpb9yf63l0.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpb9yf63l0.d(20): Error: undefined identifier `isupper`\n/tmp/tmpb9yf63l0.d(22): Error: undefined identifier `tolower`\n/tmp/tmpb9yf63l0.d(26): Error: undefined identifier `toupper`\n/tmp/tmpb9yf63l0.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9yf63l0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv2dezcvr.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42804d]\n??:? void tmpv2dezcvr.__unittest_L33_C1() [0x427bf2]\n??:? void tmpv2dezcvr.__modtest() [0x427dd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c9]\n??:? runModuleUnitTests [0x42c4b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42849c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                c = toUpper(c);\n            }\n            else\n            {\n                c = toLower(c);\n            }\n            switch(c)\n            {\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n                case 'Y':\n                    c = 'A';\n                    break;\n                case 'C':\n                    c = 'E';\n                    break;\n                case 'G':\n                    c = 'I';\n                    break;\n                case 'K':\n                    c = 'O';\n                    break;\n                case 'Q':\n                    c = 'U';\n                    break;\n                case 'W':\n                    c = 'Y';\n                    break;\n                case 'B':\n                    c = 'D';\n                    break;\n                case 'F':\n                    c = 'H';\n                    break;\n                case 'J':\n                    c = 'L';\n                    break;\n                case 'N':\n                    c = 'P';\n                    break;\n                case 'R':\n                    c = 'T';\n                    break;\n                case 'V':\n                    c = 'X';\n                    break;\n                case 'Z':\n                    c = 'B';\n                    break;\n                case 'D':\n                    c = 'F';\n                    break;\n                case 'H':\n                    c = 'J';\n                    break;\n                case 'L':\n                    c = 'N';\n                    break;\n                case 'P':\n                    c = 'R';\n                    break;\n                case 'T':\n                    c = 'V';\n                    break;\n                case 'X':\n                    c = 'Z';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n   \nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphztx8i88.d(107): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphztx8i88.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n                c = toLower(c);\n            }\n            else\n            {\n                c = toUpper(c);\n            }\n            switch(c)\n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'y':\n                    c = 'a';\n                    break;\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n                case 'Y':\n                    c = 'A';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq1btgseo.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpq1btgseo.d(20): Error: undefined identifier `isUpper`\n/tmp/tmpq1btgseo.d(22): Error: undefined identifier `toLower`\n/tmp/tmpq1btgseo.d(26): Error: undefined identifier `toUpper`\n/tmp/tmpq1btgseo.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1btgseo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(ch; message)\n    {\n        if(isAlpha(ch))\n        {\n            if(isUpper(ch))\n            {\n                ch = toLower(ch);\n            }\n            else\n            {\n                ch = toUpper(ch);\n            }\n            if(ch == 'a')\n            {\n                ch = 'c';\n            }\n            else if(ch == 'e')\n            {\n                ch = 'g';\n            }\n            else if(ch == 'i')\n            {\n                ch = 'k';\n            }\n            else if(ch == 'o')\n            {\n                ch = 'q';\n            }\n            else if(ch == 'u')\n            {\n                ch = 'y';\n            }\n        }\n        result ~= ch;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpiopye4xu.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpiopye4xu.d(20): Error: undefined identifier `isUpper`\n/tmp/tmpiopye4xu.d(22): Error: undefined identifier `toLower`\n/tmp/tmpiopye4xu.d(26): Error: undefined identifier `toUpper`\n/tmp/tmpiopye4xu.d(30): Error: cannot modify `immutable` expression `ch`\n/tmp/tmpiopye4xu.d(34): Error: cannot modify `immutable` expression `ch`\n/tmp/tmpiopye4xu.d(38): Error: cannot modify `immutable` expression `ch`\n/tmp/tmpiopye4xu.d(42): Error: cannot modify `immutable` expression `ch`\n/tmp/tmpiopye4xu.d(46): Error: cannot modify `immutable` expression `ch`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiopye4xu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c == 'a')\n            result ~= 'c';\n        else if(c == 'e')\n            result ~= 'g';\n        else if(c == 'i')\n            result ~= 'k';\n        else if(c == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n            result ~= 'y';\n        else if(c == 'A')\n            result ~= 'C';\n        else if(c == 'E')\n            result ~= 'G';\n        else if(c == 'I')\n            result ~= 'K';\n        else if(c == 'O')\n            result ~= 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n        else if(c >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n        else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi81cdorf.d(39): Error: undefined identifier `toUpper`\n/tmp/tmpi81cdorf.d(41): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi81cdorf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpss6slxa8.d(20): Error: no property `toUpper` for type `immutable(char)`\n/tmp/tmpss6slxa8.d(24): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpss6slxa8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphjspgdq7.d(18): Error: undefined identifier `isUpper`\n/tmp/tmphjspgdq7.d(19): Error: undefined identifier `toLower`\n/tmp/tmphjspgdq7.d(20): Error: undefined identifier `isLower`\n/tmp/tmphjspgdq7.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjspgdq7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            result ~= (c + 2);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgdj5d38w.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmpgdj5d38w.__unittest_L41_C1() [0x427cc2]\n??:? void tmpgdj5d38w.__modtest() [0x427ea0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42caa7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43038d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430319]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b98d]\n??:? runModuleUnitTests [0x42c87d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42856c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpss6slxa8.d(20): Error: no property `toUpper` for type `immutable(char)`\n/tmp/tmpss6slxa8.d(24): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpss6slxa8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2unu4gq9.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2unu4gq9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encodedMessage = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            encodedMessage ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            encodedMessage ~= tolower(c);\n        }\n        else\n        {\n            encodedMessage ~= c;\n        }\n    }\n    return encodedMessage;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0u4j4knv.d(20): Error: undefined identifier `toupper`\n/tmp/tmp0u4j4knv.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0u4j4knv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphne00ovc.d(20): Error: undefined identifier `toupper`\n/tmp/tmphne00ovc.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphne00ovc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpss6slxa8.d(20): Error: no property `toUpper` for type `immutable(char)`\n/tmp/tmpss6slxa8.d(24): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpss6slxa8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n            }\n            else\n            {\n                c = toupper(c);\n            }\n            switch(c)\n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'y':\n                    c = 'a';\n                    break;\n                case 'b':\n                    c = 'd';\n                    break;\n                case 'f':\n                    c = 'h';\n                    break;\n                case 'j':\n                    c = 'l';\n                    break;\n                case 'p':\n                    c = 'r';\n                    break;\n                case 'v':\n                    c = 'z';\n                    break;\n                case 'z':\n                    c = 'b';\n                    break;\n                case 'c':\n                    c = 'e';\n                    break;\n                case 'g':\n                    c = 'i';\n                    break;\n                case 'k':\n                    c = 'm';\n                    break;\n                case 'q':\n                    c = 's';\n                    break;\n                case 'w':\n                    c = 'a';\n                    break;\n                case 'd':\n                    c = 'f';\n                    break;\n                case 'h':\n                    c = 'j';\n                    break;\n                case 'l':\n                    c = 'n';\n                    break;\n                case 'r':\n                    c = 't';\n                    break;\n                case 'x':\n                    c = 'c';\n                    break;\n                case 'm':\n                    c = 'o';\n                    break;\n                case 'n':\n                    c = 'p';\n                    break;\n                case 's':\n                    c = 'u';\n                    break;\n                case\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu7lzwyb6.d(106): Error: expression expected, not `unittest`\n/tmp/tmpu7lzwyb6.d(107): Error: found `{` when expecting `:`\n/tmp/tmpu7lzwyb6.d(116): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpu7lzwyb6.d(116): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpu7lzwyb6.d(116): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7lzwyb6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxlr0x9nk.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpxlr0x9nk.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpxlr0x9nk.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmpxlr0x9nk.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxlr0x9nk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if (c >= 'a' && c <= 'z')\n        {\n            result ~= (char)('A' + (c - 'a'));\n        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)('a' + (c - 'A'));\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsof4kg77.d(20): Error: C style cast illegal, use `cast(char)('A' + (c - 'a'))`\n/tmp/tmpsof4kg77.d(24): Error: C style cast illegal, use `cast(char)('a' + (c - 'A'))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsof4kg77.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message) \n    {\n        if(isAlpha(c)) \n        {\n            if(isUpper(c)) \n            {\n                result ~= toLower(c);\n            } \n            else \n            {\n                result ~= toUpper(c);\n            }\n        } \n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp62fk_0rp.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmp62fk_0rp.d(20): Error: undefined identifier `isUpper`\n/tmp/tmp62fk_0rp.d(22): Error: undefined identifier `toLower`\n/tmp/tmp62fk_0rp.d(26): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp62fk_0rp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                c = toUpper(c);\n            }\n            else\n            {\n                c = toLower(c);\n            }\n            switch(c)\n            {\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpag596sgi.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpag596sgi.d(20): Error: undefined identifier `isLower`\n/tmp/tmpag596sgi.d(22): Error: undefined identifier `toUpper`\n/tmp/tmpag596sgi.d(26): Error: undefined identifier `toLower`\n/tmp/tmpag596sgi.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpag596sgi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                c = toUpper(c);\n            }\n            else\n            {\n                c = toLower(c);\n            }\n            switch(c)\n            {\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n                case 'Y':\n                    c = 'A';\n                    break;\n                case 'C':\n                    c = 'E';\n                    break;\n                case 'G':\n                    c = 'I';\n                    break;\n                case 'K':\n                    c = 'O';\n                    break;\n                case 'Q':\n                    c = 'U';\n                    break;\n                case 'W':\n                    c = 'Y';\n                    break;\n                case 'B':\n                    c = 'D';\n                    break;\n                case 'F':\n                    c = 'H';\n                    break;\n                case 'J':\n                    c = 'L';\n                    break;\n                case 'N':\n                    c = 'P';\n                    break;\n                case 'R':\n                    c = 'T';\n                    break;\n                case 'V':\n                    c = 'X';\n                    break;\n                case 'Z':\n                    c = 'B';\n                    break;\n                case 'D':\n                    c = 'F';\n                    break;\n                case 'H':\n                    c = 'J';\n                    break;\n                case 'L':\n                    c = 'N';\n                    break;\n                case 'P':\n                    c = 'R';\n                    break;\n                case 'T':\n                    c = 'V';\n                    break;\n                case 'X':\n                    c = 'Z';\n                    break;\n            }\n        }\n        encoded ~= c;\n    }\n   \nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptpyz41ef.d(107): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptpyz41ef.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result ~= to!string(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result ~= to!string(c - 'A' + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n        {\n            result ~= to!string(c + 2);\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') \n        {\n            result ~= to!string(c + 2);\n        }\n        else \n        {\n            result ~= to!string(c);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsf3zj9gz.d(20): Error: template instance `to!string` template `to` is not defined\n/tmp/tmpsf3zj9gz.d(24): Error: template instance `to!string` template `to` is not defined\n/tmp/tmpsf3zj9gz.d(28): Error: template instance `to!string` template `to` is not defined\n/tmp/tmpsf3zj9gz.d(32): Error: template instance `to!string` template `to` is not defined\n/tmp/tmpsf3zj9gz.d(36): Error: template instance `to!string` template `to` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsf3zj9gz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n            }\n            else\n            {\n                c = toupper(c);\n            }\n            switch(c)\n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'y':\n                    c = 'a';\n                    break;\n                case 'b':\n                    c = 'd';\n                    break;\n                case 'f':\n                    c = 'h';\n                    break;\n                case 'j':\n                    c = 'l';\n                    break;\n                case 'p':\n                    c = 'r';\n                    break;\n                case 'v':\n                    c = 'z';\n                    break;\n                case 'z':\n                    c = 'b';\n                    break;\n                case 'c':\n                    c = 'e';\n                    break;\n                case 'g':\n                    c = 'i';\n                    break;\n                case 'k':\n                    c = 'm';\n                    break;\n                case 'q':\n                    c = 's';\n                    break;\n                case 'w':\n                    c = 'a';\n                    break;\n                case 'd':\n                    c = 'f';\n                    break;\n                case 'h':\n                    c = 'j';\n                    break;\n                case 'l':\n                    c = 'n';\n                    break;\n                case 'r':\n                    c = 't';\n                    break;\n                case 'x':\n                    c = 'c';\n                    break;\n                case 'm':\n                    c = 'o';\n                    break;\n                case 'n':\n                    c = 'p';\n                    break;\n                case 's':\n                    c = 'u';\n                    break;\n               \nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2b68n8ym.d(106): Error: found `unittest` instead of statement\n/tmp/tmp2b68n8ym.d(116): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2b68n8ym.d(116): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2b68n8ym.d(116): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2b68n8ym.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result ~= (char)(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result ~= (char)(c - 'A' + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n        {\n            result ~= (char)(c + 2);\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') \n        {\n            result ~= (char)(c + 2);\n        }\n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc9eaahzx.d(20): Error: C style cast illegal, use `cast(char)(c - 'a' + 'A')`\n/tmp/tmpc9eaahzx.d(24): Error: C style cast illegal, use `cast(char)(c - 'A' + 'a')`\n/tmp/tmpc9eaahzx.d(28): Error: C style cast illegal, use `cast(char)(c + 2)`\n/tmp/tmpc9eaahzx.d(32): Error: C style cast illegal, use `cast(char)(c + 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9eaahzx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n            }\n            else\n            {\n                c = toupper(c);\n            }\n            switch(c)\n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjrnnh7s0.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpjrnnh7s0.d(20): Error: undefined identifier `isupper`\n/tmp/tmpjrnnh7s0.d(22): Error: undefined identifier `tolower`\n/tmp/tmpjrnnh7s0.d(26): Error: undefined identifier `toupper`\n/tmp/tmpjrnnh7s0.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjrnnh7s0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isUpper(c)) \n        {\n            result ~= toLower(c);\n        } \n        else if(isLower(c)) \n        {\n            result ~= toUpper(c);\n        } \n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdz1icn60.d(18): Error: undefined identifier `isUpper`\n/tmp/tmpdz1icn60.d(20): Error: undefined identifier `toLower`\n/tmp/tmpdz1icn60.d(22): Error: undefined identifier `isLower`\n/tmp/tmpdz1icn60.d(24): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdz1icn60.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n        }\n        else if(c == 'a')\n        {\n            c = 'c';\n        }\n        else if(c == 'e')\n        {\n            c = 'g';\n        }\n        else if(c == 'i')\n        {\n            c = 'k';\n        }\n        else if(c == 'o')\n        {\n            c = 'q';\n        }\n        else if(c == 'u')\n        {\n            c = 'w';\n        }\n        else if(c == 'A')\n        {\n            c = 'C';\n        }\n        else if(c == 'E')\n        {\n            c = 'G';\n        }\n        else if(c == 'I')\n        {\n            c = 'K';\n        }\n        else if(c == 'O')\n        {\n            c = 'Q';\n        }\n        else if(c == 'U')\n        {\n            c = 'W';\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwh6umm3a.d(20): Error: undefined identifier `toupper`\n/tmp/tmpwh6umm3a.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwh6umm3a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphjspgdq7.d(18): Error: undefined identifier `isUpper`\n/tmp/tmphjspgdq7.d(19): Error: undefined identifier `toLower`\n/tmp/tmphjspgdq7.d(20): Error: undefined identifier `isLower`\n/tmp/tmphjspgdq7.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjspgdq7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n            {\n                c = toLower(c);\n            }\n            else\n            {\n                c = toUpper(c);\n            }\n            switch(c)\n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphqma1sar.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmphqma1sar.d(20): Error: undefined identifier `isUpper`\n/tmp/tmphqma1sar.d(22): Error: undefined identifier `toLower`\n/tmp/tmphqma1sar.d(26): Error: undefined identifier `toUpper`\n/tmp/tmphqma1sar.d(31): Error: cannot modify `immutable` expression `c`\n/tmp/tmphqma1sar.d(34): Error: cannot modify `immutable` expression `c`\n/tmp/tmphqma1sar.d(37): Error: cannot modify `immutable` expression `c`\n/tmp/tmphqma1sar.d(40): Error: cannot modify `immutable` expression `c`\n/tmp/tmphqma1sar.d(43): Error: cannot modify `immutable` expression `c`\n/tmp/tmphqma1sar.d(46): Error: cannot modify `immutable` expression `c`\n/tmp/tmphqma1sar.d(49): Error: cannot modify `immutable` expression `c`\n/tmp/tmphqma1sar.d(52): Error: cannot modify `immutable` expression `c`\n/tmp/tmphqma1sar.d(55): Error: cannot modify `immutable` expression `c`\n/tmp/tmphqma1sar.d(58): Error: cannot modify `immutable` expression `c`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphqma1",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n        }\n        else if(c == 'a')\n        {\n            c = 'c';\n        }\n        else if(c == 'e')\n        {\n            c = 'g';\n        }\n        else if(c == 'i')\n        {\n            c = 'k';\n        }\n        else if(c == 'o')\n        {\n            c = 'q';\n        }\n        else if(c == 'u')\n        {\n            c = 'w';\n        }\n        else if(c == 'A')\n        {\n            c = 'C';\n        }\n        else if(c == 'E')\n        {\n            c = 'G';\n        }\n        else if(c == 'I')\n        {\n            c = 'K';\n        }\n        else if(c == 'O')\n        {\n            c = 'Q';\n        }\n        else if(c == 'U')\n        {\n            c = 'W';\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy3_g7hre.d(20): Error: undefined identifier `toupper`\n/tmp/tmpy3_g7hre.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3_g7hre.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4h4g6vln.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4280bd]\n??:? void tmp4h4g6vln.__unittest_L33_C1() [0x427c62]\n??:? void tmp4h4g6vln.__modtest() [0x427e40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ca47]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43032d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b92d]\n??:? runModuleUnitTests [0x42c81d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42850c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result ~= toupper(c);\n        } \n        else if(c >= 'A' && c <= 'Z') \n        {\n            result ~= tolower(c);\n        } \n        else if(c == 'a') \n        {\n            result ~= 'c';\n        } \n        else if(c == 'e') \n        {\n            result ~= 'g';\n        } \n        else if(c == 'i') \n        {\n            result ~= 'k';\n        } \n        else if(c == 'o') \n        {\n            result ~= 'q';\n        } \n        else if(c == 'u') \n        {\n            result ~= 'w';\n        } \n        else if(c == 'A') \n        {\n            result ~= 'C';\n        } \n        else if(c == 'E') \n        {\n            result ~= 'G';\n        } \n        else if(c == 'I') \n        {\n            result ~= 'K';\n        } \n        else if(c == 'O') \n        {\n            result ~= 'Q';\n        } \n        else if(c == 'U') \n        {\n            result ~= 'W';\n        } \n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwtllur7x.d(20): Error: undefined identifier `toupper`\n/tmp/tmpwtllur7x.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwtllur7x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2unu4gq9.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmp2unu4gq9.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2unu4gq9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n            }\n            else\n            {\n                c = toupper(c);\n            }\n            switch(c)\n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'b':\n                    c = 'd';\n                    break;\n                case 'f':\n                    c = 'h';\n                    break;\n                case 'j':\n                    c = 'l';\n                    break;\n                case 'p':\n                    c = 'r';\n                    break;\n                case 'v':\n                    c = 'z';\n                    break;\n                case 'c':\n                    c = 'e';\n                    break;\n                case 'g':\n                    c = 'i';\n                    break;\n                case 'k':\n                    c = 'm';\n                    break;\n                case 'q':\n                    c = 's';\n                    break;\n                case 'w':\n                    c = 'a';\n                    break;\n                case 'd':\n                    c = 'f';\n                    break;\n                case 'h':\n                    c = 'j';\n                    break;\n                case 'l':\n                    c = 'n';\n                    break;\n                case 'r':\n                    c = 't';\n                    break;\n                case 'x':\n                    c = 'b';\n                    break;\n                case 'y':\n                    c = 'd';\n                    break;\n                case 'z':\n                    c = 'f';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpback8ees.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpback8ees.d(20): Error: undefined identifier `isupper`\n/tmp/tmpback8ees.d(22): Error: undefined identifier `tolower`\n/tmp/tmpback8ees.d(26): Error: undefined identifier `toupper`\n/tmp/tmpback8ees.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpback8ees.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphgs2v06h.d(20): Error: undefined identifier `toupper`\n/tmp/tmphgs2v06h.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgs2v06h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa9d0k64i.d(20): Error: undefined identifier `toUpper`\n/tmp/tmpa9d0k64i.d(24): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9d0k64i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n        }\n        else if(c == 'a')\n        {\n            c = 'c';\n        }\n        else if(c == 'e')\n        {\n            c = 'g';\n        }\n        else if(c == 'i')\n        {\n            c = 'k';\n        }\n        else if(c == 'o')\n        {\n            c = 'q';\n        }\n        else if(c == 'u')\n        {\n            c = 'w';\n        }\n        else if(c == 'A')\n        {\n            c = 'C';\n        }\n        else if(c == 'E')\n        {\n            c = 'G';\n        }\n        else if(c == 'I')\n        {\n            c = 'K';\n        }\n        else if(c == 'O')\n        {\n            c = 'Q';\n        }\n        else if(c == 'U')\n        {\n            c = 'W';\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy3_g7hre.d(20): Error: undefined identifier `toupper`\n/tmp/tmpy3_g7hre.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3_g7hre.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n            }\n            else\n            {\n                c = toupper(c);\n            }\n            switch(c)\n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'y':\n                    c = 'a';\n                    break;\n                case 'b':\n                    c = 'd';\n                    break;\n                case 'f':\n                    c = 'h';\n                    break;\n                case 'j':\n                    c = 'l';\n                    break;\n                case 'p':\n                    c = 'r';\n                    break;\n                case 'v':\n                    c = 'z';\n                    break;\n                case 'z':\n                    c = 'b';\n                    break;\n                case 'c':\n                    c = 'e';\n                    break;\n                case 'g':\n                    c = 'i';\n                    break;\n                case 'k':\n                    c = 'm';\n                    break;\n                case 'q':\n                    c = 's';\n                    break;\n                case 'w':\n                    c = 'a';\n                    break;\n                case 'd':\n                    c = 'f';\n                    break;\n                case 'h':\n                    c = 'j';\n                    break;\n                case 'l':\n                    c = 'n';\n                    break;\n                case 'r':\n                    c = 't';\n                    break;\n                case 'x':\n                    c = 'c';\n                    break;\n                case 's':\n                    c = 'u';\n                    break;\n                case 'n':\n                    c = 'p';\n                    break;\n                case 't':\n                    c = 'v';\n                    break;\n                case '\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_c8pslir.d(105): Error: unterminated character constant\n/tmp/tmp_c8pslir.d(106): Error: found `unittest` when expecting `:`\n/tmp/tmp_c8pslir.d(116): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_c8pslir.d(116): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_c8pslir.d(116): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_c8pslir.d(116): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_c8pslir.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isalpha(c)) \n        {\n            if(isupper(c)) \n            {\n                c = tolower(c);\n            } \n            else \n            {\n                c = toupper(c);\n            }\n            switch(c) \n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjnzwqms3.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpjnzwqms3.d(20): Error: undefined identifier `isupper`\n/tmp/tmpjnzwqms3.d(22): Error: undefined identifier `tolower`\n/tmp/tmpjnzwqms3.d(26): Error: undefined identifier `toupper`\n/tmp/tmpjnzwqms3.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjnzwqms3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(isAlpha(c)) \n        {\n            if(isLower(c)) \n            {\n                c = toUpper(c);\n            } \n            else \n            {\n                c = toLower(c);\n            }\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') \n            {\n                c = c + 2;\n            }\n            else if(c == 'Y') \n            {\n                c = 'A';\n            }\n            else if(c == 'Z') \n            {\n                c = 'B';\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprhjckhyb.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmprhjckhyb.d(20): Error: undefined identifier `isLower`\n/tmp/tmprhjckhyb.d(22): Error: undefined identifier `toUpper`\n/tmp/tmprhjckhyb.d(26): Error: undefined identifier `toLower`\n/tmp/tmprhjckhyb.d(30): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhjckhyb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphgs2v06h.d(20): Error: undefined identifier `toupper`\n/tmp/tmphgs2v06h.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgs2v06h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                encoded ~= tolower(c);\n            }\n            else\n            {\n                encoded ~= toupper(c);\n            }\n        }\n        else\n        {\n            encoded ~= c;\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5rvvgxrx.d(18): Error: undefined identifier `isalpha`\n/tmp/tmp5rvvgxrx.d(20): Error: undefined identifier `isupper`\n/tmp/tmp5rvvgxrx.d(22): Error: undefined identifier `tolower`\n/tmp/tmp5rvvgxrx.d(26): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5rvvgxrx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result ~= 'A' + (c - 'a');\n        } \n        else if(c >= 'A' && c <= 'Z') \n        {\n            result ~= 'a' + (c - 'A');\n        } \n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppbykibu7.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4280bd]\n??:? void tmppbykibu7.__unittest_L33_C1() [0x427c62]\n??:? void tmppbykibu7.__modtest() [0x427e40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ca47]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43032d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b92d]\n??:? runModuleUnitTests [0x42c81d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42850c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa9d0k64i.d(20): Error: undefined identifier `toUpper`\n/tmp/tmpa9d0k64i.d(24): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9d0k64i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n                c = toUpper(c);\n            }\n            else\n            {\n                c = toLower(c);\n            }\n            switch(c)\n            {\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n                case 'C':\n                    c = 'E';\n                    break;\n                case 'G':\n                    c = 'I';\n                    break;\n                case 'K':\n                    c = 'M';\n                    break;\n                case 'Q':\n                    c = 'S';\n                    break;\n                case 'Y':\n                    c = 'A';\n                    break;\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'c':\n                    c = 'e';\n                    break;\n                case 'g':\n                    c = 'i';\n                    break;\n                case 'k':\n                    c = 'm';\n                    break;\n                case 'q':\n                    c = 's';\n                    break;\n                case 'y':\n                    c = 'a';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcgpecqok.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmpcgpecqok.d(20): Error: undefined identifier `isLower`\n/tmp/tmpcgpecqok.d(22): Error: undefined identifier `toUpper`\n/tmp/tmpcgpecqok.d(26): Error: undefined identifier `toLower`\n/tmp/tmpcgpecqok.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcgpecqok.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n            }\n            else\n            {\n                c = toupper(c);\n            }\n            switch(c)\n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjrnnh7s0.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpjrnnh7s0.d(20): Error: undefined identifier `isupper`\n/tmp/tmpjrnnh7s0.d(22): Error: undefined identifier `tolower`\n/tmp/tmpjrnnh7s0.d(26): Error: undefined identifier `toupper`\n/tmp/tmpjrnnh7s0.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjrnnh7s0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= char(c - 'a' + 'A');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= char(c - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi22jzn3e.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpi22jzn3e.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi22jzn3e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if (isAlpha(c))\n        {\n            if (isUpper(c))\n            {\n                c = toLower(c);\n            }\n            else\n            {\n                c = toUpper(c);\n            }\n            switch(c)\n            {\n                case 'a':\n                    c = 'c';\n                    break;\n                case 'e':\n                    c = 'g';\n                    break;\n                case 'i':\n                    c = 'k';\n                    break;\n                case 'o':\n                    c = 'q';\n                    break;\n                case 'u':\n                    c = 'y';\n                    break;\n                case 'A':\n                    c = 'C';\n                    break;\n                case 'E':\n                    c = 'G';\n                    break;\n                case 'I':\n                    c = 'K';\n                    break;\n                case 'O':\n                    c = 'Q';\n                    break;\n                case 'U':\n                    c = 'Y';\n                    break;\n            }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1jswcq7u.d(18): Error: undefined identifier `isAlpha`\n/tmp/tmp1jswcq7u.d(20): Error: undefined identifier `isUpper`\n/tmp/tmp1jswcq7u.d(22): Error: undefined identifier `toLower`\n/tmp/tmp1jswcq7u.d(26): Error: undefined identifier `toUpper`\n/tmp/tmp1jswcq7u.d(28): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1jswcq7u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk1w92xxa.d(20): Error: undefined identifier `toupper`\n/tmp/tmpk1w92xxa.d(24): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1w92xxa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163071
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(isUpper(c))\n            result ~= toLower(c);\n        else if(isLower(c))\n            result ~= toUpper(c);\n        else\n            result ~= c;\n        \n        switch(c)\n        {\n            case 'a':\n                result ~= 'c';\n                break;\n            case 'e':\n                result ~= 'g';\n                break;\n            case 'i':\n                result ~= 'k';\n                break;\n            case 'o':\n                result ~= 'q';\n                break;\n            case 'u':\n                result ~= 'y';\n                break;\n            case 'A':\n                result ~= 'C';\n                break;\n            case 'E':\n                result ~= 'G';\n                break;\n            case 'I':\n                result ~= 'K';\n                break;\n            case 'O':\n                result ~= 'Q';\n                break;\n            case 'U':\n                result ~= 'Y';\n                break;\n            default:\n                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3a3d5jfu.d(18): Error: undefined identifier `isUpper`\n/tmp/tmp3a3d5jfu.d(19): Error: undefined identifier `toLower`\n/tmp/tmp3a3d5jfu.d(20): Error: undefined identifier `isLower`\n/tmp/tmp3a3d5jfu.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3a3d5jfu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n            \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    foreach(char c; message) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            c = c - 'A' + 'a';\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') \n        {\n            c = c + 2;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwnjmo80k.d(20): Error: cannot implicitly convert expression `cast(int)c - 97 + 65` of type `int` to `char`\n/tmp/tmpwnjmo80k.d(24): Error: cannot implicitly convert expression `cast(int)c - 65 + 97` of type `int` to `char`\n/tmp/tmpwnjmo80k.d(28): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\n/tmp/tmpwnjmo80k.d(32): Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwnjmo80k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163072
    }
  ]
}