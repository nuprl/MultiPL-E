{
  "language": "d",
  "name": "HumanEval_68_pluck",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0,0];\n    long min = 0;\n    long index = 0;\n    long minIndex = 0;\n    long count = 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0)\n        {\n            if(count == 0)\n            {\n                min = v;\n                minIndex = i;\n                count++;\n            }\n            else\n            {\n                if(v < min)\n                {\n                    min = v;\n                    minIndex = i;\n                }\n            }\n        }\n    }\n    if(count == 0)\n    {\n        return result;\n    }\n    else\n    {\n        result[0] = min;\n        result[1] = minIndex;\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4vwf1pun.d(74): unittest failure\n----------------\n??:? _d_unittestp [0x4286fd]\n??:? void tmp4vwf1pun.__unittest_L68_C1() [0x4280ce]\n??:? void tmp4vwf1pun.__modtest() [0x428480]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c75b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430781]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43070d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c5]\n??:? runModuleUnitTests [0x42c531]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bc0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy5xwdmsu.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpy5xwdmsu.__unittest_L48_C1() [0x42808d]\n??:? void tmpy5xwdmsu.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]\n??:? void tmpm7_qirry.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]\n??:? void tmp3v3zfcq6.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnhgt44e7.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4286fd]\n??:? void tmpnhgt44e7.__unittest_L52_C1() [0x42806d]\n??:? void tmpnhgt44e7.__modtest() [0x428480]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430861]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]\n??:? runModuleUnitTests [0x42c58d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bc0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcco96zr9.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmpcco96zr9.__unittest_L52_C1() [0x4280b9]\n??:? void tmpcco96zr9.__modtest() [0x4284cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]\n??:? void tmpn8mlqv33.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if (arr.length == 0)\n        return result;\n    long smallestEven = arr[0];\n    long smallestEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < smallestEven)\n            {\n                smallestEven = arr[i];\n                smallestEvenIndex = i;\n            }\n        }\n    }\n    if (smallestEven % 2 == 0)\n    {\n        result[0] = smallestEven;\n        result[1] = smallestEvenIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3vh04_zw.d(60): unittest failure\n----------------\n??:? _d_unittestp [0x428765]\n??:? void tmp3vh04_zw.__unittest_L55_C1() [0x4280d1]\n??:? void tmp3vh04_zw.__modtest() [0x4284e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b656]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b62d]\n??:? runModuleUnitTests [0x42c599]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c28]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if(index == -1)\n        return result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgwgqngpi.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpgwgqngpi.__unittest_L49_C1() [0x4280aa]\n??:? void tmpgwgqngpi.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c797]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430841]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c56d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw1tirie3.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpw1tirie3.__unittest_L48_C1() [0x428089]\n??:? void tmpw1tirie3.__modtest() [0x42849c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long[] result = [arr[0], 0];\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < result[0])\n        {\n            result[0] = v;\n            result[1] = i;\n        }\n    }\n    if (result[0] % 2 != 0)\n        return [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxghbtdyt.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x428765]\n??:? void tmpxghbtdyt.__unittest_L47_C1() [0x4280d5]\n??:? void tmpxghbtdyt.__modtest() [0x4284e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b656]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b62d]\n??:? runModuleUnitTests [0x42c599]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c28]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long[] result = new long[2];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp93qmy3uz.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428755]\n??:? void tmp93qmy3uz.__unittest_L51_C1() [0x4280c5]\n??:? void tmp93qmy3uz.__modtest() [0x4284d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c80f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43092d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ddc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b679]\n??:? runModuleUnitTests [0x42c5e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c18]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpg0_ic3rp.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpg0_ic3rp.__unittest_L48_C1() [0x428049]\n??:? void tmpg0_ic3rp.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (index == -1) return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if(index == -1)\n        return result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgwgqngpi.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpgwgqngpi.__unittest_L49_C1() [0x4280aa]\n??:? void tmpgwgqngpi.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c797]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430841]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c56d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    \n    long min = long.max;\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    \n    if (min == long.max)\n        return new long[0];\n    \n    return new long[] { min, index };\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnegtym5z.d(49): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpnegtym5z.d(49): Error: found `}` when expecting `;` following statement\n/tmp/tmpnegtym5z.d(49): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnegtym5z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164226
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    int minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp32stsui0.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp32stsui0.__unittest_L52_C1() [0x4280b9]\n??:? void tmp32stsui0.__modtest() [0x4284cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min && v % 2 == 0)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        return [min, minIndex];\n    }\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6yjw5q2f.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmp6yjw5q2f.__unittest_L49_C1() [0x428049]\n??:? void tmp6yjw5q2f.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3czr_d4d.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmp3czr_d4d.__unittest_L48_C1() [0x42803d]\n??:? void tmp3czr_d4d.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    \n    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    \n    if (min == long.max)\n        return new long[0];\n    \n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if(index == -1)\n        return [];\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3czr_d4d.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmp3czr_d4d.__unittest_L48_C1() [0x42803d]\n??:? void tmp3czr_d4d.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]\n??:? void tmp73pvjwmw.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n    {\n        return result;\n    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp19cp22ko.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x428725]\n??:? void tmp19cp22ko.__unittest_L51_C1() [0x4280f2]\n??:? void tmp19cp22ko.__modtest() [0x4284a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b672]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430889]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]\n??:? runModuleUnitTests [0x42c5b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if (index == -1) return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if (index == -1) return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaauy_sym.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmpaauy_sym.__unittest_L50_C1() [0x42809e]\n??:? void tmpaauy_sym.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]\n??:? void tmpn8mlqv33.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]\n??:? void tmpn8mlqv33.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] ret = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if(index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]\n??:? void tmp73pvjwmw.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if(index == -1)\n        return result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvaij9upc.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpvaij9upc.__unittest_L49_C1() [0x4280aa]\n??:? void tmpvaij9upc.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c797]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430841]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c56d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0, 0];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp29pvyub3.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x428765]\n??:? void tmp29pvyub3.__unittest_L52_C1() [0x4280d1]\n??:? void tmp29pvyub3.__modtest() [0x4284e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b656]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b62d]\n??:? runModuleUnitTests [0x42c599]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c28]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min == long.max)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]\n??:? void tmpn8mlqv33.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]\n??:? void tmp73pvjwmw.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min == long.max)\n    {\n        return result;\n    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp8cyw8il.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmpp8cyw8il.__unittest_L51_C1() [0x428102]\n??:? void tmpp8cyw8il.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b682]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43090d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430899]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b659]\n??:? runModuleUnitTests [0x42c5c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if(index == -1)\n        return [];\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]\n??:? void tmp3v3zfcq6.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long minEven = long.max;\n    long minEvenIndex = long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n        {\n            minEven = v;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven == long.max)\n        return [];\n    return [minEven, minEvenIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl6xxixe9.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x4286e5]\n??:? void tmpl6xxixe9.__unittest_L49_C1() [0x4280b2]\n??:? void tmpl6xxixe9.__modtest() [0x428464]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c79f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b632]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430849]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]\n??:? runModuleUnitTests [0x42c575]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]\n??:? void tmpm7_qirry.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if (min == long.max)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min == long.max)\n    {\n        return result;\n    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp8cyw8il.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmpp8cyw8il.__unittest_L51_C1() [0x428102]\n??:? void tmpp8cyw8il.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b682]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43090d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430899]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b659]\n??:? runModuleUnitTests [0x42c5c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long smallestEven = arr[0];\n    long smallestEvenIndex = 0;\n    foreach (i, val; arr)\n    {\n        if (val % 2 == 0 && val < smallestEven)\n        {\n            smallestEven = val;\n            smallestEvenIndex = i;\n        }\n    }\n    if (smallestEven % 2 == 0)\n        return [smallestEven, smallestEvenIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp8rnbx9k.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpp8rnbx9k.__unittest_L48_C1() [0x428049]\n??:? void tmpp8rnbx9k.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9hqrb40t.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp9hqrb40t.__unittest_L52_C1() [0x4280bd]\n??:? void tmp9hqrb40t.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min, index };\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv7cakj4w.d(45): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpv7cakj4w.d(45): Error: found `}` when expecting `;` following statement\n/tmp/tmpv7cakj4w.d(45): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv7cakj4w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long[] result = new long[2];\n    long min = long.max;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            result[0] = min;\n            result[1] = i;\n        }\n    }\n    if (min == long.max)\n        return new long[0];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min == long.max)\n        return new long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfe471ve_.d(45): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpfe471ve_.d(45): Error: found `}` when expecting `;` following statement\n/tmp/tmpfe471ve_.d(45): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfe471ve_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]\n??:? void tmp3v3zfcq6.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) \n        return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++) \n    {\n        if (arr[i] < min && arr[i] % 2 == 0) \n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0) \n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpds9j4ye6.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x428725]\n??:? void tmpds9j4ye6.__unittest_L48_C1() [0x428091]\n??:? void tmpds9j4ye6.__modtest() [0x4284a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c783]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b616]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430735]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]\n??:? runModuleUnitTests [0x42c559]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min, index };\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsddkr7ep.d(45): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpsddkr7ep.d(45): Error: found `}` when expecting `;` following statement\n/tmp/tmpsddkr7ep.d(45): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsddkr7ep.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]\n??:? void tmpn8mlqv33.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long minEven = long.max;\n    long minEvenIndex = long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n        {\n            minEven = v;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven == long.max)\n        return [];\n    return [minEven, minEvenIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1iaf5mcy.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x428725]\n??:? void tmp1iaf5mcy.__unittest_L49_C1() [0x4280f2]\n??:? void tmp1iaf5mcy.__modtest() [0x4284a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b672]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430889]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]\n??:? runModuleUnitTests [0x42c5b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if(index == -1)\n        return result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvaij9upc.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpvaij9upc.__unittest_L49_C1() [0x4280aa]\n??:? void tmpvaij9upc.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c797]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430841]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c56d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpd5pft7nq.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmpd5pft7nq.__unittest_L52_C1() [0x4280bd]\n??:? void tmpd5pft7nq.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long minEven = long.max;\n    long minEvenIndex = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < minEven)\n        {\n            minEven = arr[i];\n            minEvenIndex = i;\n        }\n    }\n    if (minEven == long.max)\n        return [];\n    return [minEven, minEvenIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy0vllkwh.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpy0vllkwh.__unittest_L48_C1() [0x428049]\n??:? void tmpy0vllkwh.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    \n    long min = long.max;\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    \n    if (min == long.max)\n        return new long[0];\n    \n    return [min, minIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]\n??:? void tmpm7_qirry.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptd0j4p0u.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4286fd]\n??:? void tmptd0j4p0u.__unittest_L52_C1() [0x42806d]\n??:? void tmptd0j4p0u.__modtest() [0x428480]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430861]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]\n??:? runModuleUnitTests [0x42c58d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bc0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    int index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprm1s41dr.d(40): Error: cannot implicitly convert expression `i` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprm1s41dr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long[] result = new long[2];\n    result[0] = long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < result[0])\n        {\n            result[0] = v;\n            result[1] = i;\n        }\n    }\n    if (result[0] == long.max)\n        return new long[0];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long minEven = arr[0];\n    long minEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < minEven)\n            {\n                minEven = arr[i];\n                minEvenIndex = i;\n            }\n        }\n    }\n    if (minEven % 2 == 0)\n        return [minEven, minEvenIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0kgq4sv5.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmp0kgq4sv5.__unittest_L51_C1() [0x428099]\n??:? void tmp0kgq4sv5.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcco96zr9.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmpcco96zr9.__unittest_L52_C1() [0x4280b9]\n??:? void tmpcco96zr9.__modtest() [0x4284cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] res = new long[2];\n    if (arr.length == 0) return res;\n    long min = arr[0];\n    long idx = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            idx = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        res[0] = min;\n        res[1] = idx;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6g58zaq4.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x4286fd]\n??:? void tmp6g58zaq4.__unittest_L51_C1() [0x42806d]\n??:? void tmp6g58zaq4.__modtest() [0x428480]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430861]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]\n??:? runModuleUnitTests [0x42c58d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bc0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long minIndex = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n    result[0] = min;\n    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk07qmarz.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpk07qmarz.__unittest_L49_C1() [0x4280ae]\n??:? void tmpk07qmarz.__modtest() [0x428460]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c797]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430841]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c56d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    \n    long min = long.max;\n    long minIndex = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    \n    if (minIndex == -1)\n        return new long[0];\n    \n    return [min, minIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaauy_sym.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmpaauy_sym.__unittest_L50_C1() [0x42809e]\n??:? void tmpaauy_sym.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long[] result = new long[2];\n    long min = long.max;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            result[0] = min;\n            result[1] = i;\n        }\n    }\n    if (min == long.max) return new long[0];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr) \n    {\n        if (v % 2 == 0 && v < min) \n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0) return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_rljc0j5.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmp_rljc0j5.__unittest_L46_C1() [0x428049]\n??:? void tmp_rljc0j5.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]\n??:? void tmp3v3zfcq6.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9litcs45.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x428725]\n??:? void tmp9litcs45.__unittest_L48_C1() [0x428091]\n??:? void tmp9litcs45.__modtest() [0x4284a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c783]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b616]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430735]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]\n??:? runModuleUnitTests [0x42c559]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjtx4316r.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpjtx4316r.__unittest_L48_C1() [0x428099]\n??:? void tmpjtx4316r.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = long.max;\n    long minIndex = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (minIndex == -1)\n        return new long[0];\n    return [min, minIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    long count = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0)\n        {\n            if (e < min)\n            {\n                min = e;\n                index = i;\n                count = 1;\n            }\n            else if (e == min)\n            {\n                count++;\n            }\n        }\n    }\n    if (count == 0)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqqicmy_j.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x4286e5]\n??:? void tmpqqicmy_j.__unittest_L57_C1() [0x428051]\n??:? void tmpqqicmy_j.__modtest() [0x428464]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430769]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]\n??:? runModuleUnitTests [0x42c519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [0L, 0L];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [0L, 0L];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwn1ijgqg.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x428745]\n??:? void tmpwn1ijgqg.__unittest_L48_C1() [0x4280b5]\n??:? void tmpwn1ijgqg.__modtest() [0x4284c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7a3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b636]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430755]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b60d]\n??:? runModuleUnitTests [0x42c579]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c08]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    \n    long[] result = [arr[0], 0];\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < result[0])\n        {\n            result[0] = v;\n            result[1] = i;\n        }\n    }\n    if (result[0] % 2 != 0)\n        return [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0lsx5ak5.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x428765]\n??:? void tmp0lsx5ak5.__unittest_L48_C1() [0x4280d5]\n??:? void tmp0lsx5ak5.__modtest() [0x4284e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b656]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b62d]\n??:? runModuleUnitTests [0x42c599]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c28]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]\n??:? void tmp3v3zfcq6.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsmnm1jj5.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmpsmnm1jj5.__unittest_L52_C1() [0x4280b9]\n??:? void tmpsmnm1jj5.__modtest() [0x4284cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3czr_d4d.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmp3czr_d4d.__unittest_L48_C1() [0x42803d]\n??:? void tmp3czr_d4d.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, value; arr)\n    {\n        if (value % 2 == 0 && value < min)\n        {\n            min = value;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp00lnum2g.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmp00lnum2g.__unittest_L48_C1() [0x428049]\n??:? void tmp00lnum2g.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]\n??:? void tmp73pvjwmw.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min == long.max) return new long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    auto min = arr[0];\n    auto minIndex = 0;\n    foreach (index, value; arr)\n    {\n        if (value % 2 == 0 && value < min)\n        {\n            min = value;\n            minIndex = index;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphlvvje0b.d(41): Error: cannot implicitly convert expression `index` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphlvvje0b.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long smallestEven = arr[0];\n    long smallestIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < smallestEven)\n            {\n                smallestEven = arr[i];\n                smallestIndex = i;\n            }\n        }\n    }\n    if (smallestEven % 2 == 0)\n    {\n        result[0] = smallestEven;\n        result[1] = smallestIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw71h4uz8.d(60): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmpw71h4uz8.__unittest_L55_C1() [0x4280bd]\n??:? void tmpw71h4uz8.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk76_uibg.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpk76_uibg.__unittest_L49_C1() [0x4280ae]\n??:? void tmpk76_uibg.__modtest() [0x428460]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c797]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430841]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c56d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3czr_d4d.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmp3czr_d4d.__unittest_L48_C1() [0x42803d]\n??:? void tmp3czr_d4d.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min && v % 2 == 0)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        return [min, minIndex];\n    }\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjyq3ie7n.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmpjyq3ie7n.__unittest_L49_C1() [0x42803d]\n??:? void tmpjyq3ie7n.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]\n??:? void tmpm7_qirry.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    \n    long[] res = new long[2];\n    long min = long.max;\n    long minIndex = long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    \n    if (min == long.max)\n        return new long[0];\n    \n    res[0] = min;\n    res[1] = minIndex;\n    return res;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    \n    long minEven = long.max;\n    long minEvenIndex = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < minEven)\n        {\n            minEven = arr[i];\n            minEvenIndex = i;\n        }\n    }\n    \n    if (minEvenIndex == -1)\n        return new long[0];\n    \n    return [minEven, minEvenIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0) return result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkt931_2d.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmpkt931_2d.__unittest_L51_C1() [0x4280bd]\n??:? void tmpkt931_2d.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if(min == long.max)\n        return new long[0];\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]\n??:? void tmp3v3zfcq6.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]\n??:? void tmp3v3zfcq6.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = long.max;\n    long minIndex = long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (min == long.max)\n        return new long[0];\n    return [min, minIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfe471ve_.d(45): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpfe471ve_.d(45): Error: found `}` when expecting `;` following statement\n/tmp/tmpfe471ve_.d(45): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfe471ve_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long minEven = -1;\n    long minIndex = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (minEven == -1)\n            {\n                minEven = arr[i];\n                minIndex = i;\n            }\n            else\n            {\n                if (arr[i] < minEven)\n                {\n                    minEven = arr[i];\n                    minIndex = i;\n                }\n            }\n        }\n    }\n    if (minEven != -1)\n    {\n        result[0] = minEven;\n        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwa20p9xv.d(69): unittest failure\n----------------\n??:? _d_unittestp [0x428765]\n??:? void tmpwa20p9xv.__unittest_L63_C1() [0x428136]\n??:? void tmpwa20p9xv.__modtest() [0x4284e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c81f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43093d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b689]\n??:? runModuleUnitTests [0x42c5f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c28]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp92anql3p.d(45): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp92anql3p.d(45): Error: found `}` when expecting `;` following statement\n/tmp/tmp92anql3p.d(45): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92anql3p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[2];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return new long[2];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpiw31h7lq.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286d5]\n??:? void tmpiw31h7lq.__unittest_L48_C1() [0x428045]\n??:? void tmpiw31h7lq.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b622]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430839]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]\n??:? runModuleUnitTests [0x42c565]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b98]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcco96zr9.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmpcco96zr9.__unittest_L52_C1() [0x4280b9]\n??:? void tmpcco96zr9.__modtest() [0x4284cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long minEven = long.max;\n    long minEvenIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < minEven)\n        {\n            minEven = e;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven == long.max)\n        return [];\n    return [minEven, minEvenIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3czr_d4d.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmp3czr_d4d.__unittest_L48_C1() [0x42803d]\n??:? void tmp3czr_d4d.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]\n??:? void tmpn8mlqv33.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]\n??:? void tmpn8mlqv33.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long smallestEven = long.max;\n    long smallestEvenIndex = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < smallestEven)\n        {\n            smallestEven = arr[i];\n            smallestEvenIndex = i;\n        }\n    }\n    if (smallestEven == long.max)\n    {\n        return result;\n    }\n    result[0] = smallestEven;\n    result[1] = smallestEvenIndex;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmmqx3gw6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmpmmqx3gw6.__unittest_L51_C1() [0x428102]\n??:? void tmpmmqx3gw6.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b682]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43090d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430899]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b659]\n??:? runModuleUnitTests [0x42c5c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    bool hasEven = false;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0)\n        {\n            hasEven = true;\n            if (v < min)\n            {\n                min = v;\n                minIndex = i;\n            }\n        }\n    }\n    if (hasEven)\n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp19cprvb5.d(58): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmp19cprvb5.__unittest_L53_C1() [0x428039]\n??:? void tmp19cprvb5.__modtest() [0x42844c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]\n??:? void tmp73pvjwmw.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long smallestEven = arr[0];\n    long smallestEvenIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < smallestEven)\n        {\n            smallestEven = v;\n            smallestEvenIndex = i;\n        }\n    }\n    if (smallestEven % 2 == 0)\n        return [smallestEven, smallestEvenIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvp9ullv7.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpvp9ullv7.__unittest_L48_C1() [0x428049]\n??:? void tmpvp9ullv7.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmvtz7s3l.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmpmvtz7s3l.__unittest_L52_C1() [0x4280bd]\n??:? void tmpmvtz7s3l.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpg0_ic3rp.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpg0_ic3rp.__unittest_L48_C1() [0x428049]\n??:? void tmpg0_ic3rp.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]\n??:? void tmpn8mlqv33.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9litcs45.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x428725]\n??:? void tmp9litcs45.__unittest_L48_C1() [0x428091]\n??:? void tmp9litcs45.__modtest() [0x4284a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c783]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b616]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430735]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]\n??:? runModuleUnitTests [0x42c559]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1iaf5mcy.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x428725]\n??:? void tmp1iaf5mcy.__unittest_L49_C1() [0x4280f2]\n??:? void tmp1iaf5mcy.__modtest() [0x4284a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b672]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430889]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]\n??:? runModuleUnitTests [0x42c5b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaauy_sym.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmpaauy_sym.__unittest_L50_C1() [0x42809e]\n??:? void tmpaauy_sym.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long[] result = new long[2];\n    long min = long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            result[0] = v;\n            result[1] = i;\n        }\n    }\n    if (min == long.max) return new long[0];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    int minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpscl69hm0.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x428725]\n??:? void tmpscl69hm0.__unittest_L48_C1() [0x428091]\n??:? void tmpscl69hm0.__modtest() [0x4284a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c783]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b616]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430735]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]\n??:? runModuleUnitTests [0x42c559]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    \n    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    \n    if (index == -1)\n        return [];\n    \n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    \n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min, index };\n    else\n        return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4p6f_zm_.d(46): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp4p6f_zm_.d(46): Error: found `}` when expecting `;` following statement\n/tmp/tmp4p6f_zm_.d(46): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmp4p6f_zm_.d(47): Error: found `else` without a corresponding `if`, `version` or `debug` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4p6f_zm_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpd5pft7nq.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmpd5pft7nq.__unittest_L52_C1() [0x4280bd]\n??:? void tmpd5pft7nq.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp92anql3p.d(45): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp92anql3p.d(45): Error: found `}` when expecting `;` following statement\n/tmp/tmp92anql3p.d(45): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92anql3p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    \n    long[] res = new long[2];\n    long min = long.max;\n    long minIndex = long.max;\n    long index = 0;\n    foreach (e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            minIndex = index;\n        }\n        index++;\n    }\n    if (min == long.max)\n        return new long[0];\n    res[0] = min;\n    res[1] = minIndex;\n    return res;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    \n    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    \n    if (min == long.max)\n        return [];\n    \n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] ret = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if(index == -1)\n        return ret;\n    ret[0] = min;\n    ret[1] = index;\n    return ret;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp765wozc.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpp765wozc.__unittest_L49_C1() [0x4280aa]\n??:? void tmpp765wozc.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c797]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430841]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c56d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]\n??:? void tmpn8mlqv33.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]\n??:? void tmpm7_qirry.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]\n??:? void tmpm7_qirry.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0) return result;\n    long min = arr[0];\n    int index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0xrw6x2k.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp0xrw6x2k.__unittest_L51_C1() [0x4280b9]\n??:? void tmp0xrw6x2k.__modtest() [0x4284cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    bool found = false;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0)\n        {\n            if (!found)\n            {\n                min = v;\n                index = i;\n                found = true;\n            }\n            else\n            {\n                if (v < min)\n                {\n                    min = v;\n                    index = i;\n                }\n            }\n        }\n    }\n    if (found)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long[] result = new long[2];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min && v % 2 == 0)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp63mdyjxo.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x428705]\n??:? void tmp63mdyjxo.__unittest_L52_C1() [0x428075]\n??:? void tmp63mdyjxo.__modtest() [0x428488]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b652]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430869]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b629]\n??:? runModuleUnitTests [0x42c595]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bc8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long min = long.max;\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min == long.max) return new long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long smallest = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < smallest && arr[i] % 2 == 0)\n        {\n            smallest = arr[i];\n            index = i;\n        }\n    }\n    if (smallest % 2 == 0)\n        return new long[] { smallest, index };\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa1zq2p2u.d(45): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpa1zq2p2u.d(45): Error: found `}` when expecting `;` following statement\n/tmp/tmpa1zq2p2u.d(45): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1zq2p2u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1nf7dg9j.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmp1nf7dg9j.__unittest_L50_C1() [0x42809e]\n??:? void tmp1nf7dg9j.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n                min = arr[i];\n                result[0] = min;\n                result[1] = i;\n            }\n        }\n    }\n    if (min % 2 != 0)\n        return result;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1yhozc4u.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x428755]\n??:? void tmp1yhozc4u.__unittest_L52_C1() [0x4280c1]\n??:? void tmp1yhozc4u.__modtest() [0x4284d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c80f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43092d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ddc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b679]\n??:? runModuleUnitTests [0x42c5e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c18]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = long.max;\n    long minIndex = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min == long.max)\n        return new long[0];\n    return [min, minIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]\n??:? void tmp73pvjwmw.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long[] result = new long[2];\n    result[0] = long.max;\n    result[1] = long.max;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < result[0])\n        {\n            result[0] = e;\n            result[1] = i;\n        }\n    }\n    if (result[0] == long.max)\n        return new long[0];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3czr_d4d.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmp3czr_d4d.__unittest_L48_C1() [0x42803d]\n??:? void tmp3czr_d4d.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long[] res = new long[2];\n    res[0] = long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < res[0])\n        {\n            res[0] = v;\n            res[1] = i;\n        }\n    }\n    if (res[0] == long.max)\n        return new long[0];\n    return res;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfe471ve_.d(45): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpfe471ve_.d(45): Error: found `}` when expecting `;` following statement\n/tmp/tmpfe471ve_.d(45): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfe471ve_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]\n??:? void tmpm7_qirry.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpd5pft7nq.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmpd5pft7nq.__unittest_L52_C1() [0x4280bd]\n??:? void tmpd5pft7nq.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    int index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1f67mchb.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp1f67mchb.__unittest_L52_C1() [0x4280b9]\n??:? void tmp1f67mchb.__modtest() [0x4284cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    int minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp32stsui0.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp32stsui0.__unittest_L52_C1() [0x4280b9]\n??:? void tmp32stsui0.__modtest() [0x4284cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]\n??:? void tmp3v3zfcq6.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    \n    long[] res = new long[2];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n                min = arr[i];\n                minIndex = i;\n            }\n        }\n    }\n    if (min % 2 == 0)\n    {\n        res[0] = min;\n        res[1] = minIndex;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppw6e9la1.d(61): unittest failure\n----------------\n??:? _d_unittestp [0x428755]\n??:? void tmppw6e9la1.__unittest_L56_C1() [0x4280c5]\n??:? void tmppw6e9la1.__modtest() [0x4284d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c80f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43092d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ddc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b679]\n??:? runModuleUnitTests [0x42c5e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c18]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjtx4316r.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpjtx4316r.__unittest_L48_C1() [0x428099]\n??:? void tmpjtx4316r.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptd0j4p0u.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4286fd]\n??:? void tmptd0j4p0u.__unittest_L52_C1() [0x42806d]\n??:? void tmptd0j4p0u.__modtest() [0x428480]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430861]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]\n??:? runModuleUnitTests [0x42c58d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bc0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0, 0];\n    long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp2bdk061.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpp2bdk061.__unittest_L50_C1() [0x4280ae]\n??:? void tmpp2bdk061.__modtest() [0x428460]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]\n??:? void tmpn8mlqv33.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min == long.max)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min, index };\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv7cakj4w.d(45): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpv7cakj4w.d(45): Error: found `}` when expecting `;` following statement\n/tmp/tmpv7cakj4w.d(45): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv7cakj4w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    int index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1f67mchb.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp1f67mchb.__unittest_L52_C1() [0x4280b9]\n??:? void tmp1f67mchb.__modtest() [0x4284cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl6xxixe9.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x4286e5]\n??:? void tmpl6xxixe9.__unittest_L49_C1() [0x4280b2]\n??:? void tmpl6xxixe9.__modtest() [0x428464]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c79f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b632]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430849]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]\n??:? runModuleUnitTests [0x42c575]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        return [min, minIndex];\n    }\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7ckruh6t.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmp7ckruh6t.__unittest_L49_C1() [0x42803d]\n??:? void tmp7ckruh6t.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min == long.max)\n        return new long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long min = long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1) return new long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] ret = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if(index != -1)\n    {\n        ret[0] = min;\n        ret[1] = index;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpad06sm9z.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmpad06sm9z.__unittest_L50_C1() [0x42809e]\n??:? void tmpad06sm9z.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]\n??:? void tmp3v3zfcq6.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy0vllkwh.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpy0vllkwh.__unittest_L48_C1() [0x428049]\n??:? void tmpy0vllkwh.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]\n??:? void tmp73pvjwmw.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]\n??:? void tmpm7_qirry.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, value; arr)\n    {\n        if (value % 2 == 0 && value < min)\n        {\n            min = value;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp00lnum2g.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmp00lnum2g.__unittest_L48_C1() [0x428049]\n??:? void tmp00lnum2g.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1nf7dg9j.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmp1nf7dg9j.__unittest_L50_C1() [0x42809e]\n??:? void tmp1nf7dg9j.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpg0_ic3rp.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpg0_ic3rp.__unittest_L48_C1() [0x428049]\n??:? void tmpg0_ic3rp.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptd0j4p0u.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4286fd]\n??:? void tmptd0j4p0u.__unittest_L52_C1() [0x42806d]\n??:? void tmptd0j4p0u.__modtest() [0x428480]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430861]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]\n??:? runModuleUnitTests [0x42c58d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bc0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long minIndex = long.max;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min == long.max)\n    {\n        return result;\n    }\n    result[0] = min;\n    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqyjfsptr.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpqyjfsptr.__unittest_L51_C1() [0x4280fe]\n??:? void tmpqyjfsptr.__modtest() [0x4284b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b67a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430905]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430db4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430891]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b651]\n??:? runModuleUnitTests [0x42c5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    \n    long[] result = new long[2];\n    long minEven = long.max;\n    long minEvenIndex = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < minEven)\n        {\n            minEven = arr[i];\n            minEvenIndex = i;\n        }\n    }\n    \n    if (minEven == long.max)\n        return new long[0];\n    \n    result[0] = minEven;\n    result[1] = minEvenIndex;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqaeyz7aj.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmpqaeyz7aj.__unittest_L48_C1() [0x42803d]\n??:? void tmpqaeyz7aj.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long smallestEven = arr[0];\n    long smallestEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < smallestEven)\n            {\n                smallestEven = arr[i];\n                smallestEvenIndex = i;\n            }\n        }\n    }\n    if (smallestEven % 2 == 0)\n    {\n        result[0] = smallestEven;\n        result[1] = smallestEvenIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpc_8s6j3b.d(60): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmpc_8s6j3b.__unittest_L55_C1() [0x4280bd]\n??:? void tmpc_8s6j3b.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0, 0];\n    long min = long.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if(min == long.max)\n        return [];\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfe471ve_.d(45): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpfe471ve_.d(45): Error: found `}` when expecting `;` following statement\n/tmp/tmpfe471ve_.d(45): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfe471ve_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        return new long[] { min, minIndex };\n    }\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnpuh9abz.d(45): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpnpuh9abz.d(45): Error: found `}` when expecting `;` following statement\n/tmp/tmpnpuh9abz.d(45): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnpuh9abz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]\n??:? void tmpm7_qirry.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9to4_he1.d(45): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp9to4_he1.d(45): Error: found `}` when expecting `;` following statement\n/tmp/tmp9to4_he1.d(45): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9to4_he1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp92anql3p.d(45): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp92anql3p.d(45): Error: found `}` when expecting `;` following statement\n/tmp/tmp92anql3p.d(45): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92anql3p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n    \n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min, minIndex };\n    else\n        return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx6fyt3i1.d(46): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpx6fyt3i1.d(46): Error: found `}` when expecting `;` following statement\n/tmp/tmpx6fyt3i1.d(46): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpx6fyt3i1.d(47): Error: found `else` without a corresponding `if`, `version` or `debug` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6fyt3i1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164228
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]\n??:? void tmp73pvjwmw.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min && v % 2 == 0)\n        {\n            min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpiaf92n6r.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmpiaf92n6r.__unittest_L48_C1() [0x428049]\n??:? void tmpiaf92n6r.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]\n??:? void tmp73pvjwmw.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164227
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkax58xan.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x4286e5]\n??:? void tmpkax58xan.__unittest_L49_C1() [0x4280b2]\n??:? void tmpkax58xan.__modtest() [0x428464]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c79f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b632]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430849]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]\n??:? runModuleUnitTests [0x42c575]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164229
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    int index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1f67mchb.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp1f67mchb.__unittest_L52_C1() [0x4280b9]\n??:? void tmp1f67mchb.__modtest() [0x4284cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164229
    }
  ]
}