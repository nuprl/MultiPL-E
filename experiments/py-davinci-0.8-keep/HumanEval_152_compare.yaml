name: HumanEval_152_compare
language: py
prompt: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
  \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
  \ of some long-awaited\n    event is finally known. The feelings and thoughts you\
  \ have at that moment are\n    definitely worth noting down and comparing.\n   \
  \ Your task is to determine if a person correctly guessed the results of a number\
  \ of matches.\n    You are given two arrays of scores and guesses of equal length,\
  \ where each index shows a match. \n    Return an array of the same length denoting\
  \ how far off each guess was. If they have guessed correctly,\n    the value is\
  \ 0, and if not, the value is the absolute difference between the guess and the\
  \ score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
  \ -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3,\
  \ 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
  \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
  \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0,\
  \ 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
completions: ["    return [abs(i-j) for i,j in zip(game,guess)]\n", "    return [abs(game[i]\
    \ - guess[i]) for i in range(len(game))]\n", "    output = []\n    for i in range(len(game)):\n\
    \        if game[i] == guess[i]:\n            output.append(0)\n        else:\n\
    \            output.append(abs(game[i] - guess[i]))\n    return output\n", " \
    \   l = []\n    for x in range(len(game)):\n        if game[x] == guess[x]:\n\
    \            l.append(0)\n        else:\n            l.append(abs(game[x] - guess[x]))\n\
    \    return l", "    res = []\n    for i in range(len(game)):\n        res.append(abs(game[i]\
    \ - guess[i]))\n    return res", "    ret = []\n    for i in range(len(game)):\n\
    \        ret.append(abs(game[i] - guess[i]))\n    return ret\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    # YOUR CODE HERE\n\n", '    return [abs(item - guess[idx]) for idx,
    item in enumerate(game)]', "    for i in range(len(game)):\n        if game[i]\
    \ > guess[i]:\n            guess[i] = game[i] - guess[i]\n        elif game[i]\
    \ < guess[i]:\n            guess[i] = guess[i] - game[i]\n        else:\n    \
    \        guess[i] = 0\n    return guess", "    return [abs(a-b) if a != b else\
    \ 0 for a, b in zip(game, guess)]\n", "    return [x-y if x-y >= 0 else -(x-y)\
    \ for x,y in zip(game,guess)]\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    # return [abs(game[i] - guess[i]) for i in range(len(game))]\n\
    \n    return [abs(x-y) for x,y in zip(game,guess)]\n", "    return [0 if game[i]\
    \ == guess[i] else abs(game[i] - guess[i]) for i in range(len(game))]\n", "  \
    \  # Your code here\n    return [abs(a-b) if a!=b else 0 for a,b in zip(game,guess)]",
  "    return [abs(x - y) for x, y in zip(game, guess)]\n", '    return [abs(game[x]
    - guess[x]) for x in range(len(game))]', "    answer = []\n    for i in range(len(game)):\n\
    \        if game[i] == guess[i]:\n            answer.append(0)\n        else:\n\
    \            answer.append(abs(game[i] - guess[i]))\n    return answer\n", '    return
    [abs(game[i] - guess[i]) for i in range(len(game))]', '    return [abs(a-b) if
    a != b else 0 for a, b in zip(game, guess)]', "    return [abs(score - guess)\
    \ for score, guess in zip(game, guess)]\n", "    return [abs(game[i] - guess[i])\
    \ for i in range(len(game))]\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n\
    print(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))", '    return [abs(x - y) for x,
    y in zip(game, guess)]', "    return list(map(lambda x, y: abs(x - y) if x !=\
    \ y else 0, game, guess))\n", "    return [abs(x-y) for x,y in zip(game,guess)]\n",
  '    return [abs(i-j) for i,j in zip(game,guess)]', "    return [abs(g-s) if g !=\
    \ s else 0 for s, g in zip(game, guess)]\n", "    return [abs(g-c) if g != c else\
    \ 0 for g, c in zip(game, guess)]\n", "    return [abs(x - y) for x, y in zip(game,\
    \ guess)]\n    #return [abs(game[i] - guess[i]) for i in range(len(game))]\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", '    return
    [abs(guess[i] - game[i]) for i in range(len(game))]', "    return list(map(lambda\
    \ x, y: abs(x - y) if x != y else 0, game, guess))\n\n", "    output = []\n  \
    \  for i in range(len(game)):\n        # print(game[i], guess[i])\n        result\
    \ = guess[i] - game[i]\n        if result < 0:\n            result = result *\
    \ -1\n        output.append(result)\n    return output\n", '    return [(lambda
    x, y: 0 if x == y else abs(x - y))(x, y) for x, y in zip(game, guess)]', '    return
    [abs(g-s) if g != s else 0 for g, s in zip(game, guess)]', "    return list(map(lambda\
    \ x, y: 0 if x == y else abs(x - y), game, guess))\n\n", "    # Your code here\n\
    \    return [abs(game[i] - guess[i]) for i in range(len(game))]", "    res = []\n\
    \    for i in range(len(game)):\n        res.append(abs(game[i] - guess[i]))\n\
    \    return res\n", '    return [abs(x - y) for x, y in zip(game, guess)]', " \
    \   res = []\n    for i in range(len(game)):\n        res.append(abs(game[i] -\
    \ guess[i]))\n    return res\n", '    return [abs(game[i] - guess[i]) for i in
    range(len(game))]', "    out = []\n    for i in range(len(game)):\n        if\
    \ game[i] == guess[i]:\n            out.append(0)\n        else:\n           \
    \ out.append(abs(game[i] - guess[i]))\n    return out", "    return [abs(x - y)\
    \ for x, y in zip(game, guess)]\n    \n    ", "    # Your code here\n    return\
    \ [abs(game[x] - guess[x]) for x in range(len(game))]", "    res = []\n    for\
    \ i in range(len(game)):\n        res.append(abs(game[i] - guess[i]))\n    return\
    \ res\n", '    pass', "    return [abs(i - j) for i, j in zip(game, guess)]\n",
  "    return [abs(x-y) for x,y in zip(game,guess)]\n", "    # code here\n    res=[]\n\
    \    for i in range(len(game)):\n        if(game[i]==guess[i]):\n            res.append(0)\n\
    \        else:\n            res.append(abs(game[i]-guess[i]))\n    return res\n",
  "    results = []\n    for g in range(len(game)):\n        results.append(abs(game[g]\
    \ - guess[g]))\n    return results", "    if game == [] or guess == []:\n    \
    \    return []\n    else:\n        return [(i-j) if (i-j) >= 0 else -(i-j) for\
    \ i,j in zip(game,guess)]", '    return [abs(guess[i] - game[i]) for i in range(len(game))]',
  "    def compare_scores(game_score: int, guess_score: int) -> int:\n        return\
    \ abs(game_score - guess_score)\n    return list(map(compare_scores, game, guess))\n",
  "    return [abs(g-s) if g != s else 0 for s, g in zip(game, guess)]\n", "    dist\
    \ = []\n    for i in range(len(game)):\n        dist.append(abs(game[i] - guess[i]))\n\
    \    return dist", '    return [abs(game[i] - guess[i]) for i in range(len(game))]',
  "    # your code here\n    comp = []\n    for i in range(len(game)):\n        comp.append(abs(game[i]\
    \ - guess[i]))\n    return comp\n", "    if len(game) != len(guess):\n       \
    \ raise ValueError(\"Incorrect size of array\")\n    if len(game) == 0:\n    \
    \    return []\n    for i in game:\n        if i < 0:\n            raise ValueError(\"\
    Incorrect input values\")\n    for i in guess:\n        if i < 0:\n          \
    \  raise ValueError(\"Incorrect input values\")\n    return list(map(lambda x,\
    \ y: abs(x - y), game, guess))", "    return list(map(lambda x, y: abs(x - y)\
    \ if x != y else 0, game, guess))\n\n", '    return [abs(game[i] - guess[i]) for
    i in range(len(game))]', "    # your code here\n    res = []\n    for i in range(len(game)):\n\
    \        if game[i] > guess[i]:\n            res.append(game[i] - guess[i])\n\
    \        elif game[i] < guess[i]:\n            res.append(guess[i] - game[i])\n\
    \        else:\n            res.append(0)\n    return res\n", "    ans = []\n\
    \    for i in range(len(game)):\n        ans.append(abs(game[i] - guess[i]))\n\
    \    return ans", '    return [i if i == 0 else abs(i) for i in [x - y for x,
    y in zip(game, guess)]]', "    output = []\n    for a, b in zip(game, guess):\n\
    \        output.append(abs(a - b))\n    return output\n", '    return [abs(x -
    y) for x, y in zip(game, guess)]', "    # Your code here\n    # return []\n  \
    \  new_list = []\n    for i in range(len(game)):\n        new_list.append(abs(game[i]\
    \ - guess[i]))\n    return new_list", '    return [abs(game[i] - guess[i]) for
    i in range(len(game))]', '    return [abs(score - guess) for score, guess in zip(game,
    guess)]', "    errors = []\n    for i in range(len(game)):\n        errors.append(abs(game[i]\
    \ - guess[i]))\n    return errors\n", "    # your code here\n    return list(map(lambda\
    \ a, b: 0 if a == b else abs(a - b), game, guess))\n\n", "    pass\n    # your\
    \ code here\n", "    return [abs(i-j) for i,j in zip(game,guess)]\n", '    return
    [abs(game[i] - guess[i]) for i in range(len(game))]', '    return [abs(x-y) for
    x,y in zip(game,guess)]', '    return list(map(lambda n: n[0] - n[1] if n[0] !=
    n[1] else 0, zip(game, guess)))', "    wrong_scores = []\n    for x in range(len(game)):\n\
    \        if game[x] == guess[x]:\n            wrong_scores.append(0)\n       \
    \ else:\n            wrong_scores.append(abs(game[x] - guess[x]))\n    return\
    \ wrong_scores", "    return [abs(game[i] - guess[i]) for i in range(len(game))]\n",
  '    return [abs(a-b) if a!=b else 0 for a,b in zip(game,guess)]', '    return [abs(i-j)
    for i,j in zip(game,guess)]', "    def get_abs_diff(score, guess):\n        return\
    \ abs(score - guess)\n    \n    return list(map(get_abs_diff, game, guess))",
  "    return [abs(x - y) for x, y in zip(game, guess)]\n", "    return [abs(x-y)\
    \ for x,y in zip(game,guess)]\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))",
  "    answers = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n\
    \            answers.append(0)\n        else:\n            answers.append(abs(game[i]\
    \ - guess[i]))\n    return answers", '    return [abs(i - j) for i, j in zip(game,
    guess)]', "    return [abs(g-s) if g!=s else 0 for g,s in zip(game,guess)]\n",
  "    return [abs(i-j) for i,j in zip(game,guess)]\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    # your code here\n", "    # Your code here\n    return [abs(i-j) for\
    \ i,j in zip(game,guess)]", '    pass', '    return [abs(i-j) for i,j in zip(game,guess)]',
  '    return [abs(game[i] - guess[i]) for i in range(len(game))]', '    return [abs(game[i]
    - guess[i]) for i in range(len(game))]', "    return [game[i] - guess[i] if game[i]\
    \ != guess[i] else 0 for i in range(len(game))]\n\n", '    return [abs(game[i]
    - guess[i]) for i in range(len(game))]', '    return [abs(guess[i] - game[i])
    for i in range(len(game))]', '    return [0 if game[i] == guess[i] else abs(game[i]
    - guess[i]) for i in range(len(game))]', "    #make sure that your are comparing\
    \ the same kind of things\n    answer = []\n    for i in range(len(game)):\n \
    \       if game[i] == guess[i]:\n            answer.append(0)\n        else:\n\
    \            answer.append(abs(game[i] - guess[i]))\n    return answer\n", '    pass',
  '    #game: [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,', "    return\
    \ [abs(x - y) for x, y in zip(game, guess)]\n", "    return [abs(game[i] - guess[i])\
    \ for i in range(len(game))]\n", "    return list(map(lambda x, y: abs(x - y)\
    \ if x != y else 0, game, guess))\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n\
    print(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))", "    res = []\n    for g, s in\
    \ zip(guess, game):\n        res.append(abs(g - s))\n    return res\n", "    return\
    \ [abs(item[0] - item[1]) for item in zip(game, guess)]\n", "    res = []\n  \
    \  for i in range(len(game)):\n        res.append(abs(game[i] - guess[i]))\n \
    \   return res\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))",
  '    return [abs(a-b) if a!=b else 0 for a,b in zip(game,guess)]', "    return [abs(scr\
    \ - g) if scr - g != 0 else 0 for scr, g in zip(game, guess)]\n\n\n", "    scores\
    \ = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n    \
    \        scores.append(0)\n        else:\n            scores.append(abs(game[i]\
    \ - guess[i]))\n    return scores\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))",
  "    return [0 if game[i] == guess[i] else abs(game[i] - guess[i]) for i in range(len(game))]\n\
    \nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))",
  "    comp = [abs(game[i] - guess[i]) for i in range(len(game))]\n    return comp\n",
  "    def compare_scores(game: int, guess: int) -> int:\n        if game == guess:\n\
    \            return 0\n        return abs(game - guess)\n\n    return list(map(compare_scores,\
    \ game, guess))\n", "    dist_list = []\n    i = 0\n    while i < len(game):\n\
    \        if guess[i] == game[i]:\n            dist_list.append(0)\n        else:\n\
    \            dist_list.append(abs(guess[i] - game[i]))\n        i += 1\n    return\
    \ dist_list\n", "    final_result = []\n    for i in range(len(game)):\n     \
    \   if game[i] == guess[i]:\n            final_result.append(0)\n        else:\n\
    \            final_result.append(abs(game[i] - guess[i]))\n    return final_result\n\
    \nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))", "    return [abs(game[i] - guess[i])\
    \ for i in range(len(game))]\n", "    game, guess = game[:], guess[:]\n    n =\
    \ len(game)\n    for i in range(n):\n        for j in range(n):\n            if\
    \ game[i] == guess[j]:\n                game[i] = None\n                guess[j]\
    \ = None\n                break\n    return list(map(lambda x: abs(x[0] - x[1]),\
    \ zip(game, guess)))", "    res = []\n    for i in range(len(game)):\n       \
    \ res.append(abs(game[i] - guess[i]))\n    return res\n", "    output = []\n \
    \   for i in range(len(game)):\n        output.append(abs(game[i] - guess[i]))\n\
    \    return output\n", "    return [abs(a-b) if a!=b else 0 for a,b in zip(game,guess)]\n\
    \nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))", "    return [abs(i - j) for i,\
    \ j in zip(game, guess)]\n", '    return [abs(x-y) for x,y in zip(game,guess)]',
  '    return [abs(x - y) for x, y in zip(game, guess)]', "    # your code here\n\
    \    return [abs(x - y) for x, y in zip(game, guess)]\n", '    return [abs(game[i]
    - guess[i]) for i in range(len(game))]', "    return [abs(x - y) for x, y in zip(game,\
    \ guess)]\n", "    return list(map(lambda x, y: 0 if x == y else abs(x - y), game,\
    \ guess))\n", "    return [abs(c - g) if c != g else 0 for g, c in zip(game, guess)]\n\
    \n", "    from operator import sub\n    from functools import reduce\n    from\
    \ itertools import starmap\n    return list(starmap(abs,starmap(sub,zip(game,guess))))\n",
  "    return [abs(n - g) for n, g in zip(game, guess)]\n\nq = compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),\
    \ [0,0,0,0,3,3]\nq\nq = compare([0,5,0,0,0,4],[4,1,1,0,0,-2]), [4,4,1,0,0,6]\n\
    q", "    return [0 if guess[i] == game[i] else abs(guess[i] - game[i]) for i in\
    \ range(len(game))]\n\n", "    return [(abs(a-b)) for a,b in zip(game,guess)]\n",
  "    l=[]\n    for i in range(len(game)):\n        if(game[i]==guess[i]):\n    \
    \        l.append(0)\n        else:\n            l.append(abs(game[i]-guess[i]))\n\
    \    return l\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))",
  '    return [abs(score - guess) for score, guess in zip(game, guess)]', '    return
    [abs(g-s) if s != g else 0 for s, g in zip(game, guess)]', "    return [0 if x\
    \ == y else abs(x - y) for x, y in zip(game, guess)]\n\n", "    return [abs(game[i]\
    \ - guess[i]) for i in range(len(game))]\n", '    return [abs(game[i] - guess[i])
    for i in range(len(game))]', "    return list(map(lambda x, y: abs(x - y) if x\
    \ != y else 0, game, guess))\n\n\n", "    my_list=[]\n    for index, value in\
    \ enumerate(game):\n        if game[index]==guess[index]:\n            my_list.append(0)\n\
    \        else:\n            my_list.append(abs(game[index]-guess[index]))\n  \
    \  return my_list\n", "    diffs = []\n    for i in range(len(game)):\n      \
    \  diffs.append(abs(game[i] - guess[i]))\n    return diffs\n", '    return [abs(x-y)
    for x,y in zip(game,guess)]', "    return [abs(score - guess) for score, guess\
    \ in zip(game, guess)]\n", '    return [abs(a-b) if a!=b else 0 for a,b in zip(game,guess)]',
  "    return list(map(lambda x, y: abs(x - y) if x != y else 0, game, guess))\n\n",
  "    compare = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n\
    \            compare.append(0)\n        else:\n            compare.append(abs(game[i]\
    \ - guess[i]))\n    return compare", "    diff = [abs(x - y) for x, y in zip(game,\
    \ guess)]\n    return diff\n", "    return [abs(guess[i] - game[i]) for i in range(len(game))]\n",
  '    return [0 if game[i] == guess[i] else abs(game[i] - guess[i]) for i in range(len(game))]',
  "    return [abs(g-s) if g != s else 0 for s, g in zip(game, guess)]\n", '    return
    [abs(x - y) for x, y in zip(game, guess)]', "    return list(map(lambda a, b:\
    \ abs(a - b) if a != b else 0, game, guess))\n", "    my_list = []\n    for i\
    \ in range(len(game)):\n        if game[i] == guess[i]:\n            my_list.append(0)\n\
    \        else:\n            my_list.append(abs(game[i] - guess[i]))\n    return\
    \ my_list", "    #I don't think I'll ever write a good readable code this way...\n\
    \    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]",
  "    return list(map(lambda x, y: abs(x - y) if x != y else 0, game, guess))\n",
  "    return [abs(x - y) for x, y in zip(game, guess)]\n", "    a = []\n    for i\
    \ in range(len(game)):\n        a.append(abs(game[i] - guess[i]))\n    return\
    \ a", "    return [x-y if x-y > 0 else y-x for x,y in zip(game,guess)]\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", '    return [abs(x - y) for x, y in zip(game,
    guess)]', '    return [abs(game[i] - guess[i]) for i in range(len(game))]', " \
    \   # your code here\n    return [(abs(g - s)) for g, s in zip(guess, game)]\n\
    \n", "    comp = []\n    for i in range(len(game)):\n        comp.append(abs(game[i]\
    \ - guess[i]))\n    return comp", '    return [abs(game[i] - guess[i]) for i in
    range(len(game))]', "    return [abs(a-b) if a!=b else 0 for a,b in zip(game,guess)]\n\
    \n'''", "    abs_diff = []\n    for i in range(len(game)):\n        if game[i]\
    \ == guess[i]:\n            abs_diff.append(0)\n        else:\n            abs_diff.append(abs(game[i]\
    \ - guess[i]))\n    return abs_diff\n", '    return [guess[i] - game[i] if guess[i]
    - game[i] >= 0 else guess[i] - game[i] * -1 for i in range(len(game))]', "   \
    \ return [guess[i] - game[i] if guess[i] - game[i] != 0 else 0 for i in range(len(game))]\n\
    \nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))",
  "    out = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n\
    \            out.append(0)\n        else:\n            out.append(abs(game[i]\
    \ - guess[i]))\n    return out\n", '    return [abs(a-b) if a != b else 0 for
    a, b in zip(game, guess)]', "    res = []\n    for idx, val in enumerate(game):\n\
    \        res.append(abs(val - guess[idx]))\n    return res", '    return [abs(g-s)
    if g!=s else 0 for s,g in zip(game,guess)]', "    # your code here\n    res =\
    \ []\n    for i in range(len(game)):\n        res.append(abs(game[i] - guess[i]))\n\
    \    return res\n", "    return [0 if g == s else abs(g - s) for g, s in zip(game,\
    \ guess)]\n\n", '    return [abs(game[i] - guess[i]) for i in range(len(game))]',
  "    ans = []\n    for i in range(len(game)):\n        if game[i] != guess[i]:\n\
    \            ans.append(abs(game[i] - guess[i]))\n        else:\n            ans.append(0)\n\
    \    return ans", '    return [abs(game[i] - guess[i]) for i in range(len(game))]',
  "    out = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n\
    \            out.append(0)\n        else:\n            out.append(abs(game[i]\
    \ - guess[i]))\n    return out\n", '    return [abs(i-j) for i,j in zip(game,guess)]',
  "    def diff(a,b):\n        return abs(a-b)\n    return list(map(diff, game, guess))",
  '    return list(map(lambda s, g: 0 if s == g else abs(s - g), game, guess))', " \
    \   # strategy: iterate over range(0, len(game)), if guess[i] is the same as game[i],\
    \ then it's 0, else\n    # return abs(guess[i] - game[i])\n    answer: List[int]\
    \ = []\n    for i in range(0, len(game)):\n        if game[i] == guess[i]:\n \
    \           answer.append(0)\n        else:\n            answer.append(abs(guess[i]\
    \ - game[i]))\n    return answer\n", "    # from itertools import starmap, zip_longest\n\
    \    # from operator import sub\n    # return list(starmap(lambda g,s: abs(s-g),\
    \ zip_longest(guess, game, fillvalue=0)))\n    return [abs(g-s) for g,s in zip(guess,\
    \ game)]\n", "    pass\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3])\n\
    print(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6])", "    diff = []\n\
    \    for x, y in zip(game, guess):\n        if x == y:\n            diff.append(0)\n\
    \        else:\n            diff.append(abs(x - y))\n    return diff\n", "   \
    \ # your code here\n    return [0 if game[i] == guess[i] else abs(game[i] - guess[i])\
    \ for i in range(len(game))]\n", '    return [abs(x - y) for x, y in zip(game,
    guess)]', "    return [abs(x - y) for x, y in zip(game, guess)]\n", "    if len(game)\
    \ == len(guess):\n        n = len(game)\n        result = []\n        for i in\
    \ range(n):\n            result.append(abs(game[i] - guess[i]))\n        return\
    \ result\n    else:\n        return 0", "    return [abs(i - j) for i, j in zip(game,\
    \ guess)]\n    \n    \n    \n    \"\"\"\n    compare_list = []\n    for i in range(len(game)):\n\
    \        if game[i] == guess[i]:\n            compare_list.append(0)\n       \
    \ else:\n            compare_list.append(abs(game[i] - guess[i]))\n    return\
    \ compare_list\n    \"\"\"", "    return [abs(i-j) for i,j in zip(game,guess)]\n",
  "    # \u043F\u0440\u043E\u0432\u0435\u0440\u044F\u0435\u043C \u0447\u0442\u043E\
    \ \u043C\u0430\u0441\u0441\u0438\u0432\u044B \u043E\u0434\u0438\u043D\u0430\u043A\
    \u043E\u0432\u043E\u0439 \u0434\u043B\u0438\u043D\u044B\n    if len(game) != len(guess):\n\
    \        raise Exception(\"The arrays must be of equal length\")\n    # \u0438\
    \u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0438\u0440\u0443\u0435\u043C\
    \ \u043F\u0443\u0441\u0442\u043E\u0439 \u043C\u0430\u0441\u0441\u0438\u0432 \u0434\
    \u043B\u044F \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\n  \
    \  res = []\n    # \u0437\u0430\u043F\u0443\u0441\u043A\u0430\u0435\u043C \u0446\
    \u0438\u043A\u043B \u043F\u043E \u0434\u043B\u0438\u043D\u0435 \u043C\u0430\u0441\
    \u0441\u0438\u0432\u0430\n    for i in range(len(game)):\n        # \u0434\u043E\
    \u0431\u0430\u0432\u043B\u044F\u0435\u043C \u0432 \u0440\u0435\u0437\u0443\u043B\
    \u044C\u0442\u0438\u0440\u0443\u044E\u0449\u0438\u0439 \u043C\u0430\u0441\u0441\
    \u0438\u0432 \u043C\u043E\u0434\u0443\u043B\u044C \u0440\u0430\u0437\u043D\u043E\
    \u0441\u0442\u0438 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u043F\u043E\
    \ \u0438\u043D\u0434\u0435\u043A\u0441\u0443 \u0438\u0437 \u0434\u0432\u0443\u0445\
    \ \u043C\u0430\u0441\u0441\u0438\u0432\u043E\u0432\n        res.append(abs(game[i]\
    \ - guess[i]))\n    # \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043C\
    \ \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\n    return res\n", " \
    \   return [abs(int(game[i]) - int(guess[i])) for i in range(len(game))]\n", " \
    \   pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   ", "   \
    \ r = []\n    for i in range(len(game)):\n        r.append(abs(game[i] - guess[i]))\n\
    \    return r\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))",
  "    return [abs(g-s) if g != s else 0 for g, s in zip(game, guess)]\n", "    return\
    \ list(map(lambda x, y: 0 if x == y else abs(x - y), game, guess))\n\n", "   \
    \ new_arr = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n\
    \            new_arr.append(0)\n        else:\n            new_arr.append(abs(game[i]\
    \ - guess[i]))\n    return new_arr\n", "    return [abs(i - j) for i, j in zip(game,\
    \ guess)]\n", "    return [abs(i - j) for i, j in zip(game, guess)]\n", '    return
    [abs(game[i] - guess[i]) for i in range(len(game))]', "    return [abs(game[i]\
    \ - guess[i]) for i in range(len(game))]\n", "    for i in range(len(game)):\n\
    \        if game[i] == guess[i]:\n            guess[i] = 0\n        else:\n  \
    \          guess[i] = abs(game[i] - guess[i])\n    return guess", "    # your\
    \ code here\n    answer = []\n    for i in range(len(game)):\n        if game[i]\
    \ == guess[i]:\n            answer.append(0)\n        else:\n            answer.append(abs(game[i]\
    \ - guess[i]))\n    return answer", '    return [abs(i-j) for i,j in zip(game,guess)]',
  '    return [0 if x == y else abs(x - y) for x, y in zip(game, guess)]', "    #\
    \ your code here\n    return [abs(i-j) for i,j in zip(game,guess)]"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
