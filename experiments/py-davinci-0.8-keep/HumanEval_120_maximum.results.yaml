name: HumanEval_120_maximum
language: py
results:
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9y0vw81b.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp9y0vw81b.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp9y0vw81b.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, (-num, num))\n\
    \    out = []\n    for _ in range(k):\n        out.append(heapq.heappop(heap)[1])\n\
    \    return out\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr__ebv0u.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpr__ebv0u.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpr__ebv0u.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpr__ebv0u.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = [-x for x in arr[:k]]\n    heapq.heapify(heap)\n    for i in range(k,\
    \ len(arr)):\n        if arr[i] > -heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, -arr[i])\n    return [-x for x in heap]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyeudthgg.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpyeudthgg.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpyeudthgg.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpyeudthgg.py\"\
    , line 29, in maximum\n    heapq.heapify(heap)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\nprint(maximum([-3, -4, 5], 3))\nprint(maximum([4,\
    \ -4, 4], 2))\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: "[5, -3, -4]\n[4, 4]\n[2]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1amymvd5.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp1amymvd5.py\", line 47,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1amymvd5.py\", line 34,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeovtlbvc.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpeovtlbvc.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpeovtlbvc.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ ans = heapq.nlargest(k, arr)\n    return ans\n\n\ndef check(candidate):\n  \
    \  assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy886yem2.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpy886yem2.py\", line 46,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpy886yem2.py\", line 33,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpy886yem2.py\"\
    , line 28, in maximum\n    ans = heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb6d5re1q.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpb6d5re1q.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpb6d5re1q.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp89jg1veh.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp89jg1veh.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp89jg1veh.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == len(arr):\n        return arr\n    else:\n        nums = list(Counter(arr).items())\n\
    \        nums.sort(key=lambda t: t[1], reverse=True)\n        return [n[0] for\
    \ n in nums[:k]]\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpozb94p0i.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpozb94p0i.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpozb94p0i.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkuqoy12.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpzkuqoy12.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzkuqoy12.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8ws5ii_.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpp8ws5ii_.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpp8ws5ii_.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, -num)\n    return\
    \ sorted([-heapq.heappop(heap) for _ in range(k)])\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4fxyxxn8.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp4fxyxxn8.py\", line 47,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4fxyxxn8.py\", line 34,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp4fxyxxn8.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, -num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt88u5_l2.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpt88u5_l2.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpt88u5_l2.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    elif k >= len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    else:\n        out = []\n        while len(out) < k:\n  \
    \          mx = max(arr)\n            arr.remove(mx)\n            out.append(mx)\n\
    \        return out\n\ndef check(candidate):\n    assert candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkpei32d1.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpkpei32d1.py\", line 54,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpkpei32d1.py\", line 41,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\nprint(maximum([-3, -4, 5], 3))\nprint(maximum([4,\
    \ -4, 4], 2))\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: "[-4, -3, 5]\n[4, 4]\n[2]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa2wbbyv2.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpa2wbbyv2.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpa2wbbyv2.py\", line 45,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppwa6v_lb.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmppwa6v_lb.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppwa6v_lb.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ queue = []\n    for i in range(len(arr)):\n        while queue and arr[i] >\
    \ queue[-1]:\n            queue.pop()\n        queue.append(arr[i])\n        if\
    \ len(queue) > k:\n            queue.pop(0)\n    return queue\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp86j29t8g.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp86j29t8g.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp86j29t8g.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heapq.heapify(arr)\n    return heapq.nlargest(k, arr)\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6_t97ue.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpz6_t97ue.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpz6_t97ue.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpz6_t97ue.py\"\
    , line 28, in maximum\n    heapq.heapify(arr)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ # Reference: https://stackoverflow.com/questions/6193498/pythonic-way-to-find-maximum-value-and-its-index-in-a-list\n\
    \    return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2b27zew6.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp2b27zew6.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2b27zew6.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp9j2z67v.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpp9j2z67v.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpp9j2z67v.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ from heapq import heappush, heappop\n    from collections import defaultdict\n\
    \n    h = []\n    m = defaultdict(list)\n    for a in arr:\n        m[a].append(a)\n\
    \        heappush(h, a)\n        if len(h) > k:\n            min_ = heappop(h)\n\
    \            m[min_].pop()\n            if not m[min_]:\n                del m[min_]\n\
    \n    return m[max(m)]\n\n\ndef check(candidate):\n    assert candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb85srv9v.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpb85srv9v.py\", line 59,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpb85srv9v.py\", line 46,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        if not heap or heap[0] < num:\n    \
    \        heapq.heappush(heap, num)\n            if len(heap) > k:\n          \
    \      heapq.heappop(heap)\n    return heap\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppt4fucab.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmppt4fucab.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppt4fucab.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmppt4fucab.py\"\
    , line 31, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    heapq.heapify(heap)\n\n    for el in arr:\n        heapq.heappush(heap,\
    \ -el)\n\n    res = []\n    for _ in range(k):\n        res.append(-heapq.heappop(heap))\n\
    \n    return res\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk6i3mg7k.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpk6i3mg7k.py\", line 53,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpk6i3mg7k.py\", line 40,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpk6i3mg7k.py\"\
    , line 29, in maximum\n    heapq.heapify(heap)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpevtn709u.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpevtn709u.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpevtn709u.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiqzenk7k.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpiqzenk7k.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpiqzenk7k.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvvq5gc7.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpqvvq5gc7.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqvvq5gc7.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heapq.heapify(arr)\n    return heapq.nlargest(k, arr)\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1msdrb7c.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp1msdrb7c.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1msdrb7c.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp1msdrb7c.py\"\
    , line 28, in maximum\n    heapq.heapify(arr)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvvt4n5q.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmphvvt4n5q.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmphvvt4n5q.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ # Base case\n    if len(arr) == k:\n        return arr\n\n    heap = []\n  \
    \  i = 0\n    while i < k:\n        heappush(heap, arr[i])\n        i += 1\n\n\
    \    while i < len(arr):\n        if arr[i] > heap[0]:\n            heappop(heap)\n\
    \            heappush(heap, arr[i])\n        i += 1\n\n    return heap\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2pj1a2t.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmp_2pj1a2t.py\", line 59,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_2pj1a2t.py\", line 46,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkmmfw98a.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpkmmfw98a.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpkmmfw98a.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpouh6xk7i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpouh6xk7i.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpouh6xk7i.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if not arr:\n        return arr\n    heap = [-num for num in arr[:k]]\n    heapq.heapify(heap)\n\
    \    for i in range(k, len(arr)):\n        if arr[i] > -heap[0]:\n           \
    \ heapq.heappop(heap)\n            heapq.heappush(heap, -arr[i])\n    return [-heapq.heappop(heap)\
    \ for _ in range(k)]\ndef check(candidate):\n    assert candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwh_7ev3.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpfwh_7ev3.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpfwh_7ev3.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpfwh_7ev3.py\"\
    , line 31, in maximum\n    heapq.heapify(heap)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpazf6i4ow.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpazf6i4ow.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpazf6i4ow.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfzb3hol.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpzfzb3hol.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzfzb3hol.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ tmp = []\n    heapq.heapify(tmp)\n    for i in arr:\n        heapq.heappush(tmp,\
    \ -i)\n    res = []\n    for _ in range(k):\n        res.append(-heapq.heappop(tmp))\n\
    \    return res\n\narr1 = [-3, -4, 5]\nk1 = 3\nprint(maximum(arr1, k1))\n\narr2\
    \ = [4, -4, 4]\nk2 = 2\nprint(maximum(arr2, k2))\n\narr3 = [-3, 2, 1, 2, -1, -2,\
    \ 1]\nk3 = 1\nprint(maximum(arr3, k3))\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvwq1q6r_.py\", line\
    \ 39, in <module>\n    print(maximum(arr1, k1))\n  File \"/tmp/tmpvwq1q6r_.py\"\
    , line 29, in maximum\n    heapq.heapify(tmp)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        heappush(heap, -num)\n        if len(heap)\
    \ > k:\n            heappop(heap)\n    return sorted([-heappop(heap) for _ in\
    \ range(k)])\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxnkqdf76.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpxnkqdf76.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpxnkqdf76.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpxnkqdf76.py\"\
    , line 30, in maximum\n    heappush(heap, -num)\nNameError: name 'heappush' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2c4oneec.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp2c4oneec.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2c4oneec.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ ret = []\n    for idx, val in enumerate(arr):\n        while ret and val > ret[-1]\
    \ and len(ret) + len(arr) - idx > k:\n            ret.pop()\n        if len(ret)\
    \ < k:\n            ret.append(val)\n    return ret\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpovb5270v.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpovb5270v.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpovb5270v.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr = sorted(arr)\n    return arr[-k:]\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqo_u5m_n.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpqo_u5m_n.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqo_u5m_n.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ h = []\n    for num in arr:\n        heapq.heappush(h, num)\n        if len(h)\
    \ > k:\n            heapq.heappop(h)\n    return h\n\narr = [-3, -4, 5]\nk = 3\n\
    \nprint(maximum(arr, k))\ndef check(candidate):\n    assert candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd2ujm9sz.py\", line\
    \ 38, in <module>\n    print(maximum(arr, k))\n  File \"/tmp/tmpd2ujm9sz.py\"\
    , line 30, in maximum\n    heapq.heappush(h, num)\nNameError: name 'heapq' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n        if\
    \ len(heap) > k:\n            heapq.heappop(heap)\n    return heap\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbgi7cwhv.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpbgi7cwhv.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbgi7cwhv.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpbgi7cwhv.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxyzd7u37.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpxyzd7u37.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpxyzd7u37.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ h = sorted(arr, reverse=True)[:k]\n    return sorted(h)\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, (-num, num))\n\
    \    res = []\n    for _ in range(k):\n        res.append(heapq.heappop(heap)[1])\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp38uxzszv.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp38uxzszv.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp38uxzszv.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp38uxzszv.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return heapq.nlargest(k, arr)\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx9v_nqdx.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpx9v_nqdx.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx9v_nqdx.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpx9v_nqdx.py\"\
    , line 28, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = Heap()\n    for num in arr:\n        heap.push(num)\n    return heap.sort()\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5oscwrus.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp5oscwrus.py\", line 47,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5oscwrus.py\", line 34,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp5oscwrus.py\"\
    , line 28, in maximum\n    heap = Heap()\nNameError: name 'Heap' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpclpdsink.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpclpdsink.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpclpdsink.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx015phf.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmppx015phf.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppx015phf.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzbk2c05m.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzbk2c05m.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzbk2c05m.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl23a3ffo.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpl23a3ffo.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpl23a3ffo.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpst8nf98u.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpst8nf98u.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpst8nf98u.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0hf5d345.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp0hf5d345.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0hf5d345.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9jdtaiqj.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp9jdtaiqj.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp9jdtaiqj.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdt1sslv.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpxdt1sslv.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpxdt1sslv.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpukm87e4h.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpukm87e4h.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpukm87e4h.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnj9pnunj.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpnj9pnunj.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpnj9pnunj.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpge44ngft.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpge44ngft.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpge44ngft.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqlaby304.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpqlaby304.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqlaby304.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pq = []\n    for num in arr:\n        heappush(pq, -num)\n        if len(pq)\
    \ > k:\n            heappop(pq)\n    return sorted([-heappop(pq) for _ in range(k)])\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9p_dt7ui.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp9p_dt7ui.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp9p_dt7ui.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp9p_dt7ui.py\"\
    , line 30, in maximum\n    heappush(pq, -num)\nNameError: name 'heappush' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ c = Counter(arr)\n    c = c.most_common()\n    return [c[i][0] for i in range(k)]\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjhbtu_pq.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpjhbtu_pq.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpjhbtu_pq.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpjhbtu_pq.py\"\
    , line 28, in maximum\n    c = Counter(arr)\nNameError: name 'Counter' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if not arr:\n        return arr\n    elif k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    ans = [float('-inf')] * k\n    for num in arr:\n        if\
    \ num > ans[0]:\n            ans[0] = num\n            ans.sort(reverse=True)\n\
    \    return ans\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplu572_gt.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmplu572_gt.py\", line 53,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmplu572_gt.py\", line 40,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n        if\
    \ len(heap) > k:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxoipzhdw.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpxoipzhdw.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpxoipzhdw.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpxoipzhdw.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp773dfj1i.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp773dfj1i.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp773dfj1i.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n  \
    \  for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, arr[i])\n    return heap\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf2hrcdmy.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpf2hrcdmy.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpf2hrcdmy.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpf2hrcdmy.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpib6_n7vr.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpib6_n7vr.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpib6_n7vr.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k > len(arr):\n        raise Exception(\"k must be less than or equal to\
    \ the length of arr\")\n\n    heap = Heap(arr)\n    heap.build_max_heap()\n  \
    \  return heap.heap_sort(k)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7oerrby3.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp7oerrby3.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7oerrby3.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp7oerrby3.py\"\
    , line 31, in maximum\n    heap = Heap(arr)\nNameError: name 'Heap' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3grvde7z.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp3grvde7z.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3grvde7z.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    else:\n        heap = []\n        for i in\
    \ range(len(arr)):\n            if len(heap) < k:\n                heapq.heappush(heap,\
    \ arr[i])\n            else:\n                heapq.heappushpop(heap, arr[i])\n\
    \        return sorted(heap, reverse=True)\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpky56nu8k.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpky56nu8k.py\", line 52,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpky56nu8k.py\", line 39,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpky56nu8k.py\"\
    , line 34, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return heapq.nlargest(k, arr)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpykv7057d.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpykv7057d.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpykv7057d.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpykv7057d.py\"\
    , line 28, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k, arr)\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxc9b5m4r.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpxc9b5m4r.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpxc9b5m4r.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpxc9b5m4r.py\"\
    , line 29, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if not arr:\n        return []\n    if len(arr) == 1 or k == 1:\n        return\
    \ arr\n    elif k >= len(arr):\n        return sorted(arr, reverse=True)\n   \
    \ else:\n        return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3k3jzbdi.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp3k3jzbdi.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3k3jzbdi.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpizy2n7r8.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpizy2n7r8.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpizy2n7r8.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4gvxa136.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp4gvxa136.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4gvxa136.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprlmwjjjj.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmprlmwjjjj.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmprlmwjjjj.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ length = len(arr)\n    assert length >= k\n\n    h = []\n    for i in range(k):\n\
    \        heapq.heappush(h, (-arr[i], i))\n\n    for i in range(k, length):\n \
    \       if arr[i] > -h[0][0]:\n            heapq.heappop(h)\n            heapq.heappush(h,\
    \ (-arr[i], i))\n\n    return [-x[0] for x in h]\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpajvqphmw.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpajvqphmw.py\", line 55,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpajvqphmw.py\", line 42,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpajvqphmw.py\"\
    , line 33, in maximum\n    heapq.heappush(h, (-arr[i], i))\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == len(arr):\n        return arr\n    heapq.heapify(arr)\n    for _ in\
    \ range(len(arr) - k):\n        heapq.heappop(arr)\n    return heapq.nlargest(k,\
    \ arr)\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp122cfvr6.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp122cfvr6.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp122cfvr6.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heapify(arr)\n    return [heappop(arr) for _ in range(k)]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphp0mg4rb.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmphp0mg4rb.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmphp0mg4rb.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmphp0mg4rb.py\"\
    , line 28, in maximum\n    heapify(arr)\nNameError: name 'heapify' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        if len(heap) == k:\n            heapq.heappushpop(heap,\
    \ num)\n        else:\n            heapq.heappush(heap, num)\n    \n    return\
    \ heapq.nlargest(k, heap)\ndef check(candidate):\n    assert candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_exy52dp.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp_exy52dp.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_exy52dp.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp_exy52dp.py\"\
    , line 33, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqeab2i0.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpgqeab2i0.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpgqeab2i0.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplq2f8v3_.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmplq2f8v3_.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmplq2f8v3_.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if not arr:\n        return []\n    # return sorted(arr, reverse=True)[:k]\n\
    \    # import heapq\n    # return heapq.nlargest(k, arr)\n    nums = sorted(arr,\
    \ reverse=True)\n    return nums[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvn67zpyz.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpvn67zpyz.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvn67zpyz.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return heapq.nlargest(k, arr)\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx9cqsx9p.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpx9cqsx9p.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx9cqsx9p.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpx9cqsx9p.py\"\
    , line 28, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ max_queue = MaxHeap()\n    min_queue = MinHeap()\n\n    for x in arr:\n    \
    \    max_queue.add(x)\n        min_queue.add(x)\n\n    for _ in range(k):\n  \
    \      max_queue.pop()\n        min_queue.pop()\n\n    return sorted(max_queue._array,\
    \ reverse=True)\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2eqdi718.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmp2eqdi718.py\", line 55,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2eqdi718.py\", line 42,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp2eqdi718.py\"\
    , line 28, in maximum\n    max_queue = MaxHeap()\nNameError: name 'MaxHeap' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz4rejqsj.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpz4rejqsj.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpz4rejqsj.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heapq.heapify(arr)\n    return heapq.nlargest(k, arr)\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsfecsxto.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpsfecsxto.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpsfecsxto.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpsfecsxto.py\"\
    , line 28, in maximum\n    heapq.heapify(arr)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7d604ldu.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp7d604ldu.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7d604ldu.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprl8yj7s0.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmprl8yj7s0.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmprl8yj7s0.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr = sorted(arr, reverse=True)\n    return arr[:k]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6pcb6gx.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpi6pcb6gx.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpi6pcb6gx.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3cquy8lz.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp3cquy8lz.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3cquy8lz.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = arr[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n\
    \        heapq.heappushpop(heap, arr[i])\n    return sorted(heap, reverse=True)\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2suib5bl.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp2suib5bl.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2suib5bl.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp2suib5bl.py\"\
    , line 29, in maximum\n    heapq.heapify(heap)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ntog420.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp4ntog420.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4ntog420.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ length = len(arr)\n    if k >= length:\n        return sorted(arr, reverse=True)\n\
    \    else:\n        return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpujxcyaug.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpujxcyaug.py\", line 47,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpujxcyaug.py\", line 34,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ for i in range(k):\n        # print(f\"len(arr): {len(arr)}\")\n        mx =\
    \ i\n        for j in range(i+1, len(arr)):\n            if arr[j] > arr[mx]:\n\
    \                mx = j\n        arr[i], arr[mx] = arr[mx], arr[i]\n    return\
    \ arr[:k]\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0mquialh.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp0mquialh.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0mquialh.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return arr\n\n\nassert(maximum([-3, -4, 5], 3) == [-4, -3, 5])\nassert(maximum([4,\
    \ -4, 4], 2) == [4, 4])\nassert(maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_dam2wx0.py\", line\
    \ 31, in <module>\n    assert(maximum([-3, -4, 5], 3) == [-4, -3, 5])\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ # Create a heap and add first k numbers to it\n    h = heapq.heapify(arr[:k])\n\
    \n    # Loop through the rest of the elements\n    for i in range(k, len(arr)):\n\
    \        # Compare the next element to the heap's max\n        if arr[i] > h[0]:\n\
    \            # If next element is greater than max, pop max and insert new element\
    \ into heap\n            heapq.heappop(h)\n            heapq.heappush(h, arr[i])\n\
    \n    # Return the heap and turn it into a list\n    return list(h)\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj218h3s2.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpj218h3s2.py\", line 55,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpj218h3s2.py\", line 42,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpj218h3s2.py\"\
    , line 29, in maximum\n    h = heapq.heapify(arr[:k])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr = sorted(arr, reverse=True)\n    return arr[:k]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpag9nzydx.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpag9nzydx.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpag9nzydx.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw9cr1z68.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpw9cr1z68.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpw9cr1z68.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ftj7g5y.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp6ftj7g5y.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp6ftj7g5y.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpegw8fqy3.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpegw8fqy3.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpegw8fqy3.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    ret = []\n\n    for x in arr:\n        heapq.heappush(heap, x)\n\
    \n    while len(ret) < k:\n        ret.append(heapq.heappop(heap))\n\n    return\
    \ ret\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5qgqva48.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp5qgqva48.py\", line 53,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5qgqva48.py\", line 40,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp5qgqva48.py\"\
    , line 32, in maximum\n    heapq.heappush(heap, x)\nNameError: name 'heapq' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhb13z5e.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpfhb13z5e.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpfhb13z5e.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == len(arr):\n        return arr\n    heap = []\n    for i in range(k):\n\
    \        heapq.heappush(heap, -arr[i])\n    for i in range(k, len(arr)):\n   \
    \     if -arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ -arr[i])\n    return sorted([-h for h in heap])\ndef check(candidate):\n   \
    \ assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5alnxey1.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp5alnxey1.py\", line 52,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5alnxey1.py\", line 39,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ n = len(arr)\n    if k >= n:\n        return sorted(arr)\n    else:\n      \
    \  heap = []\n        for i in range(k):\n            heapq.heappush(heap, (-arr[i],\
    \ i))\n        for i in range(k, n):\n            _, key = heap[0]\n         \
    \   if arr[i] > arr[key]:\n                heapq.heappop(heap)\n             \
    \   heapq.heappush(heap, (-arr[i], i))\n        return sorted([-heapq.heappop(heap)[0]\
    \ for _ in range(k)])\ndef check(candidate):\n    assert candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_tj921cv.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmp_tj921cv.py\", line 55,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_tj921cv.py\", line 43,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\n  File \"/tmp/tmp_tj921cv.py\"\
    , line 34, in maximum\n    heapq.heappush(heap, (-arr[i], i))\nNameError: name\
    \ 'heapq' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    res = []\n\n    for e in arr:\n        heapq.heappush(heap, e)\n\
    \n    while len(res) < k:\n        res.append(heapq.heappop(heap))\n\n    return\
    \ res\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgjvyuzdo.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpgjvyuzdo.py\", line 53,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpgjvyuzdo.py\", line 40,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpgjvyuzdo.py\"\
    , line 32, in maximum\n    heapq.heappush(heap, e)\nNameError: name 'heapq' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiyg7oevi.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpiyg7oevi.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpiyg7oevi.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcqfv07wt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpcqfv07wt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpcqfv07wt.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ hs = []\n    for elem in arr:\n        hs.append((elem, id(elem)))\n    heapq.heapify(hs)\n\
    \    res = []\n    for _ in range(k):\n        res.append(heapq.heappop(hs)[0])\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjb674rng.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpjb674rng.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpjb674rng.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpjb674rng.py\"\
    , line 31, in maximum\n    heapq.heapify(hs)\nNameError: name 'heapq' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv5fm8jam.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpv5fm8jam.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpv5fm8jam.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    arr.sort()\n    if k == len(arr):\n     \
    \   return arr\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp54gxazxt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp54gxazxt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp54gxazxt.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo0mui6s5.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpo0mui6s5.py\", line 46,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpo0mui6s5.py\", line 33,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95lk_gel.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp95lk_gel.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp95lk_gel.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ from heapq import heapify, heappop\n    heap = arr[:k]\n    heapify(heap)\n\
    \    for v in arr[k:]:\n        if v > heap[0]:\n            heappop(heap)\n \
    \           heap.append(v)\n            heapify(heap)\n    return heap\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3qqvtbrc.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp3qqvtbrc.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3qqvtbrc.py\", line 41,\
    \ in check\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fn2rctn.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp8fn2rctn.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fn2rctn.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if not arr:\n        return []\n    else:\n        heapq.heapify(arr)\n    \
    \    return heapq.nlargest(k, arr)\n\nassert maximum([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\nassert maximum([4, -4, 4], 2) == [4, 4]\nassert maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\ndef check(candidate):\n    assert candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprrmchybk.py\", line\
    \ 34, in <module>\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"\
    /tmp/tmprrmchybk.py\", line 31, in maximum\n    heapq.heapify(arr)\nNameError:\
    \ name 'heapq' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[::-1][:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_5nebvw.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpg_5nebvw.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpg_5nebvw.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ n = len(arr)\n    if n <= k:\n        return sorted(arr, reverse=True)\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp991tykgg.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp991tykgg.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp991tykgg.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8981v9z.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpc8981v9z.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpc8981v9z.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ n = len(arr)\n    pq = []\n    for x in arr:\n        heapq.heappush(pq, x)\n\
    \        if len(pq) > k:\n            heapq.heappop(pq)\n    res = [heapq.heappop(pq)\
    \ for _ in range(k)]\n    return res[::-1]\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp02b2_98d.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp02b2_98d.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp02b2_98d.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp02b2_98d.py\"\
    , line 31, in maximum\n    heapq.heappush(pq, x)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ queue = [(-v, i) for i, v in enumerate(arr)]\n    heapq.heapify(queue)\n   \
    \ return [heapq.heappop(queue)[1] for _ in range(k)]\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyb11gf3h.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpyb11gf3h.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpyb11gf3h.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpyb11gf3h.py\"\
    , line 29, in maximum\n    heapq.heapify(queue)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr02hnjqt.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpr02hnjqt.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpr02hnjqt.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if not arr:\n        return []\n    if len(arr) == 1:\n        return arr\n\
    \    if k == len(arr):\n        return sorted(arr, reverse=True)\n    stack =\
    \ []\n    for i in range(k):\n        stack.append(arr[i])\n    for i in range(k,\
    \ len(arr)):\n        stack.append(arr[i])\n        for j in range(k):\n     \
    \       stack.pop()\n    return sorted(stack, reverse=True)\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8amc2j2w.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmp8amc2j2w.py\", line 57,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8amc2j2w.py\", line 44,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptdo0a3f9.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmptdo0a3f9.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmptdo0a3f9.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_i9y04mp.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp_i9y04mp.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_i9y04mp.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return arr\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6795wgxd.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp6795wgxd.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp6795wgxd.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heapq.heapify(arr)\n    return heapq.nlargest(k, arr)\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwym94z4v.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpwym94z4v.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwym94z4v.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwym94z4v.py\"\
    , line 28, in maximum\n    heapq.heapify(arr)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, (-num, num))\n\
    \        if len(heap) > k:\n            heapq.heappop(heap)\n    return [tup[1]\
    \ for tup in heap]\n\nprint(maximum([4, -4, 4], 2))\ndef check(candidate):\n \
    \   assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphbqqz3z0.py\", line\
    \ 35, in <module>\n    print(maximum([4, -4, 4], 2))\n  File \"/tmp/tmphbqqz3z0.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirqwof8v.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpirqwof8v.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpirqwof8v.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ import heapq\n    output = []\n    for i in arr:\n        heapq.heappush(output,\
    \ -i)\n        if len(output) > k:\n            heapq.heappop(output)\n    return\
    \ [-i for i in heapq.nlargest(k, output)]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3s2gsrjb.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp3s2gsrjb.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3s2gsrjb.py\", line 37,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu1wlsiks.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpu1wlsiks.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpu1wlsiks.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr = sorted(arr, reverse=True)\n    return arr[:k]\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_ztrye_.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpm_ztrye_.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpm_ztrye_.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = Heap(arr)\n    heap.build_max_heap()\n    max_items = []\n    for i in\
    \ range(k):\n        max_items.append(heap.extract_max())\n    return max_items\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5yvhdvj5.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp5yvhdvj5.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5yvhdvj5.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp5yvhdvj5.py\"\
    , line 28, in maximum\n    heap = Heap(arr)\nNameError: name 'Heap' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    arr.reverse()\n    return arr[:k]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnfg6_6br.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpnfg6_6br.py\", line 46,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpnfg6_6br.py\", line 33,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ res = sorted(arr, reverse=True)\n    return res[:k]\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqbaqu6h.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpjqbaqu6h.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpjqbaqu6h.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ # create a heap\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap,\
    \ arr[i])\n\n    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n\
    \            heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n\n\
    \    return sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqemontqq.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpqemontqq.py\", line 54,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqemontqq.py\", line 41,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpqemontqq.py\"\
    , line 31, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplyp0thl2.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmplyp0thl2.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmplyp0thl2.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ # heapq.nlargest(k, arr)\n    heapq.heapify(arr)\n    return heapq.nlargest(k,\
    \ arr)\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9v06bs_h.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp9v06bs_h.py\", line 46,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp9v06bs_h.py\", line 33,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp9v06bs_h.py\"\
    , line 29, in maximum\n    heapq.heapify(arr)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4u_jdr2.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpj4u_jdr2.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpj4u_jdr2.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr = list(set(arr))\n    return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgt36a8tm.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpgt36a8tm.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpgt36a8tm.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcxgp45zi.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpcxgp45zi.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpcxgp45zi.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ i = 0\n    if k == len(arr):\n        return arr\n    while i <= len(arr) -\
    \ k:\n        j = i\n        max_idx = i\n        while j < len(arr) - k + 1:\n\
    \            if arr[j] > arr[max_idx]:\n                max_idx = j\n        \
    \    j += 1\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        i +=\
    \ 1\n    return arr[-k:]\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp253t959q.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmp253t959q.py\", line 57,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp253t959q.py\", line 44,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeo_texvm.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpeo_texvm.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpeo_texvm.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[::-1][:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6dixq79a.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp6dixq79a.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp6dixq79a.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    print(arr)\n    return arr[-k:]\n\ndef check(candidate):\n \
    \   assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: "[-4, -3, 5]\n[-4, 4, 4]\n[-3, -2, -1, 1, 1, 2, 2]\n[-123, -3, 0, 1, 2,\
    \ 20, 123]\n[-123, -3, 0, 1, 2, 20]\n[-13, -8, 0, 0, 3, 5, 15]\n[-10, -1, 0, 2,\
    \ 3, 5]\n[-7, 0, 1, 5]\n[-4, 4]\n[-10, 10]\n[-400, -23, 0, 1, 2, 3, 243]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0ignsnw.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpy0ignsnw.py\", line 46,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpy0ignsnw.py\", line 43,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if not arr:\n        return arr\n    if k == 0:\n        return []\n    else:\n\
    \        heap = [-float('inf')] * k\n        for num in arr:\n            if num\
    \ > heap[0]:\n                heapq.heappushpop(heap, num)\n        return heap\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvz4mvd2f.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpvz4mvd2f.py\", line 53,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvz4mvd2f.py\", line 40,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpvz4mvd2f.py\"\
    , line 36, in maximum\n    heapq.heappushpop(heap, num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvs3fhcre.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpvs3fhcre.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvs3fhcre.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n        if\
    \ len(heap) > k:\n            heapq.heappop(heap)\n    return heapq.nlargest(k,\
    \ heap)\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp30tkdht2.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp30tkdht2.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp30tkdht2.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp30tkdht2.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ n = len(arr)\n    def partition(left: int, right: int, pivot: int) -> int:\n\
    \        val = arr[pivot]\n        arr[pivot], arr[right] = arr[right], arr[pivot]\n\
    \        store_index = left\n        for i in range(left, right):\n          \
    \  if arr[i] < val:\n                arr[store_index], arr[i] = arr[i], arr[store_index]\n\
    \                store_index += 1\n        arr[right], arr[store_index] = arr[store_index],\
    \ arr[right]\n        return store_index\n\n    def select(left: int, right: int,\
    \ k_smallest: int) -> int:\n        if left == right:\n            return left\n\
    \        pivot_index = random.randint(left, right)\n        pivot_index = partition(left,\
    \ right, pivot_index)\n        if k_smallest == pivot_index:\n            return\
    \ k_smallest\n        elif k_smallest < pivot_index:\n            return select(left,\
    \ pivot_index - 1, k_smallest)\n        else:\n            return select(pivot_index\
    \ + 1, right, k_smallest)\n\n    return sorted(arr[select(0, n - 1, n - k):],\
    \ reverse=True)\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33yc22pc.py\", line\
    \ 69, in <module>\n    test_check()\n  File \"/tmp/tmp33yc22pc.py\", line 67,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp33yc22pc.py\", line 54,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp33yc22pc.py\"\
    , line 52, in maximum\n    return sorted(arr[select(0, n - 1, n - k):], reverse=True)\n\
    \  File \"/tmp/tmp33yc22pc.py\", line 43, in select\n    pivot_index = random.randint(left,\
    \ right)\nNameError: name 'random' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplgyy6r_7.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmplgyy6r_7.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmplgyy6r_7.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpppndwj2b.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpppndwj2b.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpppndwj2b.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ sort_arr = sorted(arr, reverse=True)\n    return sort_arr[:k]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppbj46xhf.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmppbj46xhf.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppbj46xhf.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\nprint(maximum([-3, -4, 5], 3))\nprint(maximum([4,\
    \ -4, 4], 2))\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: "[5, -3, -4]\n[4, 4]\n[2]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe6a52_f8.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpe6a52_f8.py\", line 47,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe6a52_f8.py\", line 34,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ queue = []\n    for i in range(len(arr)):\n        if i < k:\n            heapq.heappush(queue,\
    \ arr[i])\n        else:\n            heapq.heappushpop(queue, arr[i])\n    return\
    \ sorted(queue, reverse=True)\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwrztkpjx.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpwrztkpjx.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwrztkpjx.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwrztkpjx.py\"\
    , line 31, in maximum\n    heapq.heappush(queue, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqenkjtsd.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpqenkjtsd.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqenkjtsd.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ #return heapq.nlargest(k, arr)\n    heapq.heapify(arr)\n    return [heapq.heappop(arr)\
    \ for _ in range(k)]\n\nprint(maximum([-3, -4, 5], 3))\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoefiraka.py\", line\
    \ 32, in <module>\n    print(maximum([-3, -4, 5], 3))\n  File \"/tmp/tmpoefiraka.py\"\
    , line 29, in maximum\n    heapq.heapify(arr)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ res = sorted(arr, reverse=True)\n    return res[:k]\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpotlmyidr.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpotlmyidr.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpotlmyidr.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[::-1][:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa35a9i7f.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpa35a9i7f.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpa35a9i7f.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ # Sliding window\n    i = 0\n    for j in range(k, len(arr)):\n        if arr[j]\
    \ > arr[i]:\n            i = j\n            continue\n        elif arr[j] < arr[i]:\n\
    \            i += 1\n    return arr[:i] + arr[j-k+1:j+1]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp26gdtjzh.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp26gdtjzh.py\", line 52,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp26gdtjzh.py\", line 39,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp26gdtjzh.py\"\
    , line 36, in maximum\n    return arr[:i] + arr[j-k+1:j+1]\nUnboundLocalError:\
    \ local variable 'j' referenced before assignment\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9pv5nze.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpi9pv5nze.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpi9pv5nze.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8eqxb6p.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpv8eqxb6p.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpv8eqxb6p.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ bucket = [[] for _ in range(1000)]\n    for n in arr:\n        bucket[-n].append(n)\n\
    \    res = []\n    for i in range(1000):\n        res.extend(bucket[i])\n    \
    \    if len(res) >= k:\n            return res[:k]\ndef check(candidate):\n  \
    \  assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dk_b08y.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp9dk_b08y.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp9dk_b08y.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1lxs89e.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmps1lxs89e.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmps1lxs89e.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpep1mn6ur.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpep1mn6ur.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpep1mn6ur.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ n = len(arr)\n    if k >= n:\n        return sorted(arr)\n    elif k == 1:\n\
    \        return [max(arr)]\n    else:\n        ans = []\n        for i in range(n):\n\
    \            if len(ans) == 0:\n                ans.append(arr[i])\n         \
    \   else:\n                while ans and ans[-1] < arr[i] and len(ans) > k-1:\n\
    \                    ans.pop()\n                if len(ans) < k:\n           \
    \         ans.append(arr[i])\n        return ans\n\ndef check(candidate):\n  \
    \  assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpopdd8yaa.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpopdd8yaa.py\", line 59,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpopdd8yaa.py\", line 49,\
    \ in check\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k >= len(arr):\n        return sorted(arr, reverse=True)\n    heap = []\n\
    \    for i in range(k):\n        heapq.heappush(heap, -arr[i])\n    for i in range(k,\
    \ len(arr)):\n        if -arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, -arr[i])\n    return [-x for x in heap]\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpykcc3y4p.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpykcc3y4p.py\", line 52,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpykcc3y4p.py\", line 39,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heapify(arr)\n    return [heappop(arr) for _ in range(k)]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4i9qi12g.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp4i9qi12g.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4i9qi12g.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp4i9qi12g.py\"\
    , line 28, in maximum\n    heapify(arr)\nNameError: name 'heapify' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ for x in range(k):\n        max_val = arr[x]\n        max_idx = x\n        for\
    \ y in range(x+1, len(arr)):\n            if arr[y] > max_val:\n             \
    \   max_val = arr[y]\n                max_idx = y\n        arr[x], arr[max_idx]\
    \ = arr[max_idx], arr[x]\n    return arr[:k]\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4apnppxz.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp4apnppxz.py\", line 52,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4apnppxz.py\", line 39,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu6mqakoh.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpu6mqakoh.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpu6mqakoh.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe1jp6h15.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpe1jp6h15.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe1jp6h15.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    elif k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    else:\n        arr = sorted(arr, reverse=True)\n        return\
    \ arr[:k]\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb_dk21hn.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpb_dk21hn.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpb_dk21hn.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ import heapq\n    heapq.heapify(arr)\n    return [heapq.heappop(arr) for _ in\
    \ range(k)]\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3pmpefc6.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp3pmpefc6.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3pmpefc6.py\", line 33,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwia888bv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpwia888bv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwia888bv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    heap = arr[:k]\n    heapq.heapify(heap)\n\
    \    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heapreplace(heap,\
    \ arr[i])\n    return sorted(heap, reverse=True)\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsr_q6m6r.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpsr_q6m6r.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpsr_q6m6r.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpsr_q6m6r.py\"\
    , line 31, in maximum\n    heapq.heapify(heap)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ # edge case\n    if k == 0:\n        return []\n\n    maximums = []\n    for\
    \ _ in range(k):\n        maximum = arr[0]\n        for element in arr:\n    \
    \        if element > maximum:\n                maximum = element\n        maximums.append(maximum)\n\
    \        arr.remove(maximum)\n    return maximums\n\ndef check(candidate):\n \
    \   assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rbpcxpv.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmp6rbpcxpv.py\", line 56,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp6rbpcxpv.py\", line 43,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp07d00evh.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp07d00evh.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp07d00evh.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpji_cp7hg.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpji_cp7hg.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpji_cp7hg.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplmm5fi40.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmplmm5fi40.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmplmm5fi40.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ max_heap = Heap(max_heap=True)\n    for num in arr:\n        max_heap.insert(num)\n\
    \        if max_heap.size() > k:\n            max_heap.pop()\n    return max_heap.get_heap()\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6kswb6v_.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp6kswb6v_.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp6kswb6v_.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp6kswb6v_.py\"\
    , line 28, in maximum\n    max_heap = Heap(max_heap=True)\nNameError: name 'Heap'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ def siftDown(i: int) -> None:\n        while 2 * i + 1 < k:\n            l =\
    \ 2 * i + 1\n            r = 2 * i + 2\n            if r < k and arr[l] < arr[r]:\n\
    \                l = r\n            if arr[i] < arr[l]:\n                arr[i],\
    \ arr[l] = arr[l], arr[i]\n                i = l\n            else:\n        \
    \        break\n\n    def siftUp(i: int) -> None:\n        while i > 0:\n    \
    \        p = (i - 1) // 2\n            if arr[p] < arr[i]:\n                arr[p],\
    \ arr[i] = arr[i], arr[p]\n                i = p\n            else:\n        \
    \        break\n\n    # build heap\n    for i in range(k // 2, -1, -1):\n    \
    \    siftDown(i)\n\n    for i in range(k, len(arr)):\n        if arr[i] > arr[0]:\n\
    \            arr[0] = arr[i]\n            siftDown(0)\n\n    return arr[:k]\n\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpapek2drq.py\", line\
    \ 77, in <module>\n    test_check()\n  File \"/tmp/tmpapek2drq.py\", line 75,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpapek2drq.py\", line 62,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ q = []\n    for e in arr:\n        heapq.heappush(q, e)\n    res = []\n    for\
    \ _ in range(k):\n        res.append(heapq.heappop(q))\n    return res\n\n\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsemum1v4.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpsemum1v4.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpsemum1v4.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpsemum1v4.py\"\
    , line 30, in maximum\n    heapq.heappush(q, e)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ max_heap = []\n    for i in range(k):\n        heapq.heappush(max_heap, (-arr[i],\
    \ arr[i]))\n    for i in range(k, len(arr)):\n        heapq.heappushpop(max_heap,\
    \ (-arr[i], arr[i]))\n    return [item[1] for item in max_heap]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2b1p22wv.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp2b1p22wv.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2b1p22wv.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp2b1p22wv.py\"\
    , line 30, in maximum\n    heapq.heappush(max_heap, (-arr[i], arr[i]))\nNameError:\
    \ name 'heapq' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ # max_k = []\n    # new_arr = []\n    # for i in range(len(arr)):\n    #   \
    \  if arr[i] not in new_arr:\n    #         new_arr.append(arr[i])\n    # new_arr.sort(reverse=True)\n\
    \    # for i in range(k):\n    #     max_k.append(new_arr[i])\n    # return max_k\n\
    \n    new_arr = sorted(arr, reverse=True)\n    return new_arr[:k]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe60q02pu.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpe60q02pu.py\", line 55,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe60q02pu.py\", line 42,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4p96pca.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp_4p96pca.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_4p96pca.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for x in arr:\n        if len(heap) < k:\n            heapq.heappush(heap,\
    \ x)\n        else:\n            heapq.heappushpop(heap, x)\n    return heap\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpchzgr6ia.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpchzgr6ia.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpchzgr6ia.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpchzgr6ia.py\"\
    , line 31, in maximum\n    heapq.heappush(heap, x)\nNameError: name 'heapq' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[len(arr)-k:]\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ result = []\n    seen = set()\n    for num in arr:\n        if num not in seen:\n\
    \            while result and num > result[-1] and len(result) >= k:\n       \
    \         result.pop()\n            if len(result) < k:\n                result.append(num)\n\
    \        seen.add(num)\n    return result\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ey1g0s6.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp7ey1g0s6.py\", line 52,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7ey1g0s6.py\", line 39,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7xwa1x2k.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp7xwa1x2k.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7xwa1x2k.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ res = []\n    for _ in range(k):\n        res.append(max(arr))\n        arr.remove(max(arr))\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo7m8gppu.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpo7m8gppu.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpo7m8gppu.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = arr[:k]\n    heapq.heapify(heap)\n    for num in arr[k:]:\n        if\
    \ num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ num)\n    return sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzhkiyavk.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpzhkiyavk.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzhkiyavk.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpzhkiyavk.py\"\
    , line 29, in maximum\n    heapq.heapify(heap)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for e in arr:\n        if len(heap) == k:\n            if e >\
    \ heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap,\
    \ e)\n        else:\n            heapq.heappush(heap, e)\n    return sorted(heap,\
    \ reverse=True)\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0lim9b9o.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp0lim9b9o.py\", line 52,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0lim9b9o.py\", line 39,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp0lim9b9o.py\"\
    , line 35, in maximum\n    heapq.heappush(heap, e)\nNameError: name 'heapq' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpouqrz0mz.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpouqrz0mz.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpouqrz0mz.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupwrb9yp.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpupwrb9yp.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpupwrb9yp.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ sorted_arr = sorted(arr, reverse=True)\n    return sorted_arr[:k]\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpun5x7kiw.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpun5x7kiw.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpun5x7kiw.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplo4vk_4n.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmplo4vk_4n.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmplo4vk_4n.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ res = []\n    num_hash = {i:[] for i in range(1001)}\n    for i in arr:\n  \
    \      num_hash[abs(i)].append(i)\n    for key in sorted(num_hash.keys(), reverse=True):\n\
    \        while num_hash[key] and k:\n            res.append(num_hash[key].pop())\n\
    \            k -= 1\n        if not k:\n            break\n    return res\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8lbkxdpo.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp8lbkxdpo.py\", line 53,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8lbkxdpo.py\", line 40,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heapq.heapify(arr)\n    # return heapq.nlargest(k, arr)\n\n    largest_nums\
    \ = []\n    for _ in range(k):\n        largest_nums.append(heapq.heappop(arr))\n\
    \n    return largest_nums\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3c_k8bgs.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp3c_k8bgs.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3c_k8bgs.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp3c_k8bgs.py\"\
    , line 28, in maximum\n    heapq.heapify(arr)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzp4e1eha.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzp4e1eha.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzp4e1eha.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ ans = [0] * k\n    for i in range(k):\n        ans[i] = max(arr)\n        arr.remove(max(arr))\n\
    \    return ans\n\nprint(maximum([4, -4, 4], 2))\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: "[4, 4]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnhl4o3sj.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpnhl4o3sj.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpnhl4o3sj.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdrazwe3b.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpdrazwe3b.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpdrazwe3b.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ # Solution 1\n    return sorted(arr, reverse=True)[:k]\n\n    # Solution 2\n\
    \    heap = arr[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n\
    \        if arr[i] > heap[0]:\n            heapq.heapreplace(heap, arr[i])\n \
    \   return sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwl2ujx87.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpwl2ujx87.py\", line 53,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwl2ujx87.py\", line 40,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
