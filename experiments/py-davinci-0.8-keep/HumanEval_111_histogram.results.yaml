name: HumanEval_111_histogram
language: py
results:
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    d = {}\n    for char in test.split():\n        d[char]\
    \ = d.get(char, 0) + 1\n    r = {}\n    m = max(d.values())\n    for k, v in d.items():\n\
    \        if v == m:\n            r[k] = v\n    return r\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpav4g9jyf.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpav4g9jyf.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpav4g9jyf.py\", line 33,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpav4g9jyf.py\",\
    \ line 20, in histogram\n    m = max(d.values())\nValueError: max() arg is an\
    \ empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    d = {}\n    test = test.lower()\n    test = test.split()\n\
    \    for i in test:\n        if i in d:\n            d[i] += 1\n        else:\n\
    \            d[i] = 1\n    return d\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvplb3lbb.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvplb3lbb.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpvplb3lbb.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    words = test.split(' ')\n    counts = {}\n    for w\
    \ in words:\n        counts[w] = counts.get(w, 0) + 1\n    return counts\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwb5qcjt0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpwb5qcjt0.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpwb5qcjt0.py\", line 24,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    freq = {}\n    for word in test.split():\n        if\
    \ word in freq:\n            freq[word] += 1\n        else:\n            freq[word]\
    \ = 1\n    max_count = max(freq.values())\n    return {key: value for key, value\
    \ in freq.items() if value == max_count}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc0wedgur.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpc0wedgur.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpc0wedgur.py\", line 32,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpc0wedgur.py\",\
    \ line 22, in histogram\n    max_count = max(freq.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # iterate through each letter and add to count if new,\
    \ otherwise increment count\n    # iterate through each letter and count and return\
    \ all that are max\n    letters = dict()\n    l = test.split(' ')\n    for letter\
    \ in l:\n        if letter in letters:\n            letters[letter] += 1\n   \
    \     else:\n            letters[letter] = 1\n    max_letters = dict()\n    for\
    \ letter in letters:\n        if letters[letter] == max(letters.values()):\n \
    \           max_letters[letter] = letters[letter]\n    return max_letters\n\n\
    print(histogram('a b c'))\nprint(histogram('a b b a'))\nprint(histogram('a b c\
    \ a b'))\nprint(histogram('b b b b a'))\nprint(histogram(''))\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2}\n{'a': 2, 'b': 2}\n{'b': 4}\n\
    {'': 1}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp56z_t450.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp56z_t450.py\", line 47,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp56z_t450.py\", line 43,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # TODO: Implement me\n    return dict()\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjsukm4az.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpjsukm4az.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpjsukm4az.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    h = {}\n    for l in test.split():\n        if l in\
    \ h:\n            h[l] += 1\n        else:\n            h[l] = 1\n    maximum\
    \ = max(h.values())\n    return {k: v for k, v in h.items() if v == maximum}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5nr328p.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpw5nr328p.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpw5nr328p.py\", line 32,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpw5nr328p.py\",\
    \ line 22, in histogram\n    maximum = max(h.values())\nValueError: max() arg\
    \ is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    words = test.split()\n    words.sort()\n    count_dict\
    \ = {}\n    for word in words:\n        if word in count_dict:\n            count_dict[word]\
    \ += 1\n        else:\n            count_dict[word] = 1\n    count_max = max(count_dict.values())\n\
    \    dict_max = {}\n    for key, value in count_dict.items():\n        if value\
    \ == count_max:\n            dict_max[key] = value\n    return dict_max\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpea_90yr_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpea_90yr_.py\", line 42,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpea_90yr_.py\", line 38,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpea_90yr_.py\",\
    \ line 24, in histogram\n    count_max = max(count_dict.values())\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    dictionary = {}\n    for elem in test.split():\n  \
    \      if elem in dictionary:\n            dictionary[elem] += 1\n        else:\n\
    \            dictionary[elem] = 1\n    return dictionary\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaobgnwg8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpaobgnwg8.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpaobgnwg8.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # YOUR CODE HERE\n    # \"a b c a b\" -> \"abcab\"\n\
    \    # charCount = {'a': 2, 'b': 2, 'c': 1}\n    # countChar = {1: 'c', 2: ['a',\
    \ 'b']}\n    # maxCount = 2\n    # sorted(countChar[maxCount]) -> ['a', 'b']\n\
    \    charCount = {}\n    for char in test:\n        if char not in charCount:\n\
    \            charCount[char] = 1\n        else:\n            charCount[char] +=\
    \ 1\n    countChar = {}\n    for char, count in charCount.items():\n        if\
    \ count not in countChar:\n            countChar[count] = [char]\n        else:\n\
    \            countChar[count].append(char)\n    maxCount = max(countChar.keys())\n\
    \    return {char: maxCount for char in sorted(countChar[maxCount])}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp07_fsogr.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp07_fsogr.py\", line 48,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp07_fsogr.py\", line 38,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # TOO VERBOSE\n    words = test.split()\n    d = {}\n\
    \    for w in words:\n        if w in d:\n            d[w] += 1\n        else:\n\
    \            d[w] = 1\n    max_key = max(d, key=d.get)\n    print(d)\n    print(d[max_key])\n\
    \    print(d.values())\n    print([k for k, v in d.items() if v == d[max_key]])\n\
    \    return {k: v for k, v in d.items() if v == d[max_key]}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: "{'a': 2, 'b': 2}\n2\ndict_values([2, 2])\n['a', 'b']\n{'a': 2, 'b': 2,\
    \ 'c': 1}\n2\ndict_values([2, 2, 1])\n['a', 'b']\n{'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1}\n1\ndict_values([1, 1, 1, 1, 1])\n['a', 'b', 'c', 'd', 'g']\n{'r':\
    \ 1, 't': 1, 'g': 1}\n1\ndict_values([1, 1, 1])\n['r', 't', 'g']\n{'b': 4, 'a':\
    \ 1}\n4\ndict_values([4, 1])\n['b']\n{'r': 1, 't': 1, 'g': 1}\n1\ndict_values([1,\
    \ 1, 1])\n['r', 't', 'g']\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperz04e_3.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmperz04e_3.py\", line 42,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmperz04e_3.py\", line 38,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmperz04e_3.py\",\
    \ line 24, in histogram\n    max_key = max(d, key=d.get)\nValueError: max() arg\
    \ is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    max_freq = 0\n    for letter in\
    \ test.split():\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n        if histogram[letter]\
    \ > max_freq:\n            max_freq = histogram[letter]\n    return {letter: count\
    \ for letter, count in histogram.items() if count == max_freq}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    count = {}\n    for char in test.split():\n       \
    \ if char in count:\n            count[char] += 1\n        else:\n           \
    \ count[char] = 1\n    if len(count) == 0:\n        return {}\n    most_common\
    \ = max(count.values())\n    return {letter: most_common for letter, most_common\
    \ in count.items() if most_common == most_common}\n\ndef check(candidate):\n \
    \   assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9w3jfm9n.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp9w3jfm9n.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp9w3jfm9n.py\", line 29,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = {}\n    for i in test.split():\n        letters[i]\
    \ = letters.get(i, 0) + 1\n    max_count = max(letters.values())\n    return {key:\
    \ value for key, value in letters.items() if value == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfy93yak.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkfy93yak.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpkfy93yak.py\", line 29,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpkfy93yak.py\",\
    \ line 19, in histogram\n    max_count = max(letters.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    count = {}\n    most = 0\n    test = test.split(' ')\n\
    \    for i in test:\n        if i in count:\n            count[i] += 1\n     \
    \   else:\n            count[i] = 1\n        if count[i] > most:\n           \
    \ most = count[i]\n    \n    for key in count.keys():\n        if count[key] !=\
    \ most:\n            del count[key]\n    \n    return count\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoyh3e73n.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpoyh3e73n.py\", line 44,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpoyh3e73n.py\", line 35,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n  File \"\
    /tmp/tmpoyh3e73n.py\", line 27, in histogram\n    for key in count.keys():\nRuntimeError:\
    \ dictionary changed size during iteration\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # declare empty dictionary to return\n    result =\
    \ {}\n    # parse test string into list of letters\n    test_list = test.split('\
    \ ')\n    # loop over letters, counting number of occurrences\n    for letter\
    \ in test_list:\n        # add letter to result dict if it's not in there\n  \
    \      if letter not in result:\n            result[letter] = 1\n        # add\
    \ to number of occurrences of letter if already there\n        else:\n       \
    \     result[letter] += 1\n    # find the maximum number of occurrences\n    max_occurrence\
    \ = max(result.values())\n    # loop over letters in result dict\n    for letter\
    \ in result:\n        # check if the number of occurrences is less than the max\n\
    \        if result[letter] < max_occurrence:\n            # if it is, remove it\
    \ from the dict\n            del result[letter]\n    # return dict\n    return\
    \ result\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_h4gj5p.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpm_h4gj5p.py\", line 49,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpm_h4gj5p.py\", line 40,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n  File \"\
    /tmp/tmpm_h4gj5p.py\", line 31, in histogram\n    for letter in result:\nRuntimeError:\
    \ dictionary changed size during iteration\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histo: Dict[str, int] = {}\n    for letter in test.split('\
    \ '):\n        if letter in histo:\n            histo[letter] += 1\n        else:\n\
    \            histo[letter] = 1\n    return histo\n\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjdmb2iw4.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjdmb2iw4.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpjdmb2iw4.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if not test:\n        return {}\n    else:\n      \
    \  test = test.split()\n        test = list(set(test))\n        test = sorted(test)\n\
    \        biggest = [1]\n        big_letter = []\n        for letter in test:\n\
    \            test_count = 0\n            for letter2 in test:\n              \
    \  if letter == letter2:\n                    test_count += 1\n            if\
    \ test_count == biggest[0]:\n                big_letter.append(letter)\n     \
    \       elif test_count > biggest[0]:\n                biggest[0] = test_count\n\
    \                big_letter = [letter]\n        res = {}\n        for letter in\
    \ big_letter:\n            res[letter] = biggest[0]\n        return res\n\nprint(histogram('a\
    \ b c'))\nprint(histogram('a b b a'))\nprint(histogram('a b c a b'))\nprint(histogram('b\
    \ b b b a'))\nprint(histogram(''))\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\
    {'a': 1, 'b': 1}\n{}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9exzek11.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmp9exzek11.py\", line 55,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp9exzek11.py\", line 45,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # dict stores {letter: count} pairs\n    dict = {}\n\
    \    # list stores the max count\n    max_occur = []\n    # if no argument is\
    \ passed, return empty dict\n    if not test:\n        return dict\n    # convert\
    \ argument to a list\n    list = test.split()\n    # create a new dict and return\
    \ if the input contains only one letter\n    if len(list) == 1:\n        dict[list[0]]\
    \ = 1\n        return dict\n    # iterate over the list and fill up the dict\n\
    \    for letter in list:\n        # increment count if the letter is already in\
    \ the dict\n        if letter in dict:\n            dict[letter] += 1\n      \
    \  # else set the count to 1\n        else:\n            dict[letter] = 1\n  \
    \  # return the dict immediately if the input contains only unique letters\n \
    \   if len(dict) == len(list):\n        return dict\n    # otherwise find the\
    \ maximum count\n    max_count = max(dict.values())\n    # iterate over the dict\
    \ to find out the letters associated with max_count\n    for key, value in dict.items():\n\
    \        if value == max_count:\n            max_occur.append(key)\n    # create\
    \ a new dict to return\n    final_dict = {}\n    # iterate over the original dict\
    \ and fill up the new dict\n    for key, value in dict.items():\n        # only\
    \ add letters associated with max_count to the new dict\n        if key in max_occur:\n\
    \            final_dict[key] = value\n    return final_dict\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # TODO: implement this\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpftk7ycjm.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpftk7ycjm.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpftk7ycjm.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts = {}\n    words = test.split()\n    max_count\
    \ = 0\n    for word in words:\n        if word in counts:\n            counts[word]\
    \ += 1\n        else:\n            counts[word] = 1\n        if counts[word] >\
    \ max_count:\n            max_count = counts[word]\n    results = {}\n    for\
    \ word in counts:\n        if counts[word] == max_count:\n            results[word]\
    \ = counts[word]\n    return results\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    chars: Dict[str, int] = {}\n    for char in test.split():\n\
    \        chars[char] = chars.get(char, 0) + 1\n    return chars\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzump59sv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpzump59sv.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpzump59sv.py\", line 23,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    words = test.split(' ')\n    d = {}\n    for word in\
    \ words:\n        if word in d:\n            d[word] += 1\n        else:\n   \
    \         d[word] = 1\n    max_count = max(d.values())\n    return {k:v for k,v\
    \ in d.items() if v == max_count}\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpll5iczte.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpll5iczte.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpll5iczte.py\", line 32,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if not test:\n        return {}\n    letter_dict =\
    \ {}\n    max_count = 1\n    test_list = test.split(' ')\n    for letter in test_list:\n\
    \        if letter not in letter_dict:\n            letter_dict[letter] = 1\n\
    \        else:\n            letter_dict[letter] += 1\n            if letter_dict[letter]\
    \ > max_count:\n                max_count = letter_dict[letter]\n    return {letter:\
    \ count for letter, count in letter_dict.items() if count == max_count}\n\nprint(histogram('a\
    \ b c'))\nprint(histogram('a b b a'))\nprint(histogram('a b c a b'))\nprint(histogram('b\
    \ b b b a'))\nprint(histogram(''))\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2}\n{'a': 2, 'b': 2}\n{'b': 4}\n\
    {}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # TO BE COMPLETED\n    \n    # Create a dictionary\
    \ to hold our letter counts and initialize it to zero\n    letters = {'a': 0,\
    \ 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k':\
    \ 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u':\
    \ 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    \n    # Split the input string\
    \ into a list of letters\n    testList = test.split()\n    \n    # Count the occurrences\
    \ of each letter\n    for i in testList:\n        letters[i] += 1\n    \n    #\
    \ Find the highest letter count\n    highest = 0\n    for key in letters:\n  \
    \      if letters[key] > highest:\n            highest = letters[key]\n    \n\
    \    # Create a dictionary to hold the letters that have the highest count\n \
    \   highestLetters = {}\n    \n    # Add each letter with the highest count to\
    \ the dictionary\n    for key in letters:\n        if letters[key] == highest:\n\
    \            highestLetters[key] = letters[key]\n    \n    # Return the dictionary\n\
    \    return highestLetters\n \ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphocixv0c.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmphocixv0c.py\", line 56,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphocixv0c.py\", line 52,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    hist = {}\n    for word in test.split():\n        if\
    \ word not in hist:\n            hist[word] = 1\n        else:\n            hist[word]\
    \ += 1\n    return hist\n\ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyahcz8fu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpyahcz8fu.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpyahcz8fu.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    char_hist = defaultdict(int)\n    for char in test.split():\n\
    \        char_hist[char] += 1\n    \n    max_char_val = max(char_hist.values())\n\
    \    max_char_list = []\n    for char, char_val in char_hist.items():\n      \
    \  if char_val == max_char_val:\n            max_char_list.append(char)\n    \n\
    \    if max_char_list:\n        return {char: max_char_val for char in max_char_list}\n\
    \    else:\n        return {}\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeabpietq.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpeabpietq.py\", line 42,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpeabpietq.py\", line 32,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpeabpietq.py\"\
    , line 16, in histogram\n    char_hist = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    new_dict = {}\n    for i in test.split():\n       \
    \ if i in new_dict:\n            new_dict[i] += 1\n        else:\n           \
    \ new_dict[i] = 1\n    return new_dict\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg080cjq9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpg080cjq9.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpg080cjq9.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    d = {}\n    for char in test.split(' '):\n        if\
    \ char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n\
    \    return {letter: d[letter] for letter in d if d[letter] == max(d.values())}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr2w1wyu_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr2w1wyu_.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpr2w1wyu_.py\", line 31,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test.replace(' ', '')\n    split_test = [letter for\
    \ letter in test]\n    counted_letters = {}\n    current_count = 0\n    for letter\
    \ in split_test:\n        if letter in counted_letters:\n            counted_letters[letter]\
    \ += 1\n        else:\n            counted_letters[letter] = 1\n        if counted_letters[letter]\
    \ >= current_count:\n            current_count = counted_letters[letter]\n   \
    \ \n    most_repetition = {}\n    for key, value in counted_letters.items():\n\
    \        if value == current_count:\n            most_repetition[key] = value\n\
    \    \n    return most_repetition\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpudyexx7f.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpudyexx7f.py\", line 46,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpudyexx7f.py\", line 36,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Type hinting\n    test: str\n    hist: Dict[str,\
    \ int] = {}\n    for char in test.split():\n        if char in hist:\n       \
    \     hist[char] += 1\n        else:\n            hist[char] = 1\n    max_freq\
    \ = max(hist.values())\n    return {key: hist[key] for key in hist if hist[key]\
    \ == max_freq}\n\ndef check(candidate):\n    assert candidate('a b b a') == {\
    \ 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2kf9oohd.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp2kf9oohd.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp2kf9oohd.py\", line 34,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmp2kf9oohd.py\",\
    \ line 24, in histogram\n    max_freq = max(hist.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    map = {}\n    arr = test.split()\n    max = 0\n   \
    \ for el in arr:\n        if el in map:\n            map[el] += 1\n        else:\n\
    \            map[el] = 1\n        if map[el] > max:\n            max = map[el]\n\
    \    res = {}\n    for k, v in map.items():\n        if v == max:\n          \
    \  res[k] = v\n    return res\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test = test.split()\n    max_count = 0\n    dic = {}\n\
    \    for letter in test:\n        if letter in dic:\n            dic[letter] +=\
    \ 1\n        else:\n            dic[letter] = 1\n    for key, value in dic.items():\n\
    \        if value > max_count:\n            max_count = value\n    \n    histogram\
    \ = {}\n    for key, value in dic.items():\n        if value == max_count:\n \
    \           histogram[key] = value\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if not test:\n        return {}\n    # Put all letters\
    \ in a dictionary, same as sorted(set(test.split()))\n    histo = {k: 0 for k\
    \ in set(test.split())}\n    # Count all letters\n    for letter in test.split():\n\
    \        histo[letter] += 1\n    # Get the most repeated value\n    most_repeated\
    \ = max(histo.values())\n    # Return a dictionary of all the letters with the\
    \ same most repeated value\n    return {k: v for k, v in histo.items() if v ==\
    \ most_repeated}\ndef check(candidate):\n    assert candidate('a b b a') == {\
    \ 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letter_occurrence = {}\n    for letter in test.split():\n\
    \        letter_occurrence[letter] = letter_occurrence.get(letter, 0) + 1\n  \
    \  max_occurrence = max(letter_occurrence.values())\n    max_letters = [key for\
    \ key, value in letter_occurrence.items() if value == max_occurrence]\n    return\
    \ {letter: max_occurrence for letter in max_letters}\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpacfpgdor.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpacfpgdor.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpacfpgdor.py\", line 29,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpacfpgdor.py\",\
    \ line 19, in histogram\n    max_occurrence = max(letter_occurrence.values())\n\
    ValueError: max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    hist = dict()\n    words = test.split()\n    for w\
    \ in words:\n        if w in hist:\n            hist[w] += 1\n        else:\n\
    \            hist[w] = 1\n    return hist\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuijtkmxm.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpuijtkmxm.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpuijtkmxm.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    ...\n    \n    \ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwak48ton.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwak48ton.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpwak48ton.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # split test by spaces\n    letters = test.split('\
    \ ')\n    # create a dictionary\n    count_letters = {}\n    # iterate over letters\n\
    \    for letter in letters:\n        # if letter not in count_letters\n      \
    \  if letter not in count_letters:\n            # add it\n            count_letters[letter]\
    \ = 1\n        # if already in count_letters\n        else:\n            # add\
    \ 1 to its value\n            count_letters[letter] += 1\n    # create a dictionary\n\
    \    max_dict = {}\n    # iterate over count_letters\n    for letter, count in\
    \ count_letters.items():\n        # if count > max_dict\n        if len(max_dict)\
    \ == 0 or count > max(max_dict.values()):\n            # max_dict = {letter: count}\n\
    \            max_dict = {letter: count}\n        # if count == max_dict\n    \
    \    elif count == max(max_dict.values()):\n            # add new letter and count\
    \ to max_dict\n            max_dict[letter] = count\n    # return max_dict\n \
    \   return max_dict\n\nprint(histogram('a b c'))\nprint(histogram('a b b a'))\n\
    print(histogram('a b c a b'))\nprint(histogram('b b b b a'))\nprint(histogram(''))\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2}\n{'a': 2, 'b': 2}\n{'b': 4}\n\
    {'': 1}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5khe0csv.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmp5khe0csv.py\", line 61,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp5khe0csv.py\", line 57,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if not test:\n        return {}\n    let_dict = {}\n\
    \    for let in test.split():\n        if let in let_dict:\n            let_dict[let]\
    \ += 1\n        else:\n            let_dict[let] = 1\n    out_dict = {}\n    max_let\
    \ = max(let_dict.values())\n    for let in let_dict:\n        if let_dict[let]\
    \ == max_let:\n            out_dict[let] = max_let\n    return out_dict\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = {}\n    count = 1\n    max_occurrence = 0\n\
    \    sorted_input = sorted(test.split())\n    for i in range(len(sorted_input)):\n\
    \        if i != 0 and sorted_input[i] == sorted_input[i-1]:\n            count\
    \ += 1\n        else:\n            count = 1\n        if count > max_occurrence:\n\
    \            max_occurrence = count\n        letters[sorted_input[i]] = count\n\
    \    results = {}\n    for key, value in letters.items():\n        if value ==\
    \ max_occurrence:\n            results[key] = value\n    return results\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if not test:\n        return {}\n    letters = test.split('\
    \ ')\n    result = {}\n    for letter in letters:\n        if letter in result:\n\
    \            result[letter] += 1\n        else:\n            result[letter] =\
    \ 1\n    max_value = max(result.values())\n    max_letters = [k for k, v in result.items()\
    \ if v == max_value]\n    return {k: max_value for k in max_letters}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # --- YOUR CODE STARTS HERE\n    res = {}\n    for\
    \ x in test.split():\n        if res.get(x):\n            res[x] += 1\n      \
    \  else:\n            res[x] = 1\n    # --- YOUR CODE ENDS HERE\n    return res\n\
    \nprint(histogram('a b c'))\nprint(histogram('a b b a'))\nprint(histogram('a b\
    \ c a b'))\nprint(histogram('b b b b a'))\nprint(histogram(''))\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2}\n{'a': 2, 'b': 2, 'c': 1}\n\
    {'b': 4, 'a': 1}\n{}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpge0_t7pj.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpge0_t7pj.py\", line 42,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpge0_t7pj.py\", line 33,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # create letter count dictionary\n    letters: Dict[str,\
    \ int] = {}\n    for letter in test.split():\n        letters[letter] = letters.get(letter,\
    \ 0) + 1\n    \n    # create a max count to compare all counts in the dictionary\n\
    \    max_count: int = 0\n    for count in letters.values():\n        if count\
    \ > max_count:\n            max_count = count\n    \n    # return a new dictionary\
    \ of the letters and their corresponding max count\n    return {letter: letters[letter]\
    \ for letter in letters if letters[letter] == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Extract the letters from the string.\n    letters\
    \ = ''.join(test.split())\n    # Sort the letters and keep track of the number\
    \ of letters in each group.\n    letters = sorted(letters)\n    groups = [(len(list(c)),\
    \ k) for k, c in groupby(letters)]\n    # Find the max number of occurrences of\
    \ a letter.\n    max_count = max(groups)[0]\n    # Return the dictionary.\n  \
    \  return {letter: max_count for count, letter in groups if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp683fjk9p.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp683fjk9p.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp683fjk9p.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp683fjk9p.py\"\
    , line 20, in histogram\n    groups = [(len(list(c)), k) for k, c in groupby(letters)]\n\
    NameError: name 'groupby' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test_split = test.split()\n    counts = {}\n    max_count\
    \ = 0\n    max_letter = []\n    for letter in test_split:\n        counts[letter]\
    \ = counts.get(letter, 0) + 1\n        if counts[letter] == max_count:\n     \
    \       max_letter.append(letter)\n        elif counts[letter] > max_count:\n\
    \            max_count = counts[letter]\n            max_letter = [letter]\n \
    \   return {l: counts[l] for l in max_letter}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # verify input\n    if not test.isalpha():\n      \
    \  raise ValueError('Input must be a string containing alphabetical letters only.')\n\
    \    # base case if test empty\n    if not test:\n        return {}\n    # create\
    \ dictionary\n    split_list = test.split()\n    dictionary = {letter: split_list.count(letter)\
    \ for letter in split_list}\n    # return dictionary\n    return dictionary\n\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp94pypkct.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp94pypkct.py\", line 39,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp94pypkct.py\", line 29,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp94pypkct.py\"\
    , line 18, in histogram\n    raise ValueError('Input must be a string containing\
    \ alphabetical letters only.')\nValueError: Input must be a string containing\
    \ alphabetical letters only.\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Empty string\n    if test == '':\n        return\
    \ {}\n    # Single letter\n    elif len(test) == 1:\n        return {test: 1}\n\
    \    # Multiple letters\n    else:\n        # Convert str to lowercase list\n\
    \        test = list(test.lower())\n        # Iterate over every letter in the\
    \ list\n        hist = {letter: test.count(letter) for letter in test}\n     \
    \   # Only keep letters with max count\n        hist = {letter: count for letter,\
    \ count in hist.items() if count == max(hist.values())}\n        return hist\n\
    \nprint(histogram('a b c'))\nprint(histogram('a b b a'))\nprint(histogram('a b\
    \ c a b'))\nprint(histogram('b b b b a'))\nprint(histogram(''))\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: "{' ': 2}\n{' ': 3}\n{' ': 4}\n{'b': 4, ' ': 4}\n{}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdj5mllk3.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpdj5mllk3.py\", line 48,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpdj5mllk3.py\", line 38,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts = {}\n    for letter in test.split():\n    \
    \    if letter in counts:\n            counts[letter] += 1\n        else:\n  \
    \          counts[letter] = 1\n    max_val = max(counts.values())\n    max_keys\
    \ = [k for k, v in counts.items() if v == max_val]\n    return {letter: max_val\
    \ for letter in max_keys}\n\ndef check(candidate):\n    assert candidate('a b\
    \ b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe4yzlkmt.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpe4yzlkmt.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpe4yzlkmt.py\", line 33,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpe4yzlkmt.py\",\
    \ line 22, in histogram\n    max_val = max(counts.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram_dict = {}\n    for letter in test.split('\
    \ '):\n        histogram_dict[letter] = test.count(letter)\n    return histogram_dict\n\
    \n\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu10p5c4h.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpu10p5c4h.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpu10p5c4h.py\", line 25,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    lst: List[str] = test.split()\n    if not lst:\n  \
    \      return {}\n    h: Dict[str, int] = {}\n    largest: int = 0\n    result:\
    \ Dict[str, int] = {}\n    for each in lst:\n        h[each] = h.get(each, 0)\
    \ + 1\n        if h[each] > largest:\n            largest = h[each]\n    for item\
    \ in h:\n        if h[item] == largest:\n            result[item] = h[item]\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    hist = {}\n    max_count = 0\n    max_count_letters\
    \ = set()\n    if test:\n        for letter in test.split():\n            if letter\
    \ in hist:\n                hist[letter] += 1\n            else:\n           \
    \     hist[letter] = 1\n            if hist[letter] > max_count:\n           \
    \     max_count = hist[letter]\n                max_count_letters = {letter}\n\
    \            elif hist[letter] == max_count:\n                max_count_letters.add(letter)\n\
    \    for letter in hist:\n        if letter not in max_count_letters:\n      \
    \      del hist[letter]\n    return hist\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbhws9je0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpbhws9je0.py\", line 45,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpbhws9je0.py\", line 36,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n  File \"\
    /tmp/tmpbhws9je0.py\", line 30, in histogram\n    for letter in hist:\nRuntimeError:\
    \ dictionary changed size during iteration\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    d = {}\n    for w in test.split(' '):\n        d[w]\
    \ = d.get(w, 0) + 1\n    if len(d) < 1:\n        return {}\n    else:\n      \
    \  return {k: v for k, v in d.items() if v == max(d.values())}\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0_1anbkf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0_1anbkf.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp0_1anbkf.py\", line 30,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    count = 0\n    his = {}\n\
    \    for letter in letters:\n        count += 1\n        if letter in his:\n \
    \           his[letter] += 1\n        else:\n            his[letter] = 1\n   \
    \ count = max(his.values())\n    return {x: his[x] for x in his if his[x] == count}\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf5qntjnl.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpf5qntjnl.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpf5qntjnl.py\", line 34,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpf5qntjnl.py\",\
    \ line 25, in histogram\n    count = max(his.values())\nValueError: max() arg\
    \ is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    d = {}\n    for char in test.split():\n        d[char]\
    \ = d.get(char, 0) + 1\n    return d\n\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1k2npgi2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1k2npgi2.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp1k2npgi2.py\", line 24,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    freq = {}\n    for letter in test.split():\n      \
    \  if letter in freq:\n            freq[letter] += 1\n        else:\n        \
    \    freq[letter] = 1\n    return freq\n\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yqj3nuy.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp8yqj3nuy.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp8yqj3nuy.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    chars = test.split(' ')\n    frequencies = {}\n   \
    \ for char in chars:\n        if char in frequencies:\n            frequencies[char]\
    \ += 1\n        else:\n            frequencies[char] = 1\n    return frequencies\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp16nhkmnj.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp16nhkmnj.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp16nhkmnj.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    my_dict = {}\n    list1 = test.split(' ')\n    for\
    \ i in list1:\n        if my_dict.get(i):\n            my_dict[i] += 1\n     \
    \   else:\n            my_dict[i] = 1\n    return my_dict\n    \n    \n    \n\
    \    \n    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a':\
    \ 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp26jj24ki.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp26jj24ki.py\", line 40,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp26jj24ki.py\", line 31,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    d = dict()\n    for l in test.split():\n        if\
    \ l in d:\n            d[l] += 1\n        else:\n            d[l] = 1\n    return\
    \ {k: v for k, v in d.items() if max(d.values()) == v}\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letter_counts = {}\n    letters = sorted(test.split())\n\
    \    if letters == []:\n        return letter_counts\n    current_letter = letters[0]\n\
    \    current_count = 1\n    for letter in letters[1:]:\n        if letter == current_letter:\n\
    \            current_count += 1\n        else:\n            letter_counts[current_letter]\
    \ = current_count\n            current_letter = letter\n            current_count\
    \ = 1\n    letter_counts[current_letter] = current_count\n    # find max_count:\n\
    \    max_count = max(letter_counts.values())\n    # return all keys with max_count:\n\
    \    return {k: v for k, v in letter_counts.items() if v == max_count}\n\nprint(histogram('a\
    \ b c'))\nprint(histogram('a b b a'))\nprint(histogram('a b c a b'))\nprint(histogram('b\
    \ b b b a'))\nprint(histogram(''))\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2}\n{'a': 2, 'b': 2}\n{'b': 4}\n\
    {}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    char_count: Dict[str, int] = {}\n    if test:\n   \
    \     for char in test.split():\n            char_count[char] = char_count.get(char,\
    \ 0) + 1\n    return char_count\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4e6lfb_5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4e6lfb_5.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp4e6lfb_5.py\", line 24,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Create a dictionary of words, with the word being\
    \ the key and the count being the value\n    word_count = {}\n    for word in\
    \ test.split():\n        word_count[word] = word_count.get(word, 0) + 1\n\n  \
    \  # Keep track of the max count seen\n    max_count = 0\n    # Keep track of\
    \ the letters that have the max count\n    max_letters = []\n    for letter, count\
    \ in word_count.items():\n        if count > max_count:\n            max_count\
    \ = count\n            max_letters = [letter]\n        elif count == max_count:\n\
    \            max_letters.append(letter)\n\n    # Create the return dictionary\
    \ with key as the letter and value as the max count\n    ret = {}\n    for letter\
    \ in max_letters:\n        ret[letter] = max_count\n\n    return ret\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    lower_case_letters = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    result = {letter: 0 for letter in lower_case_letters}\n    for letter in\
    \ test:\n        if letter not in lower_case_letters:\n            continue\n\
    \        result[letter] += 1\n    return {letter: value for letter, value in result.items()\
    \ if value != 0}\n\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe0jgifcd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpe0jgifcd.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpe0jgifcd.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # count the letter occurrences in a dict\n    dict_res\
    \ = dict()\n    l = test.split()\n    for letter in l:\n        dict_res[letter]\
    \ = dict_res.get(letter, 0) + 1\n    \n    # find the max value in the dict\n\
    \    max_value = max(dict_res.values())\n    \n    # return the letters with the\
    \ same max value\n    return {letter: value for letter, value in dict_res.items()\
    \ if value == max_value}\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3he9im93.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp3he9im93.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp3he9im93.py\", line 34,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmp3he9im93.py\",\
    \ line 23, in histogram\n    max_value = max(dict_res.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test_dict = {}\n    for char in test.split():\n   \
    \     test_dict[char] = test_dict.get(char, 0) + 1\n    max_value = max(test_dict.values())\n\
    \    return {k: v for k, v in test_dict.items() if v == max_value}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4qjx30yt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4qjx30yt.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp4qjx30yt.py\", line 29,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmp4qjx30yt.py\",\
    \ line 19, in histogram\n    max_value = max(test_dict.values())\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    counts = dict()\n    #\
    \ Count the frequency of each letter\n    for letter in letters:\n        counts[letter]\
    \ = counts.get(letter, 0) + 1\n    # Get the max frequency for the letter\n  \
    \  max_count = max(counts.values())\n    # Get the letters that contains that\
    \ max frequency\n    most_frequent = [letter for letter, count in counts.items()\
    \ if count == max_count]\n    return {letter: counts[letter] for letter in most_frequent}\n\
    \nprint(histogram('a b c'))\nprint(histogram('a b b a'))\nprint(histogram('a b\
    \ c a b'))\nprint(histogram('b b b b a'))\nprint(histogram(''))\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2}\n{'a': 2, 'b': 2}\n{'b': 4}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswv2hgbd.py\", line\
    \ 31, in <module>\n    print(histogram(''))\n  File \"/tmp/tmpswv2hgbd.py\", line\
    \ 22, in histogram\n    max_count = max(counts.values())\nValueError: max() arg\
    \ is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    dic = {}\n    if test == '':\n        return dic\n\
    \    else:\n        if test[0] in dic:\n            dic[test[0]] += 1\n      \
    \  else:\n            dic[test[0]] = 1\n        return histogram(test[1:])\n\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqcoqlss8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpqcoqlss8.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpqcoqlss8.py\", line 28,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts = {}\n\n    for letter in test.split(' '):\n\
    \        if letter not in counts:\n            counts[letter] = 1\n        else:\n\
    \            counts[letter] += 1\n\n    return counts\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7oj7f2ho.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp7oj7f2ho.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp7oj7f2ho.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histo = {}\n    words = test.split()\n    for word\
    \ in words:\n        if word in histo:\n            histo[word] += 1\n       \
    \ else:\n            histo[word] = 1\n    return histo\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps4zgc4yy.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps4zgc4yy.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmps4zgc4yy.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    hist = {}\n    for element in test.split():\n     \
    \   hist[element] = hist.get(element, 0) + 1\n    # find largest value in hist,\
    \ can be more than one key\n    max_val = max(hist.values())\n    return {k: v\
    \ for k, v in hist.items() if v == max_val}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxjzjou0z.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpxjzjou0z.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpxjzjou0z.py\", line 30,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpxjzjou0z.py\",\
    \ line 20, in histogram\n    max_val = max(hist.values())\nValueError: max() arg\
    \ is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if test:\n        test = test.split()\n        test_dict\
    \ = {}\n        for letter in test:\n            test_dict[letter] = test_dict.get(letter,\
    \ 0) + 1\n        max_value = max(test_dict.values())\n        return { key: value\
    \ for key, value in test_dict.items() if value == max_value }\n    else:\n   \
    \     return {}\n\ndef check(candidate):\n    assert candidate('a b b a') == {\
    \ 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    max_cnt = 0\n    res = dict()\n    for letter in test.split():\n\
    \        res[letter] = res.get(letter, 0) + 1\n        if res[letter] > max_cnt:\n\
    \            max_cnt = res[letter]\n    return {k: v for k, v in res.items() if\
    \ v == max_cnt}\ndef check(candidate):\n    assert candidate('a b b a') == { 'a':\
    \ 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test = test.lower()\n    test = test.split(' ')\n \
    \   dict = {}\n    for char in test:\n        if char in dict:\n            dict[char]\
    \ += 1\n        else:\n            dict[char] = 1\n    sorted_dict = sorted(dict.items(),\
    \ key=lambda x: x[1], reverse=True)\n    sorted_dict_max = sorted_dict[0][1]\n\
    \    new_dict = {}\n    for item in sorted_dict:\n        if item[1] == sorted_dict_max:\n\
    \            new_dict[item[0]] = item[1]\n    return new_dict\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphj4h1tia.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmphj4h1tia.py\", line 42,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphj4h1tia.py\", line 38,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplvq_apr8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplvq_apr8.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmplvq_apr8.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letter_map = {}\n    letter_counter = {}\n    for i\
    \ in test.split():\n        letter_map[i] = 1 + letter_map.get(i, 0)\n    max_letter_count\
    \ = max(letter_map.values())\n    for letter, count in letter_map.items():\n \
    \       if count == max_letter_count:\n            letter_counter[letter] = count\n\
    \    return letter_counter\n\ndef check(candidate):\n    assert candidate('a b\
    \ b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphgurc6p8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmphgurc6p8.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphgurc6p8.py\", line 33,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmphgurc6p8.py\",\
    \ line 20, in histogram\n    max_letter_count = max(letter_map.values())\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    dic = {}\n    for x in test.split():\n        dic[x]\
    \ = dic.get(x, 0) + 1\n    res = {}\n    for key, value in dic.items():\n    \
    \    if value == max(dic.values()):\n            res[key] = value\n    return\
    \ res\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    dic = {}\n    for i in test.split():\n        dic[i]\
    \ = dic.get(i, 0) + 1\n    freq = {}\n    for key, value in dic.items():\n   \
    \     if value in freq:\n            freq[value].append(key)\n        else:\n\
    \            freq[value] = [key]\n    max = max(freq.keys())\n    return dict.fromkeys(freq[max],\
    \ max)\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmpev7g1y.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpmpev7g1y.py\", line 39,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpmpev7g1y.py\", line 29,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpmpev7g1y.py\"\
    , line 25, in histogram\n    max = max(freq.keys())\nUnboundLocalError: local\
    \ variable 'max' referenced before assignment\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split(' ')\n    dict = {}\n    for i\
    \ in letters:\n        dict[i] = dict.get(i, 0) + 1\n    return dict\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4dv7ng3z.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4dv7ng3z.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp4dv7ng3z.py\", line 24,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    letters = test.split(' ')\n   \
    \ for letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgorigm1j.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpgorigm1j.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpgorigm1j.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    dict_hist = dict()\n    list_hist = test.split()\n\
    \    list_hist.sort()\n    max_count = 0\n    char_max = ''\n    # initialize\
    \ the dictionary\n    for char in list_hist:\n        dict_hist[char] = 0\n  \
    \  # count the letters\n    for char in list_hist:\n        dict_hist[char] +=\
    \ 1\n    for char in dict_hist:\n        if dict_hist[char] > max_count:\n   \
    \         max_count = dict_hist[char]\n            char_max = char\n    for char\
    \ in dict_hist:\n        if dict_hist[char] < max_count:\n            del dict_hist[char]\n\
    \    return dict_hist\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfn_q1pba.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpfn_q1pba.py\", line 47,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpfn_q1pba.py\", line 38,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n  File \"\
    /tmp/tmpfn_q1pba.py\", line 31, in histogram\n    for char in dict_hist:\nRuntimeError:\
    \ dictionary changed size during iteration\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if not test:\n        return {}\n    dic = {}\n   \
    \ for c in test.split(' '):\n        if c in dic:\n            dic[c] += 1\n \
    \       else:\n            dic[c] = 1\n    m = max(dic.values())\n    return {k:v\
    \ for k,v in dic.items() if v == m}\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letter_count = {}\n    for letter in test.split():\n\
    \        letter_count[letter] = letter_count.get(letter, 0) + 1\n    counts =\
    \ letter_count.values()\n    max_count = max(counts)\n    return {key: value for\
    \ key, value in letter_count.items() if value == max_count}\n    \n    \ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmuls8r5i.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmuls8r5i.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpmuls8r5i.py\", line 31,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpmuls8r5i.py\",\
    \ line 20, in histogram\n    max_count = max(counts)\nValueError: max() arg is\
    \ an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Create a dictionary of the empty string:\n    letters\
    \ = {}\n    # Create a list of the words in test:\n    words = test.split()\n\
    \    # Create a list of words without repeating any:\n    unique_words = list(set(words))\n\
    \    # For each word, get the count:\n    for w in unique_words:\n        letters[w]\
    \ = words.count(w)\n    # Create a list of the values in the dictionary:\n   \
    \ list_of_values = [v for v in letters.values()]\n    # Get the maximum value:\n\
    \    max_value = max(list_of_values)\n    # Extract keys from the dictionary whose\
    \ value equals max_value:\n    key_list = [k for k, v in letters.items() if v\
    \ == max_value]\n    # Create a new dictionary:\n    new_dictionary = {}\n   \
    \ # Add the values from key_list to the new dictionary:\n    for key in key_list:\n\
    \        new_dictionary[key] = max_value\n    # Return the new dictionary:\n \
    \   return new_dictionary\n\ndef check(candidate):\n    assert candidate('a b\
    \ b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplmhfx56o.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmplmhfx56o.py\", line 50,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmplmhfx56o.py\", line 46,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmplmhfx56o.py\",\
    \ line 28, in histogram\n    max_value = max(list_of_values)\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    hist = {}\n    for letter in test.split():\n      \
    \  if letter in hist:\n            hist[letter] += 1\n        else:\n        \
    \    hist[letter] = 1\n    most_count = max(hist.values())\n    most_common =\
    \ [x for x in hist if hist[x] == most_count]\n    return {letter: most_count for\
    \ letter in most_common}\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjnyi6xr4.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjnyi6xr4.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpjnyi6xr4.py\", line 32,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpjnyi6xr4.py\",\
    \ line 22, in histogram\n    most_count = max(hist.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters: Dict[str, int] = {}\n    max_count: int =\
    \ 0\n    for char in test.split():\n        letters[char] = letters.get(char,\
    \ 0) + 1\n        max_count = max(max_count, letters[char])\n    return {key:\
    \ value for key, value in letters.items() if value == max_count}\n\nprint(histogram(\"\
    a b c\"))\nprint(histogram(\"a b b a\"))\nprint(histogram(\"a b c a b\"))\nprint(histogram(\"\
    b b b b a\"))\nprint(histogram(\"\"))\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2}\n{'a': 2, 'b': 2}\n{'b': 4}\n\
    {}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # create a list of the letters\n    letter_list = test.split('\
    \ ')\n    # loop through each letter\n    for letter in letter_list:\n       \
    \ # if it's not already in the dictionary, set it to 1\n        if letter not\
    \ in letter_list:\n            letter_list[letter] = 1\n        # else, increment\
    \ it by 1\n        else:\n            letter_list[letter] += 1\n    \n    return\
    \ letter_list\n\nprint(histogram('a b c'))\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxut1h1is.py\", line\
    \ 29, in <module>\n    print(histogram('a b c'))\n  File \"/tmp/tmpxut1h1is.py\"\
    , line 25, in histogram\n    letter_list[letter] += 1\nTypeError: list indices\
    \ must be integers or slices, not str\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    #add all characters in string to histogram\n    hist\
    \ = {}\n    for char in test:\n        hist[char] = hist.get(char, 0) + 1\n  \
    \  \n    #delete non letter characters\n    if hist.get(' ', None):\n        del\
    \ hist[' ']\n    \n    #sort histogram by value\n    sorted_hist = {}\n    for\
    \ key, value in sorted(hist.items(), key=lambda item: item[1], reverse=True):\n\
    \        sorted_hist[key] = value\n    \n    #if multiple highest occurances,\
    \ get the keys\n    #else return only the highest key\n    max_hist = {}\n   \
    \ for key, value in sorted_hist.items():\n        if value == list(sorted_hist.values())[0]:\n\
    \            max_hist[key] = value\n        else:\n            break\n    \n \
    \   return max_hist\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if test:\n        count = {}\n        max_count = 0\n\
    \        keys = []\n        test = test.split()\n        for i in test:\n    \
    \        count[i] = count.get(i, 0) + 1\n            if count[i] > max_count:\n\
    \                max_count = count[i]\n                keys = [i]\n          \
    \  elif count[i] == max_count:\n                keys.append(i)\n        return\
    \ {key: max_count for key in keys}\n    else:\n        return {}\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    str2 = test.split()\n    count_dict = {}\n    for i\
    \ in str2:\n        count_dict[i] = count_dict.get(i, 0) + 1\n    max = 0\n  \
    \  max_str = []\n    for key, value in count_dict.items():\n        if value >\
    \ max:\n            max = value\n            max_str = [key]\n        elif value\
    \ == max:\n            max_str.append(key)\n    return {m: max for m in max_str}\n\
    \nhistogram('a b c')\nhistogram('a b b a')\nhistogram('a b c a b')\nhistogram('b\
    \ b b b a')\nhistogram('')\n\nhistogram('a b c')\nhistogram('a b b a')\nhistogram('a\
    \ b c a b')\nhistogram('b b b b a')\nhistogram('')\ndef check(candidate):\n  \
    \  assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # use a dictionary comprehension to count the frequency\
    \ of each letter\n    counts = {char: test.count(char) for char in test.split()}\n\
    \    # find the frequency of the most common letter\n    max_count = max(counts.values())\n\
    \    # use a dictionary comprehension to return the most common letters\n    return\
    \ {letter:count for letter, count in counts.items() if count == max_count}\n \
    \   \n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp04lttf_j.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp04lttf_j.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp04lttf_j.py\", line 31,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmp04lttf_j.py\",\
    \ line 19, in histogram\n    max_count = max(counts.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    count = {}\n    for char in test.split(' '):\n    \
    \    count[char] = count.get(char, 0) + 1\n    max_count = max(count.values())\n\
    \    answer = {key: value for key, value in count.items() if value == max_count}\n\
    \    return answer\n\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq58wnwbb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpq58wnwbb.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpq58wnwbb.py\", line 30,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts = defaultdict(int)\n    for word in test.split():\n\
    \        counts[word] += 1\n    return counts\n\n\ndef check(candidate):\n   \
    \ assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b\
    \ c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1,\
    \ 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1,\
    \ 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhkyisas.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfhkyisas.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpfhkyisas.py\", line 23,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpfhkyisas.py\"\
    , line 16, in histogram\n    counts = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    #return {}\n    histogram_dict = {}\n    for char in\
    \ test.split(' '):\n        if char not in histogram_dict:\n            histogram_dict[char]\
    \ = 1\n        else:\n            histogram_dict[char] += 1\n    \n    return\
    \ histogram_dict\n\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr1hnw6aq.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpr1hnw6aq.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpr1hnw6aq.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    result = defaultdict(int)\n    for letter in test.split():\n\
    \        result[letter] += 1\n    return result\n\n\ndef check(candidate):\n \
    \   assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuuc5kyvo.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuuc5kyvo.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpuuc5kyvo.py\", line 23,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpuuc5kyvo.py\"\
    , line 16, in histogram\n    result = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    count = {}\n\n    for letter in test.split():\n   \
    \     if letter in count:\n            count[letter] += 1\n        else:\n   \
    \         count[letter] = 1\n\n    max_count = max(count.values())\n    maximum\
    \ = [letter for letter, count in count.items() if count == max_count]\n\n    return\
    \ {letter: count for letter in maximum}\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl29uv96t.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpl29uv96t.py\", line 39,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpl29uv96t.py\", line 29,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    chars = test.split(' ')\n    chars_counts = {}\n  \
    \  for c in chars:\n        if c not in chars_counts:\n            chars_counts[c]\
    \ = 1\n        else:\n            chars_counts[c] += 1\n    #return chars_counts\n\
    \    max_count = max(chars_counts.values())\n    max_chars = { c:v for c,v in\
    \ chars_counts.items() if v == max_count }\n    return max_chars\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp83qvnquz.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp83qvnquz.py\", line 39,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp83qvnquz.py\", line 35,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # If a given word is 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphfyib05j.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphfyib05j.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphfyib05j.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    count = 0\n    for char in test:\n\
    \        # Check if character is a letter and ignore spaces\n        if char.isalpha():\n\
    \            if char in histogram:\n                histogram[char] += 1\n   \
    \         else:\n                histogram[char] = 1\n    \n    # Iterate through\
    \ and find the max count\n    for char in histogram:\n        if histogram[char]\
    \ > count:\n            count = histogram[char]\n    \n    # Create a new dictionary\
    \ that only contains the characters with the max count\n    new_histogram = {}\n\
    \    for char in histogram:\n        if histogram[char] == count:\n          \
    \  new_histogram[char] = count\n    \n    return new_histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwf13zc0k.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwf13zc0k.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpwf13zc0k.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    occurrences = {}\n    for letter in test.split():\n\
    \        occurrences[letter] = occurrences.get(letter, 0) + 1\n    max_occurrence\
    \ = max(occurrences.values())\n    max_letters = {k:v for k, v in occurrences.items()\
    \ if v == max_occurrence}\n    return max_letters\n\nprint(histogram('a b c'))\n\
    print(histogram('a b b a'))\nprint(histogram('a b c a b'))\nprint(histogram('b\
    \ b b b a'))\nprint(histogram(''))\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2}\n{'a': 2, 'b': 2}\n{'b': 4}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpavfnrncn.py\", line\
    \ 27, in <module>\n    print(histogram(''))\n  File \"/tmp/tmpavfnrncn.py\", line\
    \ 19, in histogram\n    max_occurrence = max(occurrences.values())\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Maybe it's also a good idea to check the input is\
    \ all lowercase letters.\n    from itertools import groupby\n    test = list(test.split())\n\
    \    result = {}\n    for k, v in groupby(sorted(test)):\n        result[k] =\
    \ len(list(v))\n    return result\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcfqn465c.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpcfqn465c.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpcfqn465c.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Initialization\n    histo = {}\n    histo = _count_letter(test,\
    \ histo)\n    return _get_max_count(histo)\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3iiqi2gv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3iiqi2gv.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp3iiqi2gv.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp3iiqi2gv.py\"\
    , line 18, in histogram\n    histo = _count_letter(test, histo)\nNameError: name\
    \ '_count_letter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for word in test.split():\n   \
    \     if word in histogram:\n            histogram[word] += 1\n        else:\n\
    \            histogram[word] = 1\n    max_count = max(histogram.values())\n  \
    \  return {k: v for k, v in histogram.items() if v == max_count}\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcgg9ejy6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpcgg9ejy6.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpcgg9ejy6.py\", line 31,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpcgg9ejy6.py\",\
    \ line 22, in histogram\n    max_count = max(histogram.values())\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    h = {}\n    for c in test.split():\n        try:\n\
    \            h[c] += 1\n        except KeyError:\n            h[c] = 1\n    max_count\
    \ = max(h.values())\n    return {k: v for k, v in h.items() if v == max_count}\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptpcbjy6g.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptpcbjy6g.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmptpcbjy6g.py\", line 31,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmptpcbjy6g.py\",\
    \ line 22, in histogram\n    max_count = max(h.values())\nValueError: max() arg\
    \ is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Create a dictionary of the letters in the string\
    \ along with the count\n    letters = {i: test.count(i) for i in test.split()}\n\
    \    # Find the maximum value in the dictionary\n    count = max(letters.values())\n\
    \    # Create a new dictionary containing only the letters with the maximum count\n\
    \    return {key:value for key, value in letters.items() if value == count}\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzwqbeemt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpzwqbeemt.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpzwqbeemt.py\", line 29,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpzwqbeemt.py\",\
    \ line 19, in histogram\n    count = max(letters.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split(' ')\n    hist = {}\n    for letter\
    \ in letters:\n        if letter not in hist:\n            hist[letter] = 1\n\
    \        else:\n            hist[letter] += 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsooq6ek2.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpsooq6ek2.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpsooq6ek2.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    else:\n    \
    \    d = {}\n        for x in test.split():\n            if x in d:\n        \
    \        d[x] += 1\n            else:\n                d[x] = 1\n        h = {}\n\
    \        for k, v in d.items():\n            if v not in h:\n                h[v]\
    \ = []\n            h[v].append(k)\n        m = max(h.keys())\n        return\
    \ {x: m for x in h[m]}\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = defaultdict(int)\n    for ch in test.split():\n\
    \        letters[ch] += 1\n    return letters\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphfu6pm34.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphfu6pm34.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphfu6pm34.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmphfu6pm34.py\"\
    , line 16, in histogram\n    letters = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    assert test != None, 'test string is None'\n    assert\
    \ test != '', 'test string is empty'\n    histogram = dict()\n    for i in test.split():\n\
    \        histogram[i] = histogram.get(i, 0) + 1\n    keys = list(histogram.keys())\n\
    \    values = list(histogram.values())\n    maxValue = max(values)\n    for k\
    \ in keys:\n        if histogram[k] != maxValue:\n            del histogram[k]\n\
    \    return histogram\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwoqxqzyn.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpwoqxqzyn.py\", line 40,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpwoqxqzyn.py\", line 36,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpwoqxqzyn.py\",\
    \ line 17, in histogram\n    assert test != '', 'test string is empty'\nAssertionError:\
    \ test string is empty\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    unique = set(letters)\n\
    \    occ = {}\n    highest = 0\n    for item in unique:\n        occ[item] = letters.count(item)\n\
    \        if occ[item] > highest:\n            highest = occ[item]\n    return\
    \ {k: v for k, v in occ.items() if v == highest}\n\nprint(histogram('b b b b a'))\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: "{'b': 4}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    l = test.split(' ')\n    d = {}\n    for i in l:\n\
    \        if i in d:\n            d[i] += 1\n        else:\n            d[i] =\
    \ 1\n    values = list(d.values())\n    max_value = max(values)\n    max_values\
    \ = []\n    for v in values:\n        if v == max_value:\n            max_values.append(v)\n\
    \    best_letters = []\n    for k, v in d.items():\n        if v in max_values:\n\
    \            best_letters.append(k)\n    print(best_letters)\n    print(d)\n \
    \   output = {}\n    for i in best_letters:\n        output[i] = d[i]\n    return\
    \ output\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: "['a', 'b']\n{'a': 2, 'b': 2}\n['a', 'b']\n{'a': 2, 'b': 2, 'c': 1}\n['a',\
    \ 'b', 'c', 'd', 'g']\n{'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}\n['r', 't', 'g']\n\
    {'r': 1, 't': 1, 'g': 1}\n['b']\n{'b': 4, 'a': 1}\n['r', 't', 'g']\n{'r': 1, 't':\
    \ 1, 'g': 1}\n['']\n{'': 1}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvo6m8ir.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmptvo6m8ir.py\", line 51,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmptvo6m8ir.py\", line 47,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split(' ')\n    hist = {}\n    maxCount\
    \ = 0\n    for letter in letters:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n        if hist[letter] >\
    \ maxCount:\n            maxCount = hist[letter]\n    return {key: value for key,\
    \ value in hist.items() if value == maxCount}\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgalphl2k.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpgalphl2k.py\", line 38,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpgalphl2k.py\", line 34,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    occ = {}\n    for c in test.split():\n        occ[c]\
    \ = occ.get(c, 0) + 1\n    # find max count of occurrences\n    max_occ = max(occ.values())\n\
    \    # max_occ is the value of each key\n    return {c: max_occ for c in occ if\
    \ occ[c] == max_occ}\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps9m2qre5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmps9m2qre5.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmps9m2qre5.py\", line 31,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmps9m2qre5.py\",\
    \ line 20, in histogram\n    max_occ = max(occ.values())\nValueError: max() arg\
    \ is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letter_to_count: Dict[str, int] = {}\n    for letter\
    \ in test.split():\n        if letter in letter_to_count:\n            letter_to_count[letter]\
    \ += 1\n        else:\n            letter_to_count[letter] = 1\n    return letter_to_count\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd6vgmcbh.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpd6vgmcbh.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpd6vgmcbh.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp041xvsvw.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp041xvsvw.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp041xvsvw.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    raise NotImplementedError()\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_oabare8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_oabare8.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp_oabare8.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp_oabare8.py\"\
    , line 16, in histogram\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # If the string is empty, return an empty dictionary\n\
    \    if test == '':\n        return {}\n    # Split the string into a list\n \
    \   string_list = test.split()\n    # Create an empty dictionary\n    hist = {}\n\
    \    # For each word in the list:\n    for word in string_list:\n        # If\
    \ the word already exists as a key in the dictionary, increment the count by 1\n\
    \        if word in hist:\n            hist[word] += 1\n        # If the word\
    \ does not exist as a key in the dictionary, set the count at 1\n        else:\n\
    \            hist[word] = 1\n    # Return the dictionary\n    return hist\n\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxe3d67sb.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpxe3d67sb.py\", line 45,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpxe3d67sb.py\", line 36,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # split at spaces\n    # convert to dict\n    # sort\
    \ by descending count\n    # return dict of letters with highest occurrence\n\n\
    \    words = test.split()\n    count = {}\n    for word in words:\n        if\
    \ word in count:\n            count[word] += 1\n        else:\n            count[word]\
    \ = 1\n    # print(count)\n    sorted_count = sorted(count.items(), key=lambda\
    \ x: x[1], reverse=True)\n    # print(sorted_count)\n    top_count = sorted_count[0][1]\n\
    \    result = {word: value for word, value in sorted_count if value == top_count}\n\
    \    return result\n\n\nprint(histogram('a b c'))\nprint(histogram('a b b a'))\n\
    print(histogram('a b c a b'))\nprint(histogram('b b b b a'))\nprint(histogram(''))\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2}\n{'a': 2, 'b': 2}\n{'b': 4}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp21qygw9a.py\", line\
    \ 40, in <module>\n    print(histogram(''))\n  File \"/tmp/tmp21qygw9a.py\", line\
    \ 31, in histogram\n    top_count = sorted_count[0][1]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    ltr_dict = {}\n\n    for char in test.split(' '):\n\
    \        if char in ltr_dict:\n            ltr_dict[char] += 1\n        else:\n\
    \            ltr_dict[char] = 1\n\n    max_val = max(ltr_dict.values())\n    max_val_ltr\
    \ = []\n\n    for k, v in ltr_dict.items():\n        if v == max_val:\n      \
    \      max_val_ltr.append(k)\n\n    return {x: max_val for x in max_val_ltr}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0grthnc.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmph0grthnc.py\", line 44,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmph0grthnc.py\", line 40,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    hist = {}\n    for letter in test.split(' '):\n   \
    \     if letter in hist:\n            hist[letter] += 1\n        else:\n     \
    \       hist[letter] = 1\n    return hist\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfkt15pgv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfkt15pgv.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpfkt15pgv.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts = {}\n    for letter in test.split():\n    \
    \    if letter in counts:\n            counts[letter] += 1\n        else:\n  \
    \          counts[letter] = 1\n    # find the max count\n    # max_count = max(counts.values())\n\
    \    max_count = 0\n    for count in counts.values():\n        if count > max_count:\n\
    \            max_count = count\n    print(max_count)\n    # find all keys for\
    \ max count\n    max_keys = [key for key, val in counts.items() if val == max_count]\n\
    \    # create dictionary from max keys and max count\n    new_dict = {key: max_count\
    \ for key in max_keys}\n    return new_dict\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: "2\n2\n1\n1\n4\n1\n0\n1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    return {}\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_g4kfve.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa_g4kfve.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpa_g4kfve.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test_list = test.split()\n    d = {}\n    for i in\
    \ test_list:\n        if i in d:\n            d[i] += 1\n        else:\n     \
    \       d[i] = 1\n    return d\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8jh12vo.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpp8jh12vo.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpp8jh12vo.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    assert isinstance(test, str), 'Test should be a string'\n\
    \    result = dict()\n    letter_occurrence = dict()\n    letter_list = list(test.replace('\
    \ ', ''))\n    for letter in letter_list:\n        if letter not in letter_occurrence:\n\
    \            letter_occurrence[letter] = 1\n        else:\n            letter_occurrence[letter]\
    \ += 1\n    for key, value in letter_occurrence.items():\n        if len(result)\
    \ == 0:\n            result[key] = value\n        elif value > list(result.values())[0]:\n\
    \            result = dict()\n            result[key] = value\n        elif value\
    \ == list(result.values())[0]:\n            result[key] = value\n    return result\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    chars = test.split()\n    if not chars:\n        return\
    \ {}\n    else:\n        max_len = len(max(chars, key=len))\n        return dict([(x,\
    \ chars.count(x)) for x in chars if chars.count(x) == max_len])\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_s8sfmtu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_s8sfmtu.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp_s8sfmtu.py\", line 23,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if not test:\n        return {}\n    histo: Dict[str,\
    \ int] = {}\n    for i in test.split():\n        try:\n            histo[i] +=\
    \ 1\n        except KeyError:\n            histo[i] = 1\n    highest_count = max(histo.values())\n\
    \    return {i: x for i, x in histo.items() if x == highest_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split()\n    letter_count = {}\n   \
    \ for letter in letters:\n        if letter not in letter_count:\n           \
    \ letter_count[letter] = 1\n        else:\n            letter_count[letter] +=\
    \ 1\n    max_count = max(letter_count.values())\n    max_letter = {}\n    for\
    \ letter, count in letter_count.items():\n        if count == max_count:\n   \
    \         max_letter[letter] = count\n    return max_letter\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6lfv0gjk.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp6lfv0gjk.py\", line 40,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp6lfv0gjk.py\", line 36,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmp6lfv0gjk.py\",\
    \ line 23, in histogram\n    max_count = max(letter_count.values())\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n\nprint(histogram('a b\
    \ c'))\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: "None\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6__2u_s7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6__2u_s7.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp6__2u_s7.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if not test:\n        return {}\n    test_histo = {i:\
    \ test.count(i) for i in test.split()}\n    max_histo = max(test_histo.values())\n\
    \    return {letter: count for letter, count in test_histo.items() if count ==\
    \ max_histo}\ndef check(candidate):\n    assert candidate('a b b a') == { 'a':\
    \ 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg0ffx_cd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg0ffx_cd.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpg0ffx_cd.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    frequency = {}\n    for letter in test.split(' '):\n\
    \        if letter in frequency:\n            frequency[letter] += 1\n       \
    \ else:\n            frequency[letter] = 1\n    max_val = max(frequency.values())\n\
    \    output = {letter: frequency[letter] for letter in frequency if frequency[letter]\
    \ == max_val}\n    return output\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_rquv_l.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpu_rquv_l.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpu_rquv_l.py\", line 32,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histo = {}\n    for letter in test.split():\n     \
    \   if letter in histo:\n            histo[letter] += 1\n        else:\n     \
    \       histo[letter] = 1\n    max_value = max(histo.values())\n    return {letter:\
    \ count for letter, count in histo.items() if count == max_value}\n\nprint(histogram('a\
    \ b c'))\nprint(histogram('a b b a'))\nprint(histogram('a b c a b'))\nprint(histogram('b\
    \ b b b a'))\nprint(histogram(''))\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2}\n{'a': 2, 'b': 2}\n{'b': 4}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3vhpmsar.py\", line\
    \ 29, in <module>\n    print(histogram(''))\n  File \"/tmp/tmp3vhpmsar.py\", line\
    \ 22, in histogram\n    max_value = max(histo.values())\nValueError: max() arg\
    \ is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if not test:\n        return {}\n    else:\n      \
    \  unique_letters = set(test.split(' '))\n        count_dictionary = {key:test.count(key)\
    \ for key in unique_letters}\n        duplicate_counts = [count for count in count_dictionary.values()\
    \ if count_dictionary.values().count(count) > 1]\n        max_count = max(duplicate_counts)\
    \ if duplicate_counts else max(count_dictionary.values())\n        return {key:count\
    \ for key, count in count_dictionary.items() if count == max_count}\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp04rcgpzd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp04rcgpzd.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp04rcgpzd.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmp04rcgpzd.py\"\
    , line 21, in histogram\n    duplicate_counts = [count for count in count_dictionary.values()\
    \ if count_dictionary.values().count(count) > 1]\n  File \"/tmp/tmp04rcgpzd.py\"\
    , line 21, in <listcomp>\n    duplicate_counts = [count for count in count_dictionary.values()\
    \ if count_dictionary.values().count(count) > 1]\nAttributeError: 'dict_values'\
    \ object has no attribute 'count'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # pass\n    # TODO: return histogram of string\n  \
    \  # O(n)\n    m = {}\n    count = 0\n    max_count = 0\n    letter = ''\n   \
    \ list_letter = []\n    for i in test.split():\n        count = test.count(i)\n\
    \        if count > max_count:\n            max_count = count\n            letter\
    \ = i\n            list_letter = [letter]\n        elif count == max_count:\n\
    \            list_letter.append(i)\n    for j in list_letter:\n        m[j] =\
    \ max_count\n    return m\n\ndef check(candidate):\n    assert candidate('a b\
    \ b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    output = {}\n    for s in test.split():\n        output[s]\
    \ = test.count(s)\n    return output\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5hxvejvl.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp5hxvejvl.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp5hxvejvl.py\", line 22,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    from collections import Counter\n    from pprint import\
    \ pprint\n    # Use Counter to get a dictionary of all the letters in the string\n\
    \    counter = Counter(test.split())\n    letter_with_max_repetition = max(counter.values())\n\
    \    return {k: v for k, v in counter.items() if v == letter_with_max_repetition}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_ea5sjc.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpk_ea5sjc.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpk_ea5sjc.py\", line 30,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpk_ea5sjc.py\",\
    \ line 20, in histogram\n    letter_with_max_repetition = max(counter.values())\n\
    ValueError: max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    sorted_test = sorted(test.split())\n\
    \    for item in sorted_test:\n        if item in histogram:\n            histogram[item]\
    \ += 1\n        else:\n            histogram[item] = 1\n    return histogram\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ee3qlf_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp_ee3qlf_.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp_ee3qlf_.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    import collections\n    import operator\n    chars\
    \ = collections.Counter(test.split())\n    max_value = max(chars.values())\n \
    \   return {key: chars[key] for key in chars if chars[key] == max_value}\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95mj3wao.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp95mj3wao.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp95mj3wao.py\", line 29,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmp95mj3wao.py\",\
    \ line 19, in histogram\n    max_value = max(chars.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Trim input string and split into list\n    test =\
    \ test.strip()\n    if test == '':\n        return {}\n    test_list = test.split('\
    \ ')\n\n    # Count occurrences and store them in a dict\n    occurrences = dict.fromkeys(test_list,\
    \ 0)\n    for i in test_list:\n        occurrences[i] += 1\n\n    # Get max occurrences\
    \ from dict\n    max_occurrences = max(occurrences.values())\n\n    # Return dict\
    \ with highest value\n    return {k: v for k, v in occurrences.items() if v ==\
    \ max_occurrences}\n\ntest_string = 'a b b a'\nresult = histogram(test_string)\n\
    print(result)\ndef check(candidate):\n    assert candidate('a b b a') == { 'a':\
    \ 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: "{'a': 2, 'b': 2}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test_list = [s for s in test.split(' ')]\n    test_freq\
    \ = Counter(test_list)\n    test_sorted = sorted(test_freq.items(), key=lambda\
    \ item: item[1], reverse=True)\n    test_dict = {}\n    if test_sorted == []:\n\
    \        return test_dict\n    else:\n        test_highest = test_sorted[0][1]\n\
    \        for x in test_sorted:\n            if x[1] == test_highest:\n       \
    \         test_dict[x[0]] = x[1]\n            else:\n                pass\n  \
    \      return test_dict\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmr7o86ip.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpmr7o86ip.py\", line 41,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpmr7o86ip.py\", line 31,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpmr7o86ip.py\"\
    , line 17, in histogram\n    test_freq = Counter(test_list)\nNameError: name 'Counter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Retrieve a dictionary of the letter count using Counter\n\
    \    letter_count = Counter(test.split())\n    # Obtain a set of all the letters\
    \ with the most repetitions\n    most_repetition = set([key for key, value in\
    \ letter_count.items() if value == max(letter_count.values())])\n    # Return\
    \ the dictionary of the letter with the most repetition\n    return {key: value\
    \ for key, value in letter_count.items() if key in most_repetition}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6f1ic_n.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpi6f1ic_n.py\", line 34,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpi6f1ic_n.py\", line 24,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpi6f1ic_n.py\"\
    , line 17, in histogram\n    letter_count = Counter(test.split())\nNameError:\
    \ name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    d = {}\n    for char in test.split():\n        try:\n\
    \            d[char] += 1\n        except KeyError:\n            d[char] = 1\n\
    \    max_keys = []\n    max_val = 0\n    for key, val in d.items():\n        if\
    \ val > max_val:\n            max_val = val\n            max_keys = [key]\n  \
    \      elif val == max_val:\n            max_keys.append(key)\n    return {k:max_val\
    \ for k in max_keys}\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    letters = test.split()\n    for\
    \ letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk057t4jt.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpk057t4jt.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpk057t4jt.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    hist = dict()\n    for letter in test.split(' '):\n\
    \        hist[letter] = hist.get(letter, 0) + 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptmf_l_nc.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmptmf_l_nc.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmptmf_l_nc.py\", line 28,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    d = {}\n    for letter in test.split():\n        d[letter]\
    \ = d.get(letter, 0) + 1\n    max_value = max(d.values())\n    return {x: max_value\
    \ for x in d if d[x] == max_value}\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    def histogram(test: str) -> Dict[str, int]:\n        \"\"\"Given a\
    \ string representing a space separated lowercase letters, return a dictionary\n\
    \        of the letter with the most repetition and containing the corresponding\
    \ count.\n        If several letters have the same occurrence, return all of them.\n\
    \        \n        Example:\n        histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n        histogram('a b b a') == {'a': 2, 'b': 2}\n        histogram('a b\
    \ c a b') == {'a': 2, 'b': 2}\n        histogram('b b b b a') == {'b': 4}\n  \
    \      histogram('') == {}\n    \n        \"\"\"\n        d = {}\n        for\
    \ letter in test.split():\n            d[letter] = d.get(letter, 0) + 1\n    \
    \    max_value = max(d.values())\n        return {x: max_value for x in d if d[x]\
    \ == max_value}\ndef check(candidate):\n    assert candidate('a b b a') == { 'a':\
    \ 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84a9e1sb.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp84a9e1sb.py\", line 58,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp84a9e1sb.py\", line 54,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmp84a9e1sb.py\",\
    \ line 19, in histogram\n    max_value = max(d.values())\nValueError: max() arg\
    \ is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Create a dictionary from the input string with the\
    \ letters as keys and their occurrences as values\n    # Using defaultdict so\
    \ we don't have to check for existance of keys for each letter\n    # It has the\
    \ default value of 0 if a letter doesn't exist in the dictionary\n    histogram\
    \ = defaultdict(int)\n    for letter in test.split():\n        histogram[letter]\
    \ += 1\n\n    # Get the maximum value of the dictionary\n    max_count = max(histogram.values())\n\
    \n    # Get all the letters that have the maximum occurrence\n    max_letters\
    \ = [letter for letter, count in histogram.items() if count == max_count]\n\n\
    \    # Create a dictionary using the list of maximum occurrence letters and the\
    \ maximum occurrence\n    # in case the input string only has one letter it will\
    \ contain the letter and occurrence\n    # in case the input string contains the\
    \ same number of letters the dictionary will contain\n    # all the letters and\
    \ the occurrence\n    # in case the input string contains different letters with\
    \ the same occurrence the dictionary\n    # will contain all the letters with\
    \ the same occurrence\n    return dict.fromkeys(max_letters, max_count)\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf49bwa8x.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpf49bwa8x.py\", line 48,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpf49bwa8x.py\", line 38,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpf49bwa8x.py\"\
    , line 19, in histogram\n    histogram = defaultdict(int)\nNameError: name 'defaultdict'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letter_count = {}\n    for letter in test.split():\n\
    \        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count\
    \ = max(letter_count.values())\n    return {letter: count for letter, count in\
    \ letter_count.items() if count == max_count}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnhzclwyn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnhzclwyn.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpnhzclwyn.py\", line 29,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpnhzclwyn.py\",\
    \ line 19, in histogram\n    max_count = max(letter_count.values())\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Split the string into a list and use a dictionary\
    \ comprehension to map the letters to\n    # the number of times they are in the\
    \ list.\n    histogram = {letter: test.split().count(letter) for letter in test.split()}\n\
    \    # Using a set comprehension, we find the maximum occurrence and map the letters\
    \ to a set.\n    maximum = {letter for letter, count in histogram.items() if count\
    \ == max(histogram.values())}\n    # We return the dictionary comprehension of\
    \ the maximum letters.\n    return {letter: histogram[letter] for letter in maximum}\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = {}\n    for ch in test.split():\n       \
    \ letters[ch] = letters.get(ch, 0) + 1\n    max_count = max(letters.values())\n\
    \    return {letter: count for letter, count in letters.items() if count == max_count}\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5w1r0ecp.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5w1r0ecp.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp5w1r0ecp.py\", line 28,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmp5w1r0ecp.py\",\
    \ line 19, in histogram\n    max_count = max(letters.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17a25tzb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp17a25tzb.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp17a25tzb.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    dictionary = {}\n    for letter in test.split(' '):\n\
    \        dictionary[letter] = dictionary.get(letter, 0) + 1\n    return dictionary\n\
    \n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppzwd_rbz.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppzwd_rbz.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmppzwd_rbz.py\", line 24,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts = Counter(test.split())\n    max_count = max(counts.values())\n\
    \    return {l: c for l, c in counts.items() if c == max_count}\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm932v8tw.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpm932v8tw.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpm932v8tw.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmpm932v8tw.py\"\
    , line 16, in histogram\n    counts = Counter(test.split())\nNameError: name 'Counter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    lowercase_letters = test.split()\n    letter_count\
    \ = {i: lowercase_letters.count(i) for i in lowercase_letters}\n    return letter_count\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpouo89v7i.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpouo89v7i.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpouo89v7i.py\", line 22,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letters = test.split(' ')\n    count = {}\n    for\
    \ letter in letters:\n        if letter in count:\n            count[letter] +=\
    \ 1\n        else:\n            count[letter] = 1\n    return count\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpntqbz2s7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpntqbz2s7.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpntqbz2s7.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Dictionary to count character occurrences\n    occurences\
    \ = {}\n    # Get the maximum count in the dictionary\n    max_count = 0\n   \
    \ # Counter for each character\n    for char in test:\n        # Skip the space\
    \ character\n        if char == ' ':\n            continue\n        # If the character\
    \ is a new one, add it\n        if char not in occurences:\n            occurences[char]\
    \ = 1\n        # Otherwise, increase the count\n        else:\n            occurences[char]\
    \ += 1\n        # Get the maximum count\n        max_count = max(max_count, occurences[char])\n\
    \    # Max count is zero, empty dict\n    if max_count == 0:\n        return {}\n\
    \    # Create the result dict with the max count\n    result = {}\n    for char\
    \ in occurences:\n        if occurences[char] == max_count:\n            result[char]\
    \ = max_count\n    return result\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts = {}\n    for letter in test.split():\n    \
    \    if letter in counts:\n            counts[letter] += 1\n        else:\n  \
    \          counts[letter] = 1\n    highest = max(counts.values())\n    return\
    \ {key: value for key, value in counts.items() if value == highest}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4mq7wu61.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp4mq7wu61.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp4mq7wu61.py\", line 32,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmp4mq7wu61.py\",\
    \ line 22, in histogram\n    highest = max(counts.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test = test.split()\n    d = {}\n    for word in test:\n\
    \        if word in d:\n            d[word] += 1\n        else:\n            d[word]\
    \ = 1\n    return d\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb6t7i95f.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpb6t7i95f.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpb6t7i95f.py\", line 27,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = dict()\n    for word in test.split():\n\
    \        word_count = histogram.get(word, 0)\n        histogram[word] = word_count\
    \ + 1\n    return histogram\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbge7_91d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbge7_91d.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpbge7_91d.py\", line 24,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    input_string = test.split()\n    if len(input_string)\
    \ == 0:\n        return {}\n    hist = dict()\n    max_count = 0\n    for index\
    \ in range(len(input_string)):\n        hist[input_string[index]] = hist.get(input_string[index],\
    \ 0) + 1\n        max_count = max(max_count, hist[input_string[index]])\n    return\
    \ { k: v for k, v in hist.items() if v == max_count }\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    letter_dict = dict()\n    for char in test.split('\
    \ '):\n        if char in letter_dict:\n            letter_dict[char] += 1\n \
    \       else:\n            letter_dict[char] = 1\n    # find the maximum repetition\n\
    \    max_rep = 0\n    for key in letter_dict:\n        if letter_dict[key] > max_rep:\n\
    \            max_rep = letter_dict[key]\n    # create a list of the keys corresponding\
    \ to the maximum repetition\n    max_rep_list = list()\n    for key in letter_dict:\n\
    \        if letter_dict[key] == max_rep:\n            max_rep_list.append(key)\n\
    \    # create a new dictionary with the maximum repetition and remove the original\
    \ keys\n    new_dict = dict()\n    for key in max_rep_list:\n        new_dict[key]\
    \ = max_rep\n    for key in max_rep_list:\n        letter_dict.pop(key)\n    #\
    \ update the final dictionary\n    for key in letter_dict:\n        new_dict[key]\
    \ = letter_dict[key]\n    return new_dict\n\nprint(histogram('a b c'))\nprint(histogram('a\
    \ b b a'))\nprint(histogram('a b c a b'))\nprint(histogram('b b b b a'))\nprint(histogram(''))\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2}\n{'a': 2, 'b': 2, 'c': 1}\n\
    {'b': 4, 'a': 1}\n{'': 1}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphowaqxdc.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmphowaqxdc.py\", line 59,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphowaqxdc.py\", line 50,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    results = {}\n    for l in test.split(' '):\n     \
    \   results[l] = results.get(l, 0) + 1\n    # return {k: v for k, v in results.items()\
    \ if v == max(results.values())}\n    return {k: v for k, v in results.items()\
    \ if v == min(results.values())}\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgtegdt6w.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgtegdt6w.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpgtegdt6w.py\", line 24,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    dic = {}\n    if test != '':\n        for item in test.split():\n\
    \            if item in dic:\n                dic[item] += 1\n            else:\n\
    \                dic[item] = 1\n        m = max(dic.values())\n        return\
    \ {k: v for k, v in dic.items() if v == m}\n    else:\n        return {}\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    count = {}\n    most = 0\n    for i in test.split():\n\
    \        if i in count:\n            count[i] += 1\n        else:\n          \
    \  count[i] = 1\n        if count[i] > most:\n            most = count[i]\n  \
    \  return {i: most for i in count if count[i] == most}\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    hist = {}\n    max_count = 0\n    max_letter = set()\n\
    \    for l in test.split():\n        if l in hist:\n            hist[l] += 1\n\
    \        else:\n            hist[l] = 1\n        \n        if hist[l] > max_count:\n\
    \            max_count = hist[l]\n            max_letter = set([l])\n        elif\
    \ hist[l] == max_count:\n            max_letter.add(l)\n        \n    return {l:\
    \ hist[l] for l in max_letter}\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # split test into words list\n    words = test.split()\n\
    \    # create a dictionary of characters with a count of 0\n    dictionary = {char:\
    \ 0 for char in words}\n    # loop through test and add count\n    for char in\
    \ words:\n        dictionary[char] += 1\n    # create a dictionary of the character\
    \ with the most occurence\n    count_dict = {char: dictionary[char] for char in\
    \ dictionary if dictionary[char] == max(dictionary.values())}\n    return count_dict\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    counts = {}\n    for letter in test.split():\n    \
    \    counts[letter] = counts.get(letter, 0) + 1\n    maximum = max(counts.values())\n\
    \    return {key: value for key, value in counts.items() if value == maximum}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdyal7n_g.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdyal7n_g.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpdyal7n_g.py\", line 29,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpdyal7n_g.py\",\
    \ line 19, in histogram\n    maximum = max(counts.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Implement me!\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd4uxetp2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpd4uxetp2.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpd4uxetp2.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    else:\n    \
    \    dict_counter = dict.fromkeys(test.split(' '), 0)\n        for letter in test.split('\
    \ '):\n            dict_counter[letter] += 1\n        max_occurrence = max(dict_counter.values())\n\
    \        dict_max_occurrence = {}\n        for key, value in dict_counter.items():\n\
    \            if value == max_occurrence:\n                dict_max_occurrence[key]\
    \ = value\n        return dict_max_occurrence\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    from collections import Counter\n\n    c = Counter(test.split())\n\
    \    if len(c) == 0:\n        return {}\n    keys = [k for k, v in c.items() if\
    \ v == max(c.values())]\n    return {k: max(c.values()) for k in keys}\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    results = {}\n    for letter in test.split():\n   \
    \     if letter in results:\n            results[letter] += 1\n        else:\n\
    \            results[letter] = 1\n    return results\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmproquvose.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmproquvose.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmproquvose.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    splitTest =\
    \ test.split(' ')\n    hist = {}\n    for word in splitTest:\n        hist[word]\
    \ = splitTest.count(word)\n    hist2 = {}\n    for key, value in hist.items():\n\
    \        if value == max(hist.values()):\n            hist2[key] = value\n   \
    \ return hist2\n\ndef check(candidate):\n    assert candidate('a b b a') == {\
    \ 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # dict comprehension to create a dictionary with the\
    \ character and number of\n    # occurrences of each unique character\n    character_counts\
    \ = {char:test.count(char) for char in set(test)}\n    # frequency_counts is a\
    \ dict with the number of occurrences as the key and the characters\n    # with\
    \ that number of occurrences as a list as the value\n    frequency_counts = {count:[]\
    \ for count in character_counts.values()}\n    for char, count in character_counts.items():\n\
    \        frequency_counts[count].append(char)\n    # max_count stores the largest\
    \ number of occurrences for a character\n    max_count = max(frequency_counts.keys())\n\
    \    # return a dict with the characters with the most number of occurrences as\
    \ keys\n    # and their number of occurrences as values\n    return {char:max_count\
    \ for char in frequency_counts[max_count]}\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe6_wrzqk.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpe6_wrzqk.py\", line 40,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpe6_wrzqk.py\", line 30,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Create an empty dictionary to store the letter and\
    \ their counts\n    letter_count = {}\n    # Split the string into letters\n \
    \   letters = test.split(' ')\n    # Iterate through the letters,\n    for letter\
    \ in letters:\n        # If the letter is already in the dictionary, increment\
    \ the count by 1\n        if letter in letter_count:\n            letter_count[letter]\
    \ += 1\n        # Otherwise add it to the dictionary\n        else:\n        \
    \    letter_count[letter] = 1\n    # Find the maximum value of the dictionary\n\
    \    max_value = max(letter_count.values())\n    # Get all the keys that have\
    \ that value and return them\n    return {key:value for key, value in letter_count.items()\
    \ if value == max_value}\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7dijdqry.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp7dijdqry.py\", line 43,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp7dijdqry.py\", line 39,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # If a string is empty, then return an empty dictionary\n\
    \    if test == '':\n        return {}\n    # get the list of words, separate\
    \ by space\n    words = test.split()\n    # initialize an empty dictionary\n \
    \   occurence = {}\n    # for each word in the word list, get the count and store\
    \ in the dictionary\n    for word in words:\n        occurence[word] = words.count(word)\n\
    \    # get the max count from the dictionary\n    max_occurence = max(occurence.values())\n\
    \    # initialize an empty dictionary\n    result = {}\n    # search the dictionary\
    \ for the max count, and copy the dictionary to result dictionary\n    for key,\
    \ value in occurence.items():\n        if value == max_occurence:\n          \
    \  result[key] = value\n    # return the result dictionary\n    return result\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test_counter = Counter(test.split())\n    histogram\
    \ = dict()\n    highest_count = max(test_counter.values())\n    for letter, count\
    \ in test_counter.items():\n        if count == highest_count:\n            histogram[letter]\
    \ = count\n    return histogram\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphtk_zu37.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphtk_zu37.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphtk_zu37.py\", line 25,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n  File \"/tmp/tmphtk_zu37.py\"\
    , line 16, in histogram\n    test_counter = Counter(test.split())\nNameError:\
    \ name 'Counter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # Type check\n    assert isinstance(test, str), f\"\
    {test} is not a string\"\n    assert test.islower(), f\"{test} contains an uppercase\
    \ letter\"\n    assert all(char.isalpha() or char == ' ' for char in test), \\\
    \n        f\"{test} contains a special character\"\n\n    # empty string\n   \
    \ if test == '':\n        return {}\n\n    # core algorithm\n    result = {}\n\
    \    for char in test.split():\n        try:\n            result[char] += 1\n\
    \        except KeyError:\n            result[char] = 1\n    return result\n\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr3tv70md.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpr3tv70md.py\", line 47,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpr3tv70md.py\", line 38,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    test = test.split()\n\
    \    letter_count = {}\n    max_count = 1\n    for letter in test:\n        if\
    \ letter in letter_count:\n            letter_count[letter] += 1\n           \
    \ if letter_count[letter] > max_count:\n                max_count = letter_count[letter]\n\
    \        else:\n            letter_count[letter] = 1\n    max_count_letters =\
    \ []\n    for letter in letter_count:\n        if letter_count[letter] == max_count:\n\
    \            max_count_letters.append(letter)\n    for letter in max_count_letters:\n\
    \        letter_count[letter] = max_count\n    return letter_count\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz4y548t2.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpz4y548t2.py\", line 46,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpz4y548t2.py\", line 37,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # create dictionary of unique elements\n    unique_elements\
    \ = set(test.split())\n    unique_dict = {}\n    for element in unique_elements:\n\
    \        unique_dict[element] = 0\n\n    # split string\n    split_list = test.split()\n\
    \n    # keep a dictionary of occurrences\n    occurrences = {}\n    # use first\
    \ element as current max\n    max_count = 1\n    current_letter = split_list[0]\n\
    \    for element in split_list:\n        # convert letter to count\n        if\
    \ element in occurrences:\n            occurrences[element] += 1\n        else:\n\
    \            occurrences[element] = 1\n        # update letter count\n       \
    \ if occurrences[element] > max_count:\n            max_count = occurrences[element]\n\
    \            current_letter = element\n        elif occurrences[element] == max_count:\n\
    \            current_letter += element\n\n    # Add letter to occurrences to return\n\
    \    unique_dict[current_letter] = max_count\n    return unique_dict\n\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1q9d6yri.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmp1q9d6yri.py\", line 59,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp1q9d6yri.py\", line 49,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test = test.split()\n    d = dict()\n    d['a'] = 0\n\
    \    d['b'] = 0\n    d['c'] = 0\n    d['d'] = 0\n    d['e'] = 0\n    d['f'] =\
    \ 0\n    d['g'] = 0\n    d['h'] = 0\n    d['i'] = 0\n    d['j'] = 0\n    d['k']\
    \ = 0\n    d['l'] = 0\n    d['m'] = 0\n    d['n'] = 0\n    d['o'] = 0\n    d['p']\
    \ = 0\n    d['q'] = 0\n    d['r'] = 0\n    d['s'] = 0\n    d['t'] = 0\n    d['u']\
    \ = 0\n    d['v'] = 0\n    d['w'] = 0\n    d['x'] = 0\n    d['y'] = 0\n    d['z']\
    \ = 0\n    for i in test:\n        d[i] += 1\n    d = dict((k, v) for k, v in\
    \ d.items() if v > 0)\n    return d\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7i1itqj5.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp7i1itqj5.py\", line 60,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp7i1itqj5.py\", line 51,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # If test is empty, return an empty dictionary\n  \
    \  if test == '':\n        return {}\n    # Create an empty dictionary to store\
    \ the result in\n    result: Dict[str, int] = {}\n    # Create an empty list to\
    \ store the test data\n    data: List[str] = []\n    # Split the test string into\
    \ a list\n    data = test.split(' ')\n    # Get the number of occurrences for\
    \ each letter\n    for letter in data:\n        if letter in result:\n       \
    \     result[letter] += 1\n        else:\n            result[letter] = 1\n   \
    \ # Create a set to store the value of the most repeated letter(s)\n    most_repeated_set:\
    \ Set[int] = set()\n    # Populate the set with the number of occurrences of the\
    \ most repeated letter(s)\n    for item in result.values():\n        if item ==\
    \ max(result.values()):\n            most_repeated_set.add(item)\n    # Get the\
    \ value of the most repeated letter(s)\n    most_repeated: int = most_repeated_set.pop()\n\
    \    # Create a dictionary to store the result\n    final_result: Dict[str, int]\
    \ = {}\n    # Iterate over the dictionary\n    for letter, occurrences in result.items():\n\
    \        # If the number of occurrences is the same as the most repeated letter(s),\
    \ add the letter to the final result\n        if occurrences == most_repeated:\n\
    \            final_result[letter] = occurrences\n    # Return the final result\n\
    \    return final_result\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    chars = test.split(' ')\n    result = {}\n    for c\
    \ in chars:\n        if c in result:\n            result[c] += 1\n        else:\n\
    \            result[c] = 1\n    max_count = max(result.values())\n    return {k:\
    \ v for k, v in result.items() if v == max_count}\ndef check(candidate):\n   \
    \ assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b\
    \ c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1,\
    \ 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1,\
    \ 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpciktxyg4.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpciktxyg4.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpciktxyg4.py\", line 32,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    from collections import Counter\n    from operator\
    \ import itemgetter\n    c = Counter(test.split())\n    max_occ = max(c.values())\n\
    \    return {k: v for k, v in c.items() if v == max_occ}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc0d42mb1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpc0d42mb1.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpc0d42mb1.py\", line 29,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpc0d42mb1.py\",\
    \ line 19, in histogram\n    max_occ = max(c.values())\nValueError: max() arg\
    \ is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test_dict = {letter: 0 for letter in test.split()}\n\
    \    for letter in test.split():\n        test_dict[letter] += 1\n    return_dict\
    \ = {}\n    for key, value in test_dict.items():\n        if value == max(test_dict.values()):\n\
    \            return_dict[key] = value\n    return return_dict\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.split():\n    \
    \    if letter in result:\n            result[letter] += 1\n        else:\n  \
    \          result[letter] = 1\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpius7pgkn.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpius7pgkn.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpius7pgkn.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    letters = test.split()\n    for\
    \ letter in letters:\n        count = letters.count(letter)\n        histogram[letter]\
    \ = count\n    return histogram\n\nprint(histogram('a b c'))\nprint(histogram('a\
    \ b b a'))\nprint(histogram('a b c a b'))\nprint(histogram('b b b b a'))\nprint(histogram(''))\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2}\n{'a': 2, 'b': 2, 'c': 1}\n\
    {'b': 4, 'a': 1}\n{}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp7qldt2r.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpp7qldt2r.py\", line 39,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpp7qldt2r.py\", line 30,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    if test:\n        dic = {}\n        for c in test.split():\n\
    \            if c in dic:\n                dic[c] += 1\n            else:\n  \
    \              dic[c] = 1\n    else:\n        dic = {}\n    return dic\n\nprint(histogram('a\
    \ b c'))\nprint(histogram('a b b a'))\nprint(histogram('a b c a b'))\nprint(histogram('b\
    \ b b b a'))\nprint(histogram(''))\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2}\n{'a': 2, 'b': 2, 'c': 1}\n\
    {'b': 4, 'a': 1}\n{}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl7cx9gsr.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpl7cx9gsr.py\", line 43,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpl7cx9gsr.py\", line 34,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test.split():\n \
    \       if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3r37acu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpp3r37acu.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpp3r37acu.py\", line 26,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # TODO: Implement solution\n    return {}\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8gy4l9nx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8gy4l9nx.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp8gy4l9nx.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    def count_letter(str: str, letter: str) -> int:\n \
    \       count = 0\n        for char in str:\n            if char == letter:\n\
    \                count += 1\n        return count\n\n    if test == '':\n    \
    \    return {}\n\n    tokens = test.split(' ')\n    occurrences = {}\n    current_value\
    \ = count_letter(tokens, tokens[0])\n    occurrences[tokens[0]] = current_value\n\
    \    for token in tokens[1:]:\n        count = count_letter(tokens, token)\n \
    \       if count > current_value:\n            current_value = count\n       \
    \     occurrences = {token: count}\n        elif count == current_value:\n   \
    \         occurrences[token] = count\n    return occurrences\n\nprint(histogram('a\
    \ b c'))\nprint(histogram('a b b a'))\nprint(histogram('a b c a b'))\nprint(histogram('b\
    \ b b b a'))\nprint(histogram(''))\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: "{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2}\n{'a': 2, 'b': 2}\n{'b': 4}\n\
    {}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # TODO: implement this function\n    pass\n \n \n \n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8a3cq_ci.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp8a3cq_ci.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp8a3cq_ci.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    output = {}\n    list_of_letters = test.split(' ')\n\
    \    for letter in list_of_letters:\n        if letter in output:\n          \
    \  output[letter] += 1\n        else:\n            output[letter] = 1\n    max_occurance\
    \ = max(output.values())\n    output_max = {key: value for key, value in output.items()\
    \ if value == max_occurance}\n    return output_max\ndef check(candidate):\n \
    \   assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptshy2w97.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmptshy2w97.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmptshy2w97.py\", line 33,\
    \ in check\n    assert candidate('') == {  }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test.split():\n \
    \       if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    max_value = max(histogram.values())\n\
    \    return {key: value for key, value in histogram.items() if value == max_value}\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp41ma_ywe.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp41ma_ywe.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp41ma_ywe.py\", line 31,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmp41ma_ywe.py\",\
    \ line 22, in histogram\n    max_value = max(histogram.values())\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    res = {}\n    if test == '':\n        return res\n\
    \    else:\n        test = test.split(' ')\n        maxx = 1\n        for letter\
    \ in test:\n            res[letter] = res.get(letter, 0) + 1\n            if res[letter]\
    \ > maxx:\n                maxx = res[letter]\n    return {k: v for k, v in res.items()\
    \ if v == maxx}\ndef check(candidate):\n    assert candidate('a b b a') == { 'a':\
    \ 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    hist = dict()\n    for char in test.split(' '):\n \
    \       hist[char] = hist.get(char, 0) + 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpms4kcn44.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpms4kcn44.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpms4kcn44.py\", line 23,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    # raise NotImplementedError()\n\n    # \u5B57\u5178\
    \u5B58\u50A8\u5B57\u6BCD\u4E0E\u51FA\u73B0\u6B21\u6570\n    dic = {}\n    # \u82E5\
    \u8F93\u5165\u7A7A\u4E32\n    if test == '':\n        return dic\n    # \u6309\
    \u7A7A\u683C\u5206\u5272\u5B57\u7B26\u4E32\n    tmp = test.split(' ')\n    # \u904D\
    \u5386\u5206\u5272\u540E\u7684list\n    for i in tmp:\n        # \u82E5\u5B57\u5178\
    \u4E2D\u5305\u542B\u8BE5\u5B57\u6BCD\uFF0C\u5219\u6B21\u6570\u52A01\n        if\
    \ i in dic:\n            dic[i] += 1\n        # \u5426\u5219\uFF0C\u5728\u5B57\
    \u5178\u4E2D\u65B0\u5EFA\u8BE5\u5B57\u6BCD\uFF0C\u5E76\u521D\u59CB\u5316\u6B21\
    \u6570\u4E3A1\n        else:\n            dic[i] = 1\n    # \u5B57\u5178\u7684\
    \u503C\u6392\u5E8F\uFF0C\u9006\u5E8F\n    dic = sorted(dic.items(), key=lambda\
    \ x: x[1], reverse=True)\n    # \u4EE5\u5B57\u5178\u7684\u6B21\u6570\u4E3A\u6807\
    \u51C6\uFF0C\u5C06\u51FA\u73B0\u6B21\u6570\u4E00\u6837\u7684\u5B57\u6BCD\u5B58\
    \u5165\u65B0\u5B57\u5178res\n    res = {}\n    for i in dic:\n        if i[1]\
    \ == dic[0][1]:\n            res[i[0]] = i[1]\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    #this is a helper function that returns a dict of all\
    \ chars in the string\n    #and their corresponding count\n    def helper(test):\n\
    \        d = {}\n        for i in test:\n            if i in d:\n            \
    \    d[i] += 1\n            else:\n                d[i] = 1\n        return d\n\
    \    \n    dict_a = helper(test)\n    dict_b = {}\n    max_val = 0\n    for i\
    \ in dict_a:\n        if dict_a[i] > max_val:\n            max_val = dict_a[i]\n\
    \    for i in dict_a:\n        if dict_a[i] == max_val:\n            dict_b[i]\
    \ = max_val\n    return dict_b\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9szu_7ox.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp9szu_7ox.py\", line 49,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp9szu_7ox.py\", line 39,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    histogram = {}\n    most_occuring = {}\n    max_count\
    \ = 0\n    if test:\n        for letter in test.split():\n            if letter\
    \ in histogram:\n                histogram[letter] += 1\n            else:\n \
    \               histogram[letter] = 1\n            if histogram[letter] > max_count:\n\
    \                max_count = histogram[letter]\n                most_occuring\
    \ = {letter: max_count}\n            elif histogram[letter] == max_count:\n  \
    \              most_occuring[letter] = max_count\n    return most_occuring\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    occurences = {}\n    letters = [l for l in test.split('\
    \ ') if l]\n    for l in letters:\n        if l in occurences:\n            occurences[l]\
    \ += 1\n        else:\n            occurences[l] = 1\n    max_occurence = max(occurences.values())\n\
    \    return {l: occurences[l] for l in occurences if occurences[l] == max_occurence}\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc0ws_q00.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpc0ws_q00.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpc0ws_q00.py\", line 32,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpc0ws_q00.py\",\
    \ line 23, in histogram\n    max_occurence = max(occurences.values())\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    test = test.split()\n    hist = {}\n    for word in\
    \ test:\n        hist[word] = hist.get(word, 0) + 1\n    max_occurence = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_occurence}\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnzj324l5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnzj324l5.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpnzj324l5.py\", line 29,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpnzj324l5.py\",\
    \ line 20, in histogram\n    max_occurence = max(hist.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpha2e38is.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpha2e38is.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpha2e38is.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\n    hist: Dict[str, int] = {}\n    count: int = 0\n   \
    \ max_count: int = 0\n    for letter in test.split():\n        if letter in hist:\n\
    \            hist[letter] += 1\n        else:\n            hist[letter] = 1\n\
    \    for key, value in hist.items():\n        if value > max_count:\n        \
    \    max_count = value\n            count = 1\n        elif value == max_count:\n\
    \            count += 1\n    if count == 1:\n        return {key: value for key,\
    \ value in hist.items() if value == max_count}\n    else:\n        return hist\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_tkxz9ww.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp_tkxz9ww.py\", line 46,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp_tkxz9ww.py\", line 37,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
