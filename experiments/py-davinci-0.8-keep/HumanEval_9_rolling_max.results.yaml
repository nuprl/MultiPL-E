name: HumanEval_9_rolling_max
language: py
results:
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max = numbers[0]\n\
    \    rolling_max = []\n    for i in range(len(numbers)):\n        if numbers[i]\
    \ > max:\n            max = numbers[i]\n        rolling_max.append(max)\n    return\
    \ rolling_max\n\n\ndef check(candidate):\n    assert candidate([]) == []\n   \
    \ assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpapwcx_ge.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpapwcx_ge.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpapwcx_ge.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpapwcx_ge.py\"\
    , line 9, in rolling_max\n    max = numbers[0]\nIndexError: list index out of\
    \ range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    res = [numbers[0]]\n\
    \    for i in range(1, len(numbers)):\n        if numbers[i] > res[-1]:\n    \
    \        res.append(numbers[i])\n        else:\n            res.append(res[-1])\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([]) == []\n   \
    \ assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpozg9vkxl.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpozg9vkxl.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpozg9vkxl.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpozg9vkxl.py\"\
    , line 9, in rolling_max\n    res = [numbers[0]]\nIndexError: list index out of\
    \ range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_elements\
    \ = [numbers[0]]\n    max_element = numbers[0]\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_element:\n            max_element = numbers[i]\n\
    \        rolling_max_elements.append(max_element)\n    return rolling_max_elements\n\
    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwrvssnmm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwrvssnmm.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpwrvssnmm.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpwrvssnmm.py\"\
    , line 9, in rolling_max\n    rolling_max_elements = [numbers[0]]\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maximum = numbers[0]\n\
    \    res = [maximum]\n    for n in numbers[1:]:\n        maximum = max(maximum,\
    \ n)\n        res.append(maximum)\n    return res\n\ndef check(candidate):\n \
    \   assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr4n_sxy9.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpr4n_sxy9.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpr4n_sxy9.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpr4n_sxy9.py\"\
    , line 9, in rolling_max\n    maximum = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    max_value = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i]\
    \ > max_value:\n            max_value = numbers[i]\n        result.append(max_value)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfa__mxlm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfa__mxlm.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpfa__mxlm.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpfa__mxlm.py\"\
    , line 10, in rolling_max\n    max_value = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_value = numbers[0]\n\
    \    max_numbers = [max_value]\n    for number in numbers[1:]:\n        if number\
    \ > max_value:\n            max_value = number\n        max_numbers.append(max_value)\n\
    \    return max_numbers\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplry8uur8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmplry8uur8.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmplry8uur8.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmplry8uur8.py\"\
    , line 9, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    max_so_far = numbers[0]\n    for n in numbers:\n        if n > max_so_far:\n\
    \            max_so_far = n\n        result.append(max_so_far)\n    return result\n\
    \nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: "[1, 2, 3, 3, 3, 4, 4]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrwre8ad.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfrwre8ad.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpfrwre8ad.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpfrwre8ad.py\"\
    , line 10, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [numbers[0]]\n\
    \    for i in range(1, len(numbers)):\n        result.append(max(result[i-1],\
    \ numbers[i]))\n    return result\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9d8mhb0h.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp9d8mhb0h.py\", line 21,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp9d8mhb0h.py\", line\
    \ 15, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp9d8mhb0h.py\"\
    , line 9, in rolling_max\n    result = [numbers[0]]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max =\
    \ []\n    max_so_far = None\n    for number in numbers:\n        if number > max_so_far:\n\
    \            max_so_far = number\n        rolling_max.append(max_so_far)\n   \
    \ return rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0824j6xq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0824j6xq.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp0824j6xq.py\", line\
    \ 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  File \"\
    /tmp/tmp0824j6xq.py\", line 12, in rolling_max\n    if number > max_so_far:\n\
    TypeError: '>' not supported between instances of 'int' and 'NoneType'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    result = []\n    max_seen = numbers[0]\n    for n in numbers:\n\
    \        if n > max_seen:\n            max_seen = n\n        result.append(max_seen)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    current_max = numbers[0]\n    for n in numbers:\n        if n > current_max:\n\
    \            current_max = n\n        result.append(current_max)\n    return result\n\
    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7l3jssmp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7l3jssmp.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp7l3jssmp.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp7l3jssmp.py\"\
    , line 10, in rolling_max\n    current_max = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    ret = []\n  \
    \  if len(numbers) == 0:\n        return ret\n    max_elem = numbers[0]\n    ret.append(max_elem)\n\
    \    for x in numbers[1:]:\n        max_elem = max(max_elem, x)\n        ret.append(max_elem)\n\
    \    return ret\n\ndef check(candidate):\n    assert candidate([]) == []\n   \
    \ assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    current_max = numbers[0]\n    rolling_max_list.append(current_max)\n\
    \    for i in range(1, len(numbers)):\n        if numbers[i] > current_max:\n\
    \            current_max = numbers[i]\n        rolling_max_list.append(current_max)\n\
    \    return rolling_max_list\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfh5oqtpb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfh5oqtpb.py\", line 26,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpfh5oqtpb.py\", line\
    \ 20, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpfh5oqtpb.py\"\
    , line 10, in rolling_max\n    current_max = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    current_max = numbers[0]\n    for number in numbers:\n        if number >\
    \ current_max:\n            current_max = number\n        result.append(current_max)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx6vs7zez.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx6vs7zez.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpx6vs7zez.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpx6vs7zez.py\"\
    , line 10, in rolling_max\n    current_max = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    max_so_far = numbers[0]\n    for n in numbers:\n        if n > max_so_far:\n\
    \            max_so_far = n\n        result.append(max_so_far)\n    return result\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp37wz7dpa.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp37wz7dpa.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp37wz7dpa.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp37wz7dpa.py\"\
    , line 10, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max =\
    \ []\n    curr_max = -1\n    for num in numbers:\n        if num > curr_max:\n\
    \            curr_max = num\n        rolling_max.append(curr_max)\n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n \
    \   result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[i-1],\
    \ numbers[i]))\n    return result\n\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: "[1, 2, 3, 3, 3, 4, 4]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max =\
    \ []\n    current_max = -float('inf')\n    for number in numbers:\n        if\
    \ number > current_max:\n            current_max = number\n        rolling_max.append(current_max)\n\
    \    return rolling_max\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    # First, traverse\
    \ the list of elements and track the maximum seen one at a time.\n    max_number\
    \ = numbers[0]\n    max_numbers = [max_number]\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_number:\n            max_number = numbers[i]\n  \
    \      max_numbers.append(max_number)\n    return max_numbers\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8vto3w9v.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8vto3w9v.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp8vto3w9v.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp8vto3w9v.py\"\
    , line 10, in rolling_max\n    max_number = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    res = []\n  \
    \  if not numbers:\n        return res\n    res.append(numbers[0])\n    max_val\
    \ = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] >\
    \ max_val:\n            max_val = numbers[i]\n        res.append(max_val)\n  \
    \  return res\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_rolling_list\
    \ = []\n    last_max = numbers[0]\n    max_rolling_list.append(last_max)\n   \
    \ for elem in numbers[1:]:\n        if elem > last_max:\n            last_max\
    \ = elem\n        max_rolling_list.append(last_max)\n    return max_rolling_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbo1ru6t.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptbo1ru6t.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmptbo1ru6t.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmptbo1ru6t.py\"\
    , line 10, in rolling_max\n    last_max = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    max_value = 0\n    for num in numbers:\n        if num > max_value:\n\
    \            max_value = num\n        rolling_max_list.append(max_value)\n   \
    \ return rolling_max_list\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    cnt = [numbers[0]]\n\
    \    for i in range(1, len(numbers)):\n        if numbers[i] > cnt[-1]:\n    \
    \        cnt.append(numbers[i])\n        else:\n            cnt.append(cnt[-1])\n\
    \    return cnt\n\ndef check(candidate):\n    assert candidate([]) == []\n   \
    \ assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjd38gk7q.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpjd38gk7q.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpjd38gk7q.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpjd38gk7q.py\"\
    , line 9, in rolling_max\n    cnt = [numbers[0]]\nIndexError: list index out of\
    \ range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_so_far\
    \ = numbers[0]\n    rolling_maxes = [rolling_max_so_far]\n    for n in numbers[1:]:\n\
    \        rolling_max_so_far = max(rolling_max_so_far, n)\n        rolling_maxes.append(rolling_max_so_far)\n\
    \    return rolling_maxes\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpevxxuluc.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpevxxuluc.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpevxxuluc.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpevxxuluc.py\"\
    , line 9, in rolling_max\n    rolling_max_so_far = numbers[0]\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    maximum = 0\n    for i in numbers:\n        maximum = max(maximum, i)\n \
    \       result.append(maximum)\n    return result\n\ndef check(candidate):\n \
    \   assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = []\n\
    \    max_val = numbers[0]\n    for num in numbers:\n        if num > max_val:\n\
    \            max_val = num\n        max_list.append(max_val)\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmvzartqv.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpmvzartqv.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpmvzartqv.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpmvzartqv.py\"\
    , line 10, in rolling_max\n    max_val = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    tmp_max = numbers[0]\n\
    \    result = []\n    for x in numbers:\n        if x > tmp_max:\n           \
    \ tmp_max = x\n        result.append(tmp_max)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpffyf5fmb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpffyf5fmb.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpffyf5fmb.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpffyf5fmb.py\"\
    , line 9, in rolling_max\n    tmp_max = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far =\
    \ None\n    result = []\n    for number in numbers:\n        if number > max_so_far:\n\
    \            max_so_far = number\n        result.append(max_so_far)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3tapbdu.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpk3tapbdu.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpk3tapbdu.py\", line\
    \ 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  File \"\
    /tmp/tmpk3tapbdu.py\", line 12, in rolling_max\n    if number > max_so_far:\n\
    TypeError: '>' not supported between instances of 'int' and 'NoneType'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    lst = []\n  \
    \  for i in range(len(numbers)):\n        lst.append(max(numbers[:i+1]))\n   \
    \ return lst\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_val = numbers[0]\n\
    \    max_numbers = [max_val]\n    for number in numbers[1:]:\n        if number\
    \ > max_val:\n            max_val = number\n        max_numbers.append(max_val)\n\
    \    return max_numbers\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnhz2wheb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpnhz2wheb.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpnhz2wheb.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpnhz2wheb.py\"\
    , line 9, in rolling_max\n    max_val = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    numbers = [None]\
    \ + numbers\n    data = [0] * len(numbers)\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > numbers[data[i - 1]]:\n            data[i] = i\n    \
    \    else:\n            data[i] = data[i - 1]\n    return data[1:]\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpza2ey98o.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpza2ey98o.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpza2ey98o.py\", line\
    \ 20, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  File \"\
    /tmp/tmpza2ey98o.py\", line 12, in rolling_max\n    if numbers[i] > numbers[data[i\
    \ - 1]]:\nTypeError: '>' not supported between instances of 'int' and 'NoneType'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    highest = numbers[0]\n    for item in numbers:\n        if item > highest:\n\
    \            highest = item\n        result.append(highest)\n    return result\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1yz8odq3.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1yz8odq3.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp1yz8odq3.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp1yz8odq3.py\"\
    , line 10, in rolling_max\n    highest = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_till_now\
    \ = numbers[0]\n    results = [max_till_now]\n    for num in numbers[1:]:\n  \
    \      if num > max_till_now:\n            max_till_now = num\n        results.append(max_till_now)\n\
    \    return results\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxhmr7pk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwxhmr7pk.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpwxhmr7pk.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpwxhmr7pk.py\"\
    , line 9, in rolling_max\n    max_till_now = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far =\
    \ numbers[0]\n    rolling_max_list = [max_so_far]\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      rolling_max_list.append(max_so_far)\n    return rolling_max_list\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxs6ppuii.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxs6ppuii.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxs6ppuii.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxs6ppuii.py\"\
    , line 9, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maxes = []\n\
    \    current_max = 0\n    for number in numbers:\n        if number > current_max:\n\
    \            current_max = number\n        maxes.append(current_max)\n    return\
    \ maxes\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    max_value = -1\n    for n in numbers:\n        max_value = max(max_value,\
    \ n)\n        result.append(max_value)\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    # initial max\
    \ by first element\n    max_current = numbers[0]\n    max_so_far = [max_current]\n\
    \    # start from second element\n    for n in numbers[1:]:\n        # if n is\
    \ greater, n is the new max\n        if n > max_current:\n            max_current\
    \ = n\n        # if n is smaller, max stays the same\n        max_so_far.append(max_current)\n\
    \    return max_so_far\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxu53f4un.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxu53f4un.py\", line 28,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxu53f4un.py\", line\
    \ 22, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxu53f4un.py\"\
    , line 10, in rolling_max\n    max_current = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maximum\
    \ = []\n    for i in range(len(numbers)):\n        rolling_maximum.append(max(numbers[:i+1]))\n\
    \    return rolling_maximum\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    current_max = -1\n    for i in numbers:\n        if i > current_max:\n  \
    \          current_max = i\n        result.append(current_max)\n    return result\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    output = [numbers[0]]\n\
    \    current_max = numbers[0]\n    for num in numbers[1:]:\n        current_max\
    \ = max(current_max, num)\n        output.append(current_max)\n    return output\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5hxquzir.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp5hxquzir.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp5hxquzir.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp5hxquzir.py\"\
    , line 9, in rolling_max\n    output = [numbers[0]]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    ret = []\n  \
    \  ret.append(numbers[0])\n    for i in range(1, len(numbers)):\n        ret.append(max(ret[i-1],\
    \ numbers[i]))\n    return ret\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe1e17w8j.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpe1e17w8j.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpe1e17w8j.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpe1e17w8j.py\"\
    , line 10, in rolling_max\n    ret.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = [numbers[0]]\n\
    \    for number in numbers[1:]:\n        max_list.append(max(max_list[-1], number))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6msioen0.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp6msioen0.py\", line 21,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp6msioen0.py\", line\
    \ 15, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp6msioen0.py\"\
    , line 9, in rolling_max\n    max_list = [numbers[0]]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    max_so_far = numbers[0]\n    max_elements = [max_so_far]\n\
    \    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n    \
    \    max_elements.append(max_so_far)\n    return max_elements\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    res = []\n  \
    \  max_num = -1\n    for num in numbers:\n        if num > max_num:\n        \
    \    max_num = num\n        res.append(max_num)\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maximum = 0\n\
    \    result = [0]\n    for index, number in enumerate(numbers):\n        if number\
    \ > maximum:\n            maximum = number\n        result.append(maximum)\n \
    \   return result\n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5slo5iz.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpw5slo5iz.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpw5slo5iz.py\", line\
    \ 18, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_number =\
    \ numbers[0]\n    result = [max_number]\n    for number in numbers[1:]:\n    \
    \    if number > max_number:\n            max_number = number\n        result.append(max_number)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2e8pyen7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp2e8pyen7.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp2e8pyen7.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp2e8pyen7.py\"\
    , line 9, in rolling_max\n    max_number = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [numbers[0]]\n\
    \n    for i in range(1, len(numbers)):\n        result.append(max(result[i - 1],\
    \ numbers[i]))\n\n    return result\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyfl9th8e.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpyfl9th8e.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpyfl9th8e.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpyfl9th8e.py\"\
    , line 9, in rolling_max\n    result = [numbers[0]]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    length = len(numbers)\n\
    \    max_seen = numbers[0]\n    result = [max_seen]\n    for i in range(1, length):\n\
    \        if numbers[i] > max_seen:\n            max_seen = numbers[i]\n      \
    \  result.append(max_seen)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplfux54s8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplfux54s8.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmplfux54s8.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmplfux54s8.py\"\
    , line 10, in rolling_max\n    max_seen = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far =\
    \ numbers[0]\n    max_list = [max_so_far]\n    for num in numbers[1:]:\n     \
    \   if num > max_so_far:\n            max_so_far = num\n        max_list.append(max_so_far)\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_z_hhd9.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpi_z_hhd9.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpi_z_hhd9.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpi_z_hhd9.py\"\
    , line 9, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far =\
    \ numbers[0]\n    output = [max_so_far]\n    for i in range(1, len(numbers)):\n\
    \        cur_max = max(max_so_far, numbers[i])\n        output.append(cur_max)\n\
    \        max_so_far = cur_max\n    return output\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptq_yuxj7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptq_yuxj7.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmptq_yuxj7.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmptq_yuxj7.py\"\
    , line 9, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_elements\
    \ = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number\
    \ > current_max:\n            current_max = number\n        max_elements.append(current_max)\n\
    \    return max_elements\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4gtxatt8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp4gtxatt8.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp4gtxatt8.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp4gtxatt8.py\"\
    , line 10, in rolling_max\n    current_max = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    buffer = []\n    for n in numbers:\n        if len(buffer) == 0:\n      \
    \      buffer.append(n)\n        else:\n            if n > buffer[-1]:\n     \
    \           buffer.append(n)\n            else:\n                buffer.append(buffer[-1])\n\
    \        result.append(buffer[-1])\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    ret = []\n  \
    \  curr_max = numbers[0]\n    for num in numbers:\n        if num > curr_max:\n\
    \            curr_max = num\n        ret.append(curr_max)\n    return ret\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6tufco6n.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6tufco6n.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp6tufco6n.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp6tufco6n.py\"\
    , line 10, in rolling_max\n    curr_max = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    prefix_max =\
    \ []\n    current_max = -math.inf\n    for number in numbers:\n        current_max\
    \ = max(current_max, number)\n        prefix_max.append(current_max)\n    return\
    \ prefix_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0vfyssa2.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp0vfyssa2.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp0vfyssa2.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp0vfyssa2.py\"\
    , line 10, in rolling_max\n    current_max = -math.inf\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_numbers =\
    \ []\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n\
    \            max_num = num\n        max_numbers.append(max_num)\n    return max_numbers\n\
    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr1ib1qzz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpr1ib1qzz.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpr1ib1qzz.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpr1ib1qzz.py\"\
    , line 10, in rolling_max\n    max_num = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = []\n\
    \    current_max = 0\n    for number in numbers:\n        current_max = max(current_max,\
    \ number)\n        max_list.append(current_max)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    results = []\n\
    \    max_num = 0\n    for num in numbers:\n        max_num = max(max_num, num)\n\
    \        results.append(max_num)\n    return results\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    l = len(numbers)\n\
    \    if l == 0:\n        return []\n    if l == 1:\n        return [numbers[0]]\n\
    \    maximum = numbers[0]\n    result = [maximum]\n    for i in range(1, l):\n\
    \        n = numbers[i]\n        if n > maximum:\n            maximum = n\n  \
    \      result.append(maximum)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    rolling_max = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        rolling_max.append(max(rolling_max[i-1], numbers[i]))\n    return rolling_max\n\
    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    res = []\n  \
    \  a_max = numbers[0]\n    for n in numbers:\n        if n > a_max:\n        \
    \    a_max = n\n        res.append(a_max)\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxvggx0jl.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxvggx0jl.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxvggx0jl.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxvggx0jl.py\"\
    , line 10, in rolling_max\n    a_max = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_num = numbers[0]\n\
    \    results = [max_num]\n    for i in range(1, len(numbers)):\n        max_num\
    \ = max(max_num, numbers[i])\n        results.append(max_num)\n    return results\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1e5brmhf.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp1e5brmhf.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp1e5brmhf.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp1e5brmhf.py\"\
    , line 9, in rolling_max\n    max_num = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    res = []\n  \
    \  cur_max = numbers[0]\n    for n in numbers:\n        if n > cur_max:\n    \
    \        cur_max = n\n        res.append(cur_max)\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx1f9dmzf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpx1f9dmzf.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpx1f9dmzf.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpx1f9dmzf.py\"\
    , line 10, in rolling_max\n    cur_max = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    i = 0\n    while\
    \ i < len(numbers):\n        if i == 0:\n            max_element = numbers[i]\n\
    \        else:\n            max_element = max(max_element, numbers[i])\n     \
    \   numbers[i] = max_element\n        i += 1\n    return numbers\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    # TODO: add your\
    \ code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1b9v3see.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp1b9v3see.py\", line 20,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp1b9v3see.py\", line\
    \ 14, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    ret = []\n  \
    \  ret.append(numbers[0])\n    for i in range(1, len(numbers)):\n        ret.append(max(ret[i-1],\
    \ numbers[i]))\n    return ret\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp74xvwmgn.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp74xvwmgn.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp74xvwmgn.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp74xvwmgn.py\"\
    , line 10, in rolling_max\n    ret.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    out = []\n  \
    \  _max = numbers[0]\n    for e in numbers:\n        _max = max(_max, e)\n   \
    \     out.append(_max)\n    return out\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvo3rnrmi.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpvo3rnrmi.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpvo3rnrmi.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpvo3rnrmi.py\"\
    , line 10, in rolling_max\n    _max = numbers[0]\nIndexError: list index out of\
    \ range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    max_seen = numbers[0]\n    for i in range(1, len(numbers)):\n\
    \        num = numbers[i]\n        if num > max_seen:\n            max_seen =\
    \ num\n        numbers[i] = max_seen\n    return numbers\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    output = []\n\
    \    max_val = numbers[0]\n    for x in numbers:\n        if x > max_val:\n  \
    \          max_val = x\n        output.append(max_val)\n    return output\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydrf4i6w.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpydrf4i6w.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpydrf4i6w.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpydrf4i6w.py\"\
    , line 10, in rolling_max\n    max_val = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    if not numbers:\n        return result\n    curr_max = numbers[0]\n    result.append(curr_max)\n\
    \    for num in numbers[1:]:\n        if num > curr_max:\n            curr_max\
    \ = num\n        result.append(curr_max)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [numbers[0]]\n\
    \    for number in numbers[1:]:\n        result.append(max(result[-1], number))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_imfaa6d.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp_imfaa6d.py\", line 21,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp_imfaa6d.py\", line\
    \ 15, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp_imfaa6d.py\"\
    , line 9, in rolling_max\n    result = [numbers[0]]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    num_stack = []\n\
    \    max_stack = []\n    for num in numbers:\n        if not num_stack or num\
    \ >= num_stack[-1]:\n            num_stack.append(num)\n            max_stack.append(num)\n\
    \        else:\n            num_stack.append(num)\n            max_stack.append(max_stack[-1])\n\
    \    return max_stack\n\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    current_max =\
    \ 0\n    rolling_max_seq = []\n    for i in numbers:\n        current_max = max(current_max,\
    \ i)\n        rolling_max_seq.append(current_max)\n    return rolling_max_seq\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    memo = []\n\n\
    \    for i in range(len(numbers)):\n        memo.append(max(numbers[:i+1]))\n\n\
    \    return memo\n\ndef check(candidate):\n    assert candidate([]) == []\n  \
    \  assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    ret = []\n  \
    \  curr_max = numbers[0]\n    for i in range(len(numbers)):\n        curr_max\
    \ = max(curr_max, numbers[i])\n        ret.append(curr_max)\n    return ret\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5rs7g419.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp5rs7g419.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp5rs7g419.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp5rs7g419.py\"\
    , line 10, in rolling_max\n    curr_max = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    max_element = numbers[0]\n    for element in numbers:\n        if element\
    \ > max_element:\n            max_element = element\n        result.append(max_element)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgsbvrrf5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpgsbvrrf5.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpgsbvrrf5.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpgsbvrrf5.py\"\
    , line 10, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_stack = []\n\
    \    max_value = 0\n    for num in numbers:\n        if num > max_value:\n   \
    \         max_value = num\n        max_stack.append(max_value)\n    return max_stack\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    out = []\n  \
    \  for i in range(len(numbers)):\n        out.append(max(numbers[:i+1]))\n   \
    \ return out\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    roll_max: List[int]\
    \ = []\n    for i in range(len(numbers)):\n        if i == 0:\n            roll_max.append(numbers[i])\n\
    \        else:\n            if numbers[i] > roll_max[i-1]:\n                roll_max.append(numbers[i])\n\
    \            else:\n                roll_max.append(roll_max[i-1])\n    return\
    \ roll_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max =\
    \ [0] * len(numbers)\n    current_max = 0\n    for i, num in enumerate(numbers):\n\
    \        if num > current_max:\n            current_max = num\n        rolling_max[i]\
    \ = current_max\n    return rolling_max\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    max_found = numbers[0]\n    for elem in numbers:\n        if elem\
    \ > max_found:\n            max_found = elem\n        rolling_max_list.append(max_found)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7yl59xj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpy7yl59xj.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpy7yl59xj.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpy7yl59xj.py\"\
    , line 10, in rolling_max\n    max_found = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n \
    \   result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[i-1],\
    \ numbers[i]))\n    return result\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    output = [0]\
    \ * len(numbers)\n    max_elem = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_elem:\n            max_elem = numbers[i]\n      \
    \  output[i] = max_elem\n    return output\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxkdo352t.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxkdo352t.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxkdo352t.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxkdo352t.py\"\
    , line 10, in rolling_max\n    max_elem = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_el = numbers[0]\n\
    \    numbers_with_max = [max_el]\n    for el in numbers[1:]:\n        if el >\
    \ max_el:\n            max_el = el\n        numbers_with_max.append(max_el)\n\
    \    return numbers_with_max\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4uicp_i.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpj4uicp_i.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpj4uicp_i.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpj4uicp_i.py\"\
    , line 9, in rolling_max\n    max_el = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    else:\n        local_max = numbers[0]\n        result\
    \ = [local_max]\n        for number in numbers[1:]:\n            if number > local_max:\n\
    \                local_max = number\n            result.append(local_max)\n  \
    \      return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    max_so_far = [numbers[0]]\n    for num in numbers[1:]:\n\
    \        max_so_far.append(max(max_so_far[-1], num))\n    return max_so_far\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    # init\n    rolling_max_arr\
    \ = []\n    rolling_max = 0\n    # loop\n    for num in numbers:\n        rolling_max\
    \ = max(rolling_max, num)\n        rolling_max_arr.append(rolling_max)\n    return\
    \ rolling_max_arr\n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    current_max = None\n    for n in numbers:\n        if current_max is None\
    \ or n > current_max:\n            current_max = n\n        result.append(current_max)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    max_element = numbers[0]\n    for i in range(0, len(numbers)):\n        max_element\
    \ = max(max_element, numbers[i])\n        result.append(max_element)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz3_whzhl.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpz3_whzhl.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpz3_whzhl.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpz3_whzhl.py\"\
    , line 10, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    m = numbers[0]\n    for number in numbers:\n        if number > m:\n    \
    \        m = number\n        result.append(m)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvfmixhu0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpvfmixhu0.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpvfmixhu0.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpvfmixhu0.py\"\
    , line 10, in rolling_max\n    m = numbers[0]\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_values =\
    \ []\n    max_value = numbers[0]\n    for number in numbers:\n        if number\
    \ > max_value:\n            max_value = number\n        max_values.append(max_value)\n\
    \    return max_values\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3dwfrtvt.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp3dwfrtvt.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp3dwfrtvt.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp3dwfrtvt.py\"\
    , line 10, in rolling_max\n    max_value = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maximums = []\n\
    \    max_number = -1\n    for number in numbers:\n        if number > max_number:\n\
    \            max_number = number\n        maximums.append(max_number)\n    return\
    \ maximums\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    res = [numbers[0]]\n\
    \    for i in range(1, len(numbers)):\n        res.append(max(res[i-1], numbers[i]))\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([]) == []\n   \
    \ assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4suug16v.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp4suug16v.py\", line 21,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp4suug16v.py\", line\
    \ 15, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp4suug16v.py\"\
    , line 9, in rolling_max\n    res = [numbers[0]]\nIndexError: list index out of\
    \ range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [numbers[0]]\n\
    \    for i in range(1, len(numbers)):\n        if numbers[i] > result[-1]:\n \
    \           result.append(numbers[i])\n        else:\n            result.append(result[-1])\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdc62smp.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpkdc62smp.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpkdc62smp.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpkdc62smp.py\"\
    , line 9, in rolling_max\n    result = [numbers[0]]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_elements\
    \ = []\n    for idx, number in enumerate(numbers):\n        if not max_elements:\n\
    \            max_elements.append(number)\n        else:\n            if number\
    \ >= max_elements[-1]:\n                max_elements.append(number)\n        \
    \    else:\n                max_elements.append(max_elements[-1])\n    return\
    \ max_elements\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    current_max = 0\n    for num in numbers:\n        if num > current_max:\n\
    \            current_max = num\n        rolling_maxes.append(current_max)\n  \
    \  return rolling_maxes\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i]\
    \ > rolling_max_list[-1]:\n            rolling_max_list.append(numbers[i])\n \
    \       else:\n            rolling_max_list.append(rolling_max_list[-1])\n   \
    \ return rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvs363i82.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpvs363i82.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpvs363i82.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpvs363i82.py\"\
    , line 9, in rolling_max\n    rolling_max_list = [numbers[0]]\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    max_element = numbers[0]\n    for i in range(0, len(numbers)):\n        if\
    \ max_element < numbers[i]:\n            max_element = numbers[i]\n        result.append(max_element)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpexlujyd4.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpexlujyd4.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpexlujyd4.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpexlujyd4.py\"\
    , line 10, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = []\n\
    \    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n\
    \            max_num = num\n        max_list.append(max_num)\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpduu21jql.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpduu21jql.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpduu21jql.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpduu21jql.py\"\
    , line 10, in rolling_max\n    max_num = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    m = []\n    for\
    \ n in numbers:\n        m.append(max(m[-1], n) if m else n)\n    return m\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    # Idea:\n   \
    \ # As we iterate over the given list, keep track of maximum found so far, and\
    \ write it down as the\n    # next element of the new list\n    rolling_max: List[int]\
    \ = []\n    local_max: int = -1\n    for number in numbers:\n        local_max\
    \ = max(local_max, number)\n        rolling_max.append(local_max)\n    return\
    \ rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maximum = 0\n\
    \    max_list = []\n    for number in numbers:\n        maximum = max(maximum,\
    \ number)\n        max_list.append(maximum)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far =\
    \ 0\n    max_list = []\n    for num in numbers:\n        if num > max_so_far:\n\
    \            max_so_far = num\n        max_list.append(max_so_far)\n    return\
    \ max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_numbers =\
    \ []\n    max_number = None\n    for number in numbers:\n        if max_number\
    \ is None or number > max_number:\n            max_number = number\n        max_numbers.append(max_number)\n\
    \    return max_numbers\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maximums = []\n\
    \    current_max = None\n    for number in numbers:\n        if current_max is\
    \ None or number > current_max:\n            current_max = number\n        maximums.append(current_max)\n\
    \    return maximums\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maximums = []\n\
    \    maximums.append(numbers[0])\n    for i in range(1, len(numbers)):\n     \
    \   maximums.append(max(maximums[i-1], numbers[i]))\n    return maximums\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxg083t4u.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpxg083t4u.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxg083t4u.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxg083t4u.py\"\
    , line 10, in rolling_max\n    maximums.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rmax = numbers[0]\n\
    \    res = [rmax]\n    for i in range(1, len(numbers)):\n        if numbers[i]\
    \ > rmax:\n            rmax = numbers[i]\n        res.append(rmax)\n    return\
    \ res\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmped8iqaud.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmped8iqaud.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmped8iqaud.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmped8iqaud.py\"\
    , line 9, in rolling_max\n    rmax = numbers[0]\nIndexError: list index out of\
    \ range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    curr_max = 0\n\
    \    result = []\n    for idx, num in enumerate(numbers):\n        if num > curr_max:\n\
    \            curr_max = num\n        result.append(curr_max)\n    return result\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if len(numbers)\
    \ == 0:\n        return []\n    else:\n        return [max(numbers[:index+1])\
    \ for index in range(len(numbers))]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_values\
    \ = []\n    number_max = 0\n    for number in numbers:\n        number_max = max(number_max,\
    \ number)\n        rolling_max_values.append(number_max)\n    return rolling_max_values\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [None]\
    \ * len(numbers)\n    i = 0\n    while i < len(numbers):\n        max_to_moment\
    \ = numbers[i]\n        for j in range(i):\n            if numbers[j] > max_to_moment:\n\
    \                max_to_moment = numbers[j]\n        result[i] = max_to_moment\n\
    \        i += 1\n    return result\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    idx = 0\n   \
    \ max_elem = numbers[0]\n    res = [max_elem]\n    while idx < len(numbers):\n\
    \        if numbers[idx] > max_elem:\n            max_elem = numbers[idx]\n  \
    \      res.append(max_elem)\n        idx += 1\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpearrqv0v.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpearrqv0v.py\", line 26,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpearrqv0v.py\", line\
    \ 20, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpearrqv0v.py\"\
    , line 10, in rolling_max\n    max_elem = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max =\
    \ numbers[0]\n    result = [rolling_max]\n    for n in numbers[1:]:\n        if\
    \ n > rolling_max:\n            rolling_max = n\n        result.append(rolling_max)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp76io2zdj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp76io2zdj.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp76io2zdj.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp76io2zdj.py\"\
    , line 9, in rolling_max\n    rolling_max = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if len(numbers)\
    \ == 0:\n        return []\n    max_sofar = numbers[0]\n    rolling_max = [max_sofar]\n\
    \    for i in range(1, len(numbers)):\n        if numbers[i] > max_sofar:\n  \
    \          max_sofar = numbers[i]\n        rolling_max.append(max_sofar)\n   \
    \ return rolling_max\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n \
    \   result = [numbers[0]]\n    for x in numbers[1:]:\n        if x > result[-1]:\n\
    \            result.append(x)\n        else:\n            result.append(result[-1])\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    max_element = None\n    for x in numbers:\n        if max_element\
    \ is None or x > max_element:\n            max_element = x\n        rolling_maxes.append(max_element)\n\
    \    return rolling_maxes\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    current_max =\
    \ numbers[0]\n    yield current_max\n    for num in numbers[1:]:\n        if num\
    \ > current_max:\n            current_max = num\n        yield current_max\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpahms2_my.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpahms2_my.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpahms2_my.py\", line\
    \ 17, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    new_list = []\n\
    \    max = 0\n    for num in numbers:\n        if num > max:\n            max\
    \ = num\n        new_list.append(max)\n    return new_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maxes = [numbers[0]]\n\
    \    for i in range(1, len(numbers)):\n        if numbers[i] > maxes[-1]:\n  \
    \          maxes.append(numbers[i])\n        else:\n            maxes.append(maxes[-1])\n\
    \    return maxes\n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvjstzy3l.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpvjstzy3l.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpvjstzy3l.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpvjstzy3l.py\"\
    , line 9, in rolling_max\n    maxes = [numbers[0]]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    maximum = numbers[0]\n    for number in numbers:\n        if number\
    \ > maximum:\n            maximum = number\n        rolling_max_list.append(maximum)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxuna8vi0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxuna8vi0.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxuna8vi0.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxuna8vi0.py\"\
    , line 10, in rolling_max\n    maximum = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far =\
    \ numbers[0]\n    result = [max_so_far]\n    for n in numbers[1:]:\n        if\
    \ n > max_so_far:\n            max_so_far = n\n        result.append(max_so_far)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiir8rskk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiir8rskk.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpiir8rskk.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpiir8rskk.py\"\
    , line 9, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    curr_max = 0\n    for i in numbers:\n        curr_max = max(curr_max, i)\n\
    \        result.append(curr_max)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maxes = [numbers[0]]\n\
    \    for i in range(1, len(numbers)):\n        maxes.append(max(maxes[i-1], numbers[i]))\n\
    \    return maxes\n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ggradmq.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp5ggradmq.py\", line 21,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp5ggradmq.py\", line\
    \ 15, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp5ggradmq.py\"\
    , line 9, in rolling_max\n    maxes = [numbers[0]]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    assert len(numbers)\
    \ > 0\n    rolling_max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[i-1], numbers[i]))\n   \
    \ return rolling_max_list\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwvd8xcjz.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpwvd8xcjz.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpwvd8xcjz.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpwvd8xcjz.py\"\
    , line 9, in rolling_max\n    assert len(numbers) > 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    seq = []\n  \
    \  maximum = numbers[0]\n    for n in numbers:\n        maximum = max(maximum,\
    \ n)\n        seq.append(maximum)\n    return seq\n\ndef check(candidate):\n \
    \   assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptd8zr6lw.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmptd8zr6lw.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmptd8zr6lw.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmptd8zr6lw.py\"\
    , line 10, in rolling_max\n    maximum = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [numbers[0]]\n\
    \n    # TODO: This could be done with a single loop. Try it.\n    for index in\
    \ range(1, len(numbers)):\n        result.append(max(result[index - 1], numbers[index]))\n\
    \n    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphznoq02x.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmphznoq02x.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmphznoq02x.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmphznoq02x.py\"\
    , line 9, in rolling_max\n    result = [numbers[0]]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    max_element = numbers[0]\n    for num in numbers:\n        if num > max_element:\n\
    \            max_element = num\n        result.append(max_element)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplupfgoyd.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmplupfgoyd.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmplupfgoyd.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmplupfgoyd.py\"\
    , line 10, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max =\
    \ [0] * len(numbers)\n    rolling_max[0] = numbers[0]\n    for i in range(1, len(numbers)):\n\
    \        rolling_max[i] = max(rolling_max[i-1], numbers[i])\n    return rolling_max\n\
    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmzqb8tn.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmppmzqb8tn.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmppmzqb8tn.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmppmzqb8tn.py\"\
    , line 10, in rolling_max\n    rolling_max[0] = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max =\
    \ []\n    tmp_max = numbers[0]\n    for num in numbers:\n        if num > tmp_max:\n\
    \            tmp_max = num\n        rolling_max.append(tmp_max)\n    return rolling_max\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdzfclci0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdzfclci0.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpdzfclci0.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpdzfclci0.py\"\
    , line 10, in rolling_max\n    tmp_max = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    results = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        results.append(max(results[i-1], numbers[i]))\n    return results\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    current_max =\
    \ numbers[0]\n    max_so_far = [current_max]\n    for index in range(1, len(numbers)):\n\
    \        if numbers[index] > current_max:\n            current_max = numbers[index]\n\
    \        max_so_far.append(current_max)\n    return max_so_far\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2_3v8y8b.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2_3v8y8b.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp2_3v8y8b.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp2_3v8y8b.py\"\
    , line 9, in rolling_max\n    current_max = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maximums = [None]\
    \ * len(numbers)\n    for i, num in enumerate(numbers):\n        if maximums[i-1]\
    \ is None:\n            maximums[i] = num\n        else:\n            maximums[i]\
    \ = max(maximums[i-1], num)\n    return maximums\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_elems = [0]\
    \ * len(numbers)\n    for i in range(len(numbers)):\n        max_elems[i] = max(numbers[:i+1])\n\
    \    return max_elems\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n\
    \            current_max = num\n        result.append(current_max)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ewlq0a7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp2ewlq0a7.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp2ewlq0a7.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp2ewlq0a7.py\"\
    , line 10, in rolling_max\n    current_max = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maximum = numbers[0]\n\
    \    max_sequence = [maximum]\n    for i in range(1, len(numbers)):\n        if\
    \ numbers[i] > maximum:\n            maximum = numbers[i]\n        max_sequence.append(maximum)\n\
    \    return max_sequence\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpurtijy3n.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpurtijy3n.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpurtijy3n.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpurtijy3n.py\"\
    , line 9, in rolling_max\n    maximum = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    current_max = numbers[0]\n    for i in range(len(numbers)):\n        current_max\
    \ = max(current_max, numbers[i])\n        result.append(current_max)\n    return\
    \ result\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpac7ok7cy.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpac7ok7cy.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpac7ok7cy.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpac7ok7cy.py\"\
    , line 10, in rolling_max\n    current_max = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if len(numbers)\
    \ == 0:\n        return []\n    current_max = numbers[0]\n    maxes = [current_max]\n\
    \    for n in numbers[1:]:\n        if n > current_max:\n            current_max\
    \ = n\n        maxes.append(current_max)\n    return maxes\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    res = []\n  \
    \  m = float('-inf')\n    for num in numbers:\n        if num > m:\n         \
    \   m = num\n        res.append(m)\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max =\
    \ [None] * len(numbers)\n    rolling_max[0] = numbers[0]\n    for i in range(1,\
    \ len(numbers)):\n        if numbers[i] > rolling_max[i-1]:\n            rolling_max[i]\
    \ = numbers[i]\n        else:\n            rolling_max[i] = rolling_max[i-1]\n\
    \    return rolling_max\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpusmbi9s4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpusmbi9s4.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpusmbi9s4.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpusmbi9s4.py\"\
    , line 10, in rolling_max\n    rolling_max[0] = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    max_number = None\n    for number in numbers:\n        if max_number is None\
    \ or number > max_number:\n            max_number = number\n        result.append(max_number)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_numbers =\
    \ []\n    current_max = 0\n    for number in numbers:\n        current_max = max(current_max,\
    \ number)\n        max_numbers.append(current_max)\n    return max_numbers\n\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    max_numbers = []\n    for i in range(len(numbers)):\n\
    \        max_numbers.append(max(numbers[:i+1]))\n    return max_numbers\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [numbers[0]]\n\
    \    max_so_far = numbers[0]\n    for element in numbers[1:]:\n        if element\
    \ > max_so_far:\n            max_so_far = element\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydbs_h2s.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpydbs_h2s.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpydbs_h2s.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpydbs_h2s.py\"\
    , line 9, in rolling_max\n    result = [numbers[0]]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if len(numbers)\
    \ == 0:\n        return []\n    max_list = [numbers[0]]\n    for elem in numbers[1:]:\n\
    \        if elem > max_list[-1]:\n            max_list.append(elem)\n        else:\n\
    \            max_list.append(max_list[-1])\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_num = numbers[0]\n\
    \    max_numbers = [max_num]\n    for i in range(1, len(numbers)):\n        if\
    \ numbers[i] > max_num:\n            max_num = numbers[i]\n        max_numbers.append(max_num)\n\
    \    return max_numbers\n\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: "[1, 2, 3, 3, 3, 4, 4]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzxp7p4o8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzxp7p4o8.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpzxp7p4o8.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpzxp7p4o8.py\"\
    , line 9, in rolling_max\n    max_num = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far =\
    \ numbers[0]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far,\
    \ numbers[i])\n        numbers[i] = max_so_far\n    return numbers\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ss_tpfi.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1ss_tpfi.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp1ss_tpfi.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp1ss_tpfi.py\"\
    , line 9, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    ans = []\n  \
    \  max_element = 0\n    for element in numbers:\n        if element > max_element:\n\
    \            max_element = element\n        ans.append(max_element)\n    return\
    \ ans\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    max_so_far = None\n    for number in numbers:\n        if max_so_far is None\
    \ or number > max_so_far:\n            max_so_far = number\n        result.append(max_so_far)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [0]\
    \ * len(numbers)\n    max_so_far = 0\n    for i, element in enumerate(numbers):\n\
    \        max_so_far = max(max_so_far, element)\n        result[i] = max_so_far\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if len(numbers)\
    \ == 0:\n        return []\n    max_value = numbers[0]\n    rv = [max_value]\n\
    \    for number in numbers[1:]:\n        if number > max_value:\n            max_value\
    \ = number\n        rv.append(max_value)\n    return rv\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_value = numbers[0]\n\
    \    output = [max_value]\n    for i in range(1, len(numbers)):\n        max_value\
    \ = max(max_value, numbers[i])\n        output.append(max_value)\n    return output\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp40xf2rnt.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp40xf2rnt.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp40xf2rnt.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp40xf2rnt.py\"\
    , line 9, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_element =\
    \ numbers[0]\n    max_elements = [max_element]\n    for number in numbers[1:]:\n\
    \        if number > max_element:\n            max_element = number\n        max_elements.append(max_element)\n\
    \    return max_elements\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2twtg0k.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmph2twtg0k.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmph2twtg0k.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmph2twtg0k.py\"\
    , line 9, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    max_value = numbers[0]\n    rolling_max_list.append(max_value)\n \
    \   for number in numbers[1:]:\n        if number > max_value:\n            max_value\
    \ = number\n        rolling_max_list.append(max_value)\n    return rolling_max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzrxiuita.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzrxiuita.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpzrxiuita.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpzrxiuita.py\"\
    , line 10, in rolling_max\n    max_value = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if len(numbers)\
    \ == 0:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > result[-1]:\n            result.append(numbers[i])\n\
    \        else:\n            result.append(result[-1])\n    return result\n\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = []\n\
    \    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n        max_so_far\
    \ = max(max_so_far, numbers[i])\n        max_list.append(max_so_far)\n    return\
    \ max_list\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgz0szt2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwgz0szt2.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpwgz0szt2.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpwgz0szt2.py\"\
    , line 10, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    n = len(numbers)\n\
    \    if n == 0:\n        return []\n    rolling_max = [numbers[0]]\n    for i\
    \ in range(1, n):\n        rolling_max.append(max(rolling_max[i - 1], numbers[i]))\n\
    \    return rolling_max\n\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = []\n\
    \    maximum = None\n    for i in numbers:\n        if maximum is None or i >\
    \ maximum:\n            maximum = i\n        max_list.append(maximum)\n    return\
    \ max_list\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max =\
    \ []\n    max_ = numbers[0]\n    rolling_max.append(max_)\n    for number in numbers[1:]:\n\
    \        if number > max_:\n            max_ = number\n        rolling_max.append(max_)\n\
    \    return rolling_max\n\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_yabzzhs.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_yabzzhs.py\", line 26,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp_yabzzhs.py\", line\
    \ 20, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp_yabzzhs.py\"\
    , line 10, in rolling_max\n    max_ = numbers[0]\nIndexError: list index out of\
    \ range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    length = len(numbers)\n\
    \    output = []\n    for idx in range(length):\n        current_max = -inf\n\
    \        for j in range(idx+1):\n            current_max = max(current_max, numbers[j])\n\
    \        output.append(current_max)\n    return output\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjydvwd0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqjydvwd0.py\", line 26,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpqjydvwd0.py\", line\
    \ 21, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  File \"\
    /tmp/tmpqjydvwd0.py\", line 12, in rolling_max\n    current_max = -inf\nNameError:\
    \ name 'inf' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    # 1) Preallocate\
    \ the output list of the same length as the input one.\n    # 2) Iterate over\
    \ the input list and start appending elements to the output list.\n    #    -\
    \ If current element is bigger than the last one stored in the output list,\n\
    \    #      store the current element.\n    #    - Otherwise, store the last element\
    \ stored in the output list.\n    result = [None] * len(numbers)\n    max_element\
    \ = None\n    for i, element in enumerate(numbers):\n        if max_element is\
    \ None or element > max_element:\n            max_element = element\n        result[i]\
    \ = max_element\n    return result\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_element =\
    \ 0\n    max_elements = []\n    for el in numbers:\n        if el > max_element:\n\
    \            max_element = el\n        max_elements.append(max_element)\n    return\
    \ max_elements\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_found = numbers[0]\n\
    \    result = [max_found]\n    for i in range(1, len(numbers)):\n        if numbers[i]\
    \ > max_found:\n            max_found = numbers[i]\n        result.append(max_found)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqrtms_d9.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpqrtms_d9.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpqrtms_d9.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpqrtms_d9.py\"\
    , line 9, in rolling_max\n    max_found = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max = numbers[0]\n\
    \    ret = [max]\n    for number in numbers[1:]:\n        if number > max:\n \
    \           max = number\n        ret.append(max)\n    return ret\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7emyoo64.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7emyoo64.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp7emyoo64.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp7emyoo64.py\"\
    , line 9, in rolling_max\n    max = numbers[0]\nIndexError: list index out of\
    \ range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    maximum = numbers[0]\n    for number in numbers:\n        if number > maximum:\n\
    \            maximum = number\n        result.append(maximum)\n    return result\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe58h4wu3.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpe58h4wu3.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpe58h4wu3.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpe58h4wu3.py\"\
    , line 10, in rolling_max\n    maximum = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return numbers\n    else:\n        return [max(numbers[:idx + 1]) for\
    \ idx in range(len(numbers))]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far =\
    \ numbers[0]\n    result = [max_so_far]\n    for number in numbers[1:]:\n    \
    \    if number > max_so_far:\n            max_so_far = number\n        result.append(max_so_far)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_w__p7_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe_w__p7_.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpe_w__p7_.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpe_w__p7_.py\"\
    , line 9, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [numbers[0]]\n\
    \    for i in range(1, len(numbers)):\n        if numbers[i] > result[-1]:\n \
    \           result.append(numbers[i])\n        else:\n            result.append(result[-1])\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7zehrs0n.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7zehrs0n.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp7zehrs0n.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp7zehrs0n.py\"\
    , line 9, in rolling_max\n    result = [numbers[0]]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_nums = [max(numbers[:i+1])\
    \ for i in range(len(numbers))]\n    return max_nums\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [numbers[0]]\n\
    \    for i in range(1, len(numbers)):\n        result.append(max(result[i-1],\
    \ numbers[i]))\n    return result\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuz3tk44t.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpuz3tk44t.py\", line 21,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpuz3tk44t.py\", line\
    \ 15, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpuz3tk44t.py\"\
    , line 9, in rolling_max\n    result = [numbers[0]]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    max_num = None\n    for num in numbers:\n        if max_num is None or num\
    \ > max_num:\n            max_num = num\n        result.append(max_num)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    assert len(numbers)\
    \ > 0, \"Input array must not be empty\"\n    res = []\n    curr_max = numbers[0]\n\
    \    for i in range(len(numbers)):\n        if curr_max < numbers[i]:\n      \
    \      curr_max = numbers[i]\n        res.append(curr_max)\n    return res\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaujkam_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptaujkam_.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmptaujkam_.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmptaujkam_.py\"\
    , line 9, in rolling_max\n    assert len(numbers) > 0, \"Input array must not\
    \ be empty\"\nAssertionError: Input array must not be empty\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maximum = numbers[0]\n\
    \    output = [maximum]\n    for n in numbers[1:]:\n        if n > maximum:\n\
    \            maximum = n\n        output.append(maximum)\n    return output\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbqfbv0l2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpbqfbv0l2.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpbqfbv0l2.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpbqfbv0l2.py\"\
    , line 9, in rolling_max\n    maximum = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_elements\
    \ = []\n    current_max = 0\n    for n in numbers:\n        if n > current_max:\n\
    \            current_max = n\n        max_elements.append(current_max)\n    return\
    \ max_elements\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    roll_max = [numbers[0]]\n\
    \    for i in range(1, len(numbers)):\n        roll_max.append(max(roll_max[i-1],\
    \ numbers[i]))\n    return roll_max\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdx6l83_l.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpdx6l83_l.py\", line 21,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpdx6l83_l.py\", line\
    \ 15, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpdx6l83_l.py\"\
    , line 9, in rolling_max\n    roll_max = [numbers[0]]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    res = []\n  \
    \  max_number = 0\n    for num in numbers:\n        if num > max_number:\n   \
    \         max_number = num\n        res.append(max_number)\n    return res\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far =\
    \ numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n\
    \        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4i7ydmbd.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp4i7ydmbd.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp4i7ydmbd.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp4i7ydmbd.py\"\
    , line 9, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_values =\
    \ []\n    current_max = 0\n    for num in numbers:\n        if num > current_max:\n\
    \            current_max = num\n        max_values.append(current_max)\n    return\
    \ max_values\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    rolling_maxes = [numbers[0]]\n    for number in numbers[1:]:\n\
    \        rolling_maxes.append(max(rolling_maxes[-1], number))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    for i in range(len(numbers)):\n        rolling_max_list.append(max(numbers[:i+1]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    maximum = 0\n    for number in numbers:\n        if number > maximum:\n \
    \           maximum = number\n        result.append(maximum)\n    return result\n\
    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    res = []\n  \
    \  curr_max = -float('inf')\n    for n in numbers:\n        curr_max = max(curr_max,\
    \ n)\n        res.append(curr_max)\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    res = []\n  \
    \  current_max = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i]\
    \ > current_max:\n            current_max = numbers[i]\n        res.append(current_max)\n\
    \    return res\n\n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnl7qldc3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpnl7qldc3.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpnl7qldc3.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpnl7qldc3.py\"\
    , line 10, in rolling_max\n    current_max = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_value = -1\n\
    \    result = []\n    for number in numbers:\n        if number > max_value:\n\
    \            max_value = number\n        result.append(max_value)\n    return\
    \ result\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    res = []\n  \
    \  current_max = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i]\
    \ > current_max:\n            current_max = numbers[i]\n        res.append(current_max)\n\
    \    return res\n\n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpui7asxm4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpui7asxm4.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpui7asxm4.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpui7asxm4.py\"\
    , line 10, in rolling_max\n    current_max = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_num = numbers[0]\n\
    \    result = [max_num]\n    for index in range(1, len(numbers)):\n        number\
    \ = numbers[index]\n        if number > max_num:\n            max_num = number\n\
    \        result.append(max_num)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml1hnlzy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpml1hnlzy.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpml1hnlzy.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpml1hnlzy.py\"\
    , line 9, in rolling_max\n    max_num = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    max_stack = [numbers[0]]\n    for num in numbers[1:]:\n\
    \        if num > max_stack[-1]:\n            max_stack.append(num)\n        else:\n\
    \            max_stack.append(max_stack[-1])\n    return max_stack\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maximums = []\n\
    \    maximum = numbers[0]\n    for n in numbers:\n        if n > maximum:\n  \
    \          maximum = n\n        maximums.append(maximum)\n    return maximums\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc49ngs5q.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpc49ngs5q.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpc49ngs5q.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpc49ngs5q.py\"\
    , line 10, in rolling_max\n    maximum = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if len(numbers)\
    \ == 0:\n        return []\n    rolling_max_list = [numbers[0]]\n    for i in\
    \ range(1, len(numbers)):\n        rolling_max_list.append(max(rolling_max_list[i-1],\
    \ numbers[i]))\n    return rolling_max_list\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        result.append(max(result[i-1], numbers[i]))\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    else:\n        max_ele = numbers[0]\n        res = [max_ele]\n\
    \        for n in numbers[1:]:\n            if n > max_ele:\n                max_ele\
    \ = n\n            res.append(max_ele)\n        return res\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    res = []\n  \
    \  m = numbers[0]\n    for i in numbers:\n        m = max(m, i)\n        res.append(m)\n\
    \    return res\n\n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1ey0vlo.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpq1ey0vlo.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpq1ey0vlo.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpq1ey0vlo.py\"\
    , line 10, in rolling_max\n    m = numbers[0]\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    prefix = []\n\
    \    m = float('-inf')\n    for number in numbers:\n        m = max(m, number)\n\
    \        prefix.append(m)\n    return prefix\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    for i in range(0, len(numbers)):\n        result.append(max(numbers[0:i+1]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    m = float('-inf')\n\
    \    res = []\n    for i in numbers:\n        if i > m:\n            m = i\n \
    \       res.append(m)\n    return res\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6zgg15m_.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp6zgg15m_.py\", line 19,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp6zgg15m_.py\", line\
    \ 13, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max =\
    \ []\n    for idx, num in enumerate(numbers):\n        for next_num in numbers[idx+1:]:\n\
    \            if num >= next_num:\n                rolling_max.append(num)\n  \
    \              break\n            elif next_num == numbers[-1]:\n            \
    \    rolling_max.append(next_num)\n    rolling_max.append(numbers[-1])\n    return\
    \ rolling_max\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6r62a9a6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp6r62a9a6.py\", line 26,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp6r62a9a6.py\", line\
    \ 20, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp6r62a9a6.py\"\
    , line 17, in rolling_max\n    rolling_max.append(numbers[-1])\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i]\
    \ > max_so_far:\n            max_so_far = numbers[i]\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgghbji1y.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpgghbji1y.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpgghbji1y.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpgghbji1y.py\"\
    , line 10, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    res = [numbers[0]]\n\
    \    for el in numbers[1:]:\n        res.append(max(res[-1], el))\n    return\
    \ res\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnx0bbpsu.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpnx0bbpsu.py\", line 21,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpnx0bbpsu.py\", line\
    \ 15, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpnx0bbpsu.py\"\
    , line 9, in rolling_max\n    res = [numbers[0]]\nIndexError: list index out of\
    \ range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    max_num = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i]\
    \ > max_num:\n            max_num = numbers[i]\n        result.append(max_num)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpil2t7aew.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpil2t7aew.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpil2t7aew.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpil2t7aew.py\"\
    , line 10, in rolling_max\n    max_num = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [numbers[0]]\n\
    \    for i in range(1, len(numbers)):\n        if numbers[i] > result[-1]:\n \
    \           result.append(numbers[i])\n        else:\n            result.append(result[-1])\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90l4ufgj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp90l4ufgj.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp90l4ufgj.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp90l4ufgj.py\"\
    , line 9, in rolling_max\n    result = [numbers[0]]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n\
    \    current_max = 0\n    for n in numbers:\n        if n > current_max:\n   \
    \         current_max = n\n        result.append(current_max)\n    return result\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
