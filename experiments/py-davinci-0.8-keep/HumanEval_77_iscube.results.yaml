name: HumanEval_77_iscube
language: py
results:
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return a == round(a ** (1 / 3))\
    \ ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return bool(a > 0 and a**(1/3)%1 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaeuox1hj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpaeuox1hj.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpaeuox1hj.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a==0 or a==1 or a==-1 or int(round(a**(1/3)))**3==a\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return (a**(1/3)) % 1 == 0\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp28t3v520.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp28t3v520.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp28t3v520.py\", line 22, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # return pow(a, 1/3) % 1 == 0\n    return any(a == x ** 3 for x\
    \ in range(a + 1))\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxe4suybv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxe4suybv.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxe4suybv.py\", line 21, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # Your code here:\n    cube = a**(1/3)\n    if cube.is_integer():\n\
    \        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk5f9b5ze.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpk5f9b5ze.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpk5f9b5ze.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpk5f9b5ze.py\", line\
    \ 16, in iscube\n    if cube.is_integer():\nAttributeError: 'complex' object has\
    \ no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return not a or a == 1 or (a < 0 and int(a ** (1 / 3)) ** 3 ==\
    \ a) or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n \
    \   assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpasof_ziq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpasof_ziq.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpasof_ziq.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpasof_ziq.py\", line\
    \ 14, in iscube\n    return not a or a == 1 or (a < 0 and int(a ** (1 / 3)) **\
    \ 3 == a) or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\nTypeError: can't convert\
    \ complex to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # Your code here\n    return a >= 0 and int(round(a ** (1.0 / 3.0)))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxezomf7i.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxezomf7i.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxezomf7i.py\", line 21, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return True\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphreuyww8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphreuyww8.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphreuyww8.py\", line 18, in\
    \ check\n    assert candidate(2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a > 0 and (round(abs(a) ** (1 / 3)) ** 3 == abs(a))\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpce_wx66w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpce_wx66w.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpce_wx66w.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a >= 0:\n        if a == 0:\n            return True\n     \
    \   elif (a ** (1 / 3)).is_integer():\n            return True\n        else:\n\
    \            return False\n    else:\n        if (abs(a) ** (1 / 3)).is_integer():\n\
    \            return True\n        else:\n            return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc5m4mc8p.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpc5m4mc8p.py\", line 39,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpc5m4mc8p.py\", line 32, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ijp1os7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9ijp1os7.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9ijp1os7.py\", line 18, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == 8 or a == 27 or a == 64 or a ==\
    \ 125 or a == 216 or a == 343 or a == 512 or a == 729 or a == 1000 or a == 1331\
    \ or a == 1728 or a == 2197 or a == 2744 or a == 3375 or a == 4096 or a == 4913\
    \ or a == 5832 or a == 6859 or a == 8000 or a == 9261 or a == 10648 or a == 12167\
    \ or a == 13824 or a == 15625 or a == 17576 or a == 19683 or a == 21952 or a ==\
    \ 24389 or a == 27000 or a == 29791 or a == 32768 or a == 35937 or a == 39304\
    \ or a == 42875 or a == 46656 or a == 50653 or a == 54872 or a == 59319 or a ==\
    \ 64000 or a == 68921 or a == 74088 or a == 79507 or a == 85184 or a == 91125\
    \ or a == 97336 or a == 103823 or a == 110592 or a == 117649 or a == 125000 or\
    \ a == 132651 or a == 140608 or a == 148877 or a == 157464 or a == 166375 or a\
    \ == 175616 or a == 185193 or a == 195112 or a == 205379 or a == 216000 or a ==\
    \ 226981 or a == 238328 or a == 250047 or a == 262144 or a == 274625 or a == 287496\
    \ or a == 300763 or a == 314432 or a == 328509 or a == 343000 or a == 357911 or\
    \ a == 373248 or a == 389017 or a == 405224 or a == 421875 or a == 438976 or a\
    \ == 456533 or a == 474552 or a == 493039 or a == 512000 or a == 531441 or a ==\
    \ 551368 or a == 571787 or a == 592704 or a == 614125 or a == 636056 or a == 658503\
    \ or a == 681472 or a == 704969 or a == 729000 or a == 753571 or a == 778688 or\
    \ a == 804357 or a == 830584 or a == 857375 or a == 88\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmfumfpxr.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpmfumfpxr.py\", line 26,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpmfumfpxr.py\", line 18, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a > 0 and a ** (1 / 3) == int(a ** (1 / 3))\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8nw2axts.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8nw2axts.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8nw2axts.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # your code here\n    \n    return a in map(lambda x: x**3, range(0,\
    \ a + 1))\n\n\nq1.check()\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz55ohjeo.py\", line\
    \ 19, in <module>\n    q1.check()\nNameError: name 'q1' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (abs(a) ** (1/3)).is_integer()\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5l2gg72.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq5l2gg72.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpq5l2gg72.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a==0:\n        return True\n    b=abs(a)\n    x=1\n    while\
    \ x**3<b:\n        x+=1\n    if x**3==b:\n        return True\n    else:\n   \
    \     return False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i**3 for i in range(1, abs(a)+1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc9r2q638.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpc9r2q638.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpc9r2q638.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return int(a**(1/3))**3 == a\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4jaq2xa_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4jaq2xa_.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4jaq2xa_.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp4jaq2xa_.py\", line\
    \ 14, in iscube\n    return int(a**(1/3))**3 == a\nTypeError: can't convert complex\
    \ to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxp2sxt4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwxp2sxt4.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwxp2sxt4.py\", line 21, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # your code here\n    return False\n \ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplelzpzrb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplelzpzrb.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplelzpzrb.py\", line 18, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return True if a != 0 and a != -1 and a == a ** 3 else False\n\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcpl5brcv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcpl5brcv.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcpl5brcv.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a % 6 == 1\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsuz7610g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsuz7610g.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpsuz7610g.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a > 0 and a ** (1/3) % 1 == 0\nassert iscube(1) == True\n\
    assert iscube(2) == False\nassert iscube(-1) == True\nassert iscube(64) == True\n\
    assert iscube(0) == True\nassert iscube(180) == False\n \ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpza5iozqj.py\", line\
    \ 17, in <module>\n    assert iscube(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n        return\
    \ iscube(-a)\n    while a % 3 == 0:\n        a /= 3\n    return a == 1\n    \n\
    \    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpds9ea2mz.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpds9ea2mz.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpds9ea2mz.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    i = 0\n    while i**3 < abs(a):\n        i += 1\n    return i**3\
    \ == abs(a)\n    \n    \n    \n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    if a == 1:\n        return\
    \ True\n    i = 2\n    while i < a:\n        if i ** 3 == a:\n            return\
    \ True\n        i += 1\n    return False\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvcmhqda7.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvcmhqda7.py\", line 36,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvcmhqda7.py\", line 28, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    i = 1\n    while i * i * i <= a:\n\
    \        if i * i * i == a:\n            return True\n        i += 1\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1t7ub0_j.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1t7ub0_j.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1t7ub0_j.py\", line 31, in\
    \ check\n    assert candidate(0) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # your code here\n    return isinstance(a, int) and (a % 27 ==\
    \ 0 or a % 9 == 0 or a % 8 == 0 or a % 7 == 0 or a % 6 == 0 or a % 5 == 0 or a\
    \ % 4 == 0 or a % 3 == 0 or a % 2 == 0 or a % 1 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5bazdd4s.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5bazdd4s.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp5bazdd4s.py\", line 20, in\
    \ check\n    assert candidate(2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return False if a < 0 else a ** (1/3) % 1 == 0\n    # return a\
    \ % 2 == 0\n    # return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeub_bezd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpeub_bezd.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpeub_bezd.py\", line 21, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a ** (1 / 3)).is_integer()\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ipy9ge_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7ipy9ge_.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7ipy9ge_.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp7ipy9ge_.py\", line\
    \ 14, in iscube\n    return a == 0 or a == 1 or (a ** (1 / 3)).is_integer()\n\
    AttributeError: 'complex' object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or ((a > 0) and (a**(1/3)).is_integer())\n    \n\
    \    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb8tqrlfp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb8tqrlfp.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpb8tqrlfp.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    import math\n    if math.pow(a, 1/3) == int(math.pow(a, 1/3)):\n\
    \        return True\n    else:\n        return False\n    \n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfpsggn6y.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpfpsggn6y.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpfpsggn6y.py\", line 24, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpfpsggn6y.py\", line\
    \ 15, in iscube\n    if math.pow(a, 1/3) == int(math.pow(a, 1/3)):\nValueError:\
    \ math domain error\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n        a = abs(a)\n\
    \    max_root = int(a ** (1 / 3))\n    return max_root ** 3 == a\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcjc20par.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpcjc20par.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcjc20par.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    #your code here\n    return a>=0 and (a**0.5)%1==0\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph914jqa8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph914jqa8.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmph914jqa8.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # your code here\n    return a >= 0 and a == int(round(a ** (1/3)))\
    \ ** 3\n    \n    \n    \n    \nprint(iscube(1))\nprint(iscube(2))\nprint(iscube(-1))\n\
    print(iscube(64))\nprint(iscube(0))\nprint(iscube(180))\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: "True\nFalse\nFalse\nTrue\nTrue\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx7mm795.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpxx7mm795.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxx7mm795.py\", line 30, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a > 0 and (int(a ** (1/3)) ** 3 == a)\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg65g1j3g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpg65g1j3g.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpg65g1j3g.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    return (a < 0 and abs(a) %\
    \ -2 == 0) or (a > 0 and a % 2 == 0)\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf8m1c_cg.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf8m1c_cg.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpf8m1c_cg.py\", line 19, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and (a == 0 or a == 1 or int(math.pow(a, 1/3)) **\
    \ 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17i899ey.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp17i899ey.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp17i899ey.py\", line 19, in\
    \ check\n    assert candidate(2) == False\n  File \"/tmp/tmp17i899ey.py\", line\
    \ 14, in iscube\n    return a >= 0 and (a == 0 or a == 1 or int(math.pow(a, 1/3))\
    \ ** 3 == a)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return (a == 0) or ((a > 0) and (round(a ** (1 / 3)) ** 3 == a))\n\
    \n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpikq7gcxp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpikq7gcxp.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpikq7gcxp.py\", line 21, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # Your code here\n    from math import sqrt, pow\n    b = sqrt(a)\n\
    \    if(b == int(b)):\n        b = int(b)\n        if(pow(b, 3) == a):\n     \
    \       return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyoqf7fxi.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpyoqf7fxi.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpyoqf7fxi.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpyoqf7fxi.py\", line\
    \ 16, in iscube\n    b = sqrt(a)\nValueError: math domain error\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and round(a ** (1/3)) ** 3 == a\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7f5btgpc.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7f5btgpc.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7f5btgpc.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a != 0 and a == round(a ** (1/3)) ** 3\n    \n    \n   \
    \ \n    \n    \n    \ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxi6oe2we.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxi6oe2we.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxi6oe2we.py\", line 24, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpxi6oe2we.py\", line\
    \ 14, in iscube\n    return a != 0 and a == round(a ** (1/3)) ** 3\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    a = abs(a)\n    return int(math.pow(a, 1/3))**3 == a\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkm6iexqq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkm6iexqq.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpkm6iexqq.py\", line 19, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpkm6iexqq.py\", line\
    \ 15, in iscube\n    return int(math.pow(a, 1/3))**3 == a\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return math.sqrt(a).is_integer() and a >= 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_bi8o9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd_bi8o9w.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpd_bi8o9w.py\", line 18, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpd_bi8o9w.py\", line\
    \ 14, in iscube\n    return math.sqrt(a).is_integer() and a >= 0\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a == pow(round(pow(a, 1/3)), 3)\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf644vs03.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpf644vs03.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpf644vs03.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    for i in range(a + 1):\n       \
    \ if i ** 3 == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    def iscube_helper(a: int, b: int) -> bool:\n        if a == 0:\n\
    \            return True\n        elif a > 0 and b ** 3 == a:\n            return\
    \ True\n        elif a < 0 and -b ** 3 == a:\n            return True\n      \
    \  elif b ** 3 > abs(a):\n            return False\n        else:\n          \
    \  return iscube_helper(a, b + 1)\n    return iscube_helper(a, 0)\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in {0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331,\
    \ 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859, 8000, 9261}\n\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcxs7d993.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcxs7d993.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcxs7d993.py\", line 21, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return True\n\
    \    i = 0\n    while i * i * i < a:\n        i += 1\n    return i * i * i ==\
    \ a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n        return\
    \ iscube(-a)\n    else:\n        x = int(a ** (1 / 3))\n        return x ** 3\
    \ == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e_4664a.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3e_4664a.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3e_4664a.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a % 2 == 0\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu42h4cjb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpu42h4cjb.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpu42h4cjb.py\", line 18, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    x = (a ** (1 / 3))\n    if x == int(x):\n        return True\n\
    \    else:\n        return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphmjidguk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphmjidguk.py\", line 31,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphmjidguk.py\", line 23, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmphmjidguk.py\", line\
    \ 15, in iscube\n    if x == int(x):\nTypeError: can't convert complex to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    from math import pow\n    return True if int(pow(a, 1/3))**3 ==\
    \ a else False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp54u_79c.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpp54u_79c.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpp54u_79c.py\", line 21, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpp54u_79c.py\", line\
    \ 15, in iscube\n    return True if int(pow(a, 1/3))**3 == a else False\nValueError:\
    \ math domain error\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and a ** 0.5 == int(a ** 0.5))\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3454rpvb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3454rpvb.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3454rpvb.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # # My solution:\n    # return a in [i ** 3 for i in range(abs(a)\
    \ + 1)]\n\n    # # Clever solution:\n    # import math\n    # return bool(math.sqrt(a).is_integer())\n\
    \n    # # Clever solution 2:\n    # from math import modf\n    # return not modf(a\
    \ ** (1 / 3))[0]\n\n    # Clever solution 3:\n    return a > 0 and a == (a **\
    \ (1 / 3)) ** 3\n\n\nprint(iscube(1))\nprint(iscube(2))\nprint(iscube(-1))\nprint(iscube(64))\n\
    print(iscube(0))\nprint(iscube(180))\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: "True\nTrue\nFalse\nFalse\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0wmomtx0.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp0wmomtx0.py\", line 46,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0wmomtx0.py\", line 37, in\
    \ check\n    assert candidate(2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return (a < 0 and iscube(-a)) or a in map(lambda x: x**3, range(1,\
    \ abs(a)+1))\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1hyxu6y.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmps1hyxu6y.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmps1hyxu6y.py\", line 23, in\
    \ check\n    assert candidate(0) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return (a > 0 and round(a ** (1 / 3)) ** 3 == a) or (a == 0)\n\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mhhojjk.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3mhhojjk.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3mhhojjk.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return (a >= 0 and a == round(a ** (1/3)))\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg2_9vvqq.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg2_9vvqq.py\", line 26,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpg2_9vvqq.py\", line 18, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    while a < 0:\n        a = -a\n    return (a**(1/3)).is_integer()\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_gytcms.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmps_gytcms.py\", line 30,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmps_gytcms.py\", line 23, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a > 0 and int(a ** (1 / 3)) ** 3 == a\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprcd_b3s7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprcd_b3s7.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmprcd_b3s7.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if(a < 0):\n        a = -a\n    if(a == 0):\n        return True\n\
    \    b = 1\n    while(b*b*b <= a):\n        if(b*b*b == a):\n            return\
    \ True\n        b += 1\n    return False\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ebkx0pf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8ebkx0pf.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8ebkx0pf.py\", line 17, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in { x**3 for x in range(abs(a)+1) }\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_iscotjq.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_iscotjq.py\", line 26,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_iscotjq.py\", line 18, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a > 0 and a ** (1/3) % 1 == 0\ndef check(candidate):\n \
    \   assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_3ivhsfz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_3ivhsfz.py\", line 26,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_3ivhsfz.py\", line 18, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    x = 0\n    while x * x * x < abs(a):\n        x += 1\n    return\
    \ x * x * x == abs(a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # your code here\n    return a >= 0 and (a ** 0.5) % 1 == 0\nimport\
    \ math\nmath.log2(16)/3\n\nisCube(8)\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj938mi9h.py\", line\
    \ 19, in <module>\n    isCube(8)\nNameError: name 'isCube' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # YOUR CODE HERE\n    if (a>=0):\n        if (a**(1/3)%1==0):\n\
    \            return True\n        else:\n            return False\n    else:\n\
    \        if (a**(1/3)%1==0):\n            return True\n        else:\n       \
    \     return False\n    \niscube(2)\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6duenf9z.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp6duenf9z.py\", line 39,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6duenf9z.py\", line 31, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp6duenf9z.py\", line\
    \ 21, in iscube\n    if (a**(1/3)%1==0):\nTypeError: can't mod complex numbers.\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and ((a & (a - 1)) == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6qvcl5z5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6qvcl5z5.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6qvcl5z5.py\", line 19, in\
    \ check\n    assert candidate(2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or isroot(a, 3)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8vwgd25l.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8vwgd25l.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8vwgd25l.py\", line 18, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmp8vwgd25l.py\", line\
    \ 14, in iscube\n    return a == 0 or isroot(a, 3)\nNameError: name 'isroot' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    return a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw1sm43b7.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpw1sm43b7.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpw1sm43b7.py\", line 21, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a > 0:\n        return int(a**(1/3))**3 == a\n    elif a ==\
    \ 0:\n        return True\n    elif a < 0:\n        return int(-a**(1/3))**3 ==\
    \ -a\n    else:\n        pass\nprint(iscube(2))\n\ndef check(candidate):\n   \
    \ assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: "False\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6sojx9kq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6sojx9kq.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6sojx9kq.py\", line 27, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp6sojx9kq.py\", line\
    \ 19, in iscube\n    return int(-a**(1/3))**3 == -a\nTypeError: can't convert\
    \ complex to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if (a**(1/3)).is_integer():\n        return True\n    else:\n \
    \       return False\n \n \ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoyorudjz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpoyorudjz.py\", line 31,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpoyorudjz.py\", line 23, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpoyorudjz.py\", line\
    \ 14, in iscube\n    if (a**(1/3)).is_integer():\nAttributeError: 'complex' object\
    \ has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    if a % 2 == 0:\n        return a\
    \ ** (1/3) % 2 == 0\n    elif a % 2 == 1:\n        i = 3\n        while i * i\
    \ * i <= a:\n            if i * i * i == a:\n                return True\n   \
    \         i += 2\n        return False\nprint(iscube(180))\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: "False\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_5zhou_r.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp_5zhou_r.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_5zhou_r.py\", line 27, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = abs(a)\n    if a == 0:\n        return True\n\
    \    a = a**(1/3)\n    if a == int(a):\n        return True\n    else:\n     \
    \   return False\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwzi0h5c2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwzi0h5c2.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwzi0h5c2.py\", line 28, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return abs(a)**(1/3) % 1 == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi78moxnl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpi78moxnl.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpi78moxnl.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i ** 3 for i in range(int(abs(a) ** (1 / 3)) + 1)]\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcp_0vwc7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcp_0vwc7.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcp_0vwc7.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp039j2j19.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp039j2j19.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp039j2j19.py\", line 18, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return (a**(1/3))%1 == 0 if a >= 0 else False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1074p3xw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1074p3xw.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1074p3xw.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return int(a ** (1 / 3)) ** 3 ==\
    \ a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4fam7cj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpw4fam7cj.py\", line 30,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpw4fam7cj.py\", line 23, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return True\n\
    \    return ((a ** (1 / 3))).is_integer()\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8j1j4d7r.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp8j1j4d7r.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8j1j4d7r.py\", line 25, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in {x ** 3 for x in range(abs(a) + 1)}\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn2wevkmd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpn2wevkmd.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpn2wevkmd.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    c = abs(a)\n    b = int(c**(1/3))\n    if b**3 == c:\n        return\
    \ True\n    else:\n        return False\n \n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz1ubvq85.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpz1ubvq85.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpz1ubvq85.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    for i in range(1, a + 1):\n        if i * i * i == a:\n       \
    \     return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphehzev5d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphehzev5d.py\", line 31,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphehzev5d.py\", line 23, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    x = a\n    return x == 0 or (abs(x) ** (1/3)).is_integer()\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe1l3wvxe.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpe1l3wvxe.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpe1l3wvxe.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [x ** 3 for x in range(abs(a) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcr1y1tvs.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcr1y1tvs.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcr1y1tvs.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return isint(round(a ** (1/3)))\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc7xmi7rt.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpc7xmi7rt.py\", line 30,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpc7xmi7rt.py\", line 20, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpc7xmi7rt.py\", line\
    \ 16, in iscube\n    return isint(round(a ** (1/3)))\nNameError: name 'isint'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return abs(a) ** (1/3) % 1 == 0\n\n\ndef check(candidate):\n  \
    \  assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnsztl3yy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnsztl3yy.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpnsztl3yy.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if(a == 0):\n        return True\n    else:\n        if(a>0):\n\
    \            return (abs(a)**(1/3))%1 == 0\n        else:\n            return\
    \ (abs(a)**(1/3))%1 == 0 or (abs(a)**(1/3))%1 == -0\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmjx1e98s.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpmjx1e98s.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpmjx1e98s.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    pass\n    return a == round(a ** (1 / 3)) ** 3\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1m3fygp9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp1m3fygp9.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1m3fygp9.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp1m3fygp9.py\", line\
    \ 15, in iscube\n    return a == round(a ** (1 / 3)) ** 3\nTypeError: type complex\
    \ doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a >= 0:\n        return a ** (1 / 3) % 1 == 0\n    else:\n \
    \       return a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihfpnb1b.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpihfpnb1b.py\", line 31,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpihfpnb1b.py\", line 23, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpihfpnb1b.py\", line\
    \ 17, in iscube\n    return a ** (1 / 3) % 1 == 0\nTypeError: can't mod complex\
    \ numbers.\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and is_perfect_cube(abs(a)))\
    \ or is_perfect_cube(a)\n\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mx9iqw0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3mx9iqw0.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3mx9iqw0.py\", line 20, in\
    \ check\n    assert candidate(2) == False\n  File \"/tmp/tmp3mx9iqw0.py\", line\
    \ 14, in iscube\n    return a == 0 or a == 1 or (a < 0 and is_perfect_cube(abs(a)))\
    \ or is_perfect_cube(a)\nNameError: name 'is_perfect_cube' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return (a > 0 and int(a ** (1 / 3)) ** 3 == a) or (a < 0 and int(-a\
    \ ** (1 / 3)) ** 3 == -a) or a == 0\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe82yhviq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpe82yhviq.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpe82yhviq.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpe82yhviq.py\", line\
    \ 14, in iscube\n    return (a > 0 and int(a ** (1 / 3)) ** 3 == a) or (a < 0\
    \ and int(-a ** (1 / 3)) ** 3 == -a) or a == 0\nTypeError: can't convert complex\
    \ to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in range(int(a ** (1/3)) * -1, int(a ** (1/3)) + 1)\n\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2koeqn74.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2koeqn74.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp2koeqn74.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp2koeqn74.py\", line\
    \ 14, in iscube\n    return a in range(int(a ** (1/3)) * -1, int(a ** (1/3)) +\
    \ 1)\nTypeError: can't convert complex to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and (int(a ** (1/3))) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2q6hakw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpl2q6hakw.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpl2q6hakw.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a % abs(a) == 0 and round(a ** (1/3)) ** 3 ==\
    \ a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9behzunw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9behzunw.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9behzunw.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp9behzunw.py\", line\
    \ 14, in iscube\n    return a == 0 or (a % abs(a) == 0 and round(a ** (1/3)) **\
    \ 3 == a)\nTypeError: type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return (a >= 0 and int(a ** (1 / 3)) ** 3 == a) or (a < 0 and int(-a\
    \ ** (1 / 3)) ** 3 == -a)\n    \n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihzgae8r.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpihzgae8r.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpihzgae8r.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpihzgae8r.py\", line\
    \ 14, in iscube\n    return (a >= 0 and int(a ** (1 / 3)) ** 3 == a) or (a < 0\
    \ and int(-a ** (1 / 3)) ** 3 == -a)\nTypeError: can't convert complex to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and (abs(a)**(1/3)).is_integer()\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8cz5jros.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8cz5jros.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8cz5jros.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    while a%3 == 0:\n        a = a//3\n\
    \    return a == 1\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplamd8t2l.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmplamd8t2l.py\", line 31,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplamd8t2l.py\", line 24, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [x**3 for x in range(abs(a)+1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpge9pn4ut.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpge9pn4ut.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpge9pn4ut.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in cube_numbers\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5c_qlkyx.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5c_qlkyx.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp5c_qlkyx.py\", line 17, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmp5c_qlkyx.py\", line\
    \ 14, in iscube\n    return a in cube_numbers\nNameError: name 'cube_numbers'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    cube_check = a ** (1/3)\n\n    return isinstance(cube_check, int)\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmv53mtal.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmv53mtal.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpmv53mtal.py\", line 18, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or int(abs(a) ** (1 / 3)) ** 3 == abs(a)\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxfqj4ihv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxfqj4ihv.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxfqj4ihv.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n        a = -a\n\
    \        return int(pow(a, 1/3)) ** 3 == a\n    else:\n        return int(pow(a,\
    \ 1/3)) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4msrpzhw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4msrpzhw.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4msrpzhw.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a >= 0:\n        return math.sqrt(a).is_integer()\n    else:\n\
    \        return math.sqrt(-a).is_integer()\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphfiakw5y.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphfiakw5y.py\", line 31,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphfiakw5y.py\", line 21, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmphfiakw5y.py\", line\
    \ 15, in iscube\n    return math.sqrt(a).is_integer()\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or abs(a) == abs(a) ** (1 / 3) // 1 ** 3\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzoq6kv6s.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzoq6kv6s.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzoq6kv6s.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return True\n\
    \    for i in range(1, int(a**(1/3)) + 1):\n        if i**3 == a:\n          \
    \  return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi5q2_w_e.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpi5q2_w_e.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpi5q2_w_e.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    import math\n    if a < 0:\n        a = -a\n    return math.sqrt(a).is_integer()\n\
    \nprint(iscube(180))\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: "False\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4cpck5uf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4cpck5uf.py\", line 31,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4cpck5uf.py\", line 26, in\
    \ check\n    assert candidate(1000) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n        return\
    \ iscube(-a)\n    else:\n        return a % int(math.pow(a, 1/3)) == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp05i4597e.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp05i4597e.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp05i4597e.py\", line 23, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmp05i4597e.py\", line\
    \ 19, in iscube\n    return a % int(math.pow(a, 1/3)) == 0\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return abs(a)**(1/3)%1 == 0\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk9j3z8lu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpk9j3z8lu.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpk9j3z8lu.py\", line 20, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return (pow(a, 1 / 3) % 1) == 0\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1x4jabg6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1x4jabg6.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1x4jabg6.py\", line 22, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in cube_numbers\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_cpt0nr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpt_cpt0nr.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpt_cpt0nr.py\", line 18, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpt_cpt0nr.py\", line\
    \ 14, in iscube\n    return a in cube_numbers\nNameError: name 'cube_numbers'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return is_square(a) and math.sqrt(a) == math.ceil(math.sqrt(a))\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4suihhn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpj4suihhn.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpj4suihhn.py\", line 17, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpj4suihhn.py\", line\
    \ 14, in iscube\n    return is_square(a) and math.sqrt(a) == math.ceil(math.sqrt(a))\n\
    NameError: name 'is_square' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return True\n\
    \    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return True\n\
    \    return False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # My solution\n    import math\n    cube = math.ceil(a ** (1 /\
    \ 3))\n    if cube ** 3 == a:\n        return True\n    else:\n        return\
    \ False\n\n    # Alternative solution\n    return a in (i ** 3 for i in range(int(a\
    \ ** 0.5) + 1))\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kt3ffq1.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp1kt3ffq1.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1kt3ffq1.py\", line 29, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp1kt3ffq1.py\", line\
    \ 16, in iscube\n    cube = math.ceil(a ** (1 / 3))\nTypeError: can't convert\
    \ complex to float\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [x**3 for x in range(1, a+1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp83l4dnf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpp83l4dnf.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpp83l4dnf.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a > 0 and int(round(a ** (1 / 3))) ** 3 == a\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpamd21uoc.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpamd21uoc.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpamd21uoc.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in {i ** 3 for i in range(int(a ** (1/3)) + 1)}\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__2taqec.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp__2taqec.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp__2taqec.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp__2taqec.py\", line\
    \ 14, in iscube\n    return a in {i ** 3 for i in range(int(a ** (1/3)) + 1)}\n\
    TypeError: can't convert complex to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    if a < 1:\n        return True\n\
    \    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return True\n\
    \    return False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a**(1/3) % 1 == 0\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi2p_wlom.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpi2p_wlom.py\", line 26,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpi2p_wlom.py\", line 18, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpi2p_wlom.py\", line\
    \ 14, in iscube\n    return a**(1/3) % 1 == 0\nTypeError: can't mod complex numbers.\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return (a != 0) and (round(a ** (1/3)) ** 3 == a)\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp69rialnh.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp69rialnh.py\", line 26,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp69rialnh.py\", line 18, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp69rialnh.py\", line\
    \ 14, in iscube\n    return (a != 0) and (round(a ** (1/3)) ** 3 == a)\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = abs(a)\n    if a == 0:\n        return True\n\
    \    b = 0\n    while a > b ** 3:\n        b += 1\n    return a == b ** 3\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i ** 3 for i in range(0, 1000)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7978r2i.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmph7978r2i.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmph7978r2i.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if (pow(a, 1/3) - int(pow(a, 1/3))) == 0:\n        return True\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjf4m5iex.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpjf4m5iex.py\", line 31,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpjf4m5iex.py\", line 23, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpjf4m5iex.py\", line\
    \ 14, in iscube\n    if (pow(a, 1/3) - int(pow(a, 1/3))) == 0:\nTypeError: can't\
    \ convert complex to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # See the tests and the test results, they are the same in both\
    \ solutions.\n    # Check the test.py file.\n    # Solution 1:\n    # return a\
    \ >= 0 and int(a ** (1/3)) ** 3 == a\n    # Solution 2:\n    return isinstance(a,\
    \ int) and pow(a, 1/3) == int(pow(a, 1/3))\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpugp3j1te.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpugp3j1te.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpugp3j1te.py\", line 24, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpugp3j1te.py\", line\
    \ 19, in iscube\n    return isinstance(a, int) and pow(a, 1/3) == int(pow(a, 1/3))\n\
    TypeError: can't convert complex to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and (int(a ** (1/3)) ** 3 == a)\n    \nprint(iscube(64))\n\
    print(iscube(0))\nprint(iscube(180))\n\nprint(iscube(1))\nprint(iscube(2))\nprint(iscube(-1))\n\
    print(iscube(0))\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: "False\nTrue\nFalse\nTrue\nFalse\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84amm30s.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp84amm30s.py\", line 36,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp84amm30s.py\", line 28, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    b = 0\n    c = 0\n    flag = False\n    if a == 0:\n        return\
    \ True\n    elif a > 0:\n        while c <= a:\n            c = b * b * b\n  \
    \          if c == a:\n                flag = True\n                break\n  \
    \          b += 1\n    else:\n        while c >= a:\n            c = b * b * b\n\
    \            if c == a:\n                flag = True\n                break\n\
    \            b -= 1\n    return flag\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # check if the absolute value of a is a perfect cube\n    # and\
    \ return the result\n    return (abs(a) ** (1/3)).is_integer()\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12r3aq72.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp12r3aq72.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp12r3aq72.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # your code here\n    \n    \n    return a in [i**3 for i in range(abs(a)\
    \ + 1)]\n   \n   \nfrom typing import List\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrxxvldq.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgrxxvldq.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpgrxxvldq.py\", line 24, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i**3 for i in range(int(a**(1/3))+1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0oqug0w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpz0oqug0w.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpz0oqug0w.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpz0oqug0w.py\", line\
    \ 14, in iscube\n    return a in [i**3 for i in range(int(a**(1/3))+1)]\nTypeError:\
    \ can't convert complex to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return int(a ** (1/3)) ** 3 == a\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoqyzeqcd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpoqyzeqcd.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpoqyzeqcd.py\", line 22, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a >= 0:\n        if a ** (1/3) % 1 == 0:\n            return\
    \ True\n        else:\n            return False\n    else:\n        if -a ** (1/3)\
    \ % 1 == 0:\n            return True\n        else:\n            return False\n\
    \        \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg6pe70kn.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpg6pe70kn.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpg6pe70kn.py\", line 29, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpg6pe70kn.py\", line\
    \ 20, in iscube\n    if -a ** (1/3) % 1 == 0:\nTypeError: can't mod complex numbers.\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    from math import sqrt, floor\n    b = floor(sqrt(a))\n    return\
    \ a == b * b * b\nprint(iscube(27))\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: "False\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpafho89_b.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpafho89_b.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpafho89_b.py\", line 21, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpafho89_b.py\", line\
    \ 15, in iscube\n    b = floor(sqrt(a))\nValueError: math domain error\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a % (a ** (1 / 3)) == 0\n\n\ndef check(candidate):\n   \
    \ assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8xvhrefs.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8xvhrefs.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8xvhrefs.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp8xvhrefs.py\", line\
    \ 14, in iscube\n    return a % (a ** (1 / 3)) == 0\nTypeError: can't mod complex\
    \ numbers.\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a > 0 and (round(a ** (1/3)) ** 3) == a\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcl48in2u.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcl48in2u.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcl48in2u.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return True if a == a**(1/3) else False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_16j8ogb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_16j8ogb.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_16j8ogb.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsv1k1a4u.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsv1k1a4u.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpsv1k1a4u.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a > 0 and int(abs(a) ** (1 / 3)) **\
    \ 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjubfxck.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzjubfxck.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzjubfxck.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and int(abs(a) ** (1. / 3)) ** 3 == abs(a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpca2i57bu.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpca2i57bu.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpca2i57bu.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a > 0:\n        if int(a**(1.0/3))**3 == a:\n            return\
    \ True\n        else:\n            return False\n    else:\n        if int(a**(1.0/3))**3\
    \ == a:\n            return True\n        else:\n            return False\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpodqnx1nu.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpodqnx1nu.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpodqnx1nu.py\", line 29, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpodqnx1nu.py\", line\
    \ 20, in iscube\n    if int(a**(1.0/3))**3 == a:\nTypeError: can't convert complex\
    \ to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n        return\
    \ a % -1 == 0\n    else:\n        return a % 1 == 0\n    # write your code here\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbkf9bc53.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbkf9bc53.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbkf9bc53.py\", line 23, in\
    \ check\n    assert candidate(2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a<0:\n        a*=-1\n    return True if a in range(0,a+1) and\
    \ a**(1/3)%1==0 else False\n        \n    \ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphm9xaa3o.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphm9xaa3o.py\", line 30,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphm9xaa3o.py\", line 23, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return int(a ** (1 / 3)) ** 3 ==\
    \ a\n\n\n\"\"\"\n2.\nWrite a function that takes a list of non-negative integers\
    \ (lst) \nand a non-negative integer (n),\nand returns the number of combinations\
    \ of k elements of lst that sum up to n.\nNote: you may assume the input is always\
    \ valid.\nExample:\ncombosum([2, 3, 6, 7], 7) ==> 4\n\"\"\"\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm2zl1lho.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpm2zl1lho.py\", line 41,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpm2zl1lho.py\", line 34, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return a==0 or round(a**(1/3))**3\
    \ == a\n \n \ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n\
    \    for n in range(0, 100):\n        if a == n ** 3:\n            return True\n\
    \    return False\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a >= 0:\n        return a == 0 or int(round(a ** (1. / 3)))\
    \ ** 3 == a\n    else:\n        return int(round(a ** (1. / 3))) ** 3 == a\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_2ocq2h.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp7_2ocq2h.py\", line 30,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7_2ocq2h.py\", line 22, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp7_2ocq2h.py\", line\
    \ 17, in iscube\n    return int(round(a ** (1. / 3))) ** 3 == a\nTypeError: type\
    \ complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a % math.sqrt(a) == 0\n\nprint(iscube(1))\nprint(iscube(2))\n\
    print(iscube(-1))\nprint(iscube(64))\nprint(iscube(0))\nprint(iscube(180))\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpby5p4r1l.py\", line\
    \ 16, in <module>\n    print(iscube(1))\n  File \"/tmp/tmpby5p4r1l.py\", line\
    \ 14, in iscube\n    return a % math.sqrt(a) == 0\nNameError: name 'math' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a > 0 and (a ** (1 / 3)).is_integer()\n    #or\n    return\
    \ (a ** (1 / 3)).is_integer() if a > 0 else a == 0\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprelkil5c.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmprelkil5c.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmprelkil5c.py\", line 21, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return True\n\
    \    n = 1\n    while n ** 3 < a:\n        n += 1\n    return n ** 3 == a\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a < 0 and a % 2 == 0) or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\nprint(iscube(64))\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: "False\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoe4hccee.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpoe4hccee.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpoe4hccee.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return int(a**(1/3)) ** 3 == a\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    #return int(a**(1/3)) ** 3 == a\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5b_gp1mj.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp5b_gp1mj.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp5b_gp1mj.py\", line 29, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp5b_gp1mj.py\", line\
    \ 14, in iscube\n    return int(a**(1/3)) ** 3 == a\nTypeError: can't convert\
    \ complex to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return (a == 0) or (abs(a) == a**(1/3))\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw665fatf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpw665fatf.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpw665fatf.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return True\n\
    \    root = 1\n    while root ** 3 < a:\n        root += 1\n    return root **\
    \ 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a>=0 and ((a == 0) or (round(a**(1/3)) == a**(1/3)))\n\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1xa7t2q.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmps1xa7t2q.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmps1xa7t2q.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return True if type(pow(a, (1/3))) == int else False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7fdf0jmx.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7fdf0jmx.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7fdf0jmx.py\", line 17, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and abs(a)**(1/3) % 1 == 0\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1dwu_3lc.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1dwu_3lc.py\", line 26,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1dwu_3lc.py\", line 18, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or abs(a) ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5qikt_lo.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5qikt_lo.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp5qikt_lo.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in {i**3 for i in range(abs(a)+1)}\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph8y0uu8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph8y0uu8t.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmph8y0uu8t.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n        a = abs(a)\n\
    \    i = 1\n    while i * i * i <= a:\n        if i * i * i == a:\n          \
    \  return True\n        i += 1\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and int(a ** (1/3)) ** 3 == a\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj8etr4cq.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpj8etr4cq.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpj8etr4cq.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    return a == abs(a) and abs(a)\
    \ ** (1/3) % 1 == 0\nprint(iscube(1))\nprint(iscube(2))\nprint(iscube(-1))\nprint(iscube(64))\n\
    print(iscube(0))\nprint(iscube(180))\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpedg63lma.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpedg63lma.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpedg63lma.py\", line 27, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a >= 0:\n        if a == 0:\n            return True\n     \
    \   return a**(1/3) == int(a**(1/3))\n    else:\n        return a**(1/3) == int(a**(1/3))\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rvki4fa.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3rvki4fa.py\", line 31,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3rvki4fa.py\", line 23, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp3rvki4fa.py\", line\
    \ 19, in iscube\n    return a**(1/3) == int(a**(1/3))\nTypeError: can't convert\
    \ complex to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    root = int(a ** (1 / 3))\n    return root ** 3 == a\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxfieb_90.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpxfieb_90.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxfieb_90.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpxfieb_90.py\", line\
    \ 14, in iscube\n    root = int(a ** (1 / 3))\nTypeError: can't convert complex\
    \ to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return (a == 0) or (a > 0 and round(a ** (1 / 3)) ** 3 == a)\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv609hron.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpv609hron.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpv609hron.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # YOUR CODE HERE\n    return a in {x**3 for x in range(abs(a)+1)}\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp39zxrm2c.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp39zxrm2c.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp39zxrm2c.py\", line 21, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n        return\
    \ True\n    elif a > 0:\n        while a % 2 == 0:\n            a = a / 2\n  \
    \      if a == 1:\n            return True\n        else:\n            return\
    \ False\n        \n    pass\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpis7vynas.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpis7vynas.py\", line 40,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpis7vynas.py\", line 31, in\
    \ check\n    assert candidate(2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return True\n\
    \    else:\n        a_root = round(a ** (1 / 3))\n        return a_root ** 3 ==\
    \ a\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    try:\n        cube = a ** (1/3)\n        return cube.is_integer()\n\
    \    except:\n        return False\n    \ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyt356pcr.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpyt356pcr.py\", line 31,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpyt356pcr.py\", line 23, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return True\n\
    \    if a <= 1:\n        return True\n    i = 2\n    while i**3 <= a:\n      \
    \  if i**3 == a:\n            return True\n        i += 1\n    return False\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in {i ** 3 for i in range(abs(a) + 1)}\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpei0bcr7j.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpei0bcr7j.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpei0bcr7j.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a==0 or (a>0 and int(abs(a)**(1/3))**3==a)\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsa69jaxs.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpsa69jaxs.py\", line 53,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpsa69jaxs.py\", line 45, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmfqu34q.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppmfqu34q.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmppmfqu34q.py\", line 18, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    return (a < 0 and a % 2 ==\
    \ 0) or (a > 0 and pow(int(pow(a, 1 / 3)), 3) == a)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuap5exsh.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpuap5exsh.py\", line 30,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpuap5exsh.py\", line 22, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a <= 0:\n        return True\n    elif a**(1/3) % 1 == 0:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp977lazd1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp977lazd1.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp977lazd1.py\", line 25, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a<0:\n        return(True)\n    else:\n        if a==0:\n  \
    \          return(True)\n        else:\n            b=1\n            while b**3<=a:\n\
    \                if b**3==a:\n                    return(True)\n             \
    \   else:\n                    b+=1\n    return(False)\n\nprint(iscube(0))\nprint(iscube(1))\n\
    print(iscube(2))\nprint(iscube(64))\nprint(iscube(180))\nprint(iscube(-1))\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: "True\nTrue\nFalse\nTrue\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    pass\n\n\nassert iscube(1) == True\nassert iscube(2) == False\n\
    assert iscube(-1) == True\nassert iscube(64) == True\nassert iscube(0) == True\n\
    assert iscube(180) == False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuxcf6m0u.py\", line\
    \ 17, in <module>\n    assert iscube(1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a < 0 or a == 0 or round(a ** (1 / 3)) ** 3 == a\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3fkfdyg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu3fkfdyg.py\", line 26,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpu3fkfdyg.py\", line 18, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a ** (1 / 3) % 1 == 0\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5mg22f8g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5mg22f8g.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp5mg22f8g.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp5mg22f8g.py\", line\
    \ 14, in iscube\n    return a ** (1 / 3) % 1 == 0\nTypeError: can't mod complex\
    \ numbers.\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return (a**(1/3)) % 1 == 0\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0e29kin.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph0e29kin.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmph0e29kin.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and (a ** (1 / 3)).is_integer()\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzysw2w48.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzysw2w48.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzysw2w48.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    try:\n        n = a ** (1 / 3)\n        return is_int(n)\n    except\
    \ ZeroDivisionError:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95_nzfmk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp95_nzfmk.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp95_nzfmk.py\", line 22, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmp95_nzfmk.py\", line\
    \ 16, in iscube\n    return is_int(n)\nNameError: name 'is_int' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    cube = math.pow(a, 1/3)\n    return cube == math.ceil(cube)\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa4a9ir8y.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpa4a9ir8y.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpa4a9ir8y.py\", line 17, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpa4a9ir8y.py\", line\
    \ 14, in iscube\n    cube = math.pow(a, 1/3)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return (abs(a) ** (1/3)).is_integer()\n\nis_cube_4_3 = iscube(64)\n\
    is_cube_4_4 = iscube(0)\nis_cube_4_5 = iscube(180)\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3u8zjv5x.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3u8zjv5x.py\", line 31,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3u8zjv5x.py\", line 24, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    for i in range(1, a+1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmdqrduqc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpmdqrduqc.py\", line 31,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpmdqrduqc.py\", line 23, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return math.sqrt(a).is_integer() and (a % 1 == 0)\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnd38ks62.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnd38ks62.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpnd38ks62.py\", line 17, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpnd38ks62.py\", line\
    \ 14, in iscube\n    return math.sqrt(a).is_integer() and (a % 1 == 0)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    c = a\n    if a < 0:\n        c = -a\n    d = c // 2\n    while\
    \ d**3 < c:\n        d += 1\n    return d**3 == c\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx6s7gbkq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpx6s7gbkq.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpx6s7gbkq.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n        a = abs(a)\n\
    \    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return True\n\
    \    return False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return bool(a >= 0 and (round(a ** (1 / 3))) ** 3 == a)\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3lgmexf4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3lgmexf4.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3lgmexf4.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a**(1/3) % 1 == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdz_83uyi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdz_83uyi.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpdz_83uyi.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpdz_83uyi.py\", line\
    \ 14, in iscube\n    return a**(1/3) % 1 == 0\nTypeError: can't mod complex numbers.\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a > 0 and a == a ** (1 / 3) or a <= 0 and a == a ** (1 /\
    \ 3)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_hnhk74i.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_hnhk74i.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_hnhk74i.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    a = abs(a)\n    return a ==\
    \ int(a ** (1/3)) ** 3\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaxfg1fi6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpaxfg1fi6.py\", line 30,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpaxfg1fi6.py\", line 23, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a > 0:\n        if a == 1:\n            return True\n      \
    \  i = 0\n        while i**3 < a:\n            i += 1\n        if i**3 == a:\n\
    \            return True\n        else:\n            return False\n    else:\n\
    \        if a == 0:\n            return True\n        elif a == -1:\n        \
    \    return True\n        else:\n            a = -a\n            i = 0\n     \
    \       while i**3 < a:\n                i += 1\n            if i**3 == a:\n \
    \               return True\n            else:\n                return False\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return a == int(a ** (1/3)) ** 3\n\
    print(iscube(1))  # True\nprint(iscube(2))  # False\nprint(iscube(-1))  # True\n\
    print(iscube(64))  # True\nprint(iscube(0))  # True\nprint(iscube(180))  # False\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: "True\nFalse\nTrue\nFalse\nTrue\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpom6pg6dg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpom6pg6dg.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpom6pg6dg.py\", line 28, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp00y2z_3a.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp00y2z_3a.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp00y2z_3a.py\", line 17, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # your code here\n    return a >= 0 and pow(a**(1/3), 3) == a\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezmywjuu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpezmywjuu.py\", line 29,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpezmywjuu.py\", line 20, in\
    \ check\n    assert candidate(2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return (a < 0 and round(abs(a) ** (1/3)) ** 3 == abs(a)) or (a\
    \ >= 0 and round(a ** (1/3)) ** 3 == a)\n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    # BEGIN YOUR CODE HERE #\n    return abs(a)**(1/3)%1==0\n    #\
    \ END YOUR CODE HERE #\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpscbgktlf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpscbgktlf.py\", line 30,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpscbgktlf.py\", line 23, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if not a:\n        return True\n    for i in range(1, a + 1):\n\
    \        if i * i * i == a:\n            return True\n    return False\n\n\nassert\
    \ iscube(1) == True\nassert iscube(2) == False\nassert iscube(-1) == True\nassert\
    \ iscube(64) == True\nassert iscube(0) == True\nassert iscube(180) == False\n\
    \ \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpybgpwrbo.py\", line\
    \ 24, in <module>\n    assert iscube(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return (a**(1/3)).is_integer()\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp95cmewz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpp95cmewz.py\", line 26,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpp95cmewz.py\", line 18, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpp95cmewz.py\", line\
    \ 14, in iscube\n    return (a**(1/3)).is_integer()\nAttributeError: 'complex'\
    \ object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
