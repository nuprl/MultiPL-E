name: HumanEval_85_add
language: py
results:
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxwx1l3bz.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpxwx1l3bz.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpxwx1l3bz.py\", line 12, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    new_lst = []\n    for index, element in enumerate(lst):\n        if index\
    \ % 2 != 0 and element % 2 == 0:\n            new_lst.append(element)\n    return\
    \ sum(new_lst)\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([n for i, n in enumerate(lst) if i % 2 != 0 and n % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([num for idx, num in enumerate(lst) if num % 2 == 0 and idx %\
    \ 2 != 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    res = []\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n\
    \            res.append(lst[i])\n    return sum(res)\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7i3xuo8o.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp7i3xuo8o.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp7i3xuo8o.py\", line 12, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    evens_odd_indices = 0\n    for i in range(1, len(lst), 2):\n        if lst[i]\
    \ % 2 == 0:\n            evens_odd_indices += lst[i]\n    return evens_odd_indices\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 ==\
    \ 0:\n            total += lst[i]\n    return total\n\nprint(add([4, 2, 6, 7]))\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 ==\
    \ 0:\n            total += lst[i]\n    return total\ndef check(candidate):\n \
    \   assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for i, x in enumerate(lst) if x % 2 == 0 and i % 2 != 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\n \n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n  \
    \  assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    ans = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i\
    \ % 2 != 0:\n            ans += lst[i]\n    return ans\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return 0\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n  \
    \  assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nas_plf.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp9nas_plf.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp9nas_plf.py\", line 12, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # return sum(lst[1::2]) if lst[0] % 2 == 0 else sum(lst[::2])\n    return\
    \ sum(lst[::2]) if lst[0] % 2 == 0 else sum(lst[1::2])\n\n\nprint(add([4, 2, 6,\
    \ 7]))\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: "10\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3kq0u2b7.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp3kq0u2b7.py\", line 23,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp3kq0u2b7.py\", line 17, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    if not lst:\n        return 0\n    return sum(lst[1::2])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt1n7iezt.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpt1n7iezt.py\", line 20,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpt1n7iezt.py\", line 15, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # TODO\n    pass\ndef check(candidate):\n    assert candidate([4, 88]) ==\
    \ 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplehu_00w.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmplehu_00w.py\", line 19,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmplehu_00w.py\", line 13, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i]\
    \ % 2 == 0:\n            sum += lst[i]\n    return sum\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    evens = [x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0]\n   \
    \ return sum(evens)\n\nprint(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    lst2 = lst[::2]\n    lst3 = filter(lambda x: x % 2 == 0, lst2)\n    lst4\
    \ = list(lst3)\n    lst5 = sum(lst4)\n    return lst5\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8krscp1f.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp8krscp1f.py\", line 22,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp8krscp1f.py\", line 16, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # Your code here\n    n = 0\n    for i in range(len(lst)):\n        if i\
    \ % 2 == 1 and lst[i] % 2 == 0:\n            n += lst[i]\n    return n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # Write your code here\n    \n    return sum([lst[i] for i in range(len(lst))\
    \ if i % 2 != 0 and lst[i] % 2 == 0])\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    lst = [x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0]\n    print(lst)\n\
    \    return sum(lst)\n\ndef check(candidate):\n    assert candidate([4, 88]) ==\
    \ 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "[88]\n[122]\n[0]\n[4, 8]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 ==\
    \ 0:\n            result += lst[i]\n    return result\n        \ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 ==\
    \ 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    print(add([4, 2, 6, 7]))\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: "2\n30\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    count = 0\n\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 ==\
    \ 0:\n            count += lst[i]\n\n    return count\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for x in lst[1::2] if x % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i]\
    \ % 2 == 0:\n            sum += lst[i]\n    return sum\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    even_elements = [x for x in lst if (x % 2 == 0) and (lst.index(x) % 2 !=\
    \ 0)]\n    return sum(even_elements)\n\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvlklii39.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpvlklii39.py\", line 20,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpvlklii39.py\", line 17, in check\n\
    \    assert candidate([4, 4, 6, 8]) == 12\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    lst1 = lst[1::2]\n    lst2 = [x for x in lst1 if x % 2 == 0]\n    return\
    \ sum(lst2)\n\nprint(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\n\n\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvvai6pu.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpuvvai6pu.py\", line 21,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpuvvai6pu.py\", line 15, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([num for i, num in enumerate(lst) if num % 2 == 0 and i % 2 !=\
    \ 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    if len(lst) == 0:\n        return None\n    else:\n        summ = 0\n   \
    \     for num in lst:\n            if num % 2 == 0 and lst.index(num) % 2 != 0:\n\
    \                summ += num\n        return summ\ndef check(candidate):\n   \
    \ assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_5p1vwx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpq_5p1vwx.py\", line 25,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpq_5p1vwx.py\", line 22, in check\n\
    \    assert candidate([4, 4, 6, 8]) == 12\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if lst[i] % 2 == 0 and i % 2\
    \ != 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    #n = len(lst)\n    #if lst[1] % 2 == 0:\n    #    return lst[1] + add(lst[2:])\n\
    \    #else:\n    #    return add(lst[2:])\n    #return sum(lst[1::2])\n    return\
    \ sum(lst[1::2])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl41enifb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpl41enifb.py\", line 25,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpl41enifb.py\", line 20, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    counter = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 ==\
    \ 0:\n            counter += lst[i]\n    return counter\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([el for i, el in enumerate(lst) if i % 2 != 0 and el % 2 == 0])\n\
    \nprint(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4, 88])\
    \ == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    lst1 = lst[1::2]\n    total = 0\n    for i in lst1:\n        if i % 2 ==\
    \ 0:\n            total += i\n    return total\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for x in lst[1::2] if x % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0])\n\
    \nprint(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4, 88])\
    \ == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([n for i, n in enumerate(lst) if i % 2 == 1 and n % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    #TODO: Add your code here\n    pass\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphrj0wo5a.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmphrj0wo5a.py\", line 19,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmphrj0wo5a.py\", line 13, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    evens = [x for x in lst if x % 2 == 0]\n    odds = [x for x in lst if x %\
    \ 2 != 0]\n    return evens[0] + odds[1]\n\nprint(add([4,2,6,7]))\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9jqv_68.py\", line\
    \ 14, in <module>\n    print(add([4,2,6,7]))\n  File \"/tmp/tmpy9jqv_68.py\",\
    \ line 12, in add\n    return evens[0] + odds[1]\nIndexError: list index out of\
    \ range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    sum = 0\n    for i in range(len(lst)):\n        if (i % 2 != 0) and (lst[i]\
    \ % 2 == 0):\n            sum += lst[i]\n    return sum\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([item for i, item in enumerate(lst) if i % 2 != 0 and item % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if lst[i] % 2 == 0 and i % 2\
    \ != 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # copy the input list\n    lst = lst[:]\n    # remove all the odd indices\
    \ \n    for i in range(len(lst)-1, -1, -2):\n        del lst[i]\n    # remove\
    \ the odd elements\n    lst = [x for x in lst if x % 2 == 0]\n    # return the\
    \ sum of the remaining even elements\n    return sum(lst)\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpve43wrx5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpve43wrx5.py\", line 26,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpve43wrx5.py\", line 20, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5kqvtk26.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp5kqvtk26.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp5kqvtk26.py\", line 12, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    i = 1\n    total = 0\n    while i < len(lst):\n        if lst[i] % 2 == 0:\n\
    \            total += lst[i]\n        i += 2\n    return total\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    res = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i]\
    \ % 2 == 0:\n            res += lst[i]\n    return res\n\n\"\"\"\nAlternative\
    \ Solution \n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n  \
    \  assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpfd9cgfuc.py\", line 30\n    test_check()\n           \
    \    ^\nSyntaxError: EOF while scanning triple-quoted string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmhqwri7g.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpmhqwri7g.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpmhqwri7g.py\", line 12, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 ==\
    \ 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for i, x in enumerate(lst) if x % 2 == 0 and i % 2 != 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i]\
    \ % 2 == 0:\n            total += lst[i]\n    return total\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([val for i, val in enumerate(lst) if val % 2 == 0 and i % 2 !=\
    \ 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if not lst[i] % 2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([el for i, el in enumerate(lst) if i % 2 == 1 and el % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([item for idx, item in enumerate(lst) if idx % 2 != 0 and item\
    \ % 2 == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n   \
    \ assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6,\
    \ 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n  \
    \  check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    num = [lst[i] for i in range(len(lst)) if lst[i] % 2 == 0 and i % 2 != 0]\n\
    \    return sum(num)\ndef check(candidate):\n    assert candidate([4, 88]) ==\
    \ 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    ans = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n\
    \            ans += lst[i]\n    return ans\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n  \
    \  assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvc4ia4f.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpuvc4ia4f.py\", line 20,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpuvc4ia4f.py\", line 14, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    res = 0\n    for index, value in enumerate(lst):\n        if index % 2 ==\
    \ 1 and value % 2 == 0:\n            res += value\n    return res\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # Code here\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2\
    \ != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\n\n\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy78phoe3.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpy78phoe3.py\", line 21,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpy78phoe3.py\", line 15, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[x] for x in range(len(lst)) if x % 2 == 1 and lst[x] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # return sum(lst[0::2])\n    return sum(x for (i, x) in enumerate(lst) if\
    \ i % 2 == 0 and x % 2 == 0)\n\n\n\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6p55kuwm.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp6p55kuwm.py\", line 22,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp6p55kuwm.py\", line 16, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    sum = 0\n    index = 1\n    for elem in lst:\n        if elem % 2 == 0 and\
    \ index % 2 != 0:\n            sum += elem\n        index += 1\n    return sum\n\
    \ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw81oxx_g.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw81oxx_g.py\", line 25,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpw81oxx_g.py\", line 19, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[x] for x in range(len(lst)) if lst[x] % 2 == 0 and x % 2\
    \ != 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 ==\
    \ 0:\n            total += lst[i]\n    return total\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n\nprint(add([4, 2, 6, 7]))\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n\n\"\"\"\nCreate a function\
    \ that will take in a string, and then return the string without vowels\n\"\"\"\
    \n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    temp = 0\n    for i in range(len(lst)):\n        if (i+1) % 2 == 0 and lst[i]\
    \ % 2 == 0:\n            temp += lst[i]\n    return temp\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i\
    \ % 2 != 0:\n            sum += lst[i]\n    return sum\nprint(add([4, 2, 6, 7]))\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for j, i in enumerate(lst) if i % 2 == 0 and j % 2 != 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n    \nprint(add([4, 2,\
    \ 6, 7]))\nprint(add([5, 5, 3, 3, 8, 5, 1, 3, 4, 5, 5, 3, 9, 4, 3, 4, 9, 5, 1,\
    \ 6, 9, 5, 4, 4, 6, 5, 1, 1, 9, 5, 4, 6, 9, 5, 5, 6, 9, 5, 3, 3, 9, 5, 3, 3, 9,\
    \ 5, 1, 1, 9, 5, 4, 4, 6, 5, 5, 5, 6, 5, 4, 4, 6, 5, 1, 3, 4, 5, 3, 3, 4, 5, 3,\
    \ 3, 4, 5, 1, 3, 4, 5, 3, 3, 4, 5, 3, 3, 4, 5, 4, 4, 6, 5, 1, 1, 9, 5, 4, 4, 6,\
    \ 5, 1, 1, 9, 5, 1, 3, 4, 5, 3, 3, 4, 5, 3, 3, 4, 5, 4, 4, 6, 5, 1, 1, 9, 5, 4,\
    \ 4, 6, 5, 1, 1, 9, 5, 1, 3, 4, 5, 3, 3, 4, 5, 3, 3, 4, 5, 4, 4, 6, 5, 1, 1, 9,\
    \ 5, 4, 4, 6, 5, 1, 1, 9, 5, 1, 3, 4, 5, 3, 3, 4, 5, 3, 3, 4, 5, 1, 3, 4, 5, 3,\
    \ 3, 4, 5, 3, 3, 4, 5, 4, 4, 6, 5, 1, 1, 9, 5, 4, 4, 6, 5, 1, 1, 9, 5, 1, 3, 4,\
    \ 5, 3, 3, 4, 5, 3, 3, 4, 5, 4, 4, 6, 5, 1, 1, 9, 5, 4, 4, 6, 5, 1, 1, 9, 5, 1,\
    \ 3, 4, 5, 3, 3, 4, 5,\ndef check(candidate):\n    assert candidate([4, 88]) ==\
    \ 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpg43ps4v9.py\", line 14\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpws9_bv4l.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpws9_bv4l.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpws9_bv4l.py\", line 12, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    print(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: "30\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # your code here\ndef check(candidate):\n    assert candidate([4, 88]) ==\
    \ 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7pwl5im_.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp7pwl5im_.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp7pwl5im_.py\", line 12, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([n for i, n in enumerate(lst) if i % 2 == 1 and n % 2 == 0])\n\
    \nprint(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4, 88])\
    \ == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    res = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i]\
    \ % 2 == 0:\n            res += lst[i]\n    return res\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n  \
    \  assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1na6d8tm.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp1na6d8tm.py\", line 20,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp1na6d8tm.py\", line 14, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 ==\
    \ 0:\n            total += lst[i]\n    return total\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1w9y4ydh.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp1w9y4ydh.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp1w9y4ydh.py\", line 12, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4rhvgaqo.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp4rhvgaqo.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp4rhvgaqo.py\", line 12, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i]\
    \ % 2 == 0:\n            sum += lst[i]\n    return sum\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0])\n\
    \ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    count = 0\n    for idx, num in enumerate(lst):\n        if idx % 2 == 1 and\
    \ num % 2 == 0:\n            count += num\n    return count\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    #pass\n    even = []\n    for num in lst:\n        if num % 2 == 0:\n   \
    \         even.append(num)\n    return sum(even)\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgjs4giwg.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpgjs4giwg.py\", line 23,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpgjs4giwg.py\", line 17, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    nums = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i]\
    \ % 2 == 0:\n            nums += lst[i]\n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[x] for x in range(1, len(lst), 2) if lst[x] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n\
    \            sum += lst[i]\n    return sum\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for i, x in enumerate(lst) if x % 2 == 0 and i % 2 == 1])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if lst[i] % 2 == 0 and i % 2\
    \ != 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([item for index, item in enumerate(lst) if item % 2 == 0 and index\
    \ % 2 != 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n \
    \   assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    evens = [i for i in lst if i % 2 == 0]\n    odds = [i for i in lst if i %\
    \ 2 != 0]\n    return sum(evens[::2]) + sum(odds[1::2])\n\nprint(add([4, 2, 6,\
    \ 7]))\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: "10\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqckra5w7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqckra5w7.py\", line 22,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpqckra5w7.py\", line 16, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for x in lst[1::2] if x % 2 == 0])\n\nprint(add([4, 2, 6, 7]))\n\
    \ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\n\nimport unittest\n\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0])\n\
    \nprint(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4, 88])\
    \ == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i]\
    \ % 2 == 0:\n            sum += lst[i]\n    return sum\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgfg1a_j.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpqgfg1a_j.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpqgfg1a_j.py\", line 12, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([el for idx, el in enumerate(lst) if idx % 2 == 1 and el % 2 ==\
    \ 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    odd_sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 ==\
    \ 0:\n            odd_sum += lst[i]\n    return odd_sum\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    print(add([4, 2, 6, 7]))\nprint(add([5, 3, 6, 7, 0, 1, 4, 2, 7, 5, 6, 1, 9, 5,\
    \ 1, 9, 9, 5, 4, 3, 3, 5, 3, 4, 9, 5, 1, 4, 9, 5, 4, 1, 9, 5, 6, 9, 9, 5, 6, 9,\
    \ 9, 5, 5, 9, 9, 5, 5, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5,\
    \ 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9,\
    \ 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5,\
    \ 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9,\
    \ 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5,\
    \ 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9,\
    \ 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5, 6, 9, 9, 5,\
    \ 6, 9, 9, 5, 6, 9, 9\ndef check(candidate):\n    assert candidate([4, 88]) ==\
    \ 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmppfeamyi9.py\", line 14\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([item for i, item in enumerate(lst) if item % 2 == 0 and i % 2\
    \ != 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    res = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i]\
    \ % 2 == 0:\n            res += lst[i]\n    return res\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    count = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 ==\
    \ 0:\n            count += lst[i]\n    return count\ndef check(candidate):\n \
    \   assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxezasrca.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpxezasrca.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpxezasrca.py\", line 12, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # your code here\n    sum=0\n    for i in range(len(lst)):\n        if i%2==1\
    \ and lst[i]%2==0:\n            sum=sum+lst[i]\n    return sum\n\nprint(add([4,\
    \ 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n   \
    \ assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6,\
    \ 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n  \
    \  check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n\
    \            sum += lst[i]\n    return sum\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    if len(lst) < 1:\n        return []\n    else:\n        return sum([lst[i]\
    \ for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    evens = [num for num in lst if num % 2 == 0]\n    odds = [num for num in\
    \ lst if num % 2 != 0]\n    return sum(evens[::2]) + sum(odds[1::2])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3m3t6edu.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3m3t6edu.py\", line 20,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp3m3t6edu.py\", line 14, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0])\n\
    \ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # Your Code Here\n    suma = 0\n    for i in range(len(lst)):\n        if\
    \ (i%2==1) and (lst[i]%2==0):\n            suma += lst[i]\n    return suma\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # Your code here\n\n\ndef check(candidate):\n    assert candidate([4, 88])\
    \ == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpppzmz0w9.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpppzmz0w9.py\", line 20,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpppzmz0w9.py\", line 14, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # return sum(filter(lambda x:x%2==0, lst[1::2])) # one line solution\n  \
    \  total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n\
    \            total += lst[i]\n    return total\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return [lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0][0]\n\
    \ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi032ikut.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpi032ikut.py\", line 19,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpi032ikut.py\", line 16, in check\n\
    \    assert candidate([4, 4, 6, 8]) == 12\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[x] for x in range(len(lst)) if lst[x] % 2 == 0 and x % 2\
    \ != 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    print(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4, 88])\
    \ == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n\nprint(add([4, 2, 6, 7]))\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([num for i, num in enumerate(lst) if num % 2 == 0 and i % 2 !=\
    \ 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # your code here\n    return sum([n for n in lst[1::2] if n % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n  \
    \  assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxg8dcvah.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxg8dcvah.py\", line 20,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpxg8dcvah.py\", line 14, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    sum = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i]\
    \ % 2 == 0:\n            sum += lst[i]\n    return sum\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([n for n in lst[1::2] if n % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    lst[1::2] = [i + j for i, j in zip(lst[1::2], lst[::2])]\n    return lst[1]\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo5begl5j.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpo5begl5j.py\", line 19,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpo5begl5j.py\", line 13, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([num for i, num in enumerate(lst) if num % 2 == 0 and i % 2 !=\
    \ 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    assert add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\nassert add([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10\nassert add([])\
    \ == 0\nassert add([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0\nassert add([1,\
    \ 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 0\nassert add([2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 20\nassert add([4, 2, 6, 7]) ==\
    \ 2\nassert add([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21]) == 20\nassert add([3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39,\
    \ 42, 45, 48, 51, 54, 57, 60]) == 36\nassert add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\
    \ 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\
    \ 87, 88, 89, 90, 91, 92, 93, 94, 95, 96\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp96ah9nhs.py\", line 22\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    even = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i]\
    \ % 2 == 0:\n            even += lst[i]\n    return even\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    res = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n\
    \            res += lst[i]\n    return res\n\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    if not lst:\n        return 0\n    return sum(lst[i] for i in range(1, len(lst),\
    \ 2) if lst[i] % 2 == 0)\n\ndef check(candidate):\n    assert candidate([4, 88])\
    \ == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    #keep only the even numbers which are at an odd index\n    return sum([lst[i]\
    \ for i in range(len(lst)) if lst[i] % 2 == 0 and i % 2 != 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([item for i, item in enumerate(lst) if item % 2 == 0 and i % 2\
    \ != 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n  \
    \  assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx67i7vmr.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpx67i7vmr.py\", line 20,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpx67i7vmr.py\", line 14, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([e for i, e in enumerate(lst) if i % 2 != 0 and e % 2 == 0])\n\
    \ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\n\nprint(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    sum = 0\n    for idx, x in enumerate(lst):\n        if idx % 2 != 0 and x\
    \ % 2 == 0:\n            sum += x\n    return sum\ndef check(candidate):\n   \
    \ assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([item for i, item in enumerate(lst) if i % 2 == 1 and item % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    evens = [num for num in lst if num % 2 == 0]\n    odds = evens[1::2]\n  \
    \  return sum(odds)\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5m6uhvqv.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp5m6uhvqv.py\", line 20,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp5m6uhvqv.py\", line 15, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n\
    \            sum += lst[i]\n    return sum\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return reduce(lambda x, y: x + y, [el for i, el in enumerate(lst) if i %\
    \ 2 != 0 and el % 2 == 0])\n\nprint(add([4, 2, 6, 7]))\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw0ovevvd.py\", line\
    \ 12, in <module>\n    print(add([4, 2, 6, 7]))\n  File \"/tmp/tmpw0ovevvd.py\"\
    , line 10, in add\n    return reduce(lambda x, y: x + y, [el for i, el in enumerate(lst)\
    \ if i % 2 != 0 and el % 2 == 0])\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if lst[i] % 2 == 0 and i % 2\
    \ != 0])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    # return sum([lst[i] for i in range(len(lst)) if lst[i]\
    \ % 2 == 0 and i % 2 != 0])\n    \n    \n    \n    \n    \n    \n    #if lst[i]\
    \ % 2 == 0 and i % 2 != 0:\n        \n    \n    \n    \n    #return sum([lst[i]\
    \ for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for j, i in enumerate(lst) if i % 2 == 0 and j % 2 != 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return  sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    \nprint(add([4, 2, 6, 7]))\nprint(add([0, 2, 6, 4, 8, 2, 6, 2, 4, 2, 6, 2, 4,\
    \ 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6,\
    \ 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4,\
    \ 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6,\
    \ 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4,\
    \ 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6,\
    \ 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4,\
    \ 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6,\
    \ 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4, 2, 6, 2, 4,\
    \ 2, 6, 2, 4, 2, 6, 2,\ndef check(candidate):\n    assert candidate([4, 88]) ==\
    \ 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpflithye5.py\", line 14\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    if lst:\n        return sum(lst[::2])\n    else:\n        return 0\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp6dh9rji.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpp6dh9rji.py\", line 21,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpp6dh9rji.py\", line 15, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # write your code here\n    return sum([x for i, x in enumerate(lst) if i\
    \ % 2 != 0 and x % 2 == 0])\n\nprint(add([4, 2, 6, 7]))\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([num for num in lst[1::2] if num % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # Your code goes here\n    return sum([i for i in lst[1::2] if i % 2 == 0])\n\
    print(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4, 88])\
    \ == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    s = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] %\
    \ 2 == 0:\n            s += lst[i]\n    return s\n\ndef check(candidate):\n  \
    \  assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    # Your code here\n    # Sum the numbers at even indices\n    # Sum the numbers\
    \ at odd indices\n    # Return the even index numbers minus the odd index numbers\n\
    \    # sum_even = sum(lst[::2])\n    # sum_odd = sum(lst[1::2])\n    # return\
    \ sum_even - sum_odd\n    # 1 line solution\n    return sum(lst[::2]) - sum(lst[1::2])\n\
    \n\nq = add([4, 2, 6, 7]), 2\nq\nq = add([4, 2, 6, 8]), 0\nq\nq = add([2, 2, 2,\
    \ 2]), -2\nq\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n   \
    \ assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6,\
    \ 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n  \
    \  check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpks1lwdmd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpks1lwdmd.py\", line 34,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpks1lwdmd.py\", line 28, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    # SOLUTION 2\n    return sum(lst[1::2])\n\n\nprint(add([3, 2,\
    \ 6, 7]))\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([item for item in lst[1::2] if item % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([n for i, n in enumerate(lst) if n % 2 == 0 and i % 2 == 1])\n\
    \ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    assert isinstance(lst, list)\n    assert len(lst) > 0\n    assert all(isinstance(x,\
    \ int) for x in lst)\n    return sum(x for i, x in enumerate(lst) if i % 2 ==\
    \ 1 and x % 2 == 0)\n\ndef check(candidate):\n    assert candidate([4, 88]) ==\
    \ 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n  \
    \  assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgsi68vw6.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpgsi68vw6.py\", line 20,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpgsi68vw6.py\", line 14, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if lst[i] % 2 == 0 and i % 2\
    \ != 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
