name: HumanEval_108_count_nums
language: py
prompt: "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    \"\
  \"\"\n    Write a function count_nums which takes an array of integers and returns\n\
  \    the number of elements which has a sum of digits > 0.\n    If a number is negative,\
  \ then its first signed digit will be negative:\n    e.g. -123 has signed digits\
  \ -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11])\
  \ == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([-1,\
  \ -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1,\
  \ 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n\
  \    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([0,\
  \ 1]) == 1\n    assert candidate([1]) == 1\n\ndef test_check():\n    check(count_nums)\n\
  \ntest_check()\n"
completions: ['    return 0', "    return sum(1 for num in arr if sum(abs(int(digit))\
    \ for digit in str(num)) > 0)\n", "    res = 0\n    for n in arr:\n        if\
    \ signed_digits_sum(n) > 0:\n            res += 1\n    return res\n", "    count\
    \ = 0\n    for i in arr:\n        if i > 0:\n            nums = list(str(i))\n\
    \            sign = 1\n        else:\n            nums = list(str(i)[1:])\n  \
    \          sign = -1\n        if sign * sum(map(int, nums)) > 0:\n           \
    \ count += 1\n    return count", "    count = 0\n    for num in arr:\n       \
    \ sum_of_digits = 0\n        for i in str(abs(num)):\n            sum_of_digits\
    \ += int(i)\n        if sum_of_digits > 0:\n            count += 1\n    return\
    \ count\n", "    def sum_signed_digits(num: int) -> int:\n        if num < 0:\n\
    \            return -1 * sum(map(int, str(num)[1:]))\n        return sum(map(int,\
    \ str(num)))\n    return sum(map(lambda x: 1 if sum_signed_digits(x) > 0 else\
    \ 0, arr))\n", '    return len([num for num in arr if sum(map(int, str(abs(num))))
    > 0])', "    count = 0\n    for num in arr:\n        abs_num = abs(num)\n    \
    \    while abs_num > 0:\n            count += abs_num % 10\n            abs_num\
    \ //= 10\n    return count\n", "    ...\n", "    # YOUR CODE HERE\n    arr_=[]\n\
    \    for i in arr:\n        if i<0:\n            i=i*-1\n        j=0\n       \
    \ while i>0:\n            j+=i%10\n            i=i//10\n        arr_.append(j)\n\
    \    for i in arr_:\n        if i==0:\n            arr_.remove(i)\n    return\
    \ len(arr_)\n        \n    raise NotImplementedError()\n\n", "    return sum(1\
    \ for x in arr if sum(map(int, str(abs(x)))) > 0)\n", "    count = 0\n    for\
    \ i in arr:\n        if sum([int(x) for x in str(abs(i))]) > 0:\n            count\
    \ += 1\n    return count\n", "    ####\n    #### YOUR CODE HERE\n    ####\n  \
    \  count = 0\n    for num in arr:\n        # print(num)\n        if num < 0:\n\
    \            signed_digits = [int(i) for i in str(num)[1:]]\n            signed_digits.insert(0,\
    \ int(str(num)[0])*(-1))\n        else:\n            signed_digits = [int(i) for\
    \ i in str(num)]\n        # print(signed_digits)\n        if sum(signed_digits)\
    \ > 0:\n            count += 1\n    return count\n    \n    \n    \n    \n   \
    \ \n    \n    # if __name__ == \"__main__\":\n    #     import doctest\n    #\
    \     doctest.testmod()", "    pass\n", "    return sum(1 for num in arr if sum_of_digits(num)\
    \ > 0)\n", "    return 0\n", "    return len([i for i in arr if sum([int(j) for\
    \ j in str(abs(i))])])\n", "    counter = 0\n    for num in arr:\n        if num\
    \ < 0:\n            if (abs(num) % 10) + (abs(num) // 10) != 0:\n            \
    \    counter += 1\n        else:\n            if (num % 10) + (num // 10) != 0:\n\
    \                counter += 1\n    return counter\n", '    pass', "    count =\
    \ 0\n    for num in arr:\n        # Break down the number and add them up\n  \
    \      sum = 0\n        for digit in str(num):\n            if digit == '-':\n\
    \                continue\n            else:\n                sum += int(digit)\n\
    \        if sum > 0:\n            count += 1\n    return count", "    total =\
    \ 0\n    for i in arr:\n        if i == 0:\n            continue\n        if sum(map(int,\
    \ str(abs(i)))) > 0:\n            total += 1\n    return total", "    return 0\n",
  "    count = 0\n    for num in arr:\n        if sum(map(int, str(abs(num)))) > 0:\n\
    \            count += 1\n    return count", "    count = 0\n    for num in arr:\n\
    \        if len(str(num)) == 1:\n            if num > 0:\n                count\
    \ += 1\n        else:\n            sum_of_digits = 0\n            for digit in\
    \ str(num):\n                if digit != '-':\n                    sum_of_digits\
    \ += int(digit)\n            if sum_of_digits > 0:\n                count += 1\n\
    \    return count\n", '    return sum(sum(map(int, str(abs(num)))) > 0 for num
    in arr)', "    count = 0\n    for num in arr:\n        sum_of_digits = 0\n   \
    \     if num < 0:\n            signed_num = -num\n        else:\n            signed_num\
    \ = num\n        while signed_num > 0:\n            sum_of_digits += signed_num\
    \ % 10\n            signed_num //= 10\n        if sum_of_digits > 0:\n       \
    \     count += 1\n    return count\n", "    # YOUR CODE HERE\n    list1 = []\n\
    \    for i in arr:\n        if i > 0:\n            list1.append(i)\n        else:\n\
    \            list1.append(abs(i))\n    count = 0\n    for i in list1:\n      \
    \  sum = 0\n        while i > 0:\n            sum += i % 10\n            i = i\
    \ // 10\n        if sum > 0:\n            count += 1\n    return count\n\n", " \
    \   return sum(sum(map(int, str(i))) > 0 for i in arr)\n", "    pass\n", "   \
    \ count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n\
    \        total = 0\n        while num > 0:\n            total += num % 10\n  \
    \          num //= 10\n        if total > 0:\n            count += 1\n    return\
    \ count\n", "    count = 0\n    for num in arr:\n        # Turn the number into\
    \ string representation\n        num_string = str(num)\n        # Initialize the\
    \ sum of digits to 0\n        digit_sum = 0\n        # Iterate over the digits\n\
    \        for digit in num_string:\n            # Check if the first character\
    \ is '-' and skip it if it is\n            if digit == '-':\n                continue\n\
    \            # Add the digit to the sum\n            digit_sum += int(digit)\n\
    \        # If the sum is > 0, increment the counter\n        if digit_sum > 0:\n\
    \            count += 1\n    return count", "    return len([x for x in arr if\
    \ sum(map(int, str(abs(x)))) > 0])\n", "    count = 0\n    for num in arr:\n \
    \       sum_num = 0\n        for digit in str(num):\n            sum_num += int(digit)\n\
    \        if sum_num > 0:\n            count += 1\n    return count\n", '    return
    sum(sum(map(int, str(x))) for x in arr) > 0', "    sumOfDigits = []\n    for i\
    \ in arr:\n        if i < 0:\n            i = -i\n        sum = 0\n        while\
    \ i > 0:\n            sum += i % 10\n            i = i // 10\n        sumOfDigits.append(sum)\n\
    \    count = 0\n    for j in sumOfDigits:\n        if j > 0:\n            count\
    \ += 1\n    return count", "    count = 0\n    for num in arr:\n        if num\
    \ == 0:\n            continue\n        elif num < 0:\n            num = -num\n\
    \        if sum_digits(num) > 0:\n            count += 1\n    return count\n",
  '    return sum(1 for x in arr if sum(map(int, list(str(abs(x))))) > 0)', "    if\
    \ not arr:\n        return 0\n    count = 0\n    for num in arr:\n        if num\
    \ < 0:\n            sum_of_digits = num\n        else:\n            sum_of_digits\
    \ = sum([int(i) for i in str(num)])\n        if sum_of_digits > 0:\n         \
    \   count += 1\n    return count\n", "    pass\n\n", "    ...\n    return 0\n",
  "    return sum(1 for num in arr if sum(map(int, str(abs(num)))) > 0)\n", "    if\
    \ not arr:\n        return 0\n    return sum(1 for x in arr if sum(map(abs, map(int,\
    \ str(x)))) > 0)\n", "    count = 0\n    for num in arr:\n        if sum_signed_digits(num)\
    \ > 0:\n            count += 1\n    return count\n", "    return len([num for\
    \ num in arr if sum(map(abs, int_to_digits(num))) > 0])\n", "    # YOUR CODE HERE\n\
    \    return sum(1 for a in arr if sum(map(int, str(abs(a)))) > 0)\n", "    ans\
    \ = 0\n    for el in arr:\n        if el < 0:\n            sum_of_digits = sum(map(lambda\
    \ x: int(x), str(el)[1:]))\n        else:\n            sum_of_digits = sum(map(lambda\
    \ x: int(x), str(el)))\n        if sum_of_digits > 0:\n            ans += 1\n\
    \    return ans", "    return 0\n", "    # All we need to do is check if the sum\
    \ of the digits of each number\n    # is > 0.\n    return sum(1 for n in arr if\
    \ sum(abs(int(d)) for d in str(n)) > 0)\n", "    count = 0\n    for i in arr:\n\
    \        if sum(int(n) for n in str(abs(i))) > 0:\n            count += 1\n  \
    \  return count", "    return 0\n\n", "    count = 0\n    for num in arr:\n  \
    \      if abs(num) % 10 != 0:\n            count += 1\n        num //= 10\n  \
    \      while num != 0:\n            if num % 10 != 0:\n                count +=\
    \ 1\n                break\n            num //= 10\n    return count\n", "   \
    \ res = 0\n    for i in arr:\n        x = abs(i)\n        sum = 0\n        while\
    \ x > 0:\n            sum += x % 10\n            x //= 10\n        if sum > 0:\n\
    \            res += 1\n    return res", "    return 0\n", "    positive_sum_digits\
    \ = lambda num: sum(map(int, str(abs(num)))) > 0\n    return len(list(filter(positive_sum_digits,\
    \ arr)))\n", "    # TODO\n    #   Figure out how to count digits of a negative\
    \ number\n    #   Split each number into digits\n    #   Sum the digits of each\
    \ number\n    #   Return the count of numbers which have a sum greater than 0\n\
    \    count = 0\n    for i in arr:\n        if sum(map(int, str(abs(i)))) > 0:\n\
    \            count += 1\n    return count\n", "    arr = [abs(x) for x in arr]\n\
    \    nums = [sum(int(a) for a in str(x)) for x in arr]\n    return len([i for\
    \ i in nums if i > 0])\n", "    return len([x for x in arr if sum([int(y) for\
    \ y in str(abs(x))])])\n", "    counter = 0\n    for num in arr:\n        digits\
    \ = [int(x) for x in str(abs(num))]\n        counter += sum(digits) > 0\n    return\
    \ counter", "    return len([x for x in arr if sum(map(int, str(abs(x)))) > 0])\n",
  "    pass\n\n", "    nums = filter(lambda x: x > 0, map(lambda x: sum(map(int, str(abs(x)))),\
    \ arr))\n    return len(list(nums))\n", "    count = 0\n    for num in arr:\n\
    \        if sum_digits(num) > 0:\n            count += 1\n    return count\n",
  "    # replace the line below with your solution\n    return 0", "    count = 0\n\
    \    for n in arr:\n        sum = 0\n        if n < 0:\n            n = -n\n \
    \       while n > 0:\n            sum += n % 10\n            n //= 10\n      \
    \  if sum > 0:\n            count += 1\n    return count", "    arr = [abs(n)\
    \ for n in arr]\n    return sum(1 for n in arr if sum([int(c) for c in str(n)])\
    \ > 0)\n", "    pass\n", "    def sum_of_digits(num: int) -> int:\n        \"\"\
    \"\n        Write a function sum_of_digits which takes an integer and returns\
    \ the\n        sum of its digits.\n        >>> sum_of_digits(0) == 0\n       \
    \ >>> sum_of_digits(123) == 6\n        >>> sum_of_digits(-1) == 1\n        >>>\
    \ sum_of_digits(-123) == 6\n        \"\"\"\n        pass\n    \n    pass\n", " \
    \   sum = 0\n    for i in arr:\n        if i < 0:\n            i = -i\n      \
    \  while i > 0:\n            sum += i % 10\n            i //= 10\n    return sum\n",
  "    def sum_digits(num: int) -> int:\n        s = 0\n        while num:\n     \
    \       s += num % 10\n            num //= 10\n        return s\n\n    return\
    \ sum(sum_digits(num) > 0 for num in arr)\n", "    # YOUR CODE HERE\n\n", "  \
    \  count = 0\n    for n in arr:\n        n = abs(n)\n        while n != 0:\n \
    \           count += n % 10\n            n //= 10\n    return count\n", '    pass',
  "    counter = 0\n    for item in arr:\n        if sum(list(map(int, str(abs(item)))))\
    \ > 0:\n            counter += 1\n    return counter\n", "    raise NotImplementedError\n",
  "    return 0\n", "    return 0\n", "    count = 0\n    for num in arr:\n      \
    \  digit_sum = 0\n        if num < 0:\n            num = -num\n        while num\
    \ > 0:\n            digit_sum += num % 10\n            num //= 10\n        if\
    \ digit_sum > 0:\n            count += 1\n    return count\n", "    ### BEGIN\
    \ SOLUTION\n    def sum_digits(n):\n        n = abs(n)\n        total = 0\n  \
    \      while n:\n            total += n % 10\n            n //= 10\n        return\
    \ total\n    return sum(sum_digits(x) for x in arr)\n    ### END SOLUTION\n",
  "    pass\n", "    return len([n for n in arr if sum(map(abs, map(int, str(n))))\
    \ > 0])\n    # return len([1 for n in arr if sum(map(abs, map(int, str(n)))) >\
    \ 0])\n    # return len(list(filter(lambda n: sum(map(abs, map(int, str(n))))\
    \ > 0, arr)))\n", "    raise NotImplementedError\n", "    # your code goes here\n\
    \    return 0", "    count = 0\n    for i in arr:\n        a = 0\n        if i\
    \ < 0:\n            i = -i\n        while i > 0:\n            a += i % 10\n  \
    \          i //= 10\n        if a > 0:\n            count += 1\n    return count\n",
  "    sign = 1\n    counter = 0\n    for i in arr:\n        if i < 0:\n         \
    \   sign = -1\n        else:\n            sign = 1\n        i = sign * i\n   \
    \     sum_digits = 0\n        while i != 0:\n            sum_digits += i % 10\n\
    \            i = i // 10\n        if sum_digits > 0:\n            counter += 1\n\
    \    return counter\n", "    count = 0\n    for el in arr:\n        if sum(list(map(int,\
    \ list(str(abs(el)))))) > 0:\n            count += 1\n    return count", "   \
    \ pass\n\n", "    pass\n", "    def sum_digits(num: int) -> int:\n        \"\"\
    \"\n        Returns the sum of the digits in num.\n        e.g. sum_digits(123)\
    \ == 6\n        \"\"\"\n        return sum(int(n) for n in str(num))\n\n    return\
    \ sum(1 for n in arr if sum_digits(n) > 0)", "    ans = 0\n    for num in arr:\n\
    \        if sum(map(int, str(abs(num)))) > 0:\n            ans += 1\n    return\
    \ ans\n", '    return len([x for x in arr if sum(map(abs, divmod(x, 10))) > 0])',
  '    return sum(map(lambda x: x > 0, map(lambda x: sum(map(lambda y: int(y), list(str(abs(x))))),
    arr)))', "    def sum_digits(n: int) -> int:\n        \"\"\"\n        Sum the\
    \ digits of n, including the signed digits.\n        >>> sum_digits(0) == 0\n\
    \        >>> sum_digits(1) == 1\n        >>> sum_digits(2) == 2\n        >>> sum_digits(123)\
    \ == 6\n        >>> sum_digits(-1) == -1\n        >>> sum_digits(-123) == -6\n\
    \        \"\"\"\n        total = 0\n        for i in str(n):\n            if i\
    \ == '-':\n                continue\n            total += int(i)\n        return\
    \ total\n\n    return len([i for i in arr if sum_digits(i) > 0])\n", "    # alternatively\
    \ use collections.Counter\n    return sum(sum(map(int, str(num))) > 0 for num\
    \ in arr)\n", '    return len([x for x in arr if sum(map(int, str(abs(x)))) >
    0])', '    pass', "    counter = 0\n    for elem in arr:\n        signed_digits\
    \ = list(map(int, str(abs(elem))))\n        if sum(signed_digits) > 0:\n     \
    \       counter += 1\n    return counter\n", "    res = 0\n    for num in arr:\n\
    \        if num < 0:\n            num = -num\n        while num != 0:\n      \
    \      res += num % 10\n            num //= 10\n    return res\n\nprint(count_nums([-1,\
    \ 11, -11]))\nprint(count_nums([1, 1, 2]))", "    count = 0\n    for x in arr:\n\
    \        if x < 0:\n            x = -x\n        if sum([int(y) for y in str(x)])\
    \ > 0:\n            count += 1\n    return count\n", "    pass\n", "    pos_arr\
    \ = []\n    for num in arr:\n        if num > 0:\n            pos_arr.append(num)\n\
    \        elif num < 0:\n            pos_arr.append(abs(num))\n        else:\n\
    \            continue\n    sum_arr = []\n    for num in pos_arr:\n        sums\
    \ = 0\n        for i in str(num):\n            sums += int(i)\n        sum_arr.append(sums)\n\
    \    count = 0\n    for num in sum_arr:\n        if num != 0:\n            count\
    \ += 1\n    return count\n", "    return len([i for i in arr if sum(int(j) for\
    \ j in str(abs(i))) > 0])\n", "    count = 0\n    for n in arr:\n        digits\
    \ = sum(map(int, str(abs(n))))\n        if digits > 0:\n            count += 1\n\
    \    return count\n", '    return sum(1 for num in arr if sum(map(int, str(abs(num))))
    > 0)', "    return len([i for i in arr if sum(int(d) for d in str(abs(i))) > 0])\n",
  "    # TODO: implement the body\n    # Hint: you can use str.isdigit() and int(x)\
    \ to get the integer representation\n    #       of a string x\n    return 0\n\
    \n", "    count = 0\n    for num in arr:\n        digits = [int(d) for d in str(abs(num))]\n\
    \        count += 1 if sum(digits) > 0 else 0\n    return count", "    count =\
    \ 0\n    for num in arr:\n        num = abs(num)\n        while num:\n       \
    \     if num % 10:\n                count += 1\n                break\n      \
    \      num //= 10\n    return count\n", "    return len([arr[i] for i in range(len(arr))\
    \ if sum(map(int, str(abs(arr[i])))) > 0])\n", "    count = 0\n    for n in arr:\n\
    \        if sum([int(d) for d in str(abs(n))]) > 0:\n            count += 1\n\
    \    return count", '    return 0', "    count = 0\n    for num in arr:\n    \
    \    if sum(map(int, list(str(abs(num))))) > 0:\n            count += 1\n    return\
    \ count", "    count = 0\n    for el in arr:\n        digits = [int(x) for x in\
    \ str(abs(el))]\n        if sum(digits) > 0:\n            count += 1\n    return\
    \ count\n", "    return sum(\n        sum(map(int, str(num).lstrip('-'))) > 0\n\
    \        for num in arr\n    )\n", '    return sum(sum(map(int, str(abs(num))))
    > 0 for num in arr)', '    return sum(sum(map(int, str(abs(i)))) > 0 for i in
    arr)', "    #count = 0\n    #for i in arr:\n    #    if i < 0:\n    #        i\
    \ = -i\n    #    s = 0\n    #    while i > 0:\n    #        s += i % 10\n    #\
    \        i //= 10\n    #    if s > 0:\n    #        count += 1\n    #return count\n\
    \    return sum(sum(map(int, str(i))) > 0 for i in arr)\n", "    count = 0\n \
    \   for i in arr:\n        if i < 0:\n            i = -i\n        sum_of_digits\
    \ = 0\n        while i:\n            sum_of_digits += i % 10\n            i //=\
    \ 10\n        if sum_of_digits > 0:\n            count += 1\n    return count\n",
  "    count = 0\n    for i in arr:\n        sum_digits = 0\n        sign = 1\n  \
    \      if i < 0:\n            sign = -1\n        while i != 0:\n            digit\
    \ = i % 10\n            sum_digits += digit\n            i = i // 10\n       \
    \ if sum_digits * sign > 0:\n            count += 1\n    return count\n", "  \
    \  count = 0\n    for num in arr:\n        if sum(map(int, str(abs(num)))) > 0:\n\
    \            count += 1\n    return count\n", "    pass\n\n", "    # TODO\n  \
    \  count = 0\n    for i in arr:\n        x = i\n        if i < 0:\n          \
    \  x = -i\n        while x > 0:\n            count += x % 10\n            x =\
    \ x // 10\n    return count\n", "    sign_digit_sum = lambda x: x if x < 0 else\
    \ sum(map(int, str(x)))\n    return sum(map(lambda x: sign_digit_sum(x) > 0, arr))",
  "    # itertools.groupby groups consecutive digits, by default in ascending order\n\
    \    # so we only need to look at the first digit of each group to see if it's\n\
    \    # negative\n    count = 0\n    for _, group in groupby(arr):\n        # is\
    \ the first element negative?\n        if next(group) < 0:\n            count\
    \ += 1\n    return count\n", '    return 0', "    return sum(1 for x in arr if\
    \ sum(map(int, str(abs(x)))) > 0)\n", "    return sum(1 for el in arr if sum(map(int,\
    \ str(abs(el)))) > 0)\n", "    return sum(1 for x in arr if sum(map(int, str(abs(x))))\
    \ > 0)\n", "    return 0\n\n", '    return sum(sum(map(int, str(num))) > 0 for
    num in arr)', "    return 0\n", "    return sum(sum(map(int, str(i))) > 0 for\
    \ i in arr)\n", "    return 0\n", "    pass\n", "    # return arr.count(0)\n \
    \   count = 0\n    for i in arr:\n        if i < 0:\n            i = -i\n    \
    \    if i > 0:\n            while i > 0:\n                count += i % 10\n  \
    \              i = i // 10\n        else:\n            count += 1\n    return\
    \ count\n", "    nums = 0\n    for i in arr:\n        nums += sum([int(d) for\
    \ d in str(abs(i))]) > 0\n    return nums", "    pass\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    nums = [sum(map(int, str(abs(i)))) for\
    \ i in arr]\n    return len([x for x in nums if x > 0])\n", "    # Your code here\n\
    \    count = 0\n    for i in arr:\n        if i >= 0:\n            sum_digits\
    \ = sum(map(int, str(i)))\n        else:\n            i = -i\n            sum_digits\
    \ = -1 * sum(map(int, str(i)))\n        if sum_digits > 0:\n            count\
    \ += 1\n    return count\n\n", "    nums = 0\n    for num in arr:\n        if\
    \ sum(int(num) for num in str(abs(num))) > 0:\n            nums += 1\n    return\
    \ nums\n", "    def sign_digit_sum(num: int) -> int:\n        \"\"\" Return sum\
    \ of signed digits for num.\n        >>> sign_digit_sum(1) == 1\n        >>> sign_digit_sum(-1)\
    \ == -1\n        >>> sign_digit_sum(10) == 1\n        >>> sign_digit_sum(-10)\
    \ == -1\n        >>> sign_digit_sum(11) == 2\n        >>> sign_digit_sum(-11)\
    \ == -2\n        \"\"\"\n        def sign_digit(num: int) -> int:\n          \
    \  \"\"\" Return sign of num if num != 0, else return 0.\n            >>> sign_digit(1)\
    \ == 1\n            >>> sign_digit(-1) == -1\n            >>> sign_digit(0) ==\
    \ 0\n            \"\"\"\n            if num > 0:\n                return 1\n \
    \           elif num < 0:\n                return -1\n            else:\n    \
    \            return 0\n        if num == 0:\n            return 0\n        else:\n\
    \            return sign_digit(num) + sign_digit_sum(num // 10)\n    return sum(1\
    \ for x in arr if sign_digit_sum(x) > 0)\n", "    # YOUR CODE HERE\n    count\
    \ = 0\n    for num in arr:\n        if num >= 0:\n            sum = 0\n      \
    \      while num != 0:\n                sum += num % 10\n                num =\
    \ num // 10\n            if sum > 0:\n                count += 1\n        else:\n\
    \            num = -num\n            sum = 0\n            while num != 0:\n  \
    \              sum += num % 10\n                num = num // 10\n            if\
    \ sum < 0:\n                count += 1\n    return count\n", "    return sum(1\
    \ for num in arr if sum(map(int, list(str(abs(num))))) > 0)\n", "    count = 0\n\
    \    for i in arr:\n        if i > 0:\n            count += 1\n        else:\n\
    \            if sum(map(int, list(str(i)))) > 0:\n                count += 1\n\
    \    return count\n", "    return 0\n\n", "    pass\n", "    # Insert your code\
    \ here\n    pass\n\nimport unittest\n", "    def sum_digits(num: int) -> int:\n\
    \        num = abs(num)\n        total = 0\n        while num:\n            total\
    \ += num % 10\n            num //= 10\n        return total\n\n    total = 0\n\
    \    for num in arr:\n        if sum_digits(num) > 0:\n            total += 1\n\
    \    return total\n", "    pass\n\n", '    return sum(1 for n in arr if sum(map(int,
    str(abs(n)))) > 0)', "    return 0\n", "    total = 0\n    for item in arr:\n\
    \        if sum(map(int, list(str(abs(item))))) > 0:\n            total += 1\n\
    \    return total", "    pass\n", "    # YOUR CODE HERE\n    count = 0\n    for\
    \ num in arr:\n        if sum(map(int, list(str(abs(num))))) > 0:\n          \
    \  count += 1\n    return count\n", "    count = 0\n    for i in arr:\n      \
    \  if sum(int(x) for x in str(abs(i))) > 0:\n            count += 1\n    return\
    \ count", "    count = 0\n    for num in arr:\n        if sum(map(int, str(abs(num))))\
    \ > 0:\n            count += 1\n    return count\n", "    return len([num for\
    \ num in arr if sum([int(digit) for digit in str(abs(num))])])\n", "    pass\n",
  "    if not arr:\n        return 0\n    count = 0\n    for num in arr:\n       \
    \ sum_digits = 0\n        for digit in str(abs(num)):\n            sum_digits\
    \ += int(digit)\n        if sum_digits > 0:\n            count += 1\n    return\
    \ count", "    return sum(1 for num in arr if sum(map(int, str(abs(num)))) > 0)\n",
  "    pass\n", "    count = 0\n    for num in arr:\n        if sum(map(int, str(abs(num))))\
    \ > 0:\n            count += 1\n    return count", "    ...\n", "    # use a set\
    \ to keep track of visited numbers\n    visited = set()\n    count = 0\n    for\
    \ n in arr:\n        # have we seen this number before?\n        if n in visited:\n\
    \            # we have, so just update the count\n            count += 1\n   \
    \     else:\n            # we haven't, so calculate the signed digit sum and add\
    \ to set\n            visited.add(n)\n            # get the abs of the digits\
    \ sum\n            d_sum = abs(digit_sum(n))\n            # remove all of the\
    \ multiples of this sum\n            to_remove = [x for x in visited if x % d_sum\
    \ == 0]\n            # update the count if any were there\n            count +=\
    \ len(to_remove)\n            # now remove them\n            for x in to_remove:\n\
    \                visited.remove(x)\n    return count\n", "    count = 0\n    for\
    \ i in arr:\n        x = i\n        if x < 0:\n            x = x * -1\n      \
    \  sum = 0\n        while x != 0:\n            sum += x % 10\n            x =\
    \ x // 10\n        if sum > 0:\n            count += 1\n    return count\n", '    return
    sum(1 for n in arr if n // 10 == n % 10)', "    counter = 0\n    for i in arr:\n\
    \        if i < 0:\n            i = i * -1\n        if sum(int(j) for j in str(i))\
    \ > 0:\n            counter += 1\n    return counter", "    if len(arr) == 0:\n\
    \        return 0\n    else:\n        if sum([abs(int(i)) for i in str(arr[0])])\
    \ > 0:\n            return 1 + count_nums(arr[1:])\n        else:\n          \
    \  return count_nums(arr[1:])\n", "    count = 0\n    for num in arr:\n      \
    \  abs_num = abs(num)\n        if sum([int(digit) for digit in str(abs_num)])\
    \ > 0:\n            count += 1\n    return count\n", "    # Complete the body\
    \ of this function. Don't add any lines here.\n    ans = 0\n    for x in arr:\n\
    \        if x >= 0:\n            sum = 0\n            while x:\n             \
    \   sum += x % 10\n                x //= 10\n            if sum > 0:\n       \
    \         ans += 1\n        else:\n            if x % 10 > 0:\n              \
    \  ans += 1\n    return ans\n", '    return len([i for i in arr if sum(abs(int(d))
    for d in str(i)) > 0])', "    nums = 0\n    for x in arr:\n        digits = list(map(int,\
    \ str(abs(x))))\n        if sum(digits) > 0:\n            nums += 1\n    return\
    \ nums\n\nprint(count_nums([1, 1, 2]))", "    ans = 0\n    for i in arr:\n   \
    \     if i > 0:\n            x = sum(int(c) for c in str(i))\n        elif i <\
    \ 0:\n            x = sum(int(c) for c in str(i)[1:]) + 1\n        else:\n   \
    \         x = 0\n        if x > 0:\n            ans += 1\n    return ans\n", " \
    \   cnt = 0\n    for num in arr:\n        digits = list(map(int, str(abs(num))))\n\
    \        if sum(digits) > 0:\n            cnt += 1\n    return cnt\n", "    return\
    \ len([x for x in arr if sum(int(y) for y in str(abs(x))) > 0])\n", "    if len(arr)\
    \ == 0:\n        return 0\n    elif len(arr) == 1:\n        if sum_digits(arr[0])\
    \ > 0:\n            return 1\n        else:\n            return 0\n    else:\n\
    \        return count_nums([arr[0]]) + count_nums(arr[1:])\n", "    pass\n\n",
  "    count = 0\n    for elem in arr:\n        sum_digits = 0\n        elem = abs(elem)\n\
    \        while elem != 0:\n            sum_digits += elem % 10\n            elem\
    \ //= 10\n        if sum_digits > 0:\n            count += 1\n    return count\n",
  "    pass\n\n", "    # TODO: Your code here\n    raise NotImplementedError(\"Not\
    \ implemented.\")\n \n \n ", "    #return 0\n    #return 1\n    #return 3\n  \
    \  #pass\n    return sum(1 for n in arr if sum(map(int, str(abs(n)))) > 0)\n",
  "    # your code here\n", "    return 0\n\n@test", "    if not arr:\n        return\
    \ 0\n    count = 0\n    for i in arr:\n        if i < 0:\n            j = -i\n\
    \        else:\n            j = i\n        while j > 0:\n            count +=\
    \ j % 10\n            j //= 10\n    return count\n", "    count = 0\n    for i\
    \ in arr:\n        sum_digits = 0\n        if i >= 0:\n            for j in str(i):\n\
    \                sum_digits += int(j)\n        else:\n            for j in str(i)[1:]:\n\
    \                sum_digits += int(j)\n        if sum_digits > 0:\n          \
    \  count += 1\n    return count\n", "    counter = 0\n    for num in arr:\n  \
    \      if abs(num) < 10:\n            if num > 0:\n                counter +=\
    \ 1\n        else:\n            temp = abs(num)\n            last_digit = temp\
    \ % 10\n            temp //= 10\n            total = last_digit\n            while\
    \ temp > 0:\n                last_digit = temp % 10\n                temp //=\
    \ 10\n                total += last_digit\n            if total > 0:\n       \
    \         counter += 1\n    return counter\n", "    count = 0\n    for i in arr:\n\
    \        total = 0\n        if i < 0:\n            i = i * -1\n        for n in\
    \ str(i):\n            total += int(n)\n        if total > 0:\n            count\
    \ += 1\n    return count\n", "    # convert to array of signed digits, then count\
    \ values with non-zero sum\n    return len([x for x in [sum(to_signed_digits(n))\
    \ for n in arr] if x != 0])\n", "    return 0\n", "    return 0\n\n", "    def\
    \ signed_digits(n):\n        return n if n > 0 else n * -1\n    return len([x\
    \ for x in arr if sum(map(signed_digits, num_to_arr(x))) > 0])\n\n", "    count\
    \ = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n\
    \        arr_str = str(num)\n        arr_sum = 0\n        for s in arr_str:\n\
    \            arr_sum += int(s)\n        if arr_sum > 0:\n            count +=\
    \ 1\n    return count", "    return sum(sum(map(int, str(i))) > 0 for i in arr)\n",
  "    return 0\n", "    count = 0\n    for i in arr:\n        if sum(int(dig) for\
    \ dig in str(abs(i))) > 0:\n            count += 1\n    return count", "    pass\n",
  "    return sum(1 for i in arr if sum(map(int, str(abs(i)))) > 0)\n", "    count\
    \ = 0\n    for num in arr:\n        string = str(num)\n        sum = 0\n     \
    \   if num < 0:\n            sum += abs(int(string[0]))\n            i = 1\n \
    \       else:\n            i = 0\n        while i < len(string):\n           \
    \ sum += int(string[i])\n            i += 1\n        if sum > 0:\n           \
    \ count += 1\n    return count\n", "    count = 0\n    for a in arr:\n       \
    \ if a > 0:\n            while a > 0:\n                count += a % 10\n     \
    \           a //= 10\n        else:\n            while a < 0:\n              \
    \  count += abs(a % 10)\n                a //= 10\n    return count\n", "    return\
    \ 0\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
