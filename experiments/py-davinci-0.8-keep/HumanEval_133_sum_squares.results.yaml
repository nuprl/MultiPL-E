name: HumanEval_133_sum_squares
language: py
results:
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    import\
    \ math\n    sum_of_squares = 0\n    for element in lst:\n        square = math.ceil(element)\n\
    \        sum_of_squares += square**2\n    return sum_of_squares\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    #lst\
    \ = [1,4,9]\n    lst_square = []\n    for i in lst:\n        #lst_square.append(i**2)\n\
    \        lst_square.append(math.ceil(i**2))\n    #return sum(lst_square)\n   \
    \ return math.ceil(sum(lst_square))\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqw7840jw.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpqw7840jw.py\", line 39,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpqw7840jw.py\", line\
    \ 25, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpqw7840jw.py\"\
    , line 20, in sum_squares\n    lst_square.append(math.ceil(i**2))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([i**2 for i in [math.ceil(x) for x in lst]])\ndef check(candidate):\n  \
    \  assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyn0hwjpm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpyn0hwjpm.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpyn0hwjpm.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpyn0hwjpm.py\"\
    , line 16, in sum_squares\n    return sum([i**2 for i in [math.ceil(x) for x in\
    \ lst]])\n  File \"/tmp/tmpyn0hwjpm.py\", line 16, in <listcomp>\n    return sum([i**2\
    \ for i in [math.ceil(x) for x in lst]])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    def\
    \ ceil(x):\n        if float(int(x)) == x:\n            return int(x)\n      \
    \  return int(x) + 1\n    ceil_lst = list(map(ceil, lst))\n    return sum(x**2\
    \ for x in ceil_lst)\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8b1ngjk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpk8b1ngjk.py\", line 37,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpk8b1ngjk.py\", line\
    \ 27, in check\n    assert candidate([-2.4, 1.0, 1.0]) == 6\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1a8h6p9k.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1a8h6p9k.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp1a8h6p9k.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    total\
    \ = 0\n    for i in lst:\n        total += (math.ceil(i)**2)\n    return total\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxfem4rfp.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxfem4rfp.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpxfem4rfp.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpxfem4rfp.py\"\
    , line 18, in sum_squares\n    total += (math.ceil(i)**2)\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst\
    \ = [int(round(i)) for i in lst]\n    return int(sum([i ** 2 for i in lst]))\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4h5h0d20.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4h5h0d20.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp4h5h0d20.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Your\
    \ code here\n    a = [round(x) for x in lst]\n    return sum([x**2 for x in a])\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgyary2b4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpgyary2b4.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpgyary2b4.py\", line\
    \ 23, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    sum=0\n\
    \    for item in lst:\n        item=math.ceil(item)\n        sum+=item**2\n  \
    \  return sum\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr052995j.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpr052995j.py\", line 37,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpr052995j.py\", line\
    \ 23, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpr052995j.py\"\
    , line 18, in sum_squares\n    item=math.ceil(item)\nNameError: name 'math' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdusz9i7x.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpdusz9i7x.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpdusz9i7x.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst\
    \ = [math.ceil(n) for n in lst]\n    return sum([n**2 for n in lst])\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjj1nygq5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpjj1nygq5.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpjj1nygq5.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpjj1nygq5.py\"\
    , line 16, in sum_squares\n    lst = [math.ceil(n) for n in lst]\n  File \"/tmp/tmpjj1nygq5.py\"\
    , line 16, in <listcomp>\n    lst = [math.ceil(n) for n in lst]\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([x**2 for x in lst])\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    # your code here\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi93va72q.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpi93va72q.py\", line 44,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpi93va72q.py\", line\
    \ 33, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(i**2) for i in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir0ct6o0.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpir0ct6o0.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpir0ct6o0.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    new_lst\
    \ = []\n    for i in lst:\n        if i > 0:\n            new_lst.append(ceil(i))\n\
    \        else:\n            new_lst.append(floor(i))\n    return sum([i**2 for\
    \ i in new_lst])\n\nprint(sum_squares([1,3,5,7]))\ndef check(candidate):\n   \
    \ assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa6tne685.py\", line\
    \ 24, in <module>\n    print(sum_squares([1,3,5,7]))\n  File \"/tmp/tmpa6tne685.py\"\
    , line 19, in sum_squares\n    new_lst.append(ceil(i))\nNameError: name 'ceil'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    new_lst\
    \ = [math.ceil(i) for i in lst]\n    s = sum([i**2 for i in new_lst])\n    return\
    \ s\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\n\
    print(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\nprint(sum_squares([-2.6,1,1]))\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rryl8si.py\", line\
    \ 20, in <module>\n    print(sum_squares([1,2,3]))\n  File \"/tmp/tmp6rryl8si.py\"\
    , line 16, in sum_squares\n    new_lst = [math.ceil(i) for i in lst]\n  File \"\
    /tmp/tmp6rryl8si.py\", line 16, in <listcomp>\n    new_lst = [math.ceil(i) for\
    \ i in lst]\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    total\
    \ = 0\n    for el in lst:\n        total += el ** 2\n    return round(total)\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphcmeowl0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphcmeowl0.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmphcmeowl0.py\", line\
    \ 24, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    sum\
    \ = 0\n    for i in lst:\n        sum += math.ceil(i)**2\n    return sum\n\ndef\
    \ check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert\
    \ candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) ==\
    \ 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0,\
    \ 10000.0]) == 200000000\n    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert\
    \ candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n    assert candidate([0.0]) ==\
    \ 0\n    assert candidate([-1.0]) == 1\n    assert candidate([-1.0, 1.0, 0.0])\
    \ == 2\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzybn7m2_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzybn7m2_.py\", line 36,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpzybn7m2_.py\", line\
    \ 22, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpzybn7m2_.py\"\
    , line 18, in sum_squares\n    sum += math.ceil(i)**2\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([i**2 for i in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0_o66tf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpq0_o66tf.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpq0_o66tf.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst\
    \ = [int(i) for i in lst]\n    return sum([i**2 for i in lst])\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxa658fxy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxa658fxy.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpxa658fxy.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    s =\
    \ 0\n    for v in lst:\n        v2 = math.ceil(v)\n        s += v2**2\n    return\
    \ s\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  \
    \  assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0,\
    \ 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgime_vmz.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgime_vmz.py\", line 37,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpgime_vmz.py\", line\
    \ 23, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpgime_vmz.py\"\
    , line 18, in sum_squares\n    v2 = math.ceil(v)\nNameError: name 'math' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([i ** 2 for i in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20o8tnqy.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp20o8tnqy.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp20o8tnqy.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(num**2) for num in lst])\n\nassert sum_squares([1,2,3]) == 14\nassert\
    \ sum_squares([1,4,9]) == 98\nassert sum_squares([1,3,5,7]) == 84\nassert sum_squares([1.4,4.2,0])\
    \ == 29\nassert sum_squares([-2.4,1,1]) == 6\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp779qly5f.py\", line\
    \ 21, in <module>\n    assert sum_squares([1.4,4.2,0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([x**2 for x in [int(math.ceil(x)) for x in lst]])\n\nprint(sum_squares([1,2,3]))\n\
    print(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\n\
    print(sum_squares([-2.4,1,1]))\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqa3rqs53.py\", line\
    \ 18, in <module>\n    print(sum_squares([1,2,3]))\n  File \"/tmp/tmpqa3rqs53.py\"\
    , line 16, in sum_squares\n    return sum([x**2 for x in [int(math.ceil(x)) for\
    \ x in lst]])\n  File \"/tmp/tmpqa3rqs53.py\", line 16, in <listcomp>\n    return\
    \ sum([x**2 for x in [int(math.ceil(x)) for x in lst]])\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # your\
    \ code here\n    return None\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_oo_3qi1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_oo_3qi1.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp_oo_3qi1.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(num**2) for num in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprndwvw51.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprndwvw51.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmprndwvw51.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # get\
    \ a list of ceil value of each element in the list\n    ceil_lst = [math.ceil(i)\
    \ for i in lst]\n    # get a list of squared each element in the ceil list\n \
    \   square_lst = [i ** 2 for i in ceil_lst]\n    # sum up all elements in the\
    \ squared list\n    return sum(square_lst)\n\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfphqea1f.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpfphqea1f.py\", line 38,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpfphqea1f.py\", line\
    \ 24, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpfphqea1f.py\"\
    , line 17, in sum_squares\n    ceil_lst = [math.ceil(i) for i in lst]\n  File\
    \ \"/tmp/tmpfphqea1f.py\", line 17, in <listcomp>\n    ceil_lst = [math.ceil(i)\
    \ for i in lst]\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # TODO:\
    \ \u043A\u043E\u0433\u0434\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\
    \u0434\u0435\u0442 \u043D\u0430\u043F\u0438\u0441\u0430\u043D\u0430 - \u0443\u0434\
    \u0430\u043B\u0438\u0442\u0435 pass\n\n    pass\n\ndef check(candidate):\n   \
    \ assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_o5gcv1_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_o5gcv1_.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp_o5gcv1_.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    \"\"\
    \"\n    MIRROR-PLEASE:\n    You are given a list of numbers.\n    You need to\
    \ return the sum of squared numbers in the given list,\n    round each element\
    \ in the list to the lower int(Floor) first.\n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 13\n    For lst = [1,4,9] the output should be 93\n   \
    \ For lst = [1,3,5,7] the output should be 83\n    For lst = [1.4,4.2,0] the output\
    \ should be 20\n    For lst = [-2.4,1,1] the output should be 0\n    \"\"\"\n\
    \    return sum([i**2 for i in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyc4ncgk9.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpyc4ncgk9.py\", line 45,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpyc4ncgk9.py\", line\
    \ 34, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Your\
    \ code here\n    return sum([int(ceil(i**2)) for i in lst])\n    \n    \ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnocpk_fl.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnocpk_fl.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpnocpk_fl.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpnocpk_fl.py\"\
    , line 17, in sum_squares\n    return sum([int(ceil(i**2)) for i in lst])\n  File\
    \ \"/tmp/tmpnocpk_fl.py\", line 17, in <listcomp>\n    return sum([int(ceil(i**2))\
    \ for i in lst])\nNameError: name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # your\
    \ code here\n    return 0\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_s4a47g.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmps_s4a47g.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmps_s4a47g.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst\
    \ = [i**2 for i in lst]\n    return sum(lst)\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\n\
    print(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: "14\n98\n84\n19.6\n7.76\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzx6d0ag7.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpzx6d0ag7.py\", line 39,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpzx6d0ag7.py\", line\
    \ 28, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9sq6mmy4.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9sq6mmy4.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp9sq6mmy4.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst\
    \ = list(map(lambda x: ceil(x), lst))\n    return sum(list(map(lambda x: x**2,\
    \ lst)))\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuk3g8dym.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuk3g8dym.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpuk3g8dym.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpuk3g8dym.py\"\
    , line 16, in sum_squares\n    lst = list(map(lambda x: ceil(x), lst))\n  File\
    \ \"/tmp/tmpuk3g8dym.py\", line 16, in <lambda>\n    lst = list(map(lambda x:\
    \ ceil(x), lst))\nNameError: name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Your\
    \ code here\n    lst_ceil = list(map(lambda x: math.ceil(x), lst))\n    return\
    \ sum(list(map(lambda x: x**2, lst_ceil)))\n\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5w8m5j74.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5w8m5j74.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp5w8m5j74.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp5w8m5j74.py\"\
    , line 17, in sum_squares\n    lst_ceil = list(map(lambda x: math.ceil(x), lst))\n\
    \  File \"/tmp/tmp5w8m5j74.py\", line 17, in <lambda>\n    lst_ceil = list(map(lambda\
    \ x: math.ceil(x), lst))\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpci0qoy2o.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpci0qoy2o.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpci0qoy2o.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    for\
    \ idx, elem in enumerate(lst):\n        lst[idx] = math.ceil(elem)**2\n    return\
    \ sum(lst)\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) ==\
    \ 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxzvd0o79.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxzvd0o79.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpxzvd0o79.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpxzvd0o79.py\"\
    , line 17, in sum_squares\n    lst[idx] = math.ceil(elem)**2\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Type\
    \ your code here\n    lst1 = [int(math.ceil(i)) for i in lst]\n    return(sum([i**2\
    \ for i in lst1]))\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptlulehfg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptlulehfg.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmptlulehfg.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmptlulehfg.py\"\
    , line 17, in sum_squares\n    lst1 = [int(math.ceil(i)) for i in lst]\n  File\
    \ \"/tmp/tmptlulehfg.py\", line 17, in <listcomp>\n    lst1 = [int(math.ceil(i))\
    \ for i in lst]\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    #your\
    \ code here\n    return sum([int(i**2) for i in lst])\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_q0ac_ug.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_q0ac_ug.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp_q0ac_ug.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(i**2) for i in lst])\n    \n    \nprint(sum_squares([1, 2, 3]))\ndef\
    \ check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert\
    \ candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) ==\
    \ 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0,\
    \ 10000.0]) == 200000000\n    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert\
    \ candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n    assert candidate([0.0]) ==\
    \ 0\n    assert candidate([-1.0]) == 1\n    assert candidate([-1.0, 1.0, 0.0])\
    \ == 2\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n"
  stdout: "14\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mli9hhk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3mli9hhk.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp3mli9hhk.py\", line\
    \ 24, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Calculate\
    \ the sum_squares here\n    # don't forget to return it\n    #sum_squares = []\n\
    \    a = 0\n    for i in lst:\n        a += (math.ceil(i))**2\n    return a\n\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfnq8wkav.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfnq8wkav.py\", line 39,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpfnq8wkav.py\", line\
    \ 25, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpfnq8wkav.py\"\
    , line 21, in sum_squares\n    a += (math.ceil(i))**2\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(element) ** 2 for element in lst])\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps6nyp84c.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmps6nyp84c.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmps6nyp84c.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    total\
    \ = 0\n    for i in lst:\n        total += math.ceil(i) ** 2\n    return total\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpho41gljh.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpho41gljh.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpho41gljh.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpho41gljh.py\"\
    , line 18, in sum_squares\n    total += math.ceil(i) ** 2\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprjjg8lbb.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprjjg8lbb.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmprjjg8lbb.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_jrg66_e.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_jrg66_e.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp_jrg66_e.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([x ** 2 for x in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ln63wbp.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0ln63wbp.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp0ln63wbp.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Write\
    \ your code here\n\n    pass\n\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpriwam0mf.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpriwam0mf.py\", line 36,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpriwam0mf.py\", line\
    \ 22, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # your\
    \ code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp82y84pd7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp82y84pd7.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp82y84pd7.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # TODO:\
    \ implement me\n    a = []\n    for i in lst:\n        b = i**2\n        a.append(b)\n\
    \    c = int(sum(a))\n    return c\n\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0s_k0xmw.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp0s_k0xmw.py\", line 40,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp0s_k0xmw.py\", line\
    \ 29, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    raise\
    \ NotImplementedError\n\ndef check(candidate):\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpakfxingq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpakfxingq.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpakfxingq.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpakfxingq.py\"\
    , line 16, in sum_squares\n    raise NotImplementedError\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(math.ceil(x) ** 2) for x in lst])\n\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnn_1ytsl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnn_1ytsl.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpnn_1ytsl.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpnn_1ytsl.py\"\
    , line 16, in sum_squares\n    return sum([int(math.ceil(x) ** 2) for x in lst])\n\
    \  File \"/tmp/tmpnn_1ytsl.py\", line 16, in <listcomp>\n    return sum([int(math.ceil(x)\
    \ ** 2) for x in lst])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ # write your code here\n\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo6y1pq2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpoo6y1pq2.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpoo6y1pq2.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # your\
    \ code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3sfq9bck.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3sfq9bck.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp3sfq9bck.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Your\
    \ code here\n\n\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpctfd6cy9.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpctfd6cy9.py\", line 36,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpctfd6cy9.py\", line\
    \ 22, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\n\
    print(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: "None\nNone\nNone\nNone\nNone\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7f11j4v.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpm7f11j4v.py\", line 38,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpm7f11j4v.py\", line\
    \ 24, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    assert(isinstance(lst,\
    \ list))\n    assert(all(isinstance(x, float) for x in lst))\n    lst = map(lambda\
    \ x: math.ceil(x), lst)\n    lst = map(lambda x: x*x, lst)\n    return sum(lst)\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptluyaiwr.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmptluyaiwr.py\", line 38,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmptluyaiwr.py\", line\
    \ 24, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmptluyaiwr.py\"\
    , line 20, in sum_squares\n    return sum(lst)\n  File \"/tmp/tmptluyaiwr.py\"\
    , line 18, in <lambda>\n    lst = map(lambda x: math.ceil(x), lst)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(ceil(x)**2) for x in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3ywz8xk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmps3ywz8xk.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmps3ywz8xk.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmps3ywz8xk.py\"\
    , line 16, in sum_squares\n    return sum([int(ceil(x)**2) for x in lst])\n  File\
    \ \"/tmp/tmps3ywz8xk.py\", line 16, in <listcomp>\n    return sum([int(ceil(x)**2)\
    \ for x in lst])\nNameError: name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([x**2 for x in [math.ceil(x) for x in lst]])\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnydwi9sw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnydwi9sw.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpnydwi9sw.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpnydwi9sw.py\"\
    , line 16, in sum_squares\n    return sum([x**2 for x in [math.ceil(x) for x in\
    \ lst]])\n  File \"/tmp/tmpnydwi9sw.py\", line 16, in <listcomp>\n    return sum([x**2\
    \ for x in [math.ceil(x) for x in lst]])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # your\
    \ code here\n    #print(lst)\n    sum = 0\n    for item in lst:\n        #print(item)\n\
    \        if item < 0:\n            sum += (math.ceil(item))**2\n        else:\n\
    \            sum += (math.floor(item))**2\n    return sum\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9l8qkfv7.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp9l8qkfv7.py\", line 42,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp9l8qkfv7.py\", line\
    \ 28, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp9l8qkfv7.py\"\
    , line 24, in sum_squares\n    sum += (math.floor(item))**2\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # we\
    \ round the list first\n    lst = [int(math.ceil(number)) for number in lst]\n\
    \    # we raise to the power of 2\n    lst = [number**2 for number in lst]\n \
    \   return sum(lst)\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33ugt5hi.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp33ugt5hi.py\", line 36,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp33ugt5hi.py\", line\
    \ 22, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp33ugt5hi.py\"\
    , line 17, in sum_squares\n    lst = [int(math.ceil(number)) for number in lst]\n\
    \  File \"/tmp/tmp33ugt5hi.py\", line 17, in <listcomp>\n    lst = [int(math.ceil(number))\
    \ for number in lst]\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(math.ceil(num))**2 for num in lst])\n\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq46zw3wx.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq46zw3wx.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpq46zw3wx.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpq46zw3wx.py\"\
    , line 16, in sum_squares\n    return sum([int(math.ceil(num))**2 for num in lst])\n\
    \  File \"/tmp/tmpq46zw3wx.py\", line 16, in <listcomp>\n    return sum([int(math.ceil(num))**2\
    \ for num in lst])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(num ** 2) for num in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirjh1v_5.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpirjh1v_5.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpirjh1v_5.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz1yfbsha.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpz1yfbsha.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpz1yfbsha.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst\
    \ = list(map(lambda x: round(x), lst))\n    return sum(map(lambda x: x ** 2, lst))\n\
    \    # return sum([x**2 for x in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8tvm3mm.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpi8tvm3mm.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpi8tvm3mm.py\", line\
    \ 24, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([round(i) ** 2 for i in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4758yejv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp4758yejv.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp4758yejv.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # \u0442\
    \u0440\u0435\u0431\u0430 \u0432\u0435\u0440\u043D\u0443\u0442\u0438 \u0441\u0443\
    \u043C\u0443 \u043A\u0432\u0430\u0434\u0440\u0430\u0442\u0456\u0432 \u0447\u0438\
    \u0441\u0435\u043B \u0443 \u0434\u0430\u043D\u043E\u043C\u0443 \u0441\u043F\u0438\
    \u0441\u043A\u0443,\n    # \u0430\u043B\u0435 \u043D\u0430\u043F\u0435\u0440\u0435\
    \u0434 \u043E\u043A\u0440\u0443\u0433\u043B\u0438\u0442\u0438 \u043A\u043E\u0436\
    \u043D\u0438\u0439 \u0435\u043B\u0435\u043C\u0435\u043D\u0442 \u0443 \u0441\u043F\
    \u0438\u0441\u043A\u0443 \u0434\u043E \u0432\u0435\u0440\u0445\u043D\u044C\u043E\
    \u0433\u043E int(Ceiling)\n\n    sum = 0\n    for item in lst:\n        sum +=\
    \ int(math.ceil(item))**2\n    return sum\n\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0o_0l3kp.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp0o_0l3kp.py\", line 39,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp0o_0l3kp.py\", line\
    \ 25, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp0o_0l3kp.py\"\
    , line 21, in sum_squares\n    sum += int(math.ceil(item))**2\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # For\
    \ example, the following code will get you the highest integer\n    # number in\
    \ the list: max(map(int, lst))\n    # Feel free to comment out the next two lines\
    \ if you wish:\n    squared_list = map(lambda x: x*x, lst)\n    # You should round\
    \ them first before squaring, so we'll write the\n    # code for that for you\
    \ (this line may save you hours of headache!).\n    rounded_list = map(lambda\
    \ x: ceil(x), lst)\n    squared_rounded_list = map(lambda x: x*x, rounded_list)\n\
    \    return sum(squared_rounded_list)\n    \n    # Use the rounded list to perform\
    \ a map operation to get your result.\n    # Don't forget to cast back to int.\n\
    \    # return int(result)\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e325f62.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp3e325f62.py\", line 45,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp3e325f62.py\", line\
    \ 31, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp3e325f62.py\"\
    , line 24, in sum_squares\n    return sum(squared_rounded_list)\n  File \"/tmp/tmp3e325f62.py\"\
    , line 22, in <lambda>\n    rounded_list = map(lambda x: ceil(x), lst)\nNameError:\
    \ name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    new_lst\
    \ = []\n    for e in lst:\n        new_lst.append(math.ceil(e))\n    \n    return\
    \ sum([x ** 2 for x in new_lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn45b4eta.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpn45b4eta.py\", line 37,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpn45b4eta.py\", line\
    \ 23, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpn45b4eta.py\"\
    , line 18, in sum_squares\n    new_lst.append(math.ceil(e))\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    rounded_lst\
    \ = [math.ceil(element) for element in lst]\n    sum_of_squares = sum([element\
    \ ** 2 for element in rounded_lst])\n    return sum_of_squares\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpli0w716f.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpli0w716f.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpli0w716f.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpli0w716f.py\"\
    , line 16, in sum_squares\n    rounded_lst = [math.ceil(element) for element in\
    \ lst]\n  File \"/tmp/tmpli0w716f.py\", line 16, in <listcomp>\n    rounded_lst\
    \ = [math.ceil(element) for element in lst]\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # YOUR\
    \ CODE HERE\n    pass\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdyda0gaa.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdyda0gaa.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpdyda0gaa.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(x**2) for x in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4cwcv6xq.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp4cwcv6xq.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp4cwcv6xq.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl65dx0q3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpl65dx0q3.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpl65dx0q3.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(item**2) for item in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpryiapqea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpryiapqea.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpryiapqea.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    sum_of_squares\
    \ = 0\n    for num in lst:\n        rounded_num = ceil(num)\n        sum_of_squares\
    \ += rounded_num**2\n    return sum_of_squares\n\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp18ota1ry.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp18ota1ry.py\", line 37,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp18ota1ry.py\", line\
    \ 23, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp18ota1ry.py\"\
    , line 18, in sum_squares\n    rounded_num = ceil(num)\nNameError: name 'ceil'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdu2h_tii.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdu2h_tii.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpdu2h_tii.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprs5pi80q.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmprs5pi80q.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmprs5pi80q.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    res\
    \ = [int(ceil(i ** 2)) for i in lst]\n    return sum(res)\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd0zqjmac.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd0zqjmac.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpd0zqjmac.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpd0zqjmac.py\"\
    , line 16, in sum_squares\n    res = [int(ceil(i ** 2)) for i in lst]\n  File\
    \ \"/tmp/tmpd0zqjmac.py\", line 16, in <listcomp>\n    res = [int(ceil(i ** 2))\
    \ for i in lst]\nNameError: name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([num**2 for num in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnw9ennw7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpnw9ennw7.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpnw9ennw7.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    sum\
    \ = 0\n    for i in lst:\n        sum += math.ceil(i)**2\n    return sum\ndef\
    \ check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert\
    \ candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) ==\
    \ 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0,\
    \ 10000.0]) == 200000000\n    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert\
    \ candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n    assert candidate([0.0]) ==\
    \ 0\n    assert candidate([-1.0]) == 1\n    assert candidate([-1.0, 1.0, 0.0])\
    \ == 2\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpev2yx9cw.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpev2yx9cw.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpev2yx9cw.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpev2yx9cw.py\"\
    , line 18, in sum_squares\n    sum += math.ceil(i)**2\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(math.ceil(x)) ** 2 for x in lst])\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2xl3ecb.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpb2xl3ecb.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpb2xl3ecb.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpb2xl3ecb.py\"\
    , line 16, in sum_squares\n    return sum([int(math.ceil(x)) ** 2 for x in lst])\n\
    \  File \"/tmp/tmpb2xl3ecb.py\", line 16, in <listcomp>\n    return sum([int(math.ceil(x))\
    \ ** 2 for x in lst])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Write\
    \ your code here\n    return None\n\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg9bhm5x0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpg9bhm5x0.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpg9bhm5x0.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(i**2) for i in lst])\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\n\
    print(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: "14\n98\n84\n18\n7\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmrjz7qbo.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpmrjz7qbo.py\", line 38,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpmrjz7qbo.py\", line\
    \ 27, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    raise\
    \ NotImplementedError\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hudow_t.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp2hudow_t.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp2hudow_t.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp2hudow_t.py\"\
    , line 16, in sum_squares\n    raise NotImplementedError\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # your\
    \ code goes here\n    total = 0\n    for i in lst:\n        i = math.ceil(i)\n\
    \        total += i**2\n    return total\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfgq0khwp.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpfgq0khwp.py\", line 37,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpfgq0khwp.py\", line\
    \ 23, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpfgq0khwp.py\"\
    , line 19, in sum_squares\n    i = math.ceil(i)\nNameError: name 'math' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    total\
    \ = 0\n    for n in lst:\n        total += int(n) ** 2\n    return total\n\n'''def\
    \ sum_squares(lst):\n    total = 0\n    for n in lst:\n        total += int(n)\
    \ ** 2\n    return total'''\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkp3xjgzk.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpkp3xjgzk.py\", line 42,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpkp3xjgzk.py\", line\
    \ 31, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(num)**2 for num in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkgjk0m92.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkgjk0m92.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpkgjk0m92.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ round(sum([(x*x) for x in lst]))\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    #\
    \ your code here\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_qgaq8dw.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp_qgaq8dw.py\", line 52,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp_qgaq8dw.py\", line\
    \ 41, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    res\
    \ = 0\n    for elem in lst:\n        res += math.ceil(elem)**2\n    return res\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpboaxulpu.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpboaxulpu.py\", line 36,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpboaxulpu.py\", line\
    \ 22, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpboaxulpu.py\"\
    , line 18, in sum_squares\n    res += math.ceil(elem)**2\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(x)**2 for x in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe92r700r.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpe92r700r.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpe92r700r.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([x**2 for x in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpapybb38g.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpapybb38g.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpapybb38g.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    sum\
    \ = 0\n    for i in lst:\n        sum += int(math.ceil(i))**2\n    return sum\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu2zldcga.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpu2zldcga.py\", line 36,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpu2zldcga.py\", line\
    \ 22, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpu2zldcga.py\"\
    , line 18, in sum_squares\n    sum += int(math.ceil(i))**2\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(x)**2 for x in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqya0mrwt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqya0mrwt.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpqya0mrwt.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([i**2 for i in lst])\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n\ndef check(candidate):\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphwbp7ele.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmphwbp7ele.py\", line 45,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmphwbp7ele.py\", line\
    \ 34, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([i**2 for i in map(lambda x: math.ceil(x), lst)])\nprint(sum_squares([1,4,9]))\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp29gsqrng.py\", line\
    \ 17, in <module>\n    print(sum_squares([1,4,9]))\n  File \"/tmp/tmp29gsqrng.py\"\
    , line 16, in sum_squares\n    return sum([i**2 for i in map(lambda x: math.ceil(x),\
    \ lst)])\n  File \"/tmp/tmp29gsqrng.py\", line 16, in <listcomp>\n    return sum([i**2\
    \ for i in map(lambda x: math.ceil(x), lst)])\n  File \"/tmp/tmp29gsqrng.py\"\
    , line 16, in <lambda>\n    return sum([i**2 for i in map(lambda x: math.ceil(x),\
    \ lst)])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # TODO:\
    \ implement the following line\n    return sum([i ** 2 for i in [int(math.ceil(x))\
    \ for x in lst]])\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd8dkk9gi.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd8dkk9gi.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpd8dkk9gi.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpd8dkk9gi.py\"\
    , line 17, in sum_squares\n    return sum([i ** 2 for i in [int(math.ceil(x))\
    \ for x in lst]])\n  File \"/tmp/tmpd8dkk9gi.py\", line 17, in <listcomp>\n  \
    \  return sum([i ** 2 for i in [int(math.ceil(x)) for x in lst]])\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    import\
    \ math\n    total = 0\n    for i in lst:\n        total += math.ceil(i) ** 2\n\
    \    return total\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(ceil(e**2)) for e in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj61kulm7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpj61kulm7.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpj61kulm7.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpj61kulm7.py\"\
    , line 16, in sum_squares\n    return sum([int(ceil(e**2)) for e in lst])\n  File\
    \ \"/tmp/tmpj61kulm7.py\", line 16, in <listcomp>\n    return sum([int(ceil(e**2))\
    \ for e in lst])\nNameError: name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(math.ceil(n**2)) for n in lst])\n\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8meikb7_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8meikb7_.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp8meikb7_.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp8meikb7_.py\"\
    , line 16, in sum_squares\n    return sum([int(math.ceil(n**2)) for n in lst])\n\
    \  File \"/tmp/tmp8meikb7_.py\", line 16, in <listcomp>\n    return sum([int(math.ceil(n**2))\
    \ for n in lst])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_dtg7rsr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_dtg7rsr.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp_dtg7rsr.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    res\
    \ = [math.ceil(x) for x in lst]\n    return sum([x**2 for x in res])\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0r8g9g8i.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0r8g9g8i.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp0r8g9g8i.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp0r8g9g8i.py\"\
    , line 16, in sum_squares\n    res = [math.ceil(x) for x in lst]\n  File \"/tmp/tmp0r8g9g8i.py\"\
    , line 16, in <listcomp>\n    res = [math.ceil(x) for x in lst]\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    #TODO:\
    \ write your code here\n    pass\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpku7_bdy0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpku7_bdy0.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpku7_bdy0.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([x**2 for x in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbrwfzt64.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbrwfzt64.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpbrwfzt64.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5mzk2jem.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp5mzk2jem.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp5mzk2jem.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([i**2 for i in map(lambda x: math.ceil(x), lst)])\n\nprint(sum_squares([1,2,3]))\n\
    print(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\n\
    print(sum_squares([-2.4,1,1]))\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrnir212.py\", line\
    \ 18, in <module>\n    print(sum_squares([1,2,3]))\n  File \"/tmp/tmpgrnir212.py\"\
    , line 16, in sum_squares\n    return sum([i**2 for i in map(lambda x: math.ceil(x),\
    \ lst)])\n  File \"/tmp/tmpgrnir212.py\", line 16, in <listcomp>\n    return sum([i**2\
    \ for i in map(lambda x: math.ceil(x), lst)])\n  File \"/tmp/tmpgrnir212.py\"\
    , line 16, in <lambda>\n    return sum([i**2 for i in map(lambda x: math.ceil(x),\
    \ lst)])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    ...\n\
    \n\n \n\nprint(sum_squares([1,2,3])) # 14\nprint(sum_squares([1,4,9])) # 98\n\
    print(sum_squares([1,3,5,7])) # 84\nprint(sum_squares([1.4,4.2,0])) # 29\nprint(sum_squares([-2.4,1,1]))\
    \ # 6\n \n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: "None\nNone\nNone\nNone\nNone\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyiv7lf5w.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpyiv7lf5w.py\", line 43,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpyiv7lf5w.py\", line\
    \ 29, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfc3b9yab.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfc3b9yab.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpfc3b9yab.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Print\
    \ the result for debugging\n    print(lst)\n    # Create the result variable\n\
    \    result = 0\n    # Create the loop to get each element in the list\n    for\
    \ i in lst:\n        # Use the ceil function to round each element in the list\n\
    \        i = math.ceil(i)\n        # Square the element\n        i = i ** 2\n\
    \        # Add it to the result variable\n        result += i\n    # Return the\
    \ result\n    return result\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: "[1.0, 2.0, 3.0]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_w2vjdxe.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp_w2vjdxe.py\", line 46,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp_w2vjdxe.py\", line\
    \ 32, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp_w2vjdxe.py\"\
    , line 23, in sum_squares\n    i = math.ceil(i)\nNameError: name 'math' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2ve9vr3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmph2ve9vr3.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmph2ve9vr3.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([x**2 for x in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwuhtub12.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpwuhtub12.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpwuhtub12.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(ceil(x**2)) for x in lst])\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\n\
    print(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3dp4xd8j.py\", line\
    \ 18, in <module>\n    print(sum_squares([1,2,3]))\n  File \"/tmp/tmp3dp4xd8j.py\"\
    , line 16, in sum_squares\n    return sum([int(ceil(x**2)) for x in lst])\n  File\
    \ \"/tmp/tmp3dp4xd8j.py\", line 16, in <listcomp>\n    return sum([int(ceil(x**2))\
    \ for x in lst])\nNameError: name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([num ** 2 for num in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8hkyuk_w.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8hkyuk_w.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp8hkyuk_w.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([i**2 for i in lst])\n\nlst = [1,4,9]\nlst1 = [1,3,5,7]\nlst2 = [1.4,4.2,0]\n\
    lst3 = [-2.4,1,1]\nsum_squares(lst1)\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_02dnf5.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpo_02dnf5.py\", line 39,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpo_02dnf5.py\", line\
    \ 28, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Write\
    \ your code here\n    num = [int(math.ceil(x)) for x in lst]\n    return sum([x**2\
    \ for x in num])\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3lrflne0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3lrflne0.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp3lrflne0.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp3lrflne0.py\"\
    , line 17, in sum_squares\n    num = [int(math.ceil(x)) for x in lst]\n  File\
    \ \"/tmp/tmp3lrflne0.py\", line 17, in <listcomp>\n    num = [int(math.ceil(x))\
    \ for x in lst]\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst\
    \ = [math.ceil(x) for x in lst]\n    return sum([math.pow(i,2) for i in lst])\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyjk0d33r.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpyjk0d33r.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpyjk0d33r.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpyjk0d33r.py\"\
    , line 16, in sum_squares\n    lst = [math.ceil(x) for x in lst]\n  File \"/tmp/tmpyjk0d33r.py\"\
    , line 16, in <listcomp>\n    lst = [math.ceil(x) for x in lst]\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([elem**2 for elem in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4xv_jhfo.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4xv_jhfo.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp4xv_jhfo.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([x ** 2 for x in map(lambda x: math.ceil(x), lst)])\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplyea7lo8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmplyea7lo8.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmplyea7lo8.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmplyea7lo8.py\"\
    , line 16, in sum_squares\n    return sum([x ** 2 for x in map(lambda x: math.ceil(x),\
    \ lst)])\n  File \"/tmp/tmplyea7lo8.py\", line 16, in <listcomp>\n    return sum([x\
    \ ** 2 for x in map(lambda x: math.ceil(x), lst)])\n  File \"/tmp/tmplyea7lo8.py\"\
    , line 16, in <lambda>\n    return sum([x ** 2 for x in map(lambda x: math.ceil(x),\
    \ lst)])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst_ceil\
    \ = [ceil(x) for x in lst]\n    lst_square = [x**2 for x in lst_ceil]\n    lst_sum\
    \ = sum(lst_square)\n    return lst_sum\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    # return sum([ceil(x) ** 2 for x in lst])\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp34ef7m66.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp34ef7m66.py\", line 47,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp34ef7m66.py\", line\
    \ 33, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp34ef7m66.py\"\
    , line 16, in sum_squares\n    lst_ceil = [ceil(x) for x in lst]\n  File \"/tmp/tmp34ef7m66.py\"\
    , line 16, in <listcomp>\n    lst_ceil = [ceil(x) for x in lst]\nNameError: name\
    \ 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([i**2 for i in [ceil(x) for x in lst]])\n\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6y14ye98.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp6y14ye98.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp6y14ye98.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp6y14ye98.py\"\
    , line 16, in sum_squares\n    return sum([i**2 for i in [ceil(x) for x in lst]])\n\
    \  File \"/tmp/tmp6y14ye98.py\", line 16, in <listcomp>\n    return sum([i**2\
    \ for i in [ceil(x) for x in lst]])\nNameError: name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # write\
    \ your code here\n    return sum([math.ceil(i)**2 for i in lst])\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp03c335hf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp03c335hf.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp03c335hf.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp03c335hf.py\"\
    , line 17, in sum_squares\n    return sum([math.ceil(i)**2 for i in lst])\n  File\
    \ \"/tmp/tmp03c335hf.py\", line 17, in <listcomp>\n    return sum([math.ceil(i)**2\
    \ for i in lst])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst\
    \ = [int(math.ceil(x)) for x in lst]\n    return sum([x**2 for x in lst])\n\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphrjrziu6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphrjrziu6.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmphrjrziu6.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmphrjrziu6.py\"\
    , line 16, in sum_squares\n    lst = [int(math.ceil(x)) for x in lst]\n  File\
    \ \"/tmp/tmphrjrziu6.py\", line 16, in <listcomp>\n    lst = [int(math.ceil(x))\
    \ for x in lst]\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # your\
    \ code here\n    return 42\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8agci_9s.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8agci_9s.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp8agci_9s.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    for\
    \ i in range(len(lst)):\n        lst[i] = math.ceil(lst[i])\n    lst = list(map(lambda\
    \ x: x*x, lst))\n    return sum(lst)\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmper40qe_k.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmper40qe_k.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmper40qe_k.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmper40qe_k.py\"\
    , line 17, in sum_squares\n    lst[i] = math.ceil(lst[i])\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([i**2 for i in map(ceil, lst)])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzrrih_ir.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpzrrih_ir.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpzrrih_ir.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpzrrih_ir.py\"\
    , line 16, in sum_squares\n    return sum([i**2 for i in map(ceil, lst)])\nNameError:\
    \ name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Write\
    \ your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwfmxz61s.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwfmxz61s.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpwfmxz61s.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Your\
    \ Code Goes Here\n    return sum([x**2 for x in [ceil(n) for n in lst]])\n\ndef\
    \ check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert\
    \ candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) ==\
    \ 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0,\
    \ 10000.0]) == 200000000\n    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert\
    \ candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n    assert candidate([0.0]) ==\
    \ 0\n    assert candidate([-1.0]) == 1\n    assert candidate([-1.0, 1.0, 0.0])\
    \ == 2\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfuwbtcjy.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfuwbtcjy.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpfuwbtcjy.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpfuwbtcjy.py\"\
    , line 17, in sum_squares\n    return sum([x**2 for x in [ceil(n) for n in lst]])\n\
    \  File \"/tmp/tmpfuwbtcjy.py\", line 17, in <listcomp>\n    return sum([x**2\
    \ for x in [ceil(n) for n in lst]])\nNameError: name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1yjpfh98.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp1yjpfh98.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp1yjpfh98.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # ceiled\
    \ each number, squared them and added them up\n    return sum([int(c)**2 for c\
    \ in [math.ceil(n) for n in lst]])\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # return\
    \ sum([int(math.ceil(n))**2 for n in lst])\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppjgmbqo7.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmppjgmbqo7.py\", line 65,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmppjgmbqo7.py\", line\
    \ 51, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmppjgmbqo7.py\"\
    , line 17, in sum_squares\n    return sum([int(c)**2 for c in [math.ceil(n) for\
    \ n in lst]])\n  File \"/tmp/tmppjgmbqo7.py\", line 17, in <listcomp>\n    return\
    \ sum([int(c)**2 for c in [math.ceil(n) for n in lst]])\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8v3o1opc.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8v3o1opc.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp8v3o1opc.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # You\
    \ code here\n    sum_squares = 0\n    for i in lst:\n        sum_squares += math.ceil(i)**2\n\
    \    return sum_squares\n\ndef check(candidate):\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa3acpilz.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpa3acpilz.py\", line 37,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpa3acpilz.py\", line\
    \ 23, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpa3acpilz.py\"\
    , line 19, in sum_squares\n    sum_squares += math.ceil(i)**2\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    for\
    \ e in lst:\n        if e != abs(e):\n            lst.remove(e)\n    for e in\
    \ lst:\n        e = math.ceil(e)\n    return sum(lst)**2\n\nprint(sum_squares([-2.4,1,1]))\n\
    print(sum_squares([1.4,4.2,0]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1,4,9]))\n\
    print(sum_squares([1,2,3]))\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf4e8ey96.py\", line\
    \ 23, in <module>\n    print(sum_squares([-2.4,1,1]))\n  File \"/tmp/tmpf4e8ey96.py\"\
    , line 20, in sum_squares\n    e = math.ceil(e)\nNameError: name 'math' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst_new\
    \ = [math.ceil(x) for x in lst]\n    sum_of_lst = sum(lst_new)\n    return sum_of_lst\
    \ ** 2\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpocgfzif4.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpocgfzif4.py\", line 36,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpocgfzif4.py\", line\
    \ 22, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpocgfzif4.py\"\
    , line 16, in sum_squares\n    lst_new = [math.ceil(x) for x in lst]\n  File \"\
    /tmp/tmpocgfzif4.py\", line 16, in <listcomp>\n    lst_new = [math.ceil(x) for\
    \ x in lst]\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    total\
    \ = 0\n    for element in lst:\n        total += math.ceil(element) ** 2\n   \
    \ return total\n\nprint(sum_squares([1,2,3]))\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_kjsmx20.py\", line\
    \ 21, in <module>\n    print(sum_squares([1,2,3]))\n  File \"/tmp/tmp_kjsmx20.py\"\
    , line 18, in sum_squares\n    total += math.ceil(element) ** 2\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    for\
    \ i in range(len(lst)):\n        lst[i] = math.ceil(lst[i])\n    print(lst)\n\
    \    return sum([x**2 for x in lst])\n\nprint(sum_squares([1,2,3])) # 14\nprint(sum_squares([1,4,9]))\
    \ # 98\nprint(sum_squares([1,3,5,7])) # 84\nprint(sum_squares([1.4,4.2,0])) #\
    \ 29\nprint(sum_squares([-2.4,1,1])) # 6\n\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxoc7ultb.py\", line\
    \ 21, in <module>\n    print(sum_squares([1,2,3])) # 14\n  File \"/tmp/tmpxoc7ultb.py\"\
    , line 17, in sum_squares\n    lst[i] = math.ceil(lst[i])\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # YOUR\
    \ CODE HERE\n    raise NotImplementedError()\n\n\n\"\"\"\nSolution\n\"\"\"\n\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwc5t0h24.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwc5t0h24.py\", line 39,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpwc5t0h24.py\", line\
    \ 25, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpwc5t0h24.py\"\
    , line 17, in sum_squares\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeuk4yq_y.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpeuk4yq_y.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpeuk4yq_y.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    import\
    \ math\n    new_lst = [math.ceil(i) for i in lst]\n    return sum([i**2 for i\
    \ in new_lst])\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) ==\
    \ 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # create\
    \ empty list for storing rounds values\n    rounded = []\n    # loop over list\
    \ of number\n    for num in lst:\n        # round each element in the list to\
    \ the upper int(Ceiling)\n        rounded.append(math.ceil(num))\n    # return\
    \ the sum of squared numbers in the given list\n    return sum([x ** 2 for x in\
    \ rounded])\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) ==\
    \ 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzv8hslrp.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpzv8hslrp.py\", line 40,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpzv8hslrp.py\", line\
    \ 26, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpzv8hslrp.py\"\
    , line 21, in sum_squares\n    rounded.append(math.ceil(num))\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([ceil(e**2) for e in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps8xklq97.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmps8xklq97.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmps8xklq97.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmps8xklq97.py\"\
    , line 16, in sum_squares\n    return sum([ceil(e**2) for e in lst])\n  File \"\
    /tmp/tmps8xklq97.py\", line 16, in <listcomp>\n    return sum([ceil(e**2) for\
    \ e in lst])\nNameError: name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Your\
    \ code goes here\n    import math\n    sum = 0\n    for i in lst:\n        i =\
    \ math.ceil(i)\n        sum += i**2\n    return sum\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Accepts\
    \ a list of numbers lst and returns the sum of squared numbers in the given list\n\
    \    # Round each element in the list to the upper int(Ceiling) first\n    return\
    \ sum([math.ceil(i)**2 for i in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpde8m7xwq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpde8m7xwq.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpde8m7xwq.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpde8m7xwq.py\"\
    , line 18, in sum_squares\n    return sum([math.ceil(i)**2 for i in lst])\n  File\
    \ \"/tmp/tmpde8m7xwq.py\", line 18, in <listcomp>\n    return sum([math.ceil(i)**2\
    \ for i in lst])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # YOUR\
    \ CODE HERE\n    raise NotImplementedError()\n \n\ndef check(candidate):\n   \
    \ assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5y01gdrw.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5y01gdrw.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp5y01gdrw.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp5y01gdrw.py\"\
    , line 17, in sum_squares\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \nsum_squares([1,2,3])\nsum_squares([1,4,9])\nsum_squares([1,3,5,7])\nsum_squares([1.4,4.2,0])\n\
    sum_squares([-2.4,1,1])\n \ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr9f5z45w.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr9f5z45w.py\", line 39,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpr9f5z45w.py\", line\
    \ 25, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(math.ceil(num)) ** 2 for num in lst])\n    \n    \ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfou0u_99.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfou0u_99.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpfou0u_99.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpfou0u_99.py\"\
    , line 16, in sum_squares\n    return sum([int(math.ceil(num)) ** 2 for num in\
    \ lst])\n  File \"/tmp/tmpfou0u_99.py\", line 16, in <listcomp>\n    return sum([int(math.ceil(num))\
    \ ** 2 for num in lst])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Using\
    \ list comprehension\n    return sum([x**2 for x in lst])\n    # using for loop\n\
    \    # for x in lst:\n    #     return x**2\n    # return sum()\n\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ze09lzg.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp6ze09lzg.py\", line 39,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp6ze09lzg.py\", line\
    \ 28, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([(x**2) for x in [int(math.ceil(i)) for i in lst]])\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmby5oja3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpmby5oja3.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpmby5oja3.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpmby5oja3.py\"\
    , line 16, in sum_squares\n    return sum([(x**2) for x in [int(math.ceil(i))\
    \ for i in lst]])\n  File \"/tmp/tmpmby5oja3.py\", line 16, in <listcomp>\n  \
    \  return sum([(x**2) for x in [int(math.ceil(i)) for i in lst]])\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # your\
    \ code here\n    for i in range(len(lst)):\n        lst[i] = math.ceil(lst[i])\n\
    \    return sum([x**2 for x in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb9vfuf1k.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb9vfuf1k.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpb9vfuf1k.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpb9vfuf1k.py\"\
    , line 18, in sum_squares\n    lst[i] = math.ceil(lst[i])\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([i**2 for i in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1_rlpl52.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp1_rlpl52.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp1_rlpl52.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(i ** 2) for i in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1eyj8hnv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1eyj8hnv.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp1eyj8hnv.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([round(i)**2 for i in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4phf4p59.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4phf4p59.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp4phf4p59.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([i**2 for i in lst])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpephgudaj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpephgudaj.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpephgudaj.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(i ** 2) for i in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp36915o8e.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp36915o8e.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp36915o8e.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # write\
    \ your code here\n    pass\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1lskm6y1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1lskm6y1.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp1lskm6y1.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([e**2 for e in map(ceil, lst)])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmrzyps5.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpvmrzyps5.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpvmrzyps5.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpvmrzyps5.py\"\
    , line 16, in sum_squares\n    return sum([e**2 for e in map(ceil, lst)])\nNameError:\
    \ name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([x**2 for x in map(lambda x: math.ceil(x), lst)])\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt7izoauj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt7izoauj.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpt7izoauj.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpt7izoauj.py\"\
    , line 16, in sum_squares\n    return sum([x**2 for x in map(lambda x: math.ceil(x),\
    \ lst)])\n  File \"/tmp/tmpt7izoauj.py\", line 16, in <listcomp>\n    return sum([x**2\
    \ for x in map(lambda x: math.ceil(x), lst)])\n  File \"/tmp/tmpt7izoauj.py\"\
    , line 16, in <lambda>\n    return sum([x**2 for x in map(lambda x: math.ceil(x),\
    \ lst)])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ int(sum([x*x for x in lst]))\n    \n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnd_bclmk.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpnd_bclmk.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpnd_bclmk.py\", line\
    \ 23, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # write\
    \ your code here\n    return sum([x**2 for x in [ceil(i) for i in lst]])\n\ndef\
    \ check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert\
    \ candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) ==\
    \ 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0,\
    \ 10000.0]) == 200000000\n    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert\
    \ candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n    assert candidate([0.0]) ==\
    \ 0\n    assert candidate([-1.0]) == 1\n    assert candidate([-1.0, 1.0, 0.0])\
    \ == 2\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmxu1688_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmxu1688_.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpmxu1688_.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpmxu1688_.py\"\
    , line 17, in sum_squares\n    return sum([x**2 for x in [ceil(i) for i in lst]])\n\
    \  File \"/tmp/tmpmxu1688_.py\", line 17, in <listcomp>\n    return sum([x**2\
    \ for x in [ceil(i) for i in lst]])\nNameError: name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([(math.ceil(x))**2 for x in lst])\n\nprint(sum_squares([1,2,3])) # 14\n\
    print(sum_squares([1,4,9])) # 98\nprint(sum_squares([1,3,5,7])) # 84\nprint(sum_squares([1.4,4.2,0]))\
    \ # 29\nprint(sum_squares([-2.4,1,1])) # 6\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpufu_uv9x.py\", line\
    \ 18, in <module>\n    print(sum_squares([1,2,3])) # 14\n  File \"/tmp/tmpufu_uv9x.py\"\
    , line 16, in sum_squares\n    return sum([(math.ceil(x))**2 for x in lst])\n\
    \  File \"/tmp/tmpufu_uv9x.py\", line 16, in <listcomp>\n    return sum([(math.ceil(x))**2\
    \ for x in lst])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # you\
    \ write your code here\n    return sum([int(math.ceil(num))**2 for num in lst])\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqapvibom.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqapvibom.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpqapvibom.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpqapvibom.py\"\
    , line 17, in sum_squares\n    return sum([int(math.ceil(num))**2 for num in lst])\n\
    \  File \"/tmp/tmpqapvibom.py\", line 17, in <listcomp>\n    return sum([int(math.ceil(num))**2\
    \ for num in lst])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(i**2) for i in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe56wmvu8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpe56wmvu8.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpe56wmvu8.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(i**2) for i in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqxs_1e6d.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqxs_1e6d.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpqxs_1e6d.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(i**2) for i in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzy9w5xke.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpzy9w5xke.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpzy9w5xke.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst\
    \ = [math.ceil(i) for i in lst]\n    return sum([i**2 for i in lst])\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphm1g3lyu.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphm1g3lyu.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmphm1g3lyu.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmphm1g3lyu.py\"\
    , line 16, in sum_squares\n    lst = [math.ceil(i) for i in lst]\n  File \"/tmp/tmphm1g3lyu.py\"\
    , line 16, in <listcomp>\n    lst = [math.ceil(i) for i in lst]\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    #\n\
    \    # x = [int(i) for i in lst]\n    # y = [i**2 for i in x]\n    # return sum(y)\n\
    \    return sum([int(i)**2 for i in lst])\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\n\
    print(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: "14\n98\n84\n17\n6\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxlf_gsrp.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpxlf_gsrp.py\", line 42,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpxlf_gsrp.py\", line\
    \ 31, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ocphqnt.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3ocphqnt.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp3ocphqnt.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfp22frge.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfp22frge.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpfp22frge.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([x**2 for x in [math.ceil(n) for n in lst]])\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpms0je4c7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpms0je4c7.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpms0je4c7.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpms0je4c7.py\"\
    , line 16, in sum_squares\n    return sum([x**2 for x in [math.ceil(n) for n in\
    \ lst]])\n  File \"/tmp/tmpms0je4c7.py\", line 16, in <listcomp>\n    return sum([x**2\
    \ for x in [math.ceil(n) for n in lst]])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([(i+1)**2 for i in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvnl365zl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpvnl365zl.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpvnl365zl.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([i**2 for i in [ceil(x) for x in lst]])\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3xhkwo_1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3xhkwo_1.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp3xhkwo_1.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp3xhkwo_1.py\"\
    , line 16, in sum_squares\n    return sum([i**2 for i in [ceil(x) for x in lst]])\n\
    \  File \"/tmp/tmp3xhkwo_1.py\", line 16, in <listcomp>\n    return sum([i**2\
    \ for i in [ceil(x) for x in lst]])\nNameError: name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Your\
    \ code here:\n    pass\n    lst_new = [int(math.ceil(x**2)) for x in lst]\n  \
    \  return sum(lst_new)\n    \ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphar42jy7.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmphar42jy7.py\", line 36,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmphar42jy7.py\", line\
    \ 22, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmphar42jy7.py\"\
    , line 18, in sum_squares\n    lst_new = [int(math.ceil(x**2)) for x in lst]\n\
    \  File \"/tmp/tmphar42jy7.py\", line 18, in <listcomp>\n    lst_new = [int(math.ceil(x**2))\
    \ for x in lst]\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(round(item)**2) for item in lst])\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwbjt0opq.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwbjt0opq.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpwbjt0opq.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgr2jzji6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgr2jzji6.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpgr2jzji6.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    total\
    \ = 0\n    for i in lst:\n        i = int(math.ceil(i))\n        total += i**2\n\
    \    return total\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp193mitz9.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp193mitz9.py\", line 37,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp193mitz9.py\", line\
    \ 23, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp193mitz9.py\"\
    , line 18, in sum_squares\n    i = int(math.ceil(i))\nNameError: name 'math' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n   \
    \ assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0,\
    \ 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmeabu1nz.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmeabu1nz.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpmeabu1nz.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    ans\
    \ = 0\n    for i in lst:\n        ans += int(math.ceil(i)**2)\n    return ans\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6n9_caui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp6n9_caui.py\", line 36,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp6n9_caui.py\", line\
    \ 22, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp6n9_caui.py\"\
    , line 18, in sum_squares\n    ans += int(math.ceil(i)**2)\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    new_lst\
    \ = []\n    for i in lst:\n        j = math.ceil(i)\n        new_lst.append(j)\n\
    \    return sum([i**2 for i in new_lst])\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\n\
    print(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjgj7_txq.py\", line\
    \ 22, in <module>\n    print(sum_squares([1,2,3]))\n  File \"/tmp/tmpjgj7_txq.py\"\
    , line 18, in sum_squares\n    j = math.ceil(i)\nNameError: name 'math' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ int(sum([int(x) ** 2 for x in lst]))\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ggwzzbt.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6ggwzzbt.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp6ggwzzbt.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    sum\
    \ = 0\n    for i in lst:\n        sum = sum + int(math.ceil(i)) ** 2\n    return\
    \ sum\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  \
    \  assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0,\
    \ 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8xgjtjxd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8xgjtjxd.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp8xgjtjxd.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp8xgjtjxd.py\"\
    , line 18, in sum_squares\n    sum = sum + int(math.ceil(i)) ** 2\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(i**2) for i in lst])\n    #return sum([i**2 for i in [math.ceil(num)\
    \ for num in lst]])\n\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdkwtzsxj.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpdkwtzsxj.py\", line 36,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpdkwtzsxj.py\", line\
    \ 25, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([i**2 for i in map(lambda x: ceil(x), lst)])\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt160gcip.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt160gcip.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpt160gcip.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpt160gcip.py\"\
    , line 16, in sum_squares\n    return sum([i**2 for i in map(lambda x: ceil(x),\
    \ lst)])\n  File \"/tmp/tmpt160gcip.py\", line 16, in <listcomp>\n    return sum([i**2\
    \ for i in map(lambda x: ceil(x), lst)])\n  File \"/tmp/tmpt160gcip.py\", line\
    \ 16, in <lambda>\n    return sum([i**2 for i in map(lambda x: ceil(x), lst)])\n\
    NameError: name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    list_squared\
    \ = []\n    for i in lst:\n        i = math.ceil(i)\n        list_squared.append(i)\n\
    \    list_squared_sum = sum(map(lambda x: x**2, list_squared))\n    return list_squared_sum\n\
    \nprint(sum_squares([1,2,3]))\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_zmneks3.py\", line\
    \ 23, in <module>\n    print(sum_squares([1,2,3]))\n  File \"/tmp/tmp_zmneks3.py\"\
    , line 18, in sum_squares\n    i = math.ceil(i)\nNameError: name 'math' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(num*num) for num in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps4gfwn67.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmps4gfwn67.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmps4gfwn67.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    #coding\
    \ here\n    r = []\n    for i in lst:\n        r.append(ceil(i))\n    return sum([i*i\
    \ for i in r])\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) ==\
    \ 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99gez2ly.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp99gez2ly.py\", line 36,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp99gez2ly.py\", line\
    \ 22, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmp99gez2ly.py\"\
    , line 19, in sum_squares\n    r.append(ceil(i))\nNameError: name 'ceil' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst\
    \ = list(map(lambda x: int(math.ceil(x)), lst))\n    return sum(list(map(lambda\
    \ x: x*x, lst)))\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfccc8m92.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfccc8m92.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpfccc8m92.py\", line\
    \ 19, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpfccc8m92.py\"\
    , line 16, in sum_squares\n    lst = list(map(lambda x: int(math.ceil(x)), lst))\n\
    \  File \"/tmp/tmpfccc8m92.py\", line 16, in <lambda>\n    lst = list(map(lambda\
    \ x: int(math.ceil(x)), lst))\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # TODO:\
    \ IMPLEMENT ME\n    pass\n\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxa8t9xo9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxa8t9xo9.py\", line 35,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpxa8t9xo9.py\", line\
    \ 21, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([int(math.ceil(float(i)**2)) for i in lst])\ndef check(candidate):\n   \
    \ assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0])\
    \ == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3c35vii.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpp3c35vii.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpp3c35vii.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpp3c35vii.py\"\
    , line 16, in sum_squares\n    return sum([int(math.ceil(float(i)**2)) for i in\
    \ lst])\n  File \"/tmp/tmpp3c35vii.py\", line 16, in <listcomp>\n    return sum([int(math.ceil(float(i)**2))\
    \ for i in lst])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \nassert sum_squares([1,2,3]) == 14\nassert sum_squares([1,4,9]) == 98\nassert\
    \ sum_squares([1,3,5,7]) == 84\nassert sum_squares([1.4,4.2,0]) == 29\nassert\
    \ sum_squares([-2.4,1,1]) == 6\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2hw31mz.py\", line\
    \ 18, in <module>\n    assert sum_squares([1,2,3]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst\
    \ = [math.ceil(i) for i in lst]\n    return sum([int(i)**2 for i in lst])\n\n\
    print(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\n\
    print(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9212g43c.py\", line\
    \ 19, in <module>\n    print(sum_squares([1,2,3]))\n  File \"/tmp/tmp9212g43c.py\"\
    , line 16, in sum_squares\n    lst = [math.ceil(i) for i in lst]\n  File \"/tmp/tmp9212g43c.py\"\
    , line 16, in <listcomp>\n    lst = [math.ceil(i) for i in lst]\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    raise\
    \ NotImplementedError()\n\n\nassert sum_squares([1,2,3]) == 14\nassert sum_squares([1,4,9])\
    \ == 98\nassert sum_squares([1,3,5,7]) == 84\nassert sum_squares([1.4,4.2,0])\
    \ == 29\nassert sum_squares([-2.4,1,1]) == 6\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpagn63hdl.py\", line\
    \ 19, in <module>\n    assert sum_squares([1,2,3]) == 14\n  File \"/tmp/tmpagn63hdl.py\"\
    , line 16, in sum_squares\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    #TODO:\
    \ implement this method\n    new_list = [ceil(i) for i in lst]\n    int_list =\
    \ [i ** 2 for i in new_list]\n    return sum(int_list)\n\nassert sum_squares([1,2,3])\
    \ == 14\nassert sum_squares([1,4,9]) == 98\nassert sum_squares([1,3,5,7]) == 84\n\
    assert sum_squares([1.4,4.2,0]) == 29\nassert sum_squares([-2.4,1,1]) == 6\n\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpowolth0x.py\", line\
    \ 21, in <module>\n    assert sum_squares([1,2,3]) == 14\n  File \"/tmp/tmpowolth0x.py\"\
    , line 17, in sum_squares\n    new_list = [ceil(i) for i in lst]\n  File \"/tmp/tmpowolth0x.py\"\
    , line 17, in <listcomp>\n    new_list = [ceil(i) for i in lst]\nNameError: name\
    \ 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwc7jttrd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpwc7jttrd.py\", line 34,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpwc7jttrd.py\", line\
    \ 20, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([elem**2 for elem in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcdglvaie.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpcdglvaie.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpcdglvaie.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([round(item, 0) ** 2 for item in lst])\n\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n\
    \    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu2fuq11n.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu2fuq11n.py\", line 33,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpu2fuq11n.py\", line\
    \ 22, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmztbcj79.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpmztbcj79.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpmztbcj79.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst\
    \ = [ceil(x) for x in lst]\n    return sum([x ** 2 for x in lst])\n\nprint(sum_squares([1,2,3]))\n\
    print(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\n\
    print(sum_squares([-2.4,1,1]))\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt8_yy5rm.py\", line\
    \ 19, in <module>\n    print(sum_squares([1,2,3]))\n  File \"/tmp/tmpt8_yy5rm.py\"\
    , line 16, in sum_squares\n    lst = [ceil(x) for x in lst]\n  File \"/tmp/tmpt8_yy5rm.py\"\
    , line 16, in <listcomp>\n    lst = [ceil(x) for x in lst]\nNameError: name 'ceil'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    sum\
    \ = 0\n    for i in lst:\n        i = math.ceil(i)\n        i **= 2\n        sum\
    \ += i\n    return sum\nprint(sum_squares([-2.4,1,1]))\nprint(sum_squares([1.4,4.2,0]))\n\
    print(sum_squares([1,3,5,7]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,2,3]))\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
    \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n  \
    \  assert candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n \
    \   assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n    assert\
    \ candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ewf93zz.py\", line\
    \ 22, in <module>\n    print(sum_squares([-2.4,1,1]))\n  File \"/tmp/tmp_ewf93zz.py\"\
    , line 18, in sum_squares\n    i = math.ceil(i)\nNameError: name 'math' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    raise\
    \ NotImplementedError(\"Please implement this function.\")\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0,\
    \ 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4,\
    \ 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n\
    \    assert candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9,\
    \ 18.9, 19.9]) == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0])\
    \ == 1\n    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n   \
    \ check(sum_squares)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7ncns_s.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpi7ncns_s.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpi7ncns_s.py\", line\
    \ 18, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpi7ncns_s.py\"\
    , line 16, in sum_squares\n    raise NotImplementedError(\"Please implement this\
    \ function.\")\nNotImplementedError: Please implement this function.\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    sum\
    \ = 0\n    lst = [math.ceil(elem) for elem in lst]\n    for num in lst:\n    \
    \    sum += num ** 2\n    return sum\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppszime8x.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmppszime8x.py\", line 36,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmppszime8x.py\", line\
    \ 22, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmppszime8x.py\"\
    , line 17, in sum_squares\n    lst = [math.ceil(elem) for elem in lst]\n  File\
    \ \"/tmp/tmppszime8x.py\", line 17, in <listcomp>\n    lst = [math.ceil(elem)\
    \ for elem in lst]\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # return\
    \ sum([math.ceil(x)**2 for x in lst])\n    return sum([int(math.ceil(x))**2 for\
    \ x in lst])\n\nsum_squares([1,2,3])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9a0zn1o9.py\", line\
    \ 19, in <module>\n    sum_squares([1,2,3])\n  File \"/tmp/tmp9a0zn1o9.py\", line\
    \ 17, in sum_squares\n    return sum([int(math.ceil(x))**2 for x in lst])\n  File\
    \ \"/tmp/tmp9a0zn1o9.py\", line 17, in <listcomp>\n    return sum([int(math.ceil(x))**2\
    \ for x in lst])\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Use\
    \ the list comprehension\n    new_list = [int(math.ceil(x)) for x in lst]\n  \
    \  print(\"The new list: \", new_list)\n    # Now sum the squares\n    return\
    \ sum([x*x for x in new_list])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbft7ze44.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpbft7ze44.py\", line 37,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpbft7ze44.py\", line\
    \ 23, in check\n    assert candidate([1.0, 2.0, 3.0]) == 14\n  File \"/tmp/tmpbft7ze44.py\"\
    , line 17, in sum_squares\n    new_list = [int(math.ceil(x)) for x in lst]\n \
    \ File \"/tmp/tmpbft7ze44.py\", line 17, in <listcomp>\n    new_list = [int(math.ceil(x))\
    \ for x in lst]\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([(int(i))**2 for i in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp67uk0upx.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp67uk0upx.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmp67uk0upx.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n\
    \    \"\"\"You are given a list of numbers.\n    You need to return the sum of\
    \ squared numbers in the given list,\n    round each element in the list to the\
    \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return\
    \ sum([x**2 for x in lst])\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.0]) == 14\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0])\
    \ == 10230\n    assert candidate([10000.0, 10000.0]) == 200000000\n    assert\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9])\
    \ == 1086\n    assert candidate([0.0]) == 0\n    assert candidate([-1.0]) == 1\n\
    \    assert candidate([-1.0, 1.0, 0.0]) == 2\n\ndef test_check():\n    check(sum_squares)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqtj7qz0.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpnqtj7qz0.py\", line 32,\
    \ in test_check\n    check(sum_squares)\n  File \"/tmp/tmpnqtj7qz0.py\", line\
    \ 21, in check\n    assert candidate([1.4, 4.2, 0.0]) == 29\nAssertionError\n"
  exit_code: -1
  status: Exception
