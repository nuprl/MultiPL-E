name: HumanEval_66_digitSum
language: py
prompt: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes\
  \ a string as input and returns the sum of the upper characters only'\n    ASCII\
  \ codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\"\
  ) => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n\
  \        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n  \
  \  \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abAB')\
  \ == 131\n    assert candidate('abcCd') == 67\n    assert candidate('helloE') ==\
  \ 69\n    assert candidate('woArBld') == 131\n    assert candidate('aAaaaXa') ==\
  \ 153\n    assert candidate(' How are yOu?') == 151\n    assert candidate('You arE\
  \ Very Smart') == 327\n\ndef test_check():\n    check(digitSum)\n\ntest_check()\n"
completions: ["    return sum(ord(x) for x in s if x.isupper())\n\n", "    return\
    \ sum(ord(ch) for ch in s if ch.isupper())\n\n", "    return sum(ord(c) for c\
    \ in s if c.isupper())\n\n", "    return sum(ord(x) for x in s if x.isupper())\n\
    \n", "    return sum(map(lambda c: ord(c) if c.isupper() else 0, s))\n\n", " \
    \   if s == \"\":\n        return 0\n    return sum(map(lambda x: ord(x), filter(lambda\
    \ x: ord(x) in range(65,91), s)))\n", "    return sum(ord(c) for c in s if c.isupper())\n\
    \n", "    return sum(ord(c) for c in s if c.isupper())\n\n", "    res = 0\n  \
    \  for char in s:\n        if 65 <= ord(char) <= 90:\n            res += ord(char)\n\
    \    return res\n\n\nprint(digitSum(\"\"))  # 0\nprint(digitSum(\"abAB\"))  #\
    \ 131\nprint(digitSum(\"abcCd\"))  # 67\nprint(digitSum(\"helloE\"))  # 69\nprint(digitSum(\"\
    woArBld\"))  # 131\nprint(digitSum(\"aAaaaXa\"))  # 153\n\n", "    return sum(ord(c)\
    \ for c in s if c.isupper())\n\n", "    return sum(ord(char) for char in s if\
    \ char.isupper())\n\n", "    # s = s.upper()\n    # return sum(ord(l) for l in\
    \ s if l.isupper())\n    return sum(ord(c) - ord('A') + 1 for c in s.upper() if\
    \ c.isupper())\n\n", "    return sum(ord(c) for c in s if c.isupper())\n\n", " \
    \   return sum(ord(i) for i in s if i.isupper())\n\n", "    s = s.upper()\n  \
    \  return sum(map(ord, filter(str.isupper, s)))", "    return sum(int(d) for d\
    \ in s if d.isupper())\n\n", "    res = 0\n    for ch in s:\n        if ch.isupper():\n\
    \            res += ord(ch)\n    return res\n\n", "    sum_ = 0\n    for i in\
    \ s:\n        if i.isupper():\n            sum_ += ord(i)\n    return sum_\n\n",
  "    return sum(ord(x) for x in s if x.isupper())\n\n", "    upper_sum = 0\n   \
    \ for char in s:\n        if char.isupper():\n            upper_sum += ord(char)\n\
    \    return upper_sum\n", "    return sum(ord(char) for char in s if char.isupper())\n\
    \n", '    return sum(ord(e) for e in s if e.isupper())', "    return sum(ord(c)\
    \ for c in s if c.isupper())\n\n", "    return sum(ord(ch) for ch in s if ch.isupper())\n\
    \n", "    return sum(ord(c) for c in s if c.isupper())\n\n", "    sum = 0\n  \
    \  for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return\
    \ sum\n\n", "    return sum(ord(char) for char in s if char.isupper())\n\n", " \
    \   sum = 0\n    for i in s:\n        if ord(i) <= 90:\n            sum += ord(i)\n\
    \    return sum\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"\
    abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"\
    aAaaaXa\"))\nprint(digitSum(\"A\") == 65)", "    return sum(ord(c) for c in s\
    \ if c.isupper())\n\n", "    return sum(map(ord, filter(str.isupper, s)))\n\n",
  "    import re\n    upper = re.findall(r'[A-Z]', s)\n    upper_sum = sum(ord(i)\
    \ for i in upper)\n    return upper_sum\n\n\nprint(digitSum(\"abAB\"))\n", " \
    \   x = 0\n    for i in s:\n        if ord(i) > 64 and ord(i) < 91:\n        \
    \    x += ord(i)\n    return x\n\n", '    return sum(ord(char) for char in s if
    char.isupper())', "    n = 0\n    for l in s:\n        n += ord(l) if l.isupper()\
    \ else 0\n    return n\n```\n\n```python", "    return sum(ord(c) for c in s if\
    \ c.isupper())\n\n", '    return sum(ord(i) for i in s if i.isupper())', '    return
    sum(ord(x) for x in s if x.isupper())', "    if len(s) == 0:\n        return 0\n\
    \    else:\n        return sum(map(ord, [c for c in s if c.isupper()]))\n\n\n\
    print(digitSum(\"abcCd\"))", "    return sum(ord(i) for i in s if i.isupper())\n\
    \n", '    return sum(ord(c) for c in s if c.isupper())', "    return sum(ord(i)\
    \ for i in s if ord(i) > 64 and ord(i) < 91)\n\n", "    return sum(ord(c) for\
    \ c in s if c.isupper())\n\n", "    return sum(ord(c) for c in s if c.isupper())\n\
    \n", "    return sum(ord(x) for x in s if x.isupper())\n\n", "    return sum(ord(c)\
    \ for c in s if c.isupper())\n\n", "    return sum(ord(c) for c in s if c.isupper())\n\
    \n", "    return sum(ord(i) for i in s if i.isupper())\n\n", "    return sum(ord(i)\
    \ for i in s if i.isupper())\n\n", "    return sum(ord(i) for i in s if i.isupper())\n\
    \n", "    return sum(ord(i) for i in s if i.isupper())\n\n", "    return sum(ord(i)\
    \ for i in s if i.isupper())\n\n", "    return sum(ord(x) for x in s if x.isupper())\n\
    \n", "    return sum(ord(ch) for ch in s if ch.isupper())\n\n", '    return sum(ord(c)
    for c in s if c.isupper())', "    return sum(ord(c) for c in s if c.isupper())\n\
    \n", "    return sum(map(ord, filter(str.isupper, s)))\n\n", '    return sum(ord(c)
    for c in s if c.isupper())', "    return sum(ord(x) for x in s if x.isupper())\n\
    \n", "    output = 0\n    for i in s:\n        if i.isupper():\n            output\
    \ += ord(i)\n    return output\n\n", "    # return sum(ord(c) for c in s if c.isupper())\n\
    \    return sum(ord(c) for c in s if 65 <= ord(c) <= 90)\n\n", "    return sum(ord(c)\
    \ for c in s if c.isupper())\n\n", "    return sum(ord(c) for c in s if 65 <=\
    \ ord(c) <= 90)\n\n", "    return sum(ord(c) for c in s if c.isupper())\n\n",
  "    return sum(ord(c) for c in s if c.isupper())\n\n", "    # write your code here\n\
    \    return sum(ord(ch) for ch in s if ch.isupper())\n", "    return sum(ord(c)\
    \ for c in s if c.isupper())\n\n", "    return sum(ord(ch) for ch in s if ch.isupper())\n\
    \n", "    return sum(char for char in s if char.isupper())\n\n", "    return sum(ord(char)\
    \ for char in s if char.isupper())\n\n", '    return sum(ord(i) for i in s if
    i.isupper())', "    return sum(ord(i) for i in s if i.isupper())\n\n", '    return
    sum(ord(i) for i in s if i.isupper())', "    return sum(map(ord, filter(str.isupper,\
    \ s)))\n\n", "    return sum(ord(c) for c in s if c.isupper())\n\n", "    return\
    \ sum(ord(char) for char in s if char.isupper())\n\n", "    upper_s = 0\n    for\
    \ char in s:\n        if 65 <= ord(char) <= 90:\n            upper_s += ord(char)\n\
    \    return upper_s\n\n", "    return sum(list(map(lambda x: ord(x), filter(lambda\
    \ x: x.isupper(), s))))\n\n", "    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c)\n    return sum\n\n", "    return sum(ord(ch) for ch\
    \ in s if 65 <= ord(ch) <= 90)\n\n", '    return sum(ord(c) for c in s if c.isupper())',
  "    total = 0\n    for char in s:\n        if ord(char) <= 90:\n            total\
    \ += ord(char)\n    return total\n\n", "    return sum(ord(char) for char in s\
    \ if char.isupper())\n\n\nassert digitSum(\"\") == 0\nassert digitSum(\"abAB\"\
    ) == 131\nassert digitSum(\"abcCd\") == 67\nassert digitSum(\"helloE\") == 69\n\
    assert digitSum(\"woArBld\") == 131\nassert digitSum(\"aAaaaXa\") == 153\n\n",
  "    return sum(char for char in map(ord, s) if 65 <= char <= 90)\n\n", "    return\
    \ sum(ord(c) for c in s if c.isupper())\n\n", "    res = 0\n    for ch in s:\n\
    \        if ch.isupper():\n            res += ord(ch)\n    return res\n\n", " \
    \   return sum(ord(c) for c in s if c.isupper())\n\n", '    return sum(ord(ch)
    for ch in s if ch.isupper())', '    return sum(ord(i) for i in s if i.isupper())',
  "    sum = 0\n    for i in s:\n        if ord(i) >= 65 and ord(i) <= 90:\n     \
    \       sum += ord(i)\n    return sum\n\n", "    sum = 0\n    for el in s:\n \
    \       if el.isupper():\n            sum += ord(el)\n    return sum\n\n", " \
    \   return sum(ord(c) for c in s if c.isupper())\n\n", "    return sum(ord(c)\
    \ for c in s if 65 <= ord(c) <= 90)\n\n", "    return sum(ord(c) for c in s if\
    \ c.isupper())\n\n", "    # return sum(ord(c) for c in s if c.isupper())\n   \
    \ return sum(map(ord, filter(str.isupper, s)))\n", "    return sum(ord(i) for\
    \ i in s if i.isupper())\n\n", '    return sum(ord(char) for char in s if char.isupper())',
  "    return sum(map(lambda x: ord(x), filter(lambda x: x.isupper(), s)))\n\n", " \
    \   total = 0\n    for ch in s:\n        if ch.isupper():\n            total +=\
    \ ord(ch)\n    return total\n\n", "    return sum(ord(c) for c in s if c.isupper())\n\
    \n", "    return sum(ord(i) for i in s if i.isupper())\n\n", "    return sum(ord(c)\
    \ for c in s if c.isupper())\n\n", "    return sum(ord(x) for x in s if x.isupper())\n\
    \n", "    code = list(map(ord, s))\n    return sum(filter(lambda x: x >= 65 and\
    \ x <= 90, code))\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"\
    abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"\
    aAaaaXa\"))", "    return sum(ord(i) for i in s if i.isupper())\n\n", '    return
    sum(map(ord, filter(str.isupper, s)))', "    return sum(ord(c) for c in s if c.isupper())\n\
    \n", "    return sum(ord(i) for i in s if i.isupper())\n\n", "    r = 0\n    for\
    \ i in s:\n        if i.isupper():\n            r += ord(i)\n    return r\n\n",
  "    def sum(s: str) -> int:\n        \"\"\"Sum of character ASCII codes in the\
    \ string\n        \"\"\"\n        summ = 0\n        for i in s:\n            summ\
    \ += ord(i)\n        return summ\n\n    return sum(s.upper())\n\n", "    return\
    \ sum(ord(c) for c in s if c.isupper())\n\n", "    return sum(ord(c) for c in\
    \ s if c.isupper())\n\n", '    return sum(ord(i) for i in s if i.isupper())',
  '    return sum(ord(c) for c in s if c.isupper())', "    return sum(map(ord, filter(str.isupper,\
    \ s)))\n\n", "    return sum(i for i in map(ord, s) if ord('A') <= i <= ord('Z'))\n\
    \n", "    return sum(ord(char) for char in s if 65 <= ord(char) <= 90)\n\n", " \
    \   # upper letter ASCII codes range is 65-90\n    a = list(map(lambda x: ord(x),\
    \ s))\n    return sum(filter(lambda x: 65 <= x <= 90, a))\n\n", '    return sum(list(map(lambda
    x: ord(x), filter(lambda x: x.isupper(), s))))', "    return sum(ord(c) for c\
    \ in s if c.isupper())\n\n", "    return sum(map(ord, filter(str.isupper, s)))\n\
    \n\n", '    return sum(ord(ch) for ch in s if ch.isupper())', "    return sum(ord(s)\
    \ for s in s if ord(s) > 64 and ord(s) < 91)\n\n", "    return sum(ord(ch) for\
    \ ch in s if ch.isupper())\n\n", "    return sum(ord(i) for i in s if i.isupper())\n\
    \n", "    return sum(map(ord, filter(str.isupper, s)))\n\n", "    s = s.upper()\n\
    \    upper_chars = [\n        chr(i) for i in range(ord('A'), ord('Z') + 1)\n\
    \    ]\n    return sum(\n        [ord(c) for c in s if c in upper_chars]\n   \
    \ )\n\n", "    # return sum(ord(i) for i in s if ord(i) > 64 and ord(i) < 91)\n\
    \    return sum(ord(i) for i in s if i.isupper())\n\n", "    return sum(ord(x)\
    \ for x in s if x.isupper())\n\n", "    return sum(ord(c) for c in s if c.isupper())\n\
    \n", '    return sum(map(ord, filter(str.isupper, s)))', "    return sum(ord(c)\
    \ for c in s if c.isupper())\n\n", "    return sum(ord(c) for c in s if c.isupper())\n\
    \n", '    return sum(map(ord, filter(str.isupper, s)))', '    return sum(map(lambda
    c: ord(c), filter(lambda c: c.isupper(), s)))', "    return sum(map(ord, filter(str.isupper,\
    \ s)))\n\n", "    return sum(ord(ch) for ch in s if ch.isupper())\n\n", "    return\
    \ sum(ord(i) for i in s if i.isupper())\n\n", "    #a = 0\n    #for c in s:\n\
    \    #    if c.isupper():\n    #        a += ord(c)\n    #return a\n    return\
    \ sum(map(ord, filter(str.isupper, s)))\n\nprint(digitSum('abAB'))", "    return\
    \ sum(ord(x) for x in s if x.isupper())\n\n", '    return sum(ord(i) for i in
    s if i.isupper())', "    sum_ = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum_ += ord(c)\n    return sum_", "    return sum(ord(c) for c in\
    \ s if c.isupper())\n\n", "    return sum(ord(i) for i in s if i.isupper())\n\n",
  "    total = 0\n    for i in s:\n        if i.isupper():\n            total += ord(i)\n\
    \    return total\n\n", "    return sum(ord(i) for i in s if 64 < ord(i) < 91)\n\
    \n", "    sum = 0\n    for ch in s:\n        if 'A' <= ch <= 'Z':\n          \
    \  sum += ord(ch)\n    return sum\n", "    return sum(ord(c) for c in s if c.isupper())\n\
    \n", "    return sum(ord(ch) for ch in s if ch.isupper())\n\n", "    total = 0\n\
    \    for char in s:\n        if 64 < ord(char) < 91:\n            total += ord(char)\n\
    \    return total\n", "    return sum(ord(c) for c in s if c.isupper())\n\n",
  "    r = 0\n    for i in s:\n        if i.isupper():\n            r += ord(i)\n\
    \    return r\n\n\n", "    return sum(ord(c) for c in s if c.isupper())\n\n",
  '    return sum(ord(c) for c in s if c.isupper())', '    return sum(ord(c) for c
    in s if c.isupper())', "    # n = len(s)\n    # if n == 0:\n    #     return 0\n\
    \    # else:\n    #     return ord(s[0]) + digitSum(s[1:])\n    return sum(ord(c)\
    \ for c in s if c.isupper())\n", "    return sum(ord(i) for i in s if i.isupper())\n\
    \n", "    return sum(ord(i) for i in s if i.isupper())\n\n", '    return sum(map(lambda
    x: ord(x), filter(lambda x: x.isupper(), s)))', "    return sum(ord(char) for\
    \ char in s if char.isupper())\n\n", "    return sum(map(ord, filter(str.isupper,\
    \ s)))\n\n", "    return sum(ord(c) for c in s if c.isupper())\n\n", "    c =\
    \ 0\n    for x in s:\n        c += ord(x) if ord(x) < 96 else 0\n    return c\n\
    \n", '    return sum(ord(c) for c in s if c.isupper())', "    return sum(list(map(lambda\
    \ x: ord(x), s)))\n\n\nprint(digitSum(\"woArBld\"))", "    return sum(ord(c) for\
    \ c in s if c.isupper())\n\n", "    sum_ = 0\n    for x in s:\n        if x.isupper():\n\
    \            sum_ += ord(x)\n    return sum_\n\n", "    return sum(ord(char) for\
    \ char in s if char.isupper())\n\n", '    return sum(ord(c) for c in s if c.isupper())',
  "    return sum(ord(x) for x in s if 'A' <= x <= 'Z')\n\n", '    return sum(ord(i)
    for i in s if i.isupper())', "    total = 0\n    for x in s:\n        if x.isupper():\n\
    \            total += ord(x)\n    return total\n", "    return sum(ord(c) for\
    \ c in s if c.isupper())\n\n", '    return sum(ord(x) for x in s if x.isupper())',
  "    return sum(ord(ch) for ch in s if ch.isupper())\n\n", "    # My attempt\n \
    \   def sumOfUpper(s: str) -> int:\n        return sum(ord(i) for i in s if i.isupper())\n\
    \n    # Best practices\n    return sum(ord(x) for x in s if x.isupper())", " \
    \   return sum(ord(c) for c in s if c.isupper())\n\n", "    # your code here\n\
    \    \"\"\"\n    ASCII Tabelle:\n    A = 65\n    B = 66\n    C = 67\n    D = 68\n\
    \    E = 69\n    a = 97\n    b = 98\n    c = 99\n    d = 100\n    e = 101\n  \
    \  \"\"\"\n    return sum(ord(char) for char in s if char.isupper())\n\n", " \
    \   total = 0\n    for c in s:\n        if c.isupper():\n            total +=\
    \ ord(c)\n    return total\n", '    return sum(ord(x) for x in s if x.isupper())',
  "    return sum(map(lambda x: ord(x) if x.isupper() else 0, s))\n\n", '    return
    sum(ord(x) for x in s if ord(x) >= 65 and ord(x) <= 90)', '    return sum(map(lambda
    x: ord(x) - 96, filter(lambda x: ord(x) >= 65 and ord(x) <= 90, s)))', "    return\
    \ sum(ord(x) for x in s if x.isupper())\n\n", '    return sum(ord(char) for char
    in s if char.isupper())', '    return sum(ord(char) for char in s if char.isupper())',
  "    summa = 0\n    for i in s:\n        if i.isupper():\n            summa += ord(i)\n\
    \    return summa\n\nprint(digitSum(\"woArBld\"))", '    return sum(ord(char)
    for char in s if 65 <= ord(char) <= 90)', "    return sum(ord(c) for c in s if\
    \ c.isupper())\n\n", "    if type(s) != str:\n        raise TypeError('s must\
    \ be a string')\n    return sum(ord(c) for c in s if c.isupper())\n\n", "    return\
    \ sum(ord(c) for c in s if c.isupper())\n\n", '    return sum(ord(c) for c in
    s if c.isupper())', '    return sum(map(ord, filter(str.isupper, s)))', "    #\
    \ My Solution\n    return sum(ord(c) for c in s if c.isupper())\n\n    # Alternative\n\
    \    # return sum(ord(c) for c in s if c.upper() == c)\n\n", "    return sum(ord(c)\
    \ for c in s if c.isupper())\n\n", '    return sum(ord(ch) for ch in s if ch.isupper())',
  '    return sum(ord(c) for c in s if c.isupper())', "    # Your code here\n    return\
    \ 0\n\n", "    return sum(map(lambda x: ord(x), filter(lambda x: x.isupper(),\
    \ s)))\n\n", "    return sum(ord(c) for c in s if c.isupper())\n\n", "    return\
    \ sum(ord(char) for char in s if char.isupper())\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
