name: HumanEval_114_minSubArraySum
language: py
results:
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)\
    \ < 1:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n   \
    \ sum_ = nums[0]\n    min_ = nums[0]\n    for i in range(1, len(nums)):\n    \
    \    sum_ = min(nums[i], sum_ + nums[i])\n        min_ = min(min_, sum_)\n   \
    \ return min_\n\nprint(minSubArraySum([-1, -2, -3]))\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "-6\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # We\
    \ can use Kadane's algorithm to solve this problem.\n    local_max = curr_sum\
    \ = float('inf')\n    for i in nums:\n        curr_sum = min(i, curr_sum + i)\n\
    \        local_max = min(local_max, curr_sum)\n    return local_max\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums:\n\
    \        current_min = nums[0]\n        for i in range(len(nums)):\n         \
    \   for j in range(i, len(nums)):\n                current_min = min(current_min,\
    \ sum(nums[i:j+1]))\n        return current_min\n    return 0\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    subarray_sum\
    \ = 0\n    for i in range(len(nums)):\n        subarray_sum += nums[i]\n     \
    \   subarray_sum = min(subarray_sum, 0)\n    return subarray_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4r74s7g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpg4r74s7g.py\", line 31,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpg4r74s7g.py\", line\
    \ 17, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum +=\
    \ num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3h9m3b8u.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3h9m3b8u.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp3h9m3b8u.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)\
    \ == 0:\n        return 0\n    min_sum = 0\n    sum = 0\n    for num in nums:\n\
    \        sum += num\n        if sum > min_sum:\n            min_sum = sum\n  \
    \  return min_sum\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2,\
    \ 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv1tqv3l.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkv1tqv3l.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpkv1tqv3l.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum\
    \ = nums[0]\n    currSum = 0\n    for num in nums:\n        currSum += num\n \
    \       minSum = min(minSum, currSum)\n        if currSum > 0:\n            currSum\
    \ = 0\n    return minSum\ndef check(candidate):\n    assert candidate([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9qwhdcdn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9qwhdcdn.py\", line 28,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp9qwhdcdn.py\", line\
    \ 14, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    current_sum = 0\n    for i in range(len(nums)):\n      \
    \  current_sum += nums[i]\n        min_sum = min(min_sum, current_sum)\n     \
    \   if current_sum < 0:\n            current_sum = 0\n    return min_sum\n\ndef\
    \ check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpye3i2c74.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpye3i2c74.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpye3i2c74.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    curr_sum = 0\n    for i in range(len(nums)):\n        curr_sum\
    \ += nums[i]\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum >\
    \ 0:\n            curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum +=\
    \ num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\ndef check(candidate):\n    assert candidate([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvi897rr8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpvi897rr8.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpvi897rr8.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums.sort()\n\
    \    return nums[0]\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1,\
    \ -2, -3]))\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "1\n-3\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6_6vdqa.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpq6_6vdqa.py\", line 31,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpq6_6vdqa.py\", line\
    \ 18, in check\n    assert candidate([-1, -2, -3]) == -6\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    current_sum\
    \ = nums[0]\n    minimum_sum = nums[0]\n    for i in range(1, len(nums)):\n  \
    \      current_sum = max(nums[i], current_sum + nums[i])\n        minimum_sum\
    \ = min(minimum_sum, current_sum)\n    return minimum_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjsbvy1l3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpjsbvy1l3.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpjsbvy1l3.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    current_min\
    \ = nums[0]\n    sum_so_far = 0\n    for i in range(len(nums)):\n        sum_so_far\
    \ += nums[i]\n        if current_min > sum_so_far:\n            current_min =\
    \ sum_so_far\n        if sum_so_far > 0:\n            sum_so_far = 0\n    return\
    \ current_min\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4])\
    \ == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2,\
    \ -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = 0\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n\
    \        if current_sum < min_sum:\n            min_sum = current_sum\n    return\
    \ min_sum\n\nminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1, -2,\
    \ -3]) == -6\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4])\
    \ == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2,\
    \ -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqv48lhf.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpdqv48lhf.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpdqv48lhf.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    lowest\
    \ = math.inf\n    curr = 0\n    for num in nums:\n        curr += num\n      \
    \  if curr < lowest:\n            lowest = curr\n        if curr > 0:\n      \
    \      curr = 0\n    return lowest\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm68zfhgu.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpm68zfhgu.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpm68zfhgu.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmpm68zfhgu.py\"\
    , line 11, in minSubArraySum\n    lowest = math.inf\nNameError: name 'math' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Sum\
    \ of minimum sub-array seen so far.\n    min_sub_sum = nums[0]\n    curr_sub_sum\
    \ = 0\n    for n in nums:\n        # Add current number to current sub-array sum.\n\
    \        curr_sub_sum += n\n        # If min_sub_sum is greater than current sub-array\
    \ sum,\n        # update min_sub_sum.\n        if min_sub_sum > curr_sub_sum:\n\
    \            min_sub_sum = curr_sub_sum\n        # If current sub-array sum is\
    \ negative,\n        # set it to 0.\n        if curr_sub_sum < 0:\n          \
    \  curr_sub_sum = 0\n    return min_sub_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpji6944_x.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpji6944_x.py\", line 42,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpji6944_x.py\", line\
    \ 28, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    arr_min\
    \ = float('inf')\n    sub_sum = 0\n    for i in range(len(nums)):\n        sub_sum\
    \ += nums[i]\n        arr_min = min(arr_min, sub_sum)\n        if sub_sum > 0:\n\
    \            sub_sum = 0\n    return arr_min\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    sub_sum = 0\n    for i in range(len(nums)):\n        sub_sum\
    \ += nums[i]\n        min_sum = min(min_sum, sub_sum)\n        if sub_sum > 0:\n\
    \            sub_sum = 0\n    return min_sum\n\nassert minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\nassert minSubArraySum([-1, -2, -3]) == -6\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # If\
    \ all negative, return the smallest\n    if min(nums) < 0:\n        return min(nums)\n\
    \    # If all positive, return the smallest positive number\n    if max(nums)\
    \ > 0:\n        return min([n for n in nums if n > 0])\n    # Otherwise, find\
    \ the minimum positive sum\n    positive_nums = sorted([n for n in nums if n >\
    \ 0])\n    positive_nums.append(0)\n    for i in range(len(positive_nums) - 1):\n\
    \        return positive_nums[i + 1] - positive_nums[i]\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjsn1j6d_.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpjsn1j6d_.py\", line 37,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpjsn1j6d_.py\", line\
    \ 24, in check\n    assert candidate([-1, -2, -3]) == -6\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return\
    \ min([sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)+1)])\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(len(nums)):\n\
    \        curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum\
    \ += nums[j]\n            min_sum = min(min_sum, curr_sum)\n    return min_sum\n\
    \nassert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nassert minSubArraySum([-1, -2,\
    \ -3]) == -6\nassert minSubArraySum([-1, -2, -3, -2, -4]) == -10\nassert minSubArraySum([2,\
    \ 3, 4, 1, 2, 4, 2, -4, -6, 1, -3, -3, 4, -1, -6, -1, -2, -2, -7, -3, -1, -1,\
    \ 3, -2, -2, -7, -3, -5, -7, -5, -1, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5,\
    \ -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3,\
    \ -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5,\
    \ -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3,\
    \ -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5, -3, -5,\
    \ -3\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n \
    \   assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2,\
    \ -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_804p3ku.py\", line 25\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    curr_sum = 0\n    for i in range(len(nums)):\n        curr_sum\
    \ += nums[i]\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum >\
    \ 0:\n            curr_sum = 0\n    return min_sum\n\nassert minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\nassert minSubArraySum([-1, -2, -3]) == -6\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # edge\
    \ cases\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n  \
    \      return nums[0]\n    # calculate all sub-arrays\n    curr_sum = 0\n    min_sum\
    \ = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n\
    \            curr_sum += nums[j]\n            if curr_sum < min_sum:\n       \
    \         min_sum = curr_sum\n    return min_sum\n    \n    \nprint(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])) # 1\nprint(minSubArraySum([-1, -2, -3])) # -6\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "0\n-14\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppptx2j2y.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmppptx2j2y.py\", line 44,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmppptx2j2y.py\", line\
    \ 30, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    total\
    \ = 0\n    min_sum = float('inf')\n    for num in nums:\n        total += num\n\
    \        min_sum = min(min_sum, total)\n        total = max(total, 0)\n    return\
    \ min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7peha4t.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmph7peha4t.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmph7peha4t.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    current_min\
    \ = float('inf')\n    current_sum = 0\n    for i in range(len(nums)):\n      \
    \  current_sum += nums[i]\n        current_min = min(current_min, current_sum)\n\
    \        if current_sum > 0:\n            current_sum = 0\n    return current_min\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return None\n    min_sum = min_so_far = nums[0]\n    for n in\
    \ nums[1:]:\n        min_so_far = min(n, min_so_far + n)\n        min_sum = min(min_sum,\
    \ min_so_far)\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    curr_min\
    \ = float('inf')\n    curr_sum = 0\n    for x in nums:\n        curr_sum += x\n\
    \        curr_min = min(curr_min, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return curr_min\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxm8zzxq1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpxm8zzxq1.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpxm8zzxq1.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum_sum\
    \ = sum(nums)\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n\
    \            if sum(nums[i:j+1]) < minimum_sum:\n                minimum_sum =\
    \ sum(nums[i:j+1])\n    return minimum_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return 0\n    curr = 0\n    result = float('inf')\n    for x\
    \ in nums:\n        curr += x\n        result = min(result, curr)\n        curr\
    \ = max(curr, 0)\n    return result\n\nassert minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\nassert minSubArraySum([-1, -2, -3]) == -6\ndef check(candidate):\n   \
    \ assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3])\
    \ == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_sexc70j.py\", line\
    \ 21, in <module>\n    assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    current_sum\
    \ = nums[0]\n    minimum_sum = current_sum\n    for num in nums[1:]:\n       \
    \ if current_sum < 0:\n            current_sum = num\n        else:\n        \
    \    current_sum += num\n        minimum_sum = min(minimum_sum, current_sum)\n\
    \    return minimum_sum\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3i0r2j45.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp3i0r2j45.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp3i0r2j45.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)\
    \ == 0:\n        return 0\n    min_sum = nums[0]\n    curr_sum = nums[0]\n   \
    \ for i in range(1, len(nums)):\n        curr_sum = min(nums[i], curr_sum + nums[i])\n\
    \        min_sum = min(min_sum, curr_sum)\n    return min_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    cum_sum\
    \ = 0\n    min_sum = 0\n    for i in range(len(nums)):\n        cum_sum += nums[i]\n\
    \        if i == 0:\n            min_sum = cum_sum\n        else:\n          \
    \  min_sum = min(min_sum, cum_sum)\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdf1xtjg.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkdf1xtjg.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpkdf1xtjg.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initially\
    \ set to max val of int\n    min_sum = sys.maxsize\n    # Dummy header to avoid\
    \ out of bounds\n    nums = [0] + nums\n    for i in range(1, len(nums)):\n  \
    \      nums[i] += nums[i - 1]\n        min_sum = min(min_sum, nums[i])\n    return\
    \ min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzzmvnwu7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzzmvnwu7.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpzzmvnwu7.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmpzzmvnwu7.py\"\
    , line 12, in minSubArraySum\n    min_sum = sys.maxsize\nNameError: name 'sys'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum +=\
    \ num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8nq2kek.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv8nq2kek.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpv8nq2kek.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)\
    \ == 0:\n        return -1\n    if len(nums) == 1:\n        return nums[0]\n \
    \   minimum = None\n    for i in range(0, len(nums)):\n        running_sum = 0\n\
    \        for j in range(i, len(nums)):\n            running_sum += nums[j]\n \
    \           if minimum is None or running_sum < minimum:\n                minimum\
    \ = running_sum\n    return minimum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = sum(nums)\n    end = 0\n    current_sum = 0\n    for num in nums:\n      \
    \  current_sum += num\n        if current_sum < min_sum:\n            min_sum\
    \ = current_sum\n        if current_sum > 0:\n            current_sum = 0\n  \
    \  return min_sum\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1,\
    \ -2, -3]))\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "1\n-6\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    currSum\
    \ = 0\n    minimum = float('inf')\n    for num in nums:\n        currSum += num\n\
    \        minimum = min(minimum, currSum)\n        currSum = max(currSum, 0)\n\
    \    return minimum\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg0_0dr7s.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpg0_0dr7s.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpg0_0dr7s.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n\
    \        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n        \
    \    curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    current_sum\
    \ = nums[0]\n    if len(nums) == 1:\n        return current_sum\n    min_sum =\
    \ current_sum\n    for i in range(1, len(nums)):\n        current_sum = min(current_sum\
    \ + nums[i], nums[i])\n        min_sum = min(min_sum, current_sum)\n    return\
    \ min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initialize\
    \ current and minimum subarray sums\n    curr_sub_sum = nums[0]\n    min_sub_sum\
    \ = nums[0]\n\n    # Update sums for each element in nums\n    for idx in range(1,\
    \ len(nums)):\n        # Update current subarray sum\n        curr_sub_sum = min(nums[idx],\
    \ curr_sub_sum + nums[idx])\n\n        # Update min subarray sum\n        min_sub_sum\
    \ = min(min_sub_sum, curr_sub_sum)\n\n    return min_sub_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    curr_min\
    \ = nums[0]\n    cum_sum = 0\n    for n in nums:\n        cum_sum += n\n     \
    \   curr_min = min(curr_min, cum_sum)\n        cum_sum = min(cum_sum, 0)\n   \
    \ return curr_min\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum +=\
    \ num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptwsjnfxq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmptwsjnfxq.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmptwsjnfxq.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n\
    \    else:\n        # Get all non-empty sub-arrays of nums\n        nonEmpty =\
    \ []\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)\
    \ + 1):\n                nonEmpty.append(nums[i:j])\n        # Get the sum of\
    \ each non-empty sub-array\n        nonEmptySum = []\n        for array in nonEmpty:\n\
    \            nonEmptySum.append(sum(array))\n        # Get the minimum sum from\
    \ the list of sums\n        return min(nonEmptySum)\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = 0\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(i,\
    \ len(nums)):\n            sum += nums[j]\n            if j == i:\n          \
    \      min_sum = sum\n            elif sum < min_sum:\n                min_sum\
    \ = sum\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp48v4b_pz.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp48v4b_pz.py\", line 37,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp48v4b_pz.py\", line\
    \ 23, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # if\
    \ sum of all positive integers then min sum is 0\n    min_sum = 0\n    curr_sum\
    \ = 0\n    for n in nums:\n        curr_sum += n\n        min_sum = min(min_sum,\
    \ curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgsu37u_x.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpgsu37u_x.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpgsu37u_x.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    curr_sum\
    \ = 0\n    min_sum = float('inf')\n    for n in nums:\n        curr_sum += n\n\
    \        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n        \
    \    curr_sum = 0\n    return min_sum\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    length\
    \ = len(nums)\n    sum = 0\n    for i in range(length):\n        sum += nums[i]\n\
    \    min_sum = sum\n    for i in range(length):\n        for j in range(i + 1,\
    \ length):\n            sum = sum - nums[i] + nums[j]\n            if sum < min_sum:\n\
    \                min_sum = sum\n    return min_sum\n\nprint(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]))\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2,\
    \ 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "14\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3j8r4lq0.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp3j8r4lq0.py\", line 39,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp3j8r4lq0.py\", line\
    \ 25, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    current_sum = 0\n    for i in range(len(nums)):\n        current_sum\
    \ += nums[i]\n        if current_sum < min_sum:\n            min_sum = current_sum\n\
    \        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\
    \nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3]))\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: "1\n-6\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Time\
    \ complexity: O(n), Space complexity: O(1)\n    min_sum = 0\n    total = 0\n \
    \   for num in nums:\n        total += num\n        min_sum = min(min_sum, total)\n\
    \        if total > 0:\n            total = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr4x72o3f.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpr4x72o3f.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpr4x72o3f.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # set\
    \ initial minSum to the first element\n    minSum = nums[0]\n    # set initial\
    \ currSum to 0\n    currSum = 0\n    # loop over array\n    for num in nums:\n\
    \        # add the current element to currSum\n        currSum += num\n      \
    \  # compare currSum to minSum and store the minimum in minSum\n        minSum\
    \ = min(minSum, currSum)\n        # if currSum is negative, set it to 0\n    \
    \    if currSum < 0:\n            currSum = 0\n    # return minSum\n    return\
    \ minSum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3lqy1pg1.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp3lqy1pg1.py\", line 42,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp3lqy1pg1.py\", line\
    \ 28, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = 0\n    min_array = None\n    for i in range(len(nums)):\n        curr_sum\
    \ = 0\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n\
    \            if min_array is None or curr_sum < min_sum:\n                min_sum\
    \ = curr_sum\n                min_array = nums[i:j+1]\n    return min_sum\n\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n =\
    \ len(nums)\n    for i in range(1, n):\n        nums[i] = min(nums[i], nums[i]\
    \ + nums[i - 1])\n    return min(nums)\n\nprint(minSubArraySum([2, 3, 4, 1, 2,\
    \ 4]))\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n\
    \    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2,\
    \ -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)\
    \ == 0:\n        return 0\n    # initialize variables\n    m = nums[0]\n    c\
    \ = nums[0]\n    # iterate through list\n    for i in range(1, len(nums)):\n \
    \       # update cumulative sum\n        c = min(c + nums[i], nums[i])\n     \
    \   # update minimum sum\n        m = min(m, c)\n    return m\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    sum = 0\n    for num in nums:\n        sum += num\n        if\
    \ sum < min_sum:\n            min_sum = sum\n        if sum > 0:\n           \
    \ sum = 0\n    return min_sum\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1,\
    \ -2, -3]))\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "1\n-6\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = 0\n    for num in nums:\n        min_sum += num\n    curr_sum = 0\n    for\
    \ num in nums:\n        curr_sum += num\n        if curr_sum < min_sum:\n    \
    \        min_sum = curr_sum\n        if curr_sum > 0:\n            curr_sum =\
    \ 0\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    sum = nums[0]\n    for num in nums[1:]:\n        sum = sum +\
    \ num\n        if sum < min_sum:\n            min_sum = sum\n        if sum <\
    \ 0:\n            sum = 0\n    return min_sum\n\nprint(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3]))\ndef check(candidate):\n   \
    \ assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3])\
    \ == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "2\n-3\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3migjdiu.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp3migjdiu.py\", line 38,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp3migjdiu.py\", line\
    \ 24, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    import\
    \ sys\n    min_sum = sys.maxsize\n    current_sum = 0\n    for i in range(len(nums)):\n\
    \        current_sum += nums[i]\n        if current_sum < min_sum:\n         \
    \   min_sum = current_sum\n        if current_sum > 0:\n            current_sum\
    \ = 0\n    return min_sum\n\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    curr_min\
    \ = float('inf')\n    curr_sum = 0\n    for n in nums:\n        curr_sum += n\n\
    \        curr_min = min(curr_min, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return curr_min\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_h0pjkq9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_h0pjkq9.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp_h0pjkq9.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    sum = 0\n    for num in nums:\n        sum += num\n    \
    \    min_sum = min(min_sum, sum)\n        sum = max(sum, 0)\n    return min_sum\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0a9zlgd7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0a9zlgd7.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp0a9zlgd7.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = sum(nums)\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)\
    \ + 1):\n            min_sum = min(min_sum, sum(nums[i:j]))\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum\
    \ = nums[0]\n    current_sum = 0\n    for num in nums:\n        current_sum +=\
    \ num\n        minimum = min(minimum, current_sum)\n        current_sum = max(current_sum,\
    \ 0)\n    return minimum\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpabu58uuk.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpabu58uuk.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpabu58uuk.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6d6owpt9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6d6owpt9.py\", line 27,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp6d6owpt9.py\", line\
    \ 13, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    currSum\
    \ = nums[0]\n    minSum = currSum\n    for n in nums[1:]:\n        currSum = min(n,\
    \ currSum + n)\n        minSum = min(minSum, currSum)\n    return minSum\n\ndef\
    \ check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum\
    \ = float('inf')\n    for start in range(len(nums)):\n        for stop in range(start,\
    \ len(nums)):\n            sub_array_sum = sum(nums[start:stop+1])\n         \
    \   if sub_array_sum < minimum:\n                minimum = sub_array_sum\n   \
    \ return minimum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2,\
    \ 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    i =\
    \ 0\n    j = 0\n    min_sum = nums[0]\n    curr_sum = 0\n    while j < len(nums):\n\
    \        if curr_sum >= 0:\n            curr_sum += nums[j]\n            j +=\
    \ 1\n        else:\n            min_sum = min(min_sum, curr_sum)\n           \
    \ curr_sum += nums[j]\n            j += 1\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb_2mharc.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpb_2mharc.py\", line 40,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpb_2mharc.py\", line\
    \ 26, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    import\
    \ sys\n    min_so_far = sys.maxsize\n    curr_min = 0\n    for num in nums:\n\
    \        curr_min = min(curr_min, curr_min + num)\n        min_so_far = min(min_so_far,\
    \ curr_min)\n    return min_so_far\n\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuzs4kpfe.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpuzs4kpfe.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpuzs4kpfe.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # sumList\
    \ = []\n    # for i in range(len(nums)):\n    #     for j in range(i+1, len(nums)+1):\n\
    \    #         sumList.append(sum(nums[i:j]))\n    # return min(sumList)\n\n \
    \   # this is a DP problem:\n    if not nums:\n        return 0\n    total = 0\n\
    \    minSum = float('inf')\n    for i in range(len(nums)):\n        total += nums[i]\n\
    \        minSum = min(minSum, total)\n        if total > 0:\n            total\
    \ = 0\n    return minSum\n\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return 0\n    min_sum = nums[0]\n    current_sum = 0\n    for\
    \ num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n\
    \        current_sum = max(current_sum, 0)\n    return min_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_q7rssdm.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_q7rssdm.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp_q7rssdm.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if sum(nums)\
    \ < 0:\n        return sum(nums)\n    subarrs = []\n    i = 0\n    while i < len(nums):\n\
    \        j = i\n        while j < len(nums):\n            subarrs.append(nums[i:j+1])\n\
    \            j += 1\n        i += 1\n    min_sum = subarrs[0][0]\n    for subarr\
    \ in subarrs:\n        if sum(subarr) < min_sum:\n            min_sum = sum(subarr)\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaxqn0lay.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpaxqn0lay.py\", line 42,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpaxqn0lay.py\", line\
    \ 33, in check\n    assert candidate([-1, -2, -3, 10, -5]) == -6\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    ans\
    \ = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n\
    \            sub_arr = nums[i:j]\n            if ans == 0:\n                ans\
    \ = sum(sub_arr)\n            if ans > sum(sub_arr):\n                ans = sum(sub_arr)\n\
    \    return ans\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2,\
    \ 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_wvxtuu.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpj_wvxtuu.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpj_wvxtuu.py\", line\
    \ 26, in check\n    assert candidate([0, 10, 20, 1000000]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    curr_sum\
    \ = 0\n    min_sum = float('inf')\n    for num in nums:\n        curr_sum += num\n\
    \        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n        \
    \    curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)\
    \ == 0:\n        return 0\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n   \
    \ for i in range(1, len(nums)):\n        dp[i] = max(nums[i], dp[i - 1] + nums[i])\n\
    \    return min(dp)\n\n\ndef check(candidate):\n    assert candidate([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4v2fb3pd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4v2fb3pd.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp4v2fb3pd.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = 0\n    sum = 0\n    for num in nums:\n        sum += num\n        if min_sum\
    \ > sum:\n            min_sum = sum\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpih7iqdqv.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpih7iqdqv.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpih7iqdqv.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = 0\n    for i in range(1, len(nums) + 1):\n        for k in range(len(nums)\
    \ - i + 1):\n            sub_array = nums[k:k + i]\n            if sub_array ==\
    \ []:\n                continue\n            elif min_sum == 0 or sum(sub_array)\
    \ < min_sum:\n                min_sum = sum(sub_array)\n    return min_sum\n\n\
    minSubArraySum([-1, -2, -3])\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiv_rx7u1.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpiv_rx7u1.py\", line 37,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpiv_rx7u1.py\", line\
    \ 27, in check\n    assert candidate([0, 10, 20, 1000000]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # initialize\
    \ the min_sum and the sum to be 0\n    min_sum = 0\n    sum = 0\n    # loop through\
    \ the nums array\n    for i in range(len(nums)):\n        # add the element of\
    \ the array to the sum\n        sum += nums[i]\n        # if the current min_sum\
    \ is greater than the sum\n        if min_sum > sum:\n            # then set the\
    \ min_sum to the sum\n            min_sum = sum\n        # if the sum is less\
    \ than 0\n        if sum < 0:\n            # then set the sum to 0\n         \
    \   sum = 0\n    # if the sum is less than 0\n    if sum < 0:\n        # the return\
    \ the sum\n        return sum\n    # else return the min_sum\n    return min_sum\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps6pna5sf.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmps6pna5sf.py\", line 47,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmps6pna5sf.py\", line\
    \ 33, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n =\
    \ len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ nums[0]\n    dp = [0] * n\n    dp[0] = nums[0]\n    for i in range(1, n):\n\
    \        dp[i] = nums[i] + min(dp[i - 1], 0)\n    return min(dp)\n\nassert minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\nassert minSubArraySum([-1, -2, -3]) == -6\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # TODO:\
    \ Implement\n    return 1\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgn8l3zrp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgn8l3zrp.py\", line 29,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpgn8l3zrp.py\", line\
    \ 16, in check\n    assert candidate([-1, -2, -3]) == -6\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    total\
    \ = float('inf')\n    curr_total = 0\n    for i in range(len(nums)):\n       \
    \ curr_total += nums[i]\n        if curr_total < total:\n            total = curr_total\n\
    \        if curr_total > 0:\n            curr_total = 0\n    return total\n\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    from\
    \ sys import maxsize\n    left, right = 0, 0\n    min_sum = maxsize\n    sum =\
    \ 0\n    for right in range(len(nums)):\n        sum += nums[right]\n        while\
    \ sum <= 0:\n            min_sum = min(min_sum, sum)\n            sum -= nums[left]\n\
    \            left += 1\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphejm0qpn.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmphejm0qpn.py\", line 38,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmphejm0qpn.py\", line\
    \ 24, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n\
    \        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n        \
    \    curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return None\n    min_sum = min_current = nums[0]\n    for num\
    \ in nums[1:]:\n        min_current = min(num, min_current + num)\n        min_sum\
    \ = min(min_sum, min_current)\n    return min_sum\ndef check(candidate):\n   \
    \ assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3])\
    \ == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    curr_sum = nums[0]\n    for i in range(1, len(nums)):\n     \
    \   curr_sum = min(nums[i], curr_sum + nums[i])\n        min_sum = min(min_sum,\
    \ curr_sum)\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for\
    \ i in range(1, len(nums)):\n        nums[i] = min(nums[i], nums[i] + nums[i -\
    \ 1])\n    return min(nums)\n\nprint(minSubArraySum([-1, -2, -3]))\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "-6\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    m, _sum\
    \ = nums[0], nums[0]\n    for num in nums[1:]:\n        if _sum < 0:\n       \
    \     _sum = num\n        else:\n            _sum += num\n        m = min(m, _sum)\n\
    \    return m\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4])\
    \ == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2,\
    \ -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz7mfp5rp.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpz7mfp5rp.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpz7mfp5rp.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    sum = 0\n    for n in nums:\n        sum += n\n        min_sum\
    \ = min(min_sum, sum)\n        sum = max(sum, 0)\n    return min_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvxgzsgd2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpvxgzsgd2.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpvxgzsgd2.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpawcf5cre.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpawcf5cre.py\", line 27,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpawcf5cre.py\", line\
    \ 13, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_subarray_sum\
    \ = float('inf')\n    current_subarray_sum = 0\n    for num in nums:\n       \
    \ current_subarray_sum += num\n        min_subarray_sum = min(min_subarray_sum,\
    \ current_subarray_sum)\n        current_subarray_sum = max(current_subarray_sum,\
    \ 0)\n    return min_subarray_sum\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpapsijw1s.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpapsijw1s.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpapsijw1s.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    current_min\
    \ = nums[0]\n    for num in nums:\n        if num < current_min:\n           \
    \ current_min = num\n    return current_min\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl8fhj4fd.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpl8fhj4fd.py\", line 32,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpl8fhj4fd.py\", line\
    \ 19, in check\n    assert candidate([-1, -2, -3]) == -6\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    best\
    \ = float('inf')\n    curr = 0\n    for num in nums:\n        curr += num\n  \
    \      best = min(best, curr)\n        curr = max(curr, 0)\n    return best\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjc3l069m.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpjc3l069m.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpjc3l069m.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = sys.maxsize\n    curr_sum = 0\n    for n in nums:\n        curr_sum += n\n\
    \        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum, 0)\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15ejhr8q.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp15ejhr8q.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp15ejhr8q.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmp15ejhr8q.py\"\
    , line 11, in minSubArraySum\n    min_sum = sys.maxsize\nNameError: name 'sys'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    sub_sum = 0\n    for num in nums:\n        sub_sum += num\n \
    \       if sub_sum < min_sum:\n            min_sum = sub_sum\n        if sub_sum\
    \ > 0:\n            sub_sum = 0\n    return min_sum\n\nassert minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\nassert minSubArraySum([-1, -2, -3]) == -6\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_seen\
    \ = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n\
    \            min_seen = min(min_seen, sum(nums[i:j + 1]))\n    return min_seen\n\
    \n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n   \
    \ assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10])\
    \ == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n   \
    \ assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return 0\n    mn = float('inf')\n    n = len(nums)\n    dp =\
    \ [0] * n\n    dp[0] = nums[0]\n    for i in range(1, n):\n        dp[i] = max(nums[i],\
    \ dp[i - 1] + nums[i])\n        mn = min(mn, dp[i])\n    return mn\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5gl7ands.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp5gl7ands.py\", line 37,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp5gl7ands.py\", line\
    \ 23, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    sum = 0\n    for num in nums:\n        sum += num\n    \
    \    min_sum = min(min_sum, sum)\n        sum = max(sum, 0)\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4h3vszr6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4h3vszr6.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp4h3vszr6.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return 0\n    res = 0\n    n = len(nums)\n    start = 0\n   \
    \ end = 0\n    while end < n:\n        res += nums[end]\n        while res < 0:\n\
    \            res -= nums[start]\n            start += 1\n        end += 1\n  \
    \  res = min(res, sum(nums[start:]))\n    return res if res > 0 else 0\n\ndef\
    \ check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsf2omvsa.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpsf2omvsa.py\", line 41,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpsf2omvsa.py\", line\
    \ 27, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # If\
    \ we have an array of all negative numbers then the largest negative number\n\
    \    # is the minimum subarray sum\n    largestNegative = max(nums)\n    if largestNegative\
    \ <= 0:\n        return largestNegative\n\n    # Largest subarray sum is 0 if\
    \ there are no positive numbers in the array\n    largestSubarraySum = 0\n   \
    \ for num in nums:\n        if num > 0:\n            largestSubarraySum += num\n\
    \n    # If the largest subarray sum is less than 0, then the array is all negative\n\
    \    # and we can return the largest negative number\n    if largestSubarraySum\
    \ <= 0:\n        return largestNegative\n\n    # If we have an array with only\
    \ positive numbers then the smallest subarray\n    # sum is the first element\
    \ in the array\n    smallestSubarraySum = nums[0]\n\n    # The larger the subarray\
    \ the closer the value will be to the largest\n    # subarray sum. We can use\
    \ this to generate an upper bound for our binary\n    # search\n    low = 0\n\
    \    high = largestSubarraySum + 1\n\n    # We only need to run binary search\
    \ log(n) times as the size of our search\n    # space will reduce by half each\
    \ time we run the loop\n    while low < high:\n        mid = (low + high) // 2\n\
    \        hasSubarrayWithSum = False\n\n        subarraySum = 0\n        for num\
    \ in nums:\n            # Check if we have a subarray with a sum that is less\
    \ than or equal\n            # to our target sum\n            subarraySum += num\n\
    \            if subarraySum >= mid:\n                hasSubarrayWithSum = True\n\
    \                break\n\n            # Reset the subarray sum if it goes below\
    \ 0\n            if subarraySum < 0:\n                subarraySum = 0\n\n    \
    \    # If we do have a subarray with a sum that is less than or equal to our\n\
    \        # target sum, then we can reduce our upper bound to be our target sum\n\
    \        if hasSubarrayWithSum:\n            high = mid\n        # If we don't\
    \ have a subarray with a sum that is less than or equal to\n        # our target\
    \ sum, then our upper bound is too small and we need to\n        # increase it\n\
    \        else:\n            low = mid +\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpuqab6ec2.py\", line 65\n    low = mid +\n            \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum +=\
    \ num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\ndef check(candidate):\n    assert candidate([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo8b1dldz.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpo8b1dldz.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpo8b1dldz.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum +=\
    \ num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkw2rnlg6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkw2rnlg6.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpkw2rnlg6.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    s =\
    \ 0\n    ans = float('inf')\n    for x in nums:\n        s += x\n        ans =\
    \ min(ans, s)\n        s = max(s, 0)\n    return ans\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpppmpgq1a.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpppmpgq1a.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpppmpgq1a.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum\
    \ = 0\n    currSum = 0\n    for num in nums:\n        currSum += num\n       \
    \ if currSum < minSum:\n            minSum = currSum\n    return minSum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp30ykvqf_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp30ykvqf_.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp30ykvqf_.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    curr_sum\
    \ = nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n      \
    \  curr_sum = min(nums[i], curr_sum + nums[i])\n        min_sum = min(min_sum,\
    \ curr_sum)\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum +=\
    \ num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\ndef check(candidate):\n    assert candidate([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_n9c6rz7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_n9c6rz7.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp_n9c6rz7.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def\
    \ minSubArraySum_logn(nums: List[int]) -> int:\n        \"\"\"\n        T(n) =\
    \ O(n*log(n))\n        S(n) = O(1)\n        \"\"\"\n        n = len(nums)\n  \
    \      # accumulative array\n        sum_ = 0\n        for i in range(n):\n  \
    \          sum_ += nums[i]\n            nums[i] = sum_\n        min_sum = min(nums)\n\
    \        if min_sum > 0:\n            return min_sum\n        for i in range(n):\n\
    \            for j in range(i+1, n):\n                min_sum = min(min_sum, nums[j]\
    \ - nums[i])\n        return min_sum\n\n    def minSubArraySum_n(nums: List[int])\
    \ -> int:\n        \"\"\"\n        T(n) = O(n)\n        S(n) = O(1)\n        \"\
    \"\"\n        n = len(nums)\n        min_sum = nums[0]\n        sum_ = nums[0]\n\
    \        for i in range(1, n):\n            sum_ = max(nums[i], sum_ + nums[i])\n\
    \            min_sum = min(min_sum, sum_)\n        return min_sum\n\n    return\
    \ minSubArraySum_n(nums)\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsnz_9ano.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpsnz_9ano.py\", line 60,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpsnz_9ano.py\", line\
    \ 46, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    _sum\
    \ = 0\n    min_sum = 0\n    for num in nums:\n        _sum += num\n        if\
    \ _sum < min_sum:\n            min_sum = _sum\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_g5y270k.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_g5y270k.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp_g5y270k.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    cumSum\
    \ = [0] * len(nums)\n    cumSum[0] = nums[0]\n    for i in range(1, len(nums)):\n\
    \        cumSum[i] = cumSum[i - 1] + nums[i]\n    minSum = cumSum[0]\n    for\
    \ i in range(len(nums)):\n        minSum = min(minSum, cumSum[i])\n        for\
    \ j in range(i + 1, len(nums)):\n            minSum = min(minSum, cumSum[j] -\
    \ cumSum[i])\n    return minSum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    curr_min\
    \ = float('inf')\n    curr_sum = 0\n    for i in range(len(nums)):\n        curr_sum\
    \ += nums[i]\n        curr_min = min(curr_min, curr_sum)\n        if curr_sum\
    \ > 0:\n            curr_sum = 0\n    return curr_min\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    N =\
    \ len(nums)\n    # Keep track of the sum of the current array\n    current_sum\
    \ = 0\n    # Keep track of the minimum array sum\n    min_sum = 0\n    # Keep\
    \ track of the array index of the minimum subarray\n    min_index = 0\n    # Keep\
    \ track of the array index where the current subarray begins\n    current_index\
    \ = 0\n    for i in range(N):\n        current_sum += nums[i]\n        if current_sum\
    \ < min_sum:\n            min_sum = current_sum\n            min_index = current_index\n\
    \        elif current_sum > 0:\n            current_sum = 0\n            current_index\
    \ = i + 1\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcl8jwdck.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpcl8jwdck.py\", line 45,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpcl8jwdck.py\", line\
    \ 31, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    max_sum = 0\n    for num in nums:\n        max_sum += num\n \
    \       if num < min_sum:\n            min_sum = num\n        if max_sum < min_sum:\n\
    \            min_sum = max_sum\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgtyut2oa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpgtyut2oa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpgtyut2oa.py\", line\
    \ 28, in check\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    window_sum\
    \ = min_sum = nums[0]\n    for i in range(1, len(nums)):\n        window_sum =\
    \ min(nums[i], window_sum + nums[i])\n        min_sum = min(min_sum, window_sum)\n\
    \    return min_sum\n\nprint(minSubArraySum([-1, -2, -3]))\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "-6\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Edge\
    \ case\n    if len(nums) == 0:\n        return 0\n    # Set the minimum sum at\
    \ the first element\n    min_sum = nums[0]\n    # Set the current sum at the first\
    \ element\n    current_sum = nums[0]\n    # Keep track of the min of the min sum\n\
    \    min_sum_min = min(min_sum, current_sum)\n    # Loop through the rest of the\
    \ elements\n    for i in range(1, len(nums)):\n        # If the current sum is\
    \ greater than the current element\n        if current_sum > nums[i]:\n      \
    \      # Set the current sum to the current element\n            current_sum =\
    \ nums[i]\n        # Add the current element to the current sum\n        current_sum\
    \ += nums[i]\n        # Update the minimum sum if the current sum is less than\
    \ the minimum sum\n        if current_sum < min_sum:\n            min_sum = current_sum\n\
    \        # Update the min of the min sum if the current sum is less than the min\
    \ of the min sum\n        if current_sum < min_sum_min:\n            min_sum_min\
    \ = current_sum\n    # Return the min of the min sum\n    return min_sum_min\n\
    \nnums = [2, 3, 4, 1, 2, 4]\n\nnums = [-1, -2, -3]\n\nprint(minSubArraySum(nums))\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: "-7\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppdx1m161.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmppdx1m161.py\", line 57,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmppdx1m161.py\", line\
    \ 43, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    sum = 0\n    for n in nums:\n        sum += n\n        min_sum\
    \ = min(min_sum, sum)\n        sum = max(sum, 0)\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcn2h4onn.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcn2h4onn.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpcn2h4onn.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    curr_sum\
    \ = nums[0]\n    max_sum = nums[0]\n    for n in nums[1:]:\n        curr_sum =\
    \ max(n, curr_sum + n)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj3m2y_w1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpj3m2y_w1.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpj3m2y_w1.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return\
    \ min(accumulate(nums))\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxrbo_x4j.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxrbo_x4j.py\", line 28,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpxrbo_x4j.py\", line\
    \ 14, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmpxrbo_x4j.py\"\
    , line 11, in minSubArraySum\n    return min(accumulate(nums))\nNameError: name\
    \ 'accumulate' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n =\
    \ len(nums)\n    total = cum_sum = 0\n    if len(nums) == 1:\n        return nums[0]\n\
    \    for i in range(n):\n        cum_sum += nums[i]\n        if cum_sum > 0:\n\
    \            cum_sum = 0\n        if total > cum_sum:\n            total = cum_sum\n\
    \    return total\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1,\
    \ -2, -3]))\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "0\n-6\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyhsno3jm.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpyhsno3jm.py\", line 40,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpyhsno3jm.py\", line\
    \ 26, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    total_min\
    \ = float('inf')\n    curr_min = float('inf')\n    for num in nums:\n        curr_min\
    \ = min(curr_min, curr_min + num)\n        total_min = min(total_min, curr_min)\n\
    \    return total_min\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1,\
    \ -2, -3]))\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "inf\ninf\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_n0rqooe.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_n0rqooe.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp_n0rqooe.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return 0\n    start = 0\n    result = nums[0]\n    total = nums[0]\n\
    \    for i in range(1, len(nums)):\n        total += nums[i]\n        if total\
    \ < result:\n            result = total\n        if total > 0:\n            total\
    \ = 0\n    return result\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoz3fzld9.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpoz3fzld9.py\", line 39,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpoz3fzld9.py\", line\
    \ 31, in check\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n\
    \            total = sum(nums[i:j+1])\n            if total < min_sum:\n     \
    \           min_sum = total\n    return min_sum\n\ndef check(candidate):\n   \
    \ assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3])\
    \ == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = 0\n    sum = 0\n    for item in nums:\n        sum += item\n        if min_sum\
    \ > sum:\n            min_sum = sum\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcoe2199j.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcoe2199j.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpcoe2199j.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    #Initialise\
    \ variables:\n    start = 0\n    end = 0\n    current_sum = 0\n    minimum_sum\
    \ = float('inf')\n    while end < len(nums):\n        #Expand the window as long\
    \ as possible while current_sum <= 0\n        while end < len(nums) and current_sum\
    \ <= 0:\n            current_sum += nums[end]\n            end += 1\n        #If\
    \ the current_sum has become positive, start contracting the window until\n  \
    \      #the current_sum becomes negative again\n        while start < end and\
    \ current_sum > 0:\n            current_sum -= nums[start]\n            start\
    \ += 1\n        #Check if the current_sum is the minimum_sum\n        if current_sum\
    \ < minimum_sum:\n            minimum_sum = current_sum\n    return minimum_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypn6nq_8.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpypn6nq_8.py\", line 46,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpypn6nq_8.py\", line\
    \ 32, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return 0\n    min_sum = sum(nums)\n    curr_sum = 0\n    for\
    \ num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n\
    \        curr_sum = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphdv4n1n8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmphdv4n1n8.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmphdv4n1n8.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Init\
    \ the min_sum to be the sum of all the negative numbers\n    min_sum = sum([i\
    \ for i in nums if i < 0])\n\n    curr_sum = 0\n    for n in nums:\n        curr_sum\
    \ += n\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n     \
    \   elif curr_sum > 0:\n            curr_sum = 0\n\n    return min_sum\n\ndef\
    \ check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg8yrn2xm.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpg8yrn2xm.py\", line 39,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpg8yrn2xm.py\", line\
    \ 25, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    i =\
    \ 0\n    min_sum = float('inf')\n    current_sum = 0\n    start = 0\n    end =\
    \ 0\n    while i < len(nums):\n        current_sum += nums[i]\n        if current_sum\
    \ < min_sum:\n            min_sum = current_sum\n            start = i\n     \
    \       end = i\n        i += 1\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_j536j2.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpi_j536j2.py\", line 40,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpi_j536j2.py\", line\
    \ 26, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    curr_sum = nums[0]\n    for x in nums[1:]:\n        curr_sum\
    \ = min(x, curr_sum + x)\n        min_sum = min(min_sum, curr_sum)\n    return\
    \ min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    curr\
    \ = float('inf')\n    ans = float('inf')\n    for i in nums:\n        curr = min(i,\
    \ curr + i)\n        ans = min(ans, curr)\n    return ans\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n  \
    \  curr_sum = 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n\
    \        curr_sum += nums[i]\n        min_sum = min(min_sum, curr_sum)\n     \
    \   if curr_sum < 0:\n            curr_sum = 0\n    return min_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7a05szs7.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp7a05szs7.py\", line 38,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp7a05szs7.py\", line\
    \ 24, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n =\
    \ len(nums)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return\
    \ nums[0]\n    else:\n        for i in range(1, n):\n            nums[i] = min(nums[i],\
    \ nums[i - 1] + nums[i])\n        return min(nums)\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    curr_sum\
    \ = nums[0]\n    min_sum = nums[0]\n    for n in nums[1:]:\n        curr_sum =\
    \ min(n, curr_sum + n)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum\n\
    \nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3]))\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: "1\n-6\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    for i in range(len(nums)):\n        curr_sum = 0\n        for\
    \ j in range(i, len(nums)):\n            curr_sum += nums[j]\n            min_sum\
    \ = min(min_sum, curr_sum)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Time\
    \ Complexity: O(n)\n    # Space Complexity: O(1)\n    prev_min = 0\n    curr_min\
    \ = 0\n    start = 0\n    end = 0\n    for i in range(len(nums)):\n        prev_min\
    \ += nums[i]\n        if curr_min < prev_min:\n            curr_min = prev_min\n\
    \            start = i\n        if prev_min > 0:\n            prev_min = 0\n \
    \           end = i\n    print(nums[start:end+1])\n    return curr_min\n\n\ndef\
    \ check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: "[4, 1, 2, 4]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7rkc6ma.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpb7rkc6ma.py\", line 44,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpb7rkc6ma.py\", line\
    \ 30, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Kadane's\
    \ algorithm\n    max_so_far = max_ending_here = nums[0]\n    for num in nums[1:]:\n\
    \        max_ending_here = max(num, max_ending_here + num)\n        max_so_far\
    \ = max(max_so_far, max_ending_here)\n    return max_so_far\n\nprint(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3]))\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "16\n-1\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpylgoqebi.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpylgoqebi.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpylgoqebi.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)\
    \ == 0:\n        return 0\n    minimum = nums[0]\n    current = nums[0]\n    for\
    \ num in nums[1:]:\n        if current + num < num:\n            current = num\n\
    \        else:\n            current += num\n        if current < minimum:\n  \
    \          minimum = current\n    return minimum\n\ndef check(candidate):\n  \
    \  assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3])\
    \ == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6f3fx3sf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp6f3fx3sf.py\", line 39,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp6f3fx3sf.py\", line\
    \ 25, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = 99999999999999999\n    current_sum = 0\n    for x in nums:\n        current_sum\
    \ += x\n        if current_sum < min_sum:\n            min_sum = current_sum\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2bh7cefn.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp2bh7cefn.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp2bh7cefn.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # This\
    \ is a version of Kadane's algorithm\n    # https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/\n\
    \    # The idea is to find the minimum sum in the array\n    # by reducing to\
    \ a single value\n    # by finding the maximum sum of contiguous elements\n  \
    \  # iterating from left to right\n    # loop from 1 to n-1, as the min subarray\
    \ will be of size 1\n    # current maximum sum is the previous maximum sum plus\n\
    \    # the new element\n    # if the current maximum sum is negative, we set\n\
    \    # the sum to 0\n    # the minimum sum is the minimum of the minimum sum\n\
    \    # and the current maximum sum\n    # the minimum sum can be any subarray,\
    \ so we can iterate\n    # through the array\n    min_sum = float('inf')\n   \
    \ curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum\
    \ = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum, 0)\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3d8hmkh9.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp3d8hmkh9.py\", line 49,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp3d8hmkh9.py\", line\
    \ 35, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)\
    \ < 1:\n        return 0\n    min_sum = sum(nums)\n    for start in range(len(nums)):\n\
    \        for end in range(start + 1, len(nums) + 1):\n            min_sum = min(min_sum,\
    \ sum(nums[start:end]))\n    return min_sum\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpghocuj7f.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpghocuj7f.py\", line 28,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpghocuj7f.py\", line\
    \ 14, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    #Edge\
    \ case\n    if nums is None or len(nums) == 0:\n        return None\n    best_sum\
    \ = float('inf')\n    sum = 0\n    for i in range(len(nums)):\n        sum +=\
    \ nums[i]\n        best_sum = min(best_sum, sum)\n        sum = max(sum, 0)\n\
    \    return best_sum\n\nminSubArraySum([2, 3, 4, 1, 2, 4])\nminSubArraySum([-1,\
    \ -2, -3])\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4cjjb3g4.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4cjjb3g4.py\", line 39,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp4cjjb3g4.py\", line\
    \ 25, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n =\
    \ len(nums)\n    result = sys.maxsize\n    for i in range(n):\n        sum = 0\n\
    \        for j in range(i, n):\n            sum += nums[j]\n            result\
    \ = min(result, sum)\n    return result\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplutzruxx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmplutzruxx.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmplutzruxx.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmplutzruxx.py\"\
    , line 12, in minSubArraySum\n    result = sys.maxsize\nNameError: name 'sys'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)\
    \ == 0:\n        return 0\n    min_subarray_sum = nums[0]\n    current_subarray_sum\
    \ = nums[0]\n    for i in range(1, len(nums)):\n        current_subarray_sum =\
    \ max(nums[i], current_subarray_sum + nums[i])\n        min_subarray_sum = min(min_subarray_sum,\
    \ current_subarray_sum)\n    return min_subarray_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq3d6ztrm.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpq3d6ztrm.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpq3d6ztrm.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    total\
    \ = 0\n    min_sum = float('inf')\n    for num in nums:\n        total += num\n\
    \        min_sum = min(min_sum, total)\n        total = max(total, 0)\n    return\
    \ min_sum\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3x483m7i.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3x483m7i.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp3x483m7i.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return 0\n    res = nums[0]\n    sum = 0\n    for i in range(len(nums)):\n\
    \        sum += nums[i]\n        res = min(res, sum)\n        if sum > 0:\n  \
    \          sum = 0\n    return res\n    \n    # print(nums)\n    # print(f'min\
    \ {min(nums)}')\n    # print(f'sum {sum(nums)}')\n    # return min(nums) if min(nums)\
    \ > 0 else sum(nums)\n\ndef check(candidate):\n    assert candidate([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    curr_sum = 0\n    for n in nums:\n        curr_sum += n\n\
    \        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum, 0)\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4zm_ecmg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4zm_ecmg.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp4zm_ecmg.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum\
    \ = nums[0]\n    currSum = nums[0]\n    for num in nums[1:]:\n        currSum\
    \ = min(currSum + num, num)\n        minSum = min(minSum, currSum)\n    return\
    \ minSum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    current_sum = 0\n    for i in range(len(nums)):\n        current_sum\
    \ += nums[i]\n        if current_sum < min_sum:\n            min_sum = current_sum\n\
    \        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    sum = 0\n    for i in range(len(nums)):\n        sum +=\
    \ nums[i]\n        min_sum = min(min_sum, sum)\n        if sum < 0:\n        \
    \    sum = 0\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0bwztx9t.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0bwztx9t.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp0bwztx9t.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    for i in range(1, len(nums)):\n        nums[i] = min(nums[i],\
    \ nums[i] + nums[i - 1])\n        min_sum = min(min_sum, nums[i])\n    return\
    \ min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for\
    \ i in range(1, len(nums)):\n        nums[i] = min(nums[i], nums[i] + nums[i -\
    \ 1])\n    return min(nums)\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum\
    \ = nums[0]\n    currSum = 0\n    for i in range(len(nums)):\n        currSum\
    \ += nums[i]\n        if currSum < minSum:\n            minSum = currSum\n   \
    \     if currSum > 0:\n            currSum = 0\n    return minSum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)\
    \ == 0:\n        return 0\n    min_sum = nums[0]\n    curr_sum = nums[0]\n   \
    \ for i in range(1, len(nums)):\n        curr_sum = min(nums[i], curr_sum + nums[i])\n\
    \        min_sum = min(min_sum, curr_sum)\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Start\
    \ at i = 0.\n    # Keep track of total values so far, as well as min value.\n\
    \    # Extend to i = 1.\n    # If the new value is less than the previous min,\
    \ assign it to min.\n    # Extend to i = 2.\n    # If the new value is less than\
    \ the previous min, assign it to min.\n    # Repeat until i = len(nums) - 1.\n\
    \    min_sum = float('inf')\n    total = 0\n    for num in nums:\n        total\
    \ += num\n        min_sum = min(min_sum, total)\n        total = max(total, 0)\n\
    \    return min_sum\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2dimq6_j.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp2dimq6_j.py\", line 40,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp2dimq6_j.py\", line\
    \ 26, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = min(nums)\n    if min_sum > 0:\n        return min_sum\n    min_sum = sys.maxsize\n\
    \    sum = 0\n    for num in nums:\n        sum += num\n        if sum < min_sum:\n\
    \            min_sum = sum\n        if sum > 0:\n            sum = 0\n    return\
    \ min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpehj5pry7.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpehj5pry7.py\", line 39,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpehj5pry7.py\", line\
    \ 26, in check\n    assert candidate([-1, -2, -3]) == -6\n  File \"/tmp/tmpehj5pry7.py\"\
    , line 14, in minSubArraySum\n    min_sum = sys.maxsize\nNameError: name 'sys'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)\
    \ + 1):\n            sub_arr = nums[i:j]\n            min_sum = min(min_sum, sum(sub_arr))\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpapy3bas1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpapy3bas1.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpapy3bas1.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = 0\n    while len(nums) != 0:\n        nums.sort()\n        min_sum += nums.pop(0)\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0lhng894.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0lhng894.py\", line 32,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp0lhng894.py\", line\
    \ 18, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    curr_min\
    \ = nums[0]\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n\
    \        if curr_sum < curr_min:\n            curr_min = curr_sum\n        if\
    \ curr_sum > 0:\n            curr_sum = 0\n    return curr_min\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    best\
    \ = nums[0]\n    current = 0\n    for num in nums:\n        current += num\n \
    \       if current < best:\n            best = current\n        if current > 0:\n\
    \            current = 0\n    return best\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n =\
    \ len(nums)\n    if n == 0:\n        return 0\n    res = nums[0]\n    sum = 0\n\
    \    for num in nums:\n        sum += num\n        res = min(res, sum)\n     \
    \   if sum > 0:\n            sum = 0\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyphtt0w2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpyphtt0w2.py\", line 28,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpyphtt0w2.py\", line\
    \ 14, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkupf8p8c.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpkupf8p8c.py\", line 27,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpkupf8p8c.py\", line\
    \ 13, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Kadane's\
    \ algorithm\n    if not nums:\n        return 0\n    best = max_end = 0\n    for\
    \ num in nums:\n        max_end = max(max_end + num, 0)\n        best = min(best,\
    \ max_end)\n    return best\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9_lqrya7.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9_lqrya7.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp9_lqrya7.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    sum = nums[0]\n    i = 1\n    while i < len(nums):\n        if\
    \ sum < 0:\n            sum = nums[i]\n        else:\n            sum += nums[i]\n\
    \        if sum < min_sum:\n            min_sum = sum\n        i += 1\n    return\
    \ min_sum\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1,\
    \ -2, -3]))\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "2\n-3\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmag8_mz6.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpmag8_mz6.py\", line 41,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpmag8_mz6.py\", line\
    \ 27, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    max_sum = 0\n    for num in nums:\n        max_sum += num\n \
    \       if max_sum < min_sum:\n            min_sum = max_sum\n        if max_sum\
    \ > 0:\n            max_sum = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum +=\
    \ num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpubngcnw0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpubngcnw0.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpubngcnw0.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    smallest_sum\
    \ = sum(nums)\n    current_sum = 0\n    for number in nums:\n        current_sum\
    \ += number\n        if current_sum < smallest_sum:\n            smallest_sum\
    \ = current_sum\n        if current_sum > 0:\n            current_sum = 0\n  \
    \  return smallest_sum\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(minSubArraySum(nums))\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: "1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    cum_sum\
    \ = [0]\n    for i in range(len(nums)):\n        cum_sum.append(cum_sum[-1] +\
    \ nums[i])\n    min_sum = float('inf')\n    for i in range(len(cum_sum)):\n  \
    \      for j in range(i + 1, len(cum_sum)):\n            min_sum = min(min_sum,\
    \ cum_sum[j] - cum_sum[i])\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)\
    \ == 0:\n        return 0\n    min_sum = 0\n    curr_sum = 0\n    for num in nums:\n\
    \        curr_sum += num\n        if curr_sum < min_sum:\n            min_sum\
    \ = curr_sum\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ea8oi06.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp0ea8oi06.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp0ea8oi06.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums\
    \ is None or len(nums) == 0:\n        return 0\n    result = nums[0]\n    cur_sum\
    \ = 0\n    for num in nums:\n        cur_sum += num\n        result = min(result,\
    \ cur_sum)\n        if cur_sum > 0:\n            cur_sum = 0\n    return result\n\
    \nprint(minSubArraySum([-1, -2, -3]))\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "-6\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    sub_sum = 0\n    for n in nums:\n        sub_sum += n\n     \
    \   if sub_sum < min_sum:\n            min_sum = sub_sum\n        if sub_sum >\
    \ 0:\n            sub_sum = 0\n    return min_sum\n\ndef check(candidate):\n \
    \   assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3])\
    \ == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    res\
    \ = float('inf')\n    curr = 0\n    for i in range(len(nums)):\n        curr +=\
    \ nums[i]\n        res = min(res, curr)\n        curr = max(curr, 0)\n    return\
    \ res\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n\
    \    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2,\
    \ -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3cof_gi_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3cof_gi_.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp3cof_gi_.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    ret\
    \ = float('inf')\n    cur = 0\n    for x in nums:\n        cur += x\n        ret\
    \ = min(ret, cur)\n        cur = max(cur, 0)\n    return ret\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2gqiw522.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp2gqiw522.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp2gqiw522.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return 0\n    min_sum = 0\n    current_sum = 0\n    for num in\
    \ nums:\n        current_sum += num\n        if current_sum < min_sum:\n     \
    \       min_sum = current_sum\n    return min_sum\ndef check(candidate):\n   \
    \ assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3])\
    \ == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwo8ykbgp.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwo8ykbgp.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpwo8ykbgp.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n =\
    \ len(nums)\n    dp = [0] * n\n    dp[0] = nums[0]\n    res = nums[0]\n    for\
    \ i in range(1, n):\n        if dp[i - 1] > 0:\n            dp[i] = nums[i]\n\
    \        else:\n            dp[i] = dp[i - 1] + nums[i]\n        res = min(res,\
    \ dp[i])\n    return res\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    l =\
    \ len(nums)\n    res = float('inf')\n    for i in range(l):\n        for j in\
    \ range(i+1, l+1):\n            res = min(res, sum(nums[i:j]))\n    return res\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)\
    \ == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n  \
    \  min_sum = nums[0]\n    for i in range(1, len(nums)):\n        nums[i] = min(nums[i],\
    \ nums[i-1] + nums[i])\n        min_sum = min(min_sum, nums[i])\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum +=\
    \ num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\ndef check(candidate):\n    assert candidate([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7csmo2wc.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7csmo2wc.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp7csmo2wc.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum\
    \ = sum(nums)\n    currentSum = 0\n    for num in nums:\n        currentSum +=\
    \ num\n        if currentSum < minSum:\n            minSum = currentSum\n    \
    \    if currentSum > 0:\n            currentSum = 0\n    return minSum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return\
    \ min(accumulate(nums, min))\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparx3r1k3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmparx3r1k3.py\", line 28,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmparx3r1k3.py\", line\
    \ 14, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmparx3r1k3.py\"\
    , line 11, in minSubArraySum\n    return min(accumulate(nums, min))\nNameError:\
    \ name 'accumulate' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    min_sum_so_far = 0\n    for num in nums:\n        min_sum_so_far\
    \ += num\n        min_sum = min(min_sum, min_sum_so_far)\n        min_sum_so_far\
    \ = min(min_sum_so_far, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # sum\
    \ = nums[0]\n    # for i in range(1, len(nums)):\n    #     if sum > 0:\n    #\
    \         sum = nums[i]\n    #     else:\n    #         sum += nums[i]\n    #\
    \     if sum < nums[i]:\n    #         nums[i] = sum\n    # return nums[i]\n \
    \   min_sum = nums[0]\n    sum = 0\n    for i in range(len(nums)):\n        sum\
    \ += nums[i]\n        if sum < min_sum:\n            min_sum = sum\n        if\
    \ sum > 0:\n            sum = 0\n    return min_sum\n\nprint(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3]))\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "1\n-6\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initialize\
    \ the minimum sum to infinity and the current sum to zero\n    min_sum = float('inf')\n\
    \    curr_sum = 0\n\n    # Iterate over the list\n    for x in nums:\n       \
    \ # Add the current element to the current sum\n        curr_sum += x\n\n    \
    \    # If the current sum is less than the minimum sum, set the minimum sum to\
    \ the\n        # current sum\n        if curr_sum < min_sum:\n            min_sum\
    \ = curr_sum\n\n        # If the current sum goes below zero, set the current\
    \ sum to zero\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return\
    \ min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp530ub8a2.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp530ub8a2.py\", line 46,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp530ub8a2.py\", line\
    \ 32, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    mini\
    \ = nums[0]\n    sum = 0\n    for n in nums:\n        sum += n\n        mini =\
    \ min(mini, sum)\n        if sum > 0:\n            sum = 0\n    return mini\n\n\
    assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nassert minSubArraySum([-1, -2,\
    \ -3]) == -6\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4])\
    \ == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2,\
    \ -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums.sort()\n\
    \    return nums[0]\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9y9gq7f6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9y9gq7f6.py\", line 28,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp9y9gq7f6.py\", line\
    \ 15, in check\n    assert candidate([-1, -2, -3]) == -6\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return 0\n    mins = nums[0]\n    minsofar = nums[0]\n    for\
    \ i in range(1, len(nums)):\n        minsofar = min(nums[i], minsofar + nums[i])\n\
    \        mins = min(mins, minsofar)\n    return mins\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    cum_sum\
    \ = 0\n    min_sum = 0\n    for n in nums:\n        cum_sum += n\n        min_sum\
    \ = min(min_sum, cum_sum)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkwhqmswb.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkwhqmswb.py\", line 33,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpkwhqmswb.py\", line\
    \ 19, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)\
    \ == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n  \
    \  min_sum = nums[0]\n    i = 0\n    j = 1\n    nums_sum = nums[0]\n    while\
    \ j < len(nums):\n        nums_sum += nums[j]\n        while i < j and nums_sum\
    \ > 0:\n            nums_sum -= nums[i]\n            i += 1\n        if i == j:\n\
    \            if nums_sum < min_sum:\n                min_sum = nums_sum\n    \
    \    else:\n            if nums_sum - nums[i] < min_sum:\n                min_sum\
    \ = nums_sum - nums[i]\n        j += 1\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd33zeezn.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpd33zeezn.py\", line 48,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpd33zeezn.py\", line\
    \ 35, in check\n    assert candidate([-1, -2, -3]) == -6\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    mn,\
    \ sm = nums[0], nums[0]\n    for i in range(1, len(nums)):\n        sm = min(sm\
    \ + nums[i], nums[i])\n        mn = min(mn, sm)\n    return mn\n    \ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    res\
    \ = float('inf')\n    curr = 0\n    for i in range(len(nums)):\n        curr +=\
    \ nums[i]\n        res = min(res, curr)\n        curr = max(curr, 0)\n    return\
    \ res\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n\
    \    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2,\
    \ -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8326ngp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv8326ngp.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpv8326ngp.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # T.C.:\
    \ O(n), where n is the length of nums\n    # S.C.: O(1)\n    # Intuition:\n  \
    \  # 1. We start at the right, by finding the minimum\n    # 2. If a num is greater\
    \ than or equal to the minimum, then that is the new minimum\n    # 3. If it is\
    \ less than the minimum, add it to the minimum, and repeat 2\n    # This stops\
    \ when we encounter a num that is less than the sum of the previous minimum\n\
    \    # and num, and the sum is greater than or equal to zero\n    # Then we start\
    \ again by going to the left\n    # 4. If a num is greater than or equal to the\
    \ minimum, then that is the new minimum\n    # 5. If it is less than the minimum,\
    \ add it to the minimum, and repeat 4\n    # 6. This stops when we reach the left\
    \ end of the array\n    # 7. Now we return the final minimum\n    minimum = float('inf')\n\
    \    # Start at the right\n    for i in range(len(nums) - 1, -1, -1):\n      \
    \  if nums[i] >= minimum:\n            minimum = nums[i]\n        else:\n    \
    \        minimum += nums[i]\n            if minimum >= 0:\n                break\n\
    \    # Start at the left\n    for i in range(len(nums)):\n        if nums[i] >=\
    \ minimum:\n            minimum = nums[i]\n        else:\n            minimum\
    \ += nums[i]\n    return minimum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxmopc_c.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmpyxmopc_c.py\", line 56,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpyxmopc_c.py\", line\
    \ 42, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    _min\
    \ = nums[0]\n    current_sum = 0\n    for i in range(len(nums)):\n        current_sum\
    \ += nums[i]\n        if current_sum < _min:\n            _min = current_sum\n\
    \        if current_sum > 0:\n            current_sum = 0\n    return _min\n\n\
    print(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3]))\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: "1\n-6\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n =\
    \ len(nums)\n    curr_sum = nums[0]\n    min_sum = nums[0]\n    for i in range(1,\
    \ n):\n        curr_sum = min(nums[i], curr_sum + nums[i])\n        min_sum =\
    \ min(min_sum, curr_sum)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not\
    \ nums:\n        return None\n    curr_min = 0\n    min_sum = nums[0]\n    for\
    \ num in nums:\n        curr_min = min(curr_min + num, num)\n        min_sum =\
    \ min(min_sum, curr_min)\n    return min_sum\n\nassert minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\nassert minSubArraySum([-1, -2, -3]) == -6\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    curr_sum = 0\n    for n in nums:\n        curr_sum += n\n   \
    \     if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum\
    \ > 0:\n            curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n =\
    \ len(nums)\n    mn = float('inf')\n    cur = 0\n    for i in range(n):\n    \
    \    cur += nums[i]\n        mn = min(mn, cur)\n        if cur > 0:\n        \
    \    cur = 0\n    return mn\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # My\
    \ initial solution\n    # sum_so_far = 0\n    # min_sum = sum(nums)\n    # for\
    \ i in range(len(nums)):\n    #     sum_so_far += nums[i]\n    #     if sum_so_far\
    \ < min_sum:\n    #         min_sum = sum_so_far\n    #     for j in range(i +\
    \ 1, len(nums)):\n    #         sum_so_far += nums[j]\n    #         if sum_so_far\
    \ < min_sum:\n    #             min_sum = sum_so_far\n    # return min_sum\n\n\
    \    # O(n) solution\n    min_sum = sum(nums)\n    sum_so_far = 0\n    for num\
    \ in nums:\n        sum_so_far += num\n        if sum_so_far < min_sum:\n    \
    \        min_sum = sum_so_far\n        if sum_so_far > 0:\n            sum_so_far\
    \ = 0\n    return min_sum\n\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    r =\
    \ float('inf')\n    s = 0\n    for i in nums:\n        s += i\n        r = min(r,\
    \ s)\n        s = max(s, 0)\n    return r\n\nprint(minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]))\nprint(minSubArraySum([-1, -2, -3]))\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: "2\n-3\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyr_0i5sp.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpyr_0i5sp.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpyr_0i5sp.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = float('inf')\n    sub_sum = 0\n    for x in nums:\n        sub_sum += x\n\
    \        min_sum = min(min_sum, sub_sum)\n        sub_sum = max(sub_sum, 0)\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ut3g6e1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7ut3g6e1.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp7ut3g6e1.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    ans\
    \ = float('inf')\n    sums = 0\n    for num in nums:\n        sums += num\n  \
    \      ans = min(ans, sums)\n        sums = max(sums, 0)\n    return ans\n\ndef\
    \ check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpci5v97z4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpci5v97z4.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpci5v97z4.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    sub_sum = 0\n    for i in range(len(nums)):\n        if sub_sum\
    \ < 0:\n            sub_sum = 0\n        sub_sum += nums[i]\n        min_sum =\
    \ min(min_sum, sub_sum)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0l1x_3zv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0l1x_3zv.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp0l1x_3zv.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    curr_sum\
    \ = 0\n    min_sum = sys.maxsize\n    for num in nums:\n        curr_sum += num\n\
    \        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n        \
    \    curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_esjkqd7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_esjkqd7.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp_esjkqd7.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmp_esjkqd7.py\"\
    , line 12, in minSubArraySum\n    min_sum = sys.maxsize\nNameError: name 'sys'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums\
    \ is None or len(nums) == 0:\n        return 0\n    minSum = nums[0]\n    currentSum\
    \ = 0\n    for i in range(len(nums)):\n        currentSum += nums[i]\n       \
    \ if currentSum < minSum:\n            minSum = currentSum\n        if currentSum\
    \ > 0:\n            currentSum = 0\n    return minSum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum\
    \ = nums[0]\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n\
    \        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n        \
    \    curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
