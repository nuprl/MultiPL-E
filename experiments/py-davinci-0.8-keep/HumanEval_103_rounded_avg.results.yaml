name: HumanEval_103_rounded_avg
language: py
results:
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((n + m) / 2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return \"0b\" + str(bin(int(round((n + m) / 2))))[2:]\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    x = n + m\n    y = 2\n\
    \    if n > m:\n        return -1\n    while x // y > 2:\n        y *= 2\n   \
    \ avg = x // y\n    if avg == 2:\n        avg = 3\n    return bin(avg)\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12hhthds.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp12hhthds.py\", line 39,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp12hhthds.py\", line\
    \ 25, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # your code here\n \
    \   s = 0\n    if n > m:\n        return -1\n    for i in range(n, m+1):\n   \
    \     s = s + i\n    s = s // (m - n + 1)\n    return bin(s)\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo4mu0hav.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpo4mu0hav.py\", line 37,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpo4mu0hav.py\", line\
    \ 27, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    value = round(((n + m) / 2))\n    return f\"0b{value:b}\"\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((n + m) / 2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    average = int((n + m)\
    \ / 2)\n\n    if n > m:\n        return -1\n    else:\n        bin_average = bin(average)[2:]\n\
    \        return f\"0b{bin_average}\"\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_8215nk.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpo_8215nk.py\", line 36,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpo_8215nk.py\", line\
    \ 26, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    import math\n    if\
    \ n > m:\n        return -1\n    else:\n        return math.floor(((n + m) / 2))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoy2q1yux.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpoy2q1yux.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpoy2q1yux.py\", line\
    \ 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return f\"0b{bin(round((sum(range(n, m+1))/(m+1-n)))).replace('0b',\
    \ '')}\"\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10,\
    \ 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # write your solution\
    \ here\n    pass\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpudac2kag.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpudac2kag.py\", line 32,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpudac2kag.py\", line\
    \ 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb0lfpqye.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpb0lfpqye.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpb0lfpqye.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # your code here\n \
    \   avg = (n + m) / 2\n    return bin(round(avg)) if n <= m else -1\n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    average = int(math.ceil((n + m) / 2))\n    return bin(average)\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu4liq09w.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu4liq09w.py\", line 33,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpu4liq09w.py\", line\
    \ 19, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpu4liq09w.py\"\
    , line 16, in rounded_avg\n    average = int(math.ceil((n + m) / 2))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return -1 if n > m else\
    \ f\"0b{sum(range(n, m+1))//(m+1-n):b}\"\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4miic8yt.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4miic8yt.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp4miic8yt.py\", line\
    \ 25, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    decimal_sum = (m + n) * (m - n + 1) / 2\n    decimal_avg = decimal_sum\
    \ / (m - n + 1)\n    return bin(round(decimal_avg))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((n + m) / 2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # your code here\n \
    \   if n>m:\n        return -1\n    total = 0\n    count = 0\n    for x in range(n,m+1):\n\
    \        total+=x\n        count+=1\n    avg = total/count\n    rounded = round(avg)\n\
    \    binary = bin(rounded)\n    return binary\n\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    # [n, m] inclusive\n    lst = list(range(n, m + 1))\n    avg = sum(lst)\
    \ / len(lst)\n    rounded = round(avg)\n    return f\"0b{rounded:b}\"\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\n\nprint(rounded_avg(10, 20))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b1111\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return 0\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmput1s_t03.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmput1s_t03.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmput1s_t03.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpurmqrwrc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpurmqrwrc.py\", line 31,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpurmqrwrc.py\", line\
    \ 17, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        integer = int(round((m + n) / 2))\n        return \"\
    0b\" + bin(integer)[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\ntest.describe(\"\
    rounded_avg\")\ntest.it(\"should work for some examples\")\ntest.assert_equals(rounded_avg(1,\
    \ 5), \"0b11\")\ntest.assert_equals(rounded_avg(7, 5), -1)\ntest.assert_equals(rounded_avg(10,\
    \ 20), \"0b1111\")\ntest.assert_equals(rounded_avg(20, 33), \"0b11010\")\ntest.assert_equals(rounded_avg(50,\
    \ 33), \"0b11010\")\n\ntest.it(\"should work for random examples\")\nfrom random\
    \ import randint\nsol=lambda n,m: bin(int(round((n+m)/2)))[2:] if n<=m else -1\n\
    for _ in range(100):\n    n,m=randint(1,100),randint(1,100)\n    test.assert_equals(rounded_avg(n,m),sol(n,m))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3jf2fgn6.py\", line\
    \ 15, in <module>\n    test.describe(\"rounded_avg\")\nNameError: name 'test'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(int(round((sum(range(n, m+1)) / (m+1-n)))))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp02n_1t40.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp02n_1t40.py\", line 31,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp02n_1t40.py\", line\
    \ 17, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjxob8ugt.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpjxob8ugt.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpjxob8ugt.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    elif n == m:\n        return bin(n)\n    else:\n        return bin(round((n\
    \ + m) / 2))\nrounded_avg(7, 5)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    numbers = range(n, m+1)\n    avg = sum(numbers) / len(numbers)\n   \
    \ rounded = round(avg)\n    binary = bin(rounded)\n    return binary\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    average = (n + m) //\
    \ 2\n    if n > m:\n        return -1\n    else:\n        return bin(average)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4smiz8_6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4smiz8_6.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp4smiz8_6.py\", line\
    \ 25, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    return bin(round(sum/(m-n+1)))\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    avg = int(round((n + m) / 2))\n    return bin(avg)\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        sum = 0\n        for i in range(n, m+1):\n          \
    \  sum += i\n        return f\"0b{bin(round(sum/(m-n+1)))[2:]}\"\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvc3cdn8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphvc3cdn8.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmphvc3cdn8.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    rounded_average = int(round((n + m) / 2))\n    return bin(rounded_average)\n\
    \nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\n\
    print(rounded_avg(20, 33))\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # Return -1 if n is\
    \ greater than m\n    if n > m:\n        return -1\n    # Find the sum of n and\
    \ m and divide by 2, then round it to the nearest integer\n    avg = int(round((n\
    \ + m) / 2))\n    # Return the avg converted to binary\n    return bin(avg)\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return \"0b\" + bin(round((sum(range(n, m + 1)) / (m - n + 1))))[2:]\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return sum([b for b\
    \ in range(n, m+1)]) // (m-n+1)\n\n\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnhap_3s.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpwnhap_3s.py\", line 33,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpwnhap_3s.py\", line\
    \ 19, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    average = math.ceil((n + m) / 2)\n    return bin(average)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplrsdzd9p.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmplrsdzd9p.py\", line 34,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmplrsdzd9p.py\", line\
    \ 20, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmplrsdzd9p.py\"\
    , line 16, in rounded_avg\n    average = math.ceil((n + m) / 2)\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\n\nassert rounded_avg(1,\
    \ 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) ==\
    \ \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\"\nprint('Good! The `rounded_avg`\
    \ function works!')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfn5m63fp.py\", line\
    \ 16, in <module>\n    assert rounded_avg(1, 5) == \"0b11\"\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return f\"0b{bin(round((n + m) / 2))[2:]}\"\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return -1 if n > m else\
    \ bin(round((m + n) / 2))\n\nprint(rounded_avg(7, 5))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return f\"0b{round((n+m)/2):b}\"\
    \ if n <= m else -1\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\n \nprint(rounded_avg(1, 5)) # => \"\
    0b11\"\nprint(rounded_avg(7, 5)) # => -1\nprint(rounded_avg(10, 20)) # => \"0b1111\"\
    \nprint(rounded_avg(20, 33)) # => \"0b11010\"\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return (n + m) // 2\n\
    \    \n    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n   \
    \ assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6mc57n0b.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6mc57n0b.py\", line 32,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp6mc57n0b.py\", line\
    \ 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    sum = 0\n    if n >\
    \ m:\n        return -1\n    for i in range(n, m+1):\n        sum += i\n    return\
    \ bin(int(round(sum/(m+1-n))))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu59bmot3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpu59bmot3.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpu59bmot3.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        lst = [i for i in range(n, m+1)]\n        average = sum(lst)\
    \ / len(lst)\n        average = int(average)\n        return f\"0b{bin(average)[2:]}\"\
    \n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpavywa30b.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpavywa30b.py\", line 37,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpavywa30b.py\", line\
    \ 27, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    int_sum = 0\n    for i in range(n, m+1):\n        int_sum += i\n   \
    \ avg = int_sum / (m - n + 1)\n    return bin(round(avg))\n    \n    \n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return -1 if n > m else\
    \ bin(round((n + m) / 2))\n\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((n + m) / 2))\n    \n    \n    \n  \
    \  \n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        sum = 0\n        for i in range(n, m+1):\n          \
    \  sum += i\n        avg = round(sum/(m-n+1))\n        return bin(avg)\n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6thq7g37.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6thq7g37.py\", line 31,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp6thq7g37.py\", line\
    \ 17, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return f\"0b{bin(round((n + m) / 2))[2:]}\"\n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((n + m) / 2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((n + m) / 2))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(round((m + n) / 2))[2:]\n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    \"\"\"\n    My notes:\n\
    \    n = 1\n    m = 5\n    n_to_m = 1 to 5\n    mean = 3\n    \"\"\"\n    if n\
    \ > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n   \
    \ return f\"0b{avg:b}\"\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\n\
    print(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    summ = 0\n    for i in range(n, m+1):\n        summ += i\n    return\
    \ bin(round(summ/(m-n+1)))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\n\
    print(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((n + m) / 2))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    return '0b'\
    \ + bin(int(sum / (m-n+1) + 0.5))[2:]\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptsh0za_i.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptsh0za_i.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptsh0za_i.py\", line\
    \ 23, in check\n    assert candidate(964, 977) == '0b1111001010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    avg = 0\n    for i in range(n, m+1):\n        avg += i\n    avg /= (m-n+1)\n\
    \    return bin(round(avg))\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((sum(range(n, m+1)))/(m-n+1)))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((n + m) / 2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    ave = sum/(m-n+1)\n\
    \    ave = int(round(ave))\n    return \"0b\" + bin(ave)[2:]\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    a = (n + m) / 2\n    return bin(round(a))\ndef check(candidate):\n \
    \   assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return \"{0:b}\".format(round((n + m) / 2))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9fyohi6c.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9fyohi6c.py\", line 33,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp9fyohi6c.py\", line\
    \ 19, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e3tyvgi.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3e3tyvgi.py\", line 31,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp3e3tyvgi.py\", line\
    \ 17, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\n\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    def avg(x: int, y: int)\
    \ -> int:\n        return (x + y) // 2\n\n    if n > m:\n        return -1\n \
    \   return bin(avg(n, m))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11010\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprh2t6vip.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmprh2t6vip.py\", line 36,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmprh2t6vip.py\", line\
    \ 26, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    avg = round((n + m) / 2)\n    return f\"0b{avg:b}\"\n    #OR\n    #return\
    \ f\"0b{round((n + m) / 2):b}\"\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((n + m) / 2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc4ylo313.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpc4ylo313.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpc4ylo313.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        sum = n + m\n        count = 2\n        while n < m:\n\
    \            sum += n + 1\n            count += 1\n            n += 1\n      \
    \  avg = sum // count\n        binary = bin(avg)\n        return binary\n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqkx5h15k.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpqkx5h15k.py\", line 46,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqkx5h15k.py\", line\
    \ 36, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    x = (n + m) // 2\n    return bin(x)\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ktm2qa1.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp_ktm2qa1.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp_ktm2qa1.py\", line\
    \ 28, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    avg = round((n + m) / 2)\n    return f\"0b{avg:b}\"\n    \ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((n + m) / 2))\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # complete function\n\
    \    if n>m:\n        return -1\n    else:\n        return bin(int(round((n+m)/2)))\n\
    \    \n    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n   \
    \ assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    # solution here\n    else:\n        return bin(round((n+m)/2))\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return '0b' + bin(round((n + m) / 2))[2:]\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(int(round((n + m) / 2)))\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\n\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((m + n) / 2))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    avg\
    \ = total/(m-n+1)\n    return f\"0b{round(avg):b}\"\ndef check(candidate):\n \
    \   assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        #from n to m, calculate the average and round to the\
    \ nearest integer\n        avg = round(sum(range(n, m+1)) / (m - n + 1))\n   \
    \     #convert the rounded average to binary\n        return f\"0b{bin(avg)[2:]}\"\
    \n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10,\
    \ 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n <= m:\n       \
    \ return '0b' + bin(sum(range(n, m + 1)) // (m - n + 1))[2:]\n    else:\n    \
    \    return -1\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppdpwjrbk.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppdpwjrbk.py\", line 34,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmppdpwjrbk.py\", line\
    \ 24, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return bin(int(round((n\
    \ + m) / 2))) if n <= m else -1\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    assert n < m, \"-1\"\
    \n    return bin(sum(range(n, m + 1)) // (m - n + 1))\n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_xjw9o00.py\", line\
    \ 18, in <module>\n    print(rounded_avg(7, 5))\n  File \"/tmp/tmp_xjw9o00.py\"\
    , line 14, in rounded_avg\n    assert n < m, \"-1\"\nAssertionError: -1\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\n\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((m + n) / 2))\n\nq = rounded_avg(1, 5), \"0b11\"\n\
    q\nq = rounded_avg(7, 5), -1\nq\nq = rounded_avg(10, 20), \"0b1111\"\nq\nq = rounded_avg(20,\
    \ 33), \"0b11010\"\nq\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    if n == m:\n        return bin(n)\n    else:\n        return bin(round((n\
    \ + m) / 2))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(int(round((n + m) / 2)))\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    elif n == m:\n        return bin(n)\n    else:\n        return bin(round((n\
    \ + m) / 2))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # Your code here\n \
    \   if m < n:\n        return -1\n    return bin(round((n + m) / 2))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # You can convert an\
    \ integer to a binary number by using bin()\n    return None\n\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5u8at8tp.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5u8at8tp.py\", line 33,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5u8at8tp.py\", line\
    \ 19, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return f\"0b{bin(round((n + m) / 2))[2:]}\"\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "-1\n0b11\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return \"0b\" + bin(round((n + m) / 2))[2:]\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    average = int(round((m+n)/2))\n    return bin(average)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return f\"0b{bin(round((n + m) / 2))[2:]}\"\n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        avg = sum(range(n, m+1))/(m-n+1)\n        return f\"\
    0b{(int(round(avg)))}\"\n\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqaa1l3cc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqaa1l3cc.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqaa1l3cc.py\", line\
    \ 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return round(sum(range(n, m+1))/(m-n+1))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdh6q2ql3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdh6q2ql3.py\", line 33,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpdh6q2ql3.py\", line\
    \ 19, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    bin_sum = 0\n    for i in range(n, m+1):\n        bin_sum += i\n   \
    \ avg = round(bin_sum / (m+1-n))\n    print(f\"n: {n}, m: {m}, avg: {avg}\")\n\
    \    return f\"0b{avg:b}\"\n\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "n: 10, m: 20, avg: 15\n0b1111\nn: 20, m: 33, avg: 26\n0b11010\nn: 1, m:\
    \ 5, avg: 3\n0b11\n-1\nn: 1, m: 5, avg: 3\nn: 7, m: 13, avg: 10\nn: 964, m: 977,\
    \ avg: 970\nn: 996, m: 997, avg: 996\nn: 560, m: 851, avg: 706\nn: 185, m: 546,\
    \ avg: 366\nn: 362, m: 496, avg: 429\nn: 350, m: 902, avg: 626\nn: 197, m: 233,\
    \ avg: 215\nn: 5, m: 5, avg: 5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    count = 0\n    for i in range(n, m+1):\n        count += i\n    avg\
    \ = count / (m-n+1)\n    return \"0b\" + bin(round(avg))[2:]\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    total = sum(range(n, m+1))\n    avg = int(total/(m-n+1))\n    avg_in_binary\
    \ = bin(avg)[2:]\n    return f\"0b{avg_in_binary}\"\n    \nprint(rounded_avg(20,33))\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11010\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpei2pfdtx.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpei2pfdtx.py\", line 37,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpei2pfdtx.py\", line\
    \ 27, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # Fill this in.\n\n\
    print(rounded_avg(1, 5))\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "None\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8gp8agi1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp8gp8agi1.py\", line 32,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8gp8agi1.py\", line\
    \ 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        lst = [str(i) for i in range(n, m+1)]\n        avg =\
    \ sum([int(i) for i in lst]) / len(lst)\n        rounded = round(avg)\n      \
    \  binarized = bin(rounded)\n        return binarized\n\nprint(rounded_avg(1,5))\n\
    print(rounded_avg(10,20))\nprint(rounded_avg(20,33))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    res = sum(range(n, m+1))/(m-n+1)\n    return bin(round(res))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return -1 if n > m else\
    \ bin(sum(range(n, m + 1)) // (m - n + 1))\nrounded_avg(20, 33)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpam89qjvc.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpam89qjvc.py\", line 32,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpam89qjvc.py\", line\
    \ 22, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return '0b' + bin(round((n + m) / 2))[2:]\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(math.ceil((n + m) / 2))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ww47yw9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5ww47yw9.py\", line 33,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5ww47yw9.py\", line\
    \ 19, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp5ww47yw9.py\"\
    , line 17, in rounded_avg\n    return bin(math.ceil((n + m) / 2))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphaxolxy7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphaxolxy7.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmphaxolxy7.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpynzjgwne.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpynzjgwne.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpynzjgwne.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\n    \n    \n \
    \   \n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2kge8qu.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpl2kge8qu.py\", line 34,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpl2kge8qu.py\", line\
    \ 20, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        val = round(((n + m) / 2))\n        binary = f\"0b{bin(val)[2:]}\"\
    \n        return binary\n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((sum(range(n, m+1))/(m-n+1))))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    if n == m:\n        return bin(n)\n    return bin(int(round((n + m)\
    \ / 2)))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10,\
    \ 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # n = 5, m = 7\n   \
    \ # 5 + 6 + 7 = 18 / 3 = 6\n    # 6 to binary = 0b110\n    # rounded = 0b11\n\
    \    # return 0b11\n    if n > m:\n        return -1\n    else:\n        return\
    \ round(sum(range(n, m + 1)) / (m - n + 1))\n\nprint(rounded_avg(1, 5)) # => \"\
    0b11\"\nprint(rounded_avg(7, 5)) # => -1\nprint(rounded_avg(10, 20)) # => \"0b1111\"\
    \nprint(rounded_avg(20, 33)) # => \"0b11010\"\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "3\n-1\n15\n26\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplyaofnx7.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmplyaofnx7.py\", line 43,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmplyaofnx7.py\", line\
    \ 29, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    try:\n        if n >\
    \ m:\n            return -1\n        return f\"0b{(n + m) // 2:b}\"\n    except\
    \ Exception as e:\n        print(e)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsc0mtw4s.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpsc0mtw4s.py\", line 36,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpsc0mtw4s.py\", line\
    \ 26, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # Check if n is greater\
    \ than m\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) // len(range(n,\
    \ m+1)) # average of the sequence\n    return bin(avg) # convert average to binary\
    \ format and returns it\n\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2lh6_wz.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpz2lh6_wz.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpz2lh6_wz.py\", line\
    \ 25, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    res = (n + m) // 2\n    return f\"0b{bin(res)[2:]}\"\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_vo17iuf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_vo17iuf.py\", line 34,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp_vo17iuf.py\", line\
    \ 24, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((n + m) / 2))\n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        l = [i for i in range(n, m+1)]\n        return \"0b\"\
    \ + bin(round(sum(l)/len(l)))[2:]\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((m + n) / 2))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    s = 0\n    for i in range(n, m+1):\n        s += i\n    avg = round(s/(m+1-n))\n\
    \    return bin(avg)\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # your code here\n\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9w_1_b4l.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9w_1_b4l.py\", line 31,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp9w_1_b4l.py\", line\
    \ 17, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    # round the average \n    avg = int(round((n + m) / 2))\n    # convert\
    \ to binary \n    bin_num = bin(avg)\n    return bin_num\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    avg = round((n + m) / 2)\n    return \"0b\" + bin(avg)[2:]\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((n + m) / 2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    avg = 0\n    if n >\
    \ m:\n        return -1\n    for i in range(n, m+1):\n        avg += i\n    return\
    \ bin(round(avg/(m-n+1)))\n    \n    \n    \n    \ndef check(candidate):\n   \
    \ assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # your code here\n \
    \   \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7acjy_k5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp7acjy_k5.py\", line 31,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp7acjy_k5.py\", line\
    \ 17, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # your code here\n\n\
    \    # return the result\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx20eipg.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmppx20eipg.py\", line 32,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmppx20eipg.py\", line\
    \ 18, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # first check that n\
    \ is less than m:\n    if n > m:\n        return -1\n    # the formula for the\
    \ average of n and m is (n + m) / 2:\n    avg = (n + m) / 2\n    # round that\
    \ answer, convert to a string and remove the 0b (which is two characters):\n \
    \   return bin(round(avg))[2:]\n\nprint(rounded_avg(1, 5)) #should return \"0b11\"\
    \nprint(rounded_avg(7, 5)) #should return -1\nprint(rounded_avg(10, 20)) #should\
    \ return \"0b1111\"\nprint(rounded_avg(20, 33)) #should return \"0b11010\"\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: "11\n-1\n1111\n11010\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo21ud228.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpo21ud228.py\", line 41,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpo21ud228.py\", line\
    \ 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    avg = (m + n) / 2\n    return bin(round(avg))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        n = n - n + 1\n        avg = sum(range(n, m+1)) / (m\
    \ - n + 1)\n        return bin(round(avg))\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5sa8r7rv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5sa8r7rv.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5sa8r7rv.py\", line\
    \ 22, in check\n    assert candidate(7, 13) == '0b1010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((sum(list(range(n, m+1)))/(m-n+1))))\n\
    \        \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    sum_ = sum(range(n, m+1))\n    avg = sum_/(m-n+1)\n    rounded_avg =\
    \ round(avg)\n    return bin(rounded_avg)\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((n + m) / 2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        avg = bin(round((n + m) / 2))\n        return avg\n\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # your code here\n \
    \   if n > m:\n        return -1\n    return bin(round((m+n)/2))\n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    my_sum = 0\n    for num in range(n, m+1):\n        my_sum += num\n \
    \   return '0b' + bin(round(my_sum/(m-n+1)))[2:]\n\ndef check(candidate):\n  \
    \  assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return f\"0b{bin(int(round((n + m) / 2)))[2:]}\"\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # your code here\n\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbvq0buq3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbvq0buq3.py\", line 31,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbvq0buq3.py\", line\
    \ 17, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    avg = int(round((n + m) / 2))\n    return bin(avg)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # if n > m:\n    # \
    \    return -1\n    # else:\n    #     return bin(sum(range(n, m+1)) // (m-n+1))\n\
    \n    return -1 if n > m else bin(sum(range(n, m+1)) // (m-n+1))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjtvz1tvi.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjtvz1tvi.py\", line 36,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpjtvz1tvi.py\", line\
    \ 26, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    return bin(round(sum/(m-n+1)))\n\
    \nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\n\
    print(rounded_avg(20, 33))\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    count = 1\n    avg = 0\n    while n <= m:\n        avg += n\n      \
    \  n += 1\n        count += 1\n    avg /= count\n    avg = round(avg)\n    return\
    \ bin(avg)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp70fnnzuc.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp70fnnzuc.py\", line 41,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp70fnnzuc.py\", line\
    \ 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    s = sum(range(n, m+1))\n    return f\"0b{bin(round(s / (m-n+1)))[2:]}\"\
    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    # res = sum(range(n, m+1)) / (m-n+1)\n    # rounded = round(res)\n\
    \    # res_bin = bin(rounded)[2:]\n    # return f\"0b{res_bin}\"\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    sum, count = 0, 0\n\
    \    if n > m:\n        return -1\n    for i in range(n, m+1):\n        sum +=\
    \ i\n        count += 1\n    avg = math.ceil(sum/count)\n    return bin(avg)\n\
    print(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\n\
    print(rounded_avg(20, 33))\n\n\"\"\"\nprint(rounded_avg(1, 5)) # \"0b11\"\nprint(rounded_avg(7,\
    \ 5)) # -1\nprint(rounded_avg(10, 20)) # \"0b1111\"\nprint(rounded_avg(20, 33))\
    \ # \"0b11010\"\n\"\"\"\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_mqw8qq.py\", line\
    \ 22, in <module>\n    print(rounded_avg(1, 5))\n  File \"/tmp/tmpv_mqw8qq.py\"\
    , line 20, in rounded_avg\n    avg = math.ceil(sum/count)\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    elif n == m:\n        return bin(n)\n    else:\n        avg = sum(range(n,\
    \ m+1)) / (m-n+1)\n        return bin(int(round(avg)))\n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    avg = int((n + m) /\
    \ 2)\n    if n > m:\n        return -1\n    return f\"0b{avg:b}\"\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_b2lqoez.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_b2lqoez.py\", line 33,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp_b2lqoez.py\", line\
    \ 23, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    elif n == m:\n        return bin(n)\n    else:\n        s = sum(range(n,\
    \ m+1))\n        r = round(s / (m+1-n))\n        return bin(r)\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # your code here\n \
    \   if n > m:\n        return -1\n    else:\n        avg = sum(range(n, m+1))\
    \ / (m-n+1)\n        return bin(round(avg))\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    #return bin(round(sum(range(n, m+1)) / (m-n+1)))[2:]\n  \
    \  \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    total = sum(range(n, m+1))\n    rounded_avg = round(total/(m-n+1))\n\
    \    return f\"0b{rounded_avg:b}\"\n\nfrom math import ceil\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    avg = math.ceil((n + m) / 2)\n    return bin(avg)\n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vi8rs59.py\", line\
    \ 19, in <module>\n    print(rounded_avg(1, 5))\n  File \"/tmp/tmp4vi8rs59.py\"\
    , line 16, in rounded_avg\n    avg = math.ceil((n + m) / 2)\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return '0b' + bin(round((n + m) / 2))[2:]\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(int(round((n + m) / 2)))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    sum_ = 0\n    for i in range(n, m+1):\n        sum_ += i\n    avg =\
    \ round(sum_ / (m-n+1))\n    return bin(avg)\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    #The trick here is to\
    \ calculate the average by dividing by 2\n    #and then rounding with the round()\
    \ function.\n    if n > m:\n        return -1\n    avg = int(round((n + m) / 2))\n\
    \    return str(bin(avg))\n\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((m + n) / 2))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(round((n + m) / 2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        res = round((m+n)/2)\n        return bin(res)\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkwm29a2r.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkwm29a2r.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpkwm29a2r.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return bin(sum(range(n,\
    \ m+1))//(m+1-n)) if n <= m else -1\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfgwkrbms.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfgwkrbms.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpfgwkrbms.py\", line\
    \ 20, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    #\n    if n > m:\n \
    \       return -1\n    total = 0\n    i = n\n    while i <= m:\n        total\
    \ += i\n        i += 1\n    avg = int(round(total / (m - n + 1)))\n    return\
    \ bin(avg)\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10,\
    \ 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    from math import ceil,\
    \ floor\n    if n > m:\n        return -1\n    else:\n        avg = floor((n +\
    \ m) / 2)\n        return bin(avg)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp924p9hmh.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp924p9hmh.py\", line 36,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp924p9hmh.py\", line\
    \ 26, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n>m:\n        return\
    \ -1\n    return bin(round((n+m)/2))\n\nassert rounded_avg(1, 5) == \"0b11\"\n\
    assert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert\
    \ rounded_avg(20, 33) == \"0b11010\"\n \n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        avg = math.ceil((n + m) / 2)\n        return bin(avg)\n\
    \nprint(rounded_avg(10, 20))\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1an96hxr.py\", line\
    \ 20, in <module>\n    print(rounded_avg(10, 20))\n  File \"/tmp/tmp1an96hxr.py\"\
    , line 17, in rounded_avg\n    avg = math.ceil((n + m) / 2)\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        i = n\n        a = []\n        while i <= m:\n      \
    \      a.append(i)\n            i += 1\n        return bin(round(sum(a)/len(a)))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    elif n < m:\n        sum = 0\n        for i in range(n, m+1):\n    \
    \        sum += i\n        return '0b' + bin(round(sum/(m-n+1)))[2:]\n    else:\n\
    \        return bin(n)\n\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    s = n + m\n    for i in range(n + 1, m):\n        s += i\n    return\
    \ bin(round(s / (m - n + 1)))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv5p24ide.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpv5p24ide.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpv5p24ide.py\", line\
    \ 32, in check\n    assert candidate(5, 5) == '0b101'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return f\"0b{bin(round((n + m) / 2))[2:]}\"\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2imjrbzj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2imjrbzj.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2imjrbzj.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    mid = (n + m) // 2\n    return bin(mid)\n\nprint(rounded_avg(20, 33))\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11010\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpby4ty48h.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpby4ty48h.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpby4ty48h.py\", line\
    \ 25, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    mean = int(round((n + m) / 2))\n    return bin(mean)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    avg = round((n + m) / 2)\n    return bin(avg)\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return (bin(round((n + m) / 2)))\nprint(rounded_avg(1,5))\n\
    print(rounded_avg(7,5))\nprint(rounded_avg(10,20))\nprint(rounded_avg(20,33))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    avg = (n + m) / 2\n    bin_avg = bin(int(round(avg)))\n    return bin_avg\n\
    \nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\n\
    print(rounded_avg(20, 33))\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    average\
    \ = int(round(sum/(m-n+1)))\n    return bin(average)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    num = math.ceil((n + m) / 2)\n    return f\"0b{num:b}\"\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxrsp3gwb.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxrsp3gwb.py\", line 33,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpxrsp3gwb.py\", line\
    \ 19, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpxrsp3gwb.py\"\
    , line 16, in rounded_avg\n    num = math.ceil((n + m) / 2)\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    avg = int(round((n + m) / 2))\n    return f\"0b{avg:b}\"\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    div, rem = divmod((n + m), 2)\n    if rem == 0:\n        res = bin(div)[2:]\n\
    \    else:\n        res = bin(div + 1)[2:]\n    return \"0b\" + res\n\nprint(rounded_avg(7,\
    \ 5))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "-1\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphquue47p.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphquue47p.py\", line 39,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmphquue47p.py\", line\
    \ 27, in check\n    assert candidate(964, 977) == '0b1111001010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        # Get the mean\n        mean = sum(range(n, m+1))/(m-n+1)\n\
    \        # Round the mean\n        rounded_mean = round(mean)\n        # Convert\
    \ to binary\n        bin_mean = bin(rounded_mean)\n        return bin_mean\n \
    \   \nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10,\
    \ 20))\nprint(rounded_avg(20, 33))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        sum_numbers = 0\n        counter = 0\n        for i in\
    \ range(n, m+1):\n            sum_numbers += i\n            counter += 1\n   \
    \     avg = round(sum_numbers/counter)\n        return f\"0b{avg:b}\"\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # the formula of arithmetic\
    \ average is (n + m) / 2, so you can use this \n    # to compute the average and\
    \ then round it to the nearest integer\n    # note that the format of the return\
    \ value must be \"0b11010\"\n    avg = 0\n    if n > m:\n        return -1\n \
    \   else:\n        avg = (n + m) / 2\n        avg = round(avg)\n        return\
    \ f\"0b{avg:b}\"\n \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    if n == m:\n        return str(bin(n))\n    if n % 2 == 0 and m % 2\
    \ == 0:\n        sum_all = n + m\n        rounded_sum = int(sum_all / 2)\n   \
    \     return bin(rounded_sum)\n    else:\n        sum_all = n + m\n        rounded_sum\
    \ = round(sum_all / 2)\n        return bin(rounded_sum)\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(math.ceil((m + n) / 2))\n\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87_8b9xm.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp87_8b9xm.py\", line 33,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp87_8b9xm.py\", line\
    \ 19, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp87_8b9xm.py\"\
    , line 16, in rounded_avg\n    return bin(math.ceil((m + n) / 2))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    else:\n        return f\"0b{bin(int(round((sum(range(n, m+1)) / (m-n+1)))))[2:]}\"\
    \n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # if n is greater than\
    \ m, return -1.\n    if n > m:\n        return -1\n    # the average of the integers\
    \ from n through m (including n and m)\n    n_sum = sum(range(n, m+1))\n    n_avg\
    \ = n_sum/(m-n+1)\n    # round the answer to the nearest integer\n    n_rounded\
    \ = round(n_avg)\n    # convert that to binary\n    return bin(n_rounded)\n\n\
    print(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\n\
    print(rounded_avg(20, 33))\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n-1\n0b1111\n0b11010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return bin(round((m - n + 1) / 2))\n\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmj4rty43.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpmj4rty43.py\", line 33,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmj4rty43.py\", line\
    \ 19, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    rounded_avg = round((n + m) / 2)\n    return f\"0b{bin(rounded_avg)[2:]}\"\
    \n\nfrom typing import Union\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return\
    \ -1\n    return \"{0:b}\".format(round((n + m) / 2))\n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "11\n-1\n1111\n11010\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp__atqny.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpp__atqny.py\", line 37,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpp__atqny.py\", line\
    \ 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
