name: HumanEval_161_solve
language: py
prompt: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i]\
  \ is a letter, reverse its case from lower to upper or vise versa, \n    otherwise\
  \ keep it as it is.\n    If the string contains no letters, reverse the string.\n\
  \    The function should return the resulted string.\n    Examples\n    solve(\"\
  1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
  \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
  \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
  \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
  \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
completions: ["    # return ''.join(map(reverse, s))\n    return s[::-1] if s.isalpha()\
    \ else ''.join(map(reverse, s))\n\n", "    if not s:\n        return s\n    s\
    \ = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n       \
    \     s[i] = s[i].swapcase()\n        else:\n            s[i] = s[i]\n    return\
    \ \"\".join(s)\n\n", "    # your code here\n    return s.swapcase()\n \n ", " \
    \   s = s[::-1]\n    return s\n\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"\
    ))\nprint(solve(\"#a@C\"))", "    if not s.isalpha():\n        return s[::-1]\n\
    \    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n\
    \                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n     \
    \           s = s[:i] + s[i].lower() + s[i+1:]\n    return s\n\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n", "    is_only_digits\
    \ = s.isdigit()\n    if is_only_digits:\n        return s[::-1]\n    letters =\
    \ list(map(str.swapcase, filter(str.isalpha, s)))\n    others = list(filter(lambda\
    \ c: not str.isalpha(c), s))\n    return \"\".join(others + letters)", "    s\
    \ = s[::-1]\n    if s.isalpha():\n        return s.swapcase()\n    else:\n   \
    \     return s\n\n", "    if not [char for char in s if char.isalpha()]:\n   \
    \     return s[::-1]\n    else:\n        return ''.join([char.swapcase() if char.isalpha()\
    \ else char for char in s])\n\n", "    def convert(c: str) -> str:\n        if\
    \ c.isalpha():\n            return c.upper() if c.islower() else c.lower()\n \
    \       return c\n    return s[::-1] if not s.isalpha() else ''.join(map(convert,\
    \ s))\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))",
  "    if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n    \
    \    return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    return \"\".join(ch.swapcase() if ch.isalpha() else ch\
    \ for ch in s[::-1])\n\n", "    new_string = \"\"\n    if s.islower() or s.isupper():\n\
    \        return s[::-1]\n    for char in s:\n        if char.isalpha():\n    \
    \        if char.islower():\n                new_string += char.upper()\n    \
    \        else:\n                new_string += char.lower()\n        else:\n  \
    \          new_string += char\n    return new_string\n\n\nassert solve(\"1234\"\
    ) == \"4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\"\
    \nassert solve(\"\") == \"\"\nassert solve(\"AA\") == \"AA\"\nassert solve(\"\
    123456789\") == \"987654321\"\nassert solve(\"aA\") == \"Aa\"\nassert solve(\"\
    \ ab\") == \" AB\"\nassert solve(\"#@$$\") == \"#@$$\"\nassert solve(\"123b\"\
    ) == \"321B\"\nassert solve(\"b123\") == \"B321\"\nassert solve(\"\") == \"\"\n\
    assert solve(\"1\") == \"1\"\nassert solve(\"aBcDeF\") == \"AbCdEf\"\nassert solve(\"\
    AbCdEf\") == \"aBcDeF\"\nassert solve(\"12345\") == \"54321\"\nassert solve(\"\
    123456789\") == \"987654321\"\nassert solve(\"#a@C\") == \"#A@c\"\nassert solve(\"\
    Aa\") == \"aA\"\nassert solve(\"AaAa\") == \"aAaA\"\nassert solve(\"BbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    ) == \"bBcCdD\" \\\n                                                         \
    \          \"eEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"\nassert solve(\"QweRtyUiop[]AsdFghJkl;'ZxcVbnM,.1234567890\"\
    ) == \"qWeRtYuIoP[]aSdFgHjKl;'zX", "    return s[::-1] if not s.isalpha() else\
    \ s.swapcase()\n", "    if not s:\n        return s\n\n    s = s[::-1]\n    res\
    \ = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n\
    \                res += c.upper()\n            else:\n                res += c.lower()\n\
    \        else:\n            res += c\n    return res\n\n", "    if any(map(str.isalpha,\
    \ s)):\n        return s.swapcase()\n    else:\n        return s[::-1]\n\n", " \
    \   return s[::-1] if not s.isalpha() else s.swapcase()\n", "    return s[::-1]\
    \ if not s.islower() else s.swapcase()\n", "    out = []\n    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\nprint(solve(\"\
    1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"\"))", " \
    \   # using extend\n    s_lst = list(s)\n    d = []\n    for char in s_lst:\n\
    \        if char.isalpha():\n            d.append(char.swapcase())\n        else:\n\
    \            d.append(char)\n    return \"\".join(d)\n\n", "    chars = [char\
    \ for char in s]\n    if 'A' not in chars and 'a' not in chars:\n        chars.reverse()\n\
    \    for i in range(len(chars)):\n        if chars[i].isalpha():\n           \
    \ if chars[i].isupper():\n                chars[i] = chars[i].lower()\n      \
    \      else:\n                chars[i] = chars[i].upper()\n    return ''.join(chars)\n\
    \n", "    def is_letter(c: str) -> bool:\n        return c.lower() != c.upper()\n\
    \    found_letter = False\n    new_s = \"\"\n    for i in range(len(s)):\n   \
    \     if is_letter(s[i]):\n            found_letter = True\n            if s[i].isupper():\n\
    \                new_s += s[i].lower()\n            else:\n                new_s\
    \ += s[i].upper()\n        else:\n            new_s += s[i]\n    if not found_letter:\n\
    \        new_s = new_s[::-1]\n    return new_s\n\n\nassert solve(\"1234\") ==\
    \ \"4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\"",
  "    new_s = \"\"\n    for char in s:\n        if char.isalpha():\n            new_s\
    \ += char.lower() if char.isupper() else char.upper()\n        else:\n       \
    \     new_s += char\n    return new_s[::-1] if new_s == s else new_s\n\n", " \
    \   letters = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    if s == \"\
    \":\n        return s\n    else:\n        for i in s:\n            if i in letters:\n\
    \                if i.islower():\n                    result += i.upper()\n  \
    \              else:\n                    result += i.lower()\n            else:\n\
    \                result += i\n        return result\n    return s\n\n", "    lst\
    \ = list(s)\n    for i in range(len(lst)):\n        if lst[i].isalpha():\n   \
    \         lst[i] = lst[i].swapcase()\n        else:\n            lst[i] = lst[i]\n\
    \    return ''.join(lst)\n    ", "    letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    s = s.lower()\n    if any(char in letters for char in s):\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if not s:\n     \
    \   return s\n    else:\n        if not s.isalpha():\n            return s[::-1]\n\
    \        else:\n            res = ''\n            for c in s:\n              \
    \  if c.isupper():\n                    res += c.lower()\n                else:\n\
    \                    res += c.upper()\n            return res\n\n", "    if s.islower()\
    \ or s.isupper():\n        return s[::-1]\n    return ''.join([i.upper() if i.islower()\
    \ else i.lower() for i in s])\n\n", "    return s[::-1] if not s.isalpha() else\
    \ ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n\n", "    all_lower\
    \ = True\n    for i in s:\n        if i.isalpha():\n            all_lower = False\n\
    \            break\n    if all_lower:\n        return s[::-1]\n    else:\n   \
    \     new_s = \"\"\n        for i in s:\n            if i.isalpha():\n       \
    \         if i.islower():\n                    new_s += i.upper()\n          \
    \      else:\n                    new_s += i.lower()\n            else:\n    \
    \            new_s += i\n        return new_s\n\n", "    return s[::-1] if not\
    \ s.islower() else s.lower()[::-1]\n\n", "    res = \"\"\n    hasLetter = False\n\
    \    for c in s:\n        if c.isalpha():\n            hasLetter = True\n    \
    \        res += c.swapcase()\n        else:\n            res += c\n    if not\
    \ hasLetter:\n        res = res[::-1]\n    return res\n", "    r = \"\"\n    for\
    \ c in s:\n        if c.isalpha():\n            r += c.swapcase()\n        else:\n\
    \            r += c\n    return r[::-1] if r.isalpha() else r\n\n\n\"\"\"\nTake\
    \ a Number And Sum Its Digits Raised To The Consecutive Powers And ....\xA1Eureka!!\n\
    \nThe number 89 is the first integer with more than one digit that fulfills the\
    \ property partially introduced in the title of this kata. What's the use of saying\
    \ \"Eureka\"? Because this sum gives the same number.\n\nIn effect: 89 = 8^1 +\
    \ 9^2\n\nThe next number in having this property is 135.\n\nSee this property\
    \ again: 135 = 1^1 + 3^2 + 5^3\n\nWe need a function to collect these numbers,\
    \ that may receive two integers a, b that defines the range [a, b] (inclusive)\
    \ and outputs a list of the sorted numbers in the range that fulfills the property\
    \ described above.\n\nLet's see some cases:\n\nsum_dig_pow(1, 10) == [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]\n\nsum_dig_pow(1, 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 89]\n\
    If there are no numbers of this kind in the range [a, b] the function should output\
    \ an empty list.\n\nsum_dig_pow(90, 100) == []\nEnjoy it!!\n\"\"\"", "    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join([x.lower()\
    \ if x.isupper() else x.upper() for x in s])\n\n", "    if not s:\n        return\
    \ s\n    elif not s.isalpha():\n        return s[::-1]\n    else:\n        return\
    \ s.swapcase()\n\n", "    if s == \"\":\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    res = []\n    for c in s:\n      \
    \  if c.isalpha():\n            res.append(c.swapcase())\n        else:\n    \
    \        res.append(c)\n    return \"\".join(res)\n\n", "    is_letter = lambda\
    \ x: x.isalpha()\n    letters = [x for x in s if is_letter(x)]\n    length = len(letters)\n\
    \    no_letters = length == 0\n    reverted = letters[::-1]\n    reverted_string\
    \ = \"\".join(reverted)\n    if no_letters:\n        return reverted_string\n\
    \    res = \"\"\n    for i in range(len(s)):\n        if not is_letter(s[i]):\n\
    \            res += s[i]\n        else:\n            res += reverted_string[i]\n\
    \    return res\n\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"\
    #a@C\"))\nprint(solve(\"\"))", "    # your code here\n    new_s = \"\"\n    for\
    \ i in s:\n        if i.isalpha():\n            new_s += i.swapcase()\n      \
    \  else:\n            new_s += i\n    if new_s == s:\n        return s[::-1]\n\
    \    return new_s\n", "    return s[::-1] if not s.islower() and not s.isupper()\
    \ else ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n    \n   \
    \ # you can use: s = s.swapcase() \n    # return s if s.islower() or s.isupper()\
    \ else s[::-1]\n        \n", "    return s[::-1] if s == s.swapcase() else s.swapcase()\n\
    \n", "    l_str = list(s)\n    for i in range(len(l_str)):\n        if l_str[i].isalpha():\n\
    \            l_str[i] = l_str[i].swapcase()\n    if l_str[-1].isalpha():\n   \
    \     return \"\".join(l_str)\n    else:\n        return \"\".join(l_str[::-1])\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return\
    \ s[::-1]\n\n", "    if any(c.isalpha() for c in s):\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n", "    if not s.isalpha():\n        return\
    \ s[::-1]\n    else:\n        r = \"\"\n        for l in s:\n            if l.isalpha():\n\
    \                r += l.swapcase()\n            else:\n                r += l\n\
    \        return r\n", "    res = \"\"\n    for c in s:\n        if c.isalpha():\n\
    \            res += c.swapcase()\n        else:\n            res += c\n    return\
    \ res if res else s[::-1]\n\n", "    if not any(x.isalpha() for x in s):\n   \
    \     return s[::-1]\n    return \"\".join(\n        x.lower() if x.isupper()\
    \ else x.upper() if x.islower() else x for x in s\n    )", "    no_letters = True\n\
    \    for char in s:\n        if char.isalpha():\n            no_letters = False\n\
    \            break\n    if no_letters:\n        return s[::-1]\n    else:\n  \
    \      return s.swapcase()\n", "    r = []\n    for i in s:\n        if i.isalpha():\n\
    \            r.append(i.swapcase())\n        else:\n            r.append(i)\n\
    \    if len(r) == 0:\n        return s[::-1]\n    return ''.join(r)\n", "    try:\n\
    \        if type(s) == str:\n            str1 = ''\n            if s.isalpha():\n\
    \                for letter in s:\n                    if letter.islower():\n\
    \                        str1 += letter.upper()\n                    else:\n \
    \                       str1 += letter.lower()\n                return str1\n\
    \            else:\n                return s[::-1]\n        else:\n          \
    \  return None\n    except Exception as error:\n        return error\n\n", " \
    \   is_word = False\n    new_string = \"\"\n    for char in s:\n        if char.isalpha():\n\
    \            new_string += char.swapcase()\n            is_word = True\n     \
    \   else:\n            new_string += char\n    if is_word:\n        return new_string\n\
    \    else:\n        return new_string[::-1]\n        \nprint(solve(\"ab\"))\n\
    print(solve(\"#a@C\"))\nprint(solve(\"1234\"))\n", "    if not s:\n        return\
    \ s\n\n    res = ''\n    for c in s:\n        if c.isalpha():\n            res\
    \ += c.swapcase()\n        else:\n            res += c\n    return res if res.isalpha()\
    \ else res[::-1]\n\n", "    def reverse_case(c: str) -> str:\n        if c.isalpha():\n\
    \            return c.upper() if c.islower() else c.lower()\n        return c\n\
    \    return ''.join(list(map(reverse_case, s[::-1]))) if any(s.isalpha()) else\
    \ s[::-1]\n", "    t = [c.lower() if c.isupper() else c.upper() if c.islower()\
    \ else c for c in s]\n    return ''.join(t) if ''.join(t).isalpha() else ''.join(t[::-1])",
  "    # create dictionary with letter as key and value is 2*letter and 2*letter.upper()\n\
    \    letters = {i: i*2 for i in s if i.isalpha()}\n    # check if there are no\
    \ letters\n    if len(letters) == 0:\n        return s[::-1]\n    else:\n    \
    \    # iterate through the string and replace letters with the value\n       \
    \ for letter in letters:\n            s = s.replace(letter, letters[letter])\n\
    \        return s\n\n\"\"\"\nBest solution on site:", "    if s.isalpha():\n \
    \       return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    new_str\
    \ = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n\
    \                new_str.append(char.upper())\n            else:\n           \
    \     new_str.append(char.lower())\n        else:\n            new_str.append(char)\n\
    \    if len(new_str) == 0:\n        return s[::-1]\n    return \"\".join(new_str)",
  "    s = s[::-1]\n    solution = ''\n    letters = {'a': 'A', 'b': 'B', 'c': 'C',\
    \ 'd': 'D', 'e': 'E', 'f': 'F', 'g': 'G', 'h': 'H', 'i': 'I', 'j': 'J', 'k': 'K',\
    \ 'l': 'L', 'm': 'M', 'n': 'N', 'o': 'O', 'p': 'P', 'q': 'Q', 'r': 'R', 's': 'S',\
    \ 't': 'T', 'u': 'U', 'v': 'V', 'w': 'W', 'x': 'X', 'y': 'Y', 'z': 'Z'}\n    for\
    \ i in s:\n        if i in letters:\n            solution += letters[i]\n    \
    \    else:\n            solution += i\n    return solution\n\nprint(solve(\"aB\"\
    ))\nprint(solve(\"Aa1b2c3d4\"))\nprint(solve(\"!#1?z\"))\nprint(solve(\"4321\"\
    ))\nprint(solve(\"#a@C\"))\nprint(solve(\"\"))", "    new_string = \"\"\n    if\
    \ s.isalpha():\n        for i in s:\n            if i.isupper():\n           \
    \     new_string += i.lower()\n            else:\n                new_string +=\
    \ i.upper()\n    else:\n        new_string = s[::-1]\n    return new_string\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if s.isalpha():\n\
    \        return s.swapcase()\n    return s[::-1]\n\n\nassert solve(\"1234\") ==\
    \ \"4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\"\
    \nassert solve(\"123#\") == \"321#\"\nassert solve(\"\") == \"\"\nassert solve(\"\
    AAAA\") == \"aaaa\"\nassert solve(\"aBcD\") == \"AbCd\"", "    if s == s.swapcase():\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n", "    if s.islower()\
    \ or s.isupper():\n        return s[::-1]\n    else:\n        return ''.join([i.lower()\
    \ if i.isupper() else i.upper() for i in s])\n\n", "    return s[::-1] if not\
    \ s.isalpha() else s.swapcase()\n\n", "    return ''.join(c.swapcase() if c.isalpha()\
    \ else c for c in s)\n\n", "    letters = [i for i in s if i.isalpha()]\n    if\
    \ letters:\n        return s.swapcase()\n    else:\n        return s[::-1]\n\n",
  "    if len(s) == 0:\n        return s[::-1]\n    lst = []\n    for c in s:\n  \
    \      if c.isalpha():\n            lst.append(c.swapcase())\n        else:\n\
    \            lst.append(c)\n    return ''.join(lst)\n\n", "    new_s = []\n  \
    \  for ch in s:\n        if ch.isalpha():\n            new_s.append(ch.swapcase())\n\
    \        else:\n            new_s.append(ch)\n    if len(new_s) > 0:\n       \
    \ return ''.join(new_s)\n    else:\n        return s[::-1]\n", "    res = ''\n\
    \    for i in s:\n        if i.isalpha():\n            res += i.swapcase()\n \
    \       else:\n            res += i\n    return res[::-1] if res.isalpha() else\
    \ res\n\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"\
    ))", "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return\
    \ s.swapcase()\n\n", "    is_lower = lambda x: x.islower()\n    if not any(map(is_lower,\
    \ s)):\n        return s[::-1]\n    else:\n        res = \"\"\n        for i in\
    \ s:\n            if i.islower():\n                res += i.upper()\n        \
    \    elif i.isupper():\n                res += i.lower()\n            else:\n\
    \                res += i\n        return res\n", "    regex = re.compile(r'[a-zA-Z]')\n\
    \    letters = regex.findall(s)\n    if len(letters) == 0:\n        return s[::-1]\n\
    \    else:\n        new_str = \"\"\n        for char in s:\n            if char.isalpha():\n\
    \                new_str += char.swapcase()\n            else:\n             \
    \   new_str += char\n        return new_str\n\n", "    # return \"\".join(s[::-1])\n\
    \    # return str(s[::-1])\n\n    if s.islower():\n        return s.upper()\n\
    \    elif s.isupper():\n        return s.lower()\n    else:\n        return \"\
    \".join(s[::-1])\n\n", "    return s[::-1] if not s.isalpha() else \"\".join(ch.lower()\
    \ if ch.isupper() else ch.upper() for ch in s)\n", "    letters = re.compile(r\"\
    [a-zA-Z]\")\n    no_letters = re.compile(r\"[^a-zA-Z]\")\n    numbers = re.compile(r\"\
    [0-9]\")\n    s = list(s)\n    for index, char in enumerate(s):\n        if letters.match(char):\n\
    \            s[index] = char.swapcase()\n        elif numbers.match(char):\n \
    \           s[index] = char\n        else:\n            continue\n    if no_letters.match(s[-1]):\n\
    \        return s[::-1]\n    else:\n        return \"\".join(s)", "    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n\nassert solve(\"1234\") == \"\
    4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\"\n",
  "    s = s[::-1]\n    return s.swapcase()", "    if not s.isalpha():\n        return\
    \ s[::-1]\n    return s.swapcase()\n\n", "    if not s:\n        return s\n  \
    \  elif not s.islower() and not s.isupper():\n        return ''.join(list(reversed(s)))\n\
    \    else:\n        s = s.swapcase()\n        return s\n\n", "    return ''.join(s[i].swapcase()\
    \ if s[i].isalpha() else s[i] for i in range(len(s))) if s.isalpha() else s[::-1]\n\
    \n", "    if any(a.isalpha() for a in s):\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n", "    if any(x.isalpha() for x in s):\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n", "    # my solution\n   \
    \ letters = set(string.ascii_letters)\n    result = []\n    is_letters = False\n\
    \    for c in s:\n        if c in letters:\n            is_letters = True\n  \
    \          result.append(c.swapcase())\n        else:\n            result.append(c)\n\
    \    return ''.join(result) if is_letters else s[::-1]\n\n    # best solution\n\
    \    # letters = set(string.ascii_letters)\n    # result = [c.swapcase() if c\
    \ in letters else c for c in s]\n    # return ''.join(result) if len(result) !=\
    \ len(s) else s[::-1]\n\n", "    # your code here\n    return s\n\n", "    return\
    \ s[::-1] if s == s.lower() or s == s.upper() else s.swapcase()\n\n", "    if\
    \ not s:\n        return \"\"\n    for i in s:\n        if not i.isalpha():\n\
    \            return s[::-1]\n    return s.swapcase()\n\n", "    res = ''\n   \
    \ if not any(char.isalpha() for char in s):\n        return s[::-1]\n    for char\
    \ in s:\n        if char.isalpha():\n            res += char.swapcase()\n    \
    \    else:\n            res += char\n    return res\n    \n    ", "    no_letters\
    \ = True\n    for i in s:\n        if i.isalpha():\n            no_letters = False\n\
    \            break\n    if no_letters:\n        return s[::-1]\n    out = \"\"\
    \n    for i in s:\n        if i.isalpha():\n            out += i.swapcase()\n\
    \        else:\n            out += i\n    return out\n\n\nprint(solve(\"1234\"\
    ))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))", "    return \"\".join(i.upper()\
    \ if i.islower() else i.lower() for i in s[::-1])\n", "    if not s.islower()\
    \ and not s.isupper():\n        s = s[::-1]\n    else:\n        for letter in\
    \ s:\n            if letter.isalpha():\n                new_s = s.swapcase()\n\
    \                return new_s\n            else:\n                return s\n\n",
  "    return s[::-1] if not s.isalpha() else s.swapcase()\n ", "    if not any(letter.isalpha()\
    \ for letter in s):\n        return s[::-1]\n    return ''.join(letter.upper()\
    \ if letter.islower() else letter.lower() for letter in s)\n\n", "    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    else:\n        s = list(s)\n     \
    \   for i in range(len(s)):\n            if s[i].isalpha():\n                s[i]\
    \ = s[i].swapcase()\n        return \"\".join(s)\n\n", "    return ''.join(\n\
    \        [s[i].swapcase() if s[i].isalpha() else s[i] for i in range(len(s))])[::-1]",
  "    if any(c.isalpha() for c in s):\n        return s.swapcase()\n    else:\n \
    \       return s[::-1]\n\n", "    if set(s).intersection(ascii_letters):\n   \
    \     return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    res =\
    \ \"\"\n    if len(s) == 0:\n        return res\n    for i in range(len(s)):\n\
    \        if s[i].isalpha():\n            if s[i].islower():\n                res\
    \ += s[i].upper()\n            else:\n                res += s[i].lower()\n  \
    \      else:\n            res += s[i]\n    return res[::-1]", "    if s.lower()\
    \ == s:\n        return s[::-1]\n    return ''.join(i.upper() if i.islower() else\
    \ i.lower() for i in s)\n\n\n\"\"\"\nimport re\n", "    s = list(s)\n    letters\
    \ = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            letters.append(i)\n\
    \    if letters == []:\n        return \"\".join(s[::-1])\n    else:\n       \
    \ for i in letters:\n            if s[i].islower():\n                s[i] = s[i].upper()\n\
    \            else:\n                s[i] = s[i].lower()\n        return \"\".join(s)\n\
    \n", "    assert type(s) == str\n    s = list(s)\n    assert len(s) < 1e5\n  \
    \  assert all(i in string.ascii_letters + string.digits + \"#@$%^&*()-+=[]{}<>?:.,/;\"\
    \ for i in s)\n    flag = True\n    for i in s:\n        if i in string.ascii_letters:\n\
    \            flag = False\n            break\n    if flag:\n        s.reverse()\n\
    \        return \"\".join(s)\n    for i in range(len(s)):\n        if s[i] in\
    \ string.ascii_letters:\n            if s[i].islower():\n                s[i]\
    \ = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n   \
    \ return \"\".join(s)\n\n", "    return \"\".join(c.swapcase() if c.isalpha()\
    \ else c for c in s)\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"\
    #a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"4321\"))\nprint(solve(\"AB\"))\n\
    print(solve(\"#A@c\"))\nprint(solve(\"#A@c\"))", "    # your code here\n    new_s\
    \ = ''\n    for letter in s:\n        if letter.isalpha():\n            new_s\
    \ += letter.swapcase()\n        else:\n            new_s += letter\n    if new_s\
    \ == s:\n        return new_s[::-1]\n    return new_s\n", "    s = s[::-1]\n \
    \   if not any(c.isalpha() for c in s):\n        return s\n    else:\n       \
    \ return \"\".join(c.lower() if c.isupper() else c.upper() for c in s)\n\n\nprint(solve(\"\
    1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))", "    if not any(map(str.isalpha,\
    \ s)):\n        return s[::-1]\n    res = []\n    for c in s:\n        if c.isalpha():\n\
    \            res.append(c.swapcase())\n        else:\n            res.append(c)\n\
    \    return ''.join(res)\n\n", "    s_reversed = s[::-1]\n    if not any(c.isalpha()\
    \ for c in s):\n        return s_reversed\n    return \"\".join(c.swapcase() if\
    \ c.isalpha() else c for c in s_reversed)\n\n", "    n = len(s)\n    r = \"\"\n\
    \    if n == 0:\n        return s\n    for i in range(n):\n        if s[i].isalpha():\n\
    \            r += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n\
    \            r += s[i]\n    return r[::-1] if r.isalpha() else r\n", "    return\
    \ s[::-1] if not s.isalpha() else s.swapcase()\n\n", "    if len(s) < 1:\n   \
    \     return s\n    return solve(s[1:]) + s[0]\n", "    # My code here\n    return\
    \ s[::-1] if s.isalpha() else \"\".join([i.upper() if i.islower() else i.lower()\
    \ for i in s])\n", "    if len(s) == 0:\n        return s\n    if not (s.isalpha()):\n\
    \        new_s = s[::-1]\n        return new_s\n    else:\n        chars = []\n\
    \        for c in s:\n            if c.isalpha():\n                chars.append(c.swapcase())\n\
    \            else:\n                chars.append(c)\n        return ''.join(chars)\n\
    \n", "    alphabet = 'qwertyuiopasdfghjklzxcvbnm'\n    letters = set()\n    for\
    \ c in alphabet:\n        letters.add(c)\n        letters.add(c.upper())\n   \
    \ result = ''\n    for c in s:\n        if c in letters:\n            if c.isupper():\n\
    \                result += c.lower()\n            else:\n                result\
    \ += c.upper()\n        else:\n            result += c\n    if result.islower()\
    \ or result.isupper():\n        return result[::-1]\n    return result", "   \
    \ return s[::-1] if not s.isalpha() else \"\".join(c.upper() if c.islower() else\
    \ c.lower() for c in s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n\n", "    # Use an empty string for result\n\
    \    res = \"\"\n    # Iterate over the string and check if each character is\
    \ a letter\n    for i in s:\n        if i.isalpha():\n            # Check if the\
    \ character is lowercase or uppercase and apply the corresponding\n          \
    \  # transformation\n            if i.islower():\n                res += i.upper()\n\
    \            else:\n                res += i.lower()\n        else:\n        \
    \    res += i\n    # If the resulted string contains no letters, return the reversed\
    \ string\n    if not res.isalpha():\n        return res[::-1]\n    # Otherwise,\
    \ return the resulted string\n    return res\n\n", "    return s[::-1] if not\
    \ any(l.isalpha() for l in s) else ''.join(l.upper() if l.islower() else l.lower()\
    \ for l in s)\n\nprint(solve(\"AB\"))", "    return s[::-1] if not s.isalpha()\
    \ else s.swapcase()\n\n", "    if not s:\n        return s\n    return ''.join(\n\
    \        c.swapcase() if c.isalpha() else c for c in s[::-1]\n    )\n\n", "  \
    \  has_letters = False\n    for c in s:\n        if c.isalpha():\n           \
    \ has_letters = True\n            break\n    if has_letters:\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n", "    out = ''\n    if s.isalpha():\n\
    \        for ch in s:\n            if ch.isupper():\n                out += ch.lower()\n\
    \            else:\n                out += ch.upper()\n    else:\n        out\
    \ = s[::-1]\n    return out\n", "    res = \"\"\n    if not any(c.isalpha() for\
    \ c in s):\n        return s[::-1]\n    for c in s:\n        if c.isalpha():\n\
    \            res += c.swapcase()\n        else:\n            res += c\n    return\
    \ res\n", "    if not any(c.isalpha() for c in s):\n        return s[::-1]\n \
    \   return ''.join(c.upper() if c.islower() else c.lower() for c in s)", "   \
    \ # your code goes here\n    return \"\"\n\n", "    return s[::-1] if not any(c.isalpha()\
    \ for c in s) else \"\".join(c.upper() if c.islower() else c.lower() for c in\
    \ s)\n\n", "    return ''.join(char.upper() if char.islower() else char.lower()\
    \ if char.isupper() else char for char in s[::-1])\n\n", "    l = []\n    for\
    \ i in s:\n        l.append(i)\n    for j in range(len(l)):\n        if l[j].isalpha():\n\
    \            l[j] = l[j].swapcase()\n    if len(l) == 0:\n        return s[::-1]\n\
    \    return \"\".join(l)\n\nprint(solve(\"ab\"))", "    s = s[::-1]\n    if not\
    \ s.isalpha():\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n\
    \            if s[i].isupper():\n                s = s[:i] + s[i].lower() + s[i+1:]\n\
    \            else:\n                s = s[:i] + s[i].upper() + s[i+1:]\n    return\
    \ s\n", "    is_letter = False\n    for c in s:\n        if c.isalpha():\n   \
    \         is_letter = True\n            break\n    if is_letter:\n        ret\
    \ = ''\n        for c in s:\n            if c.isalpha():\n                ret\
    \ += c.swapcase()\n            else:\n                ret += c\n        return\
    \ ret\n    else:\n        return s[::-1]", "    length = len(s)\n    if length\
    \ <= 1:\n        return s[::-1]\n    else:\n        result = ''\n        for i\
    \ in range(length):\n            if s[i].isalpha():\n                if s[i].islower():\n\
    \                    result += s[i].upper()\n                else:\n         \
    \           result += s[i].lower()\n            else:\n                result\
    \ += s[i]\n        return result\n\nprint(solve(\"#a@C\"))", "    if not s.isalpha():\n\
    \        return s[::-1]\n    return s.swapcase()\n", "    if s.islower() or s.isupper():\n\
    \        return s[::-1]\n    return ''.join([c.upper() if c.islower() else c.lower()\
    \ for c in s])\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"\
    #a@C\"))\n", "    tmp = []\n    for i in s:\n        if i.isalpha():\n       \
    \     if i.islower():\n                tmp.append(i.upper())\n            else:\n\
    \                tmp.append(i.lower())\n        else:\n            tmp.append(i)\n\
    \    if tmp:\n        return ''.join(tmp)\n    else:\n        return s[::-1]\n\
    print(solve(\"#a@C\"))\n", "    letters = {chr(c) for c in range(ord('a'), ord('z')\
    \ + 1)}\n    letters.update({chr(c) for c in range(ord('A'), ord('Z') + 1)})\n\
    \    res = []\n    for ch in s:\n        if ch in letters:\n            if ch.islower():\n\
    \                res.append(ch.upper())\n            else:\n                res.append(ch.lower())\n\
    \        else:\n            res.append(ch)\n    return ''.join(res[::-1]) if res\
    \ else s\n\n", "    if not s:\n        return \"\"\n    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        res = \"\"\n        for i in s:\n\
    \            if i.isupper():\n                res += i.lower()\n            else:\n\
    \                res += i.upper()\n        return res\n    \n    \n", "    letters\
    \ = []\n    for c in s:\n        if c.isalpha():\n            letters.append(c)\n\
    \    if letters:\n        return s.swapcase()\n    else:\n        return s[::-1]\n\
    \n", '    return s[::-1] if not s.isalpha() else "".join(i.upper() if i.islower()
    else i.lower() for i in s)', "    if any(c.isalpha() for c in s):\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\n", "    for char in s:\n\
    \        if char.isalpha():\n            return s.swapcase()\n    return s[::-1]\n\
    \n", "    s_list = list(s)\n    flag = False\n    for i in range(len(s_list)):\n\
    \        if s_list[i].isalpha():\n            flag = True\n            if s_list[i].islower():\n\
    \                s_list[i] = s_list[i].upper()\n            else:\n          \
    \      s_list[i] = s_list[i].lower()\n    if flag:\n        return \"\".join(s_list)\n\
    \    else:\n        return s[::-1]", "    return \"\".join(ch.upper() if ch.islower()\
    \ else ch.lower() for ch in s) if any(ch.isalpha() for ch in s) else s[::-1]\n\
    \nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"\
    1234\"))\nprint(solve(\"\"))\n", "    # 1. Check if s is alphabetic\n    if s.isalpha():\n\
    \        # 2. Create a new string\n        new_s = \"\"\n        # 3. Create a\
    \ for loop to go through s and reverse the case, then add it to the new string\n\
    \        for c in s:\n            new_s += c.swapcase()\n        # 4. Return the\
    \ new string\n        return new_s\n    # 5. If s is not alphabetic, reverse it\n\
    \    else:\n        return s[::-1]\n", "    # your code here\n    return None\n\
    \n", "    string = \"\"\n    for char in s:\n        if char.isalpha():\n    \
    \        string += char.swapcase()\n        else:\n            string += char\n\
    \    return string[::-1]\n\n", "    # There's no letters in the string, just reverse\
    \ it and return.\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\
    \    # There are letters in the string, reverse it and reverse letters' cases.\n\
    \    return \"\".join(c.upper() if c.islower() else c.lower() for c in s[::-1])\n\
    \n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))", " \
    \   if s:\n        s = s.swapcase()\n        return s[::-1]\n    else:\n     \
    \   return s\n\n", "    if not set(s) & set(string.ascii_letters):\n        return\
    \ s[::-1]\n    return \"\".join(c.swapcase() if c.isalpha() else c for c in s)",
  "    if s.isalpha():\n        if s.islower():\n            return s.upper()\n  \
    \      else:\n            return s.lower()\n    return \"\".join(reversed(s))\n",
  "    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    s_ = \"\"\n    for i in s:\n\
    \        if i in letters:\n            if i.isupper():\n                s_ +=\
    \ i.lower()\n            else:\n                s_ += i.upper()\n        else:\n\
    \            s_ += i\n    if s_ == s:\n        return s_[::-1]\n    return s_\n\
    \n", "    return s[::-1] if not s.isalpha() else s.swapcase()\n\n", "    x = ''.join(i.swapcase()\
    \ if i.isalpha() else i for i in s)\n    if x == s:\n        return x[::-1]\n\
    \    return x\n\n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n", "    return \"\".join(map(lambda x: x.upper() if x.islower()\
    \ else x.lower(), s)) if s.isalpha() else s[::-1]\n\n", "    letters = set(string.ascii_letters)\n\
    \    if not any(i in letters for i in s):\n        return s[::-1]\n    return\
    \ ''.join(i.lower() if i.isupper() else i.upper() for i in s)\n\n", "    if not\
    \ s:\n        return \"\"\n    s = list(s)\n    for i in range(len(s)):\n    \
    \    if s[i].isalpha():\n            s[i] = s[i].swapcase()\n        else:\n \
    \           s[i] = s[i]\n    return \"\".join(s)\n\n", "    # replace all letters\
    \ with lowercase\n    n = s.translate(str.maketrans('', '', string.ascii_letters))\n\
    \    # replace all letters with uppercase\n    m = s.translate(str.maketrans('',\
    \ '', string.ascii_lowercase))\n    # if the string contains no letters, reverse\
    \ the string\n    if len(n) == len(s):\n        return s[::-1]\n    # if the string\
    \ contains at least one letter\n    # and it's uppercase, return the lowercase\
    \ version\n    elif len(m) < len(s):\n        return s.swapcase()\n    # if the\
    \ string contains at least one letter\n    # and it's lowercase, return the uppercase\
    \ version\n    else:\n        return s.swapcase()\n", "    is_lower = lambda c:\
    \ 'a' <= c <= 'z'\n    is_upper = lambda c: 'A' <= c <= 'Z'\n    is_letter = lambda\
    \ c: is_lower(c) or is_upper(c)\n    return ''.join(list(map(lambda c: c.upper()\
    \ if is_lower(c) else c.lower() if is_upper(c) else c, s))) if any(map(is_letter,\
    \ s)) else s[::-1]\n", "    if not s:\n        return s\n    return s.swapcase()\n\
    \n", "    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    cap_letters = letters.upper()\n\
    \    if not s.isalpha():\n        return s[::-1]\n    res = ''\n    for c in s:\n\
    \        if c in letters:\n            res += cap_letters[letters.index(c)]\n\
    \        elif c in cap_letters:\n            res += letters[cap_letters.index(c)]\n\
    \        else:\n            res += c\n    return res\n\nprint(solve(\"ab\"))",
  "    if s.islower() or s.isupper():\n        return s[::-1]\n    else:\n       \
    \ pass\n\n", "    s = s[::-1]\n    for i in range(len(s)):\n        if s[i].isalpha():\n\
    \            s = s[:i] + s[i].swapcase() + s[i+1:]\n    return s\n", "    if not\
    \ s:\n        return \"\"\n    is_letter = lambda c: 'a' <= c <= 'z' or 'A' <=\
    \ c <= 'Z'\n    if any(map(is_letter, s)):\n        return \"\".join(s.swapcase())\n\
    \    else:\n        return s[::-1]\n\n", "    return s[::-1]\n\n", "    return\
    \ s[::-1] if not any(x.isalpha() for x in s) else ''.join(\n        [i.lower()\
    \ if i.isupper() else i.upper() for i in s])\n\n", "    if not s:\n        return\
    \ \"\"\n    letters = [x for x in s if x.isalpha()]\n    # reverse letters\n \
    \   if letters:\n        letters = reversed([x.lower() if x.isupper() else x.upper()\
    \ for x in letters])\n        for i, x in enumerate(s):\n            if x.isalpha():\n\
    \                s = s[:i] + next(letters) + s[i+1:]\n    else:\n        s = s[::-1]\n\
    \    return s\n\n", "    if s.lower() == s:\n        return s[::-1]\n    return\
    \ ''.join(ch.lower() if ch.isupper() else ch.upper() for ch in s)\n\n", "    if\
    \ not s:\n        return \"\"\n    s = s[::-1]\n    rev = \"\"\n    for i in s:\n\
    \        if i.isalpha():\n            if i.islower():\n                rev +=\
    \ i.upper()\n            else:\n                rev += i.lower()\n        else:\n\
    \            rev += i\n    return rev\n\n\n@pytest.mark.parametrize(\n    \"s,\
    \ expected\",\n    [\n        (\"\", \"\"),\n        (\"1234\", \"4321\"),\n \
    \       (\"ab\", \"AB\"),\n        (\"#a@C\", \"#A@c\"),\n        (\"#a@C  ??\"\
    , \"??  #A@c\"),\n        (\"\", \"\"),\n        (\"1234\", \"4321\"),\n     \
    \   (\"ab\", \"AB\"),\n        (\"#a@C\", \"#A@c\"),\n        (\"#a@C  ??\", \"\
    ??  #A@c\"),\n    ],\n)", "    if not s:\n        return \"\"\n    if not s.isalpha():\n\
    \        return s[::-1]\n    s = list(s)\n    for i in range(len(s)):\n      \
    \  if s[i].isalpha():\n            s[i] = s[i].swapcase()\n    return \"\".join(s)\n\
    \n", "    return s[::-1] if s.isalpha() else ''.join(reversed(s))\n\n", "    if\
    \ s.lower() == s:\n        return s[::-1]\n    else:\n        return ''.join([chr(ord(c)\
    \ - 32) if c.islower() else chr(ord(c) + 32)\n                        for c in\
    \ s[::-1]])", "    if re.search(r'[a-zA-Z]', s):\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n", "    if s:\n        letters = [chr(x)\
    \ for x in range(ord('a'), ord('z') + 1)]\n        letter_set = set(letters)\n\
    \        if set(s) & letter_set:\n            new_string = ''\n            for\
    \ c in s:\n                if c in letter_set:\n                    new_string\
    \ += c.swapcase()\n                else:\n                    new_string += c\n\
    \            return new_string\n        else:\n            return s[::-1]\n  \
    \  else:\n        return s\n\n", "    return \"\".join(c.swapcase() if c.isalpha()\
    \ else c for c in s[::-1])\n    # return \"\".join(c.swapcase() if c.isalpha()\
    \ else c for c in s[::-1])\n\n", "    return s[::-1]\n\n", "    ret = \"\"\n \
    \   is_letter = False\n    for c in s:\n        if c.isalpha():\n            ret\
    \ += c.swapcase()\n            is_letter = True\n        else:\n            ret\
    \ += c\n    if not is_letter:\n        ret = ret[::-1]\n    return ret\n\n", " \
    \   return s[::-1] if s.isupper() or s.islower() else s.swapcase()\n\nprint(solve(\"\
    heLLo\")) # should be \"oLLeh\"\nprint(solve(\"#a@C\")) # should be \"#A@c\"\n\
    print(solve(\"\")) # should be \"\"\nprint(solve(\"123\")) # should be \"321\"\
    \nprint(solve(\"@A#\")) # should be \"#A@\"\nprint(solve(\"1a2b3c\")) # should\
    \ be \"c1b2a3\"\nprint(solve(\"123456789\")) # should be \"987654321\"\nprint(solve(\"\
    9\")) # should be \"9\"\nprint(solve(\"abCd\")) # should be \"dCbA\"\nprint(solve(\"\
    Hello, world!\")) # should be \"!dlrow ,olleH\"\nprint(solve(\"HELlo, WORLD!\"\
    )) # should be \"!DLROW ,OLLEh\"\nprint(solve(\"Hello, world!!!123\")) # should\
    \ be \"321!!!dlrow ,olleH\"\nprint(solve(\"!@#Dfghj\")) # should be \"JHGFD#@!\"\
    \nprint(solve(\"123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )) # should be \"ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba\"\nprint(solve(\"\
    Hello, world123\")) # should be \"321dlrow ,olleH\"\nprint(solve(\"Hello, world!\"\
    )) # should be \"!dlrow ,olleH\"\nprint(solve(\"abc\")) # should be \"CBA\"\n\
    print(solve(\"My name is (your_name_here)!!!\")) # should be \"!!!(ereh_eman_ruoy_si_ema_yM\"\
    \nprint(solve(\"CodeWars\")) # should be \"srawedO\"\nprint(solve(\"Qaz zaq\"\
    )) # should be \"zaq Qaz\"\nprint(solve(\"I'm a little", "    reverse = \"\"\n\
    \    for i in s:\n        if i.isalpha():\n            reverse += i.swapcase()\n\
    \        else:\n            reverse += i\n    return reverse[::-1] if reverse\
    \ else reverse\n\n", "    s = s[::-1]\n    return s\n", "    is_all_letter = True\n\
    \    for c in s:\n        if not c.isalpha():\n            is_all_letter = False\n\
    \            break\n    return s[::-1] if is_all_letter else s.swapcase()\n\n",
  "    letters = [c for c in s if c.isalpha()]\n    return \"\".join(letters[::-1])\
    \ if letters else s[::-1]\n\n", "    if s.isalpha():\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n", "    # My solution\n    # return s[::-1]\
    \ if s.isalpha() else \"\".join([i.upper() if i.islower() else i.lower() for i\
    \ in s])[::-1]\n\n    # Better solution\n    # return s[::-1].swapcase() if s.isalpha()\
    \ else s[::-1]\n\n    # Most pythonic\n    # return s[::-1].swapcase() if s.isalpha()\
    \ else s[::-1]\n\n    # Easier to read\n\n    return s[::-1].swapcase() if s.isalpha()\
    \ else s[::-1]\n\n", "    if any(c.isalpha() for c in s):\n        return ''.join(i.lower()\
    \ if i.isupper() else i.upper() for i in s)\n    else:\n        return s[::-1]\n",
  "    pass\n", "    return s[::-1] if not s.isalpha() else s.swapcase()\n\n\nprint(solve(\"\
    1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))", "    if not s:\n    \
    \    return s\n    if s.isalpha():\n        return s[::-1].swapcase()\n    return\
    \ ''.join(c.swapcase() if c.isalpha() else c for c in s[::-1])", "    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    else:\n        return \"\".join(\n\
    \            c.upper() if c.islower() else c.lower() if c.isupper() else c for\
    \ c in s\n        )", "    try:\n        return \"\".join(\n            (c.upper()\
    \ if c.islower() else c.lower())\n            if c.isalpha()\n            else\
    \ c\n            for c in s\n        )\n    except TypeError:\n        return\
    \ \"\"", "    # check if string contain alphabet\n    if is_alphabet(s):\n   \
    \     return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    s_list\
    \ = list(s)\n    reverse_list = []\n    for char in s_list:\n        if char.isalpha():\n\
    \            reverse_list.append(char.swapcase())\n        else:\n           \
    \ reverse_list.append(char)\n    if len(reverse_list) == 0:\n        return s[::-1]\n\
    \    else:\n        return \"\".join(reverse_list)\n\n", "    if not s:\n    \
    \    return s\n    s = s[::-1]\n    ret = []\n    for i in s:\n        if i.isalpha():\n\
    \            if i.islower():\n                ret.append(i.upper())\n        \
    \    else:\n                ret.append(i.lower())\n        else:\n           \
    \ ret.append(i)\n    return ''.join(ret)\n\n\nprint(solve(\"ab\"))", "    if s\
    \ == \"\":\n        return s\n    letters = list(filter(lambda x: x.isalpha(),\
    \ s))\n    letters.reverse()\n    new_s = \"\"\n    for c in s:\n        if c.isalpha():\n\
    \            letter = letters.pop()\n            new_s += letter\n        else:\n\
    \            new_s += c\n    return new_s\n\n", "    if any(c.isalpha() for c\
    \ in s):\n        return s.swapcase()\n    else:\n        return s[::-1]\n", " \
    \   return s[::-1] if not any(c.isalpha() for c in s) else s.swapcase()\n\n",
  "    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return \"\"\
    .join(\n        chr(ord(c) ^ 32) if c.isalpha() else c for c in s)\n\n", "   \
    \ if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return\
    \ ''.join(char.upper() if char.islower() else char.lower() for char in s)\n\n",
  "    return s[::-1] if s.isdigit() else s.swapcase()\n\n", "    s_ = []\n    for\
    \ x in s:\n        if x.isalpha():\n            if x.islower():\n            \
    \    s_.append(x.upper())\n            else:\n                s_.append(x.lower())\n\
    \        else:\n            s_.append(x)\n    return \"\".join(s_[::-1]) if s_\
    \ else s[::-1]\n\n", "    return s[::-1] if not s.isalpha() else ''.join(map(lambda\
    \ c: c.upper() if c.islower() else c.lower(), s))\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    res = []\n    for c in s:\n        if c.isalpha():\n\
    \            res.append(c.swapcase())\n        else:\n            res.append(c)\n\
    \    return ''.join(res)\n\n", "    pass\n\n", "    return s[::-1] if s.isalpha()\
    \ else \"\".join(\n        [c.upper() if c.islower() else c.lower() for c in s]\n\
    \    )\n\n\nprint(solve(\"1234\"))  # \"4321\"\nprint(solve(\"ab\"))  # \"AB\"\
    \nprint(solve(\"#a@C\"))  # \"#A@c\"", "    if not s.strip():\n        return\
    \ s[::-1]\n    return ''.join(\n        c.upper() if c.islower() else c.lower()\
    \ if c.isupper() else c\n        for c in s\n    )", "    return s[::-1] if len(s)\
    \ == len(re.sub(r\"[a-zA-Z]\", \"\", s)) else s.swapcase()\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
