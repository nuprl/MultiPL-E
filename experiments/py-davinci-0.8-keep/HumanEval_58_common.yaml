name: HumanEval_58_common
language: py
prompt: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n\
  \    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5,\
  \ 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5,\
  \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3,\
  \ 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n  \
  \  assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\
  \ntest_check()\n"
completions: ["    return sorted(set(l1) & set(l2))\n\n", "    d = {}\n    res = []\n\
    \    for i in l1:\n        d[i] = d.get(i, 0) + 1\n    for i in l2:\n        if\
    \ i in d and d[i] > 0:\n            res.append(i)\n            d[i] -= 1\n   \
    \ return sorted(res)\n", "    return sorted(set(l1) & set(l2))\n", "    return\
    \ sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\n\n",
  "    counter = Counter(l1 + l2)\n    return sorted(list(filter(lambda x: counter[x]\
    \ > 1, counter)))\n\n", "    set1 = set(l1)\n    set2 = set(l2)\n    result =\
    \ list(set1 & set2)\n    result.sort()\n    return result\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    cmn = []\n    # l1 or l2 can be empty in which case the\
    \ answer is empty.\n    if len(l1) == 0 or len(l2) == 0:\n        return cmn\n\
    \    # if l1 is the longest list.\n    if len(l1) > len(l2):\n        for x in\
    \ l2:\n            if x in l1:\n                cmn.append(x)\n    # if l2 is\
    \ the longest list.\n    elif len(l2) > len(l1):\n        for x in l1:\n     \
    \       if x in l2:\n                cmn.append(x)\n    # if they are the same\
    \ length.\n    else:\n        for x in l1:\n            if x in l2:\n        \
    \        cmn.append(x)\n    return sorted(list(set(cmn)))\n", "    intersection\
    \ = []\n    for num in l1:\n        if num in l2:\n            intersection.append(num)\n\
    \    return sorted(set(intersection))\n", "    return sorted(set(l1) & set(l2))\n",
  "    l3 = []\n    for i in l1:\n        if i in l2:\n            l3.append(i)\n\
    \    l3.sort()\n    return l3\n", "    return sorted(set(l1) & set(l2))\n", " \
    \   return sorted(set(l1) & set(l2))\n\n", "    # common_elements = []\n    #\
    \ for n in l1:\n    #     if n in l2:\n    #         common_elements.append(n)\n\
    \    # return common_elements\n    return sorted(set(l1) & set(l2))\n\n\n", " \
    \   return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n",
  "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n",
  "    #create a set from first list\n    s1 = set(l1)\n    #create a set from second\
    \ list\n    s2 = set(l2)\n    #interesect two sets\n    s3 = s1.intersection(s2)\n\
    \    #return list of sorted elements\n    return sorted(s3)\n", "    l1 = set(l1)\n\
    \    l2 = set(l2)\n    l3 = l1 & l2\n    return sorted(l3)\n", "    #convert lists\
    \ to sets, to be able to compare the two using intersection\n    s1 = set(l1)\n\
    \    s2 = set(l2)\n    #create empty set to return\n    s3 = set()\n    #using\
    \ the intersection method to compare the two sets, and return in sorted order.\n\
    \    s3 = sorted(s1.intersection(s2))\n    return s3\n\n", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n", "    if not l1 or\
    \ not l2:\n        return []\n    sort_l1 = sorted(l1)\n    sort_l2 = sorted(l2)\n\
    \    i = 0\n    j = 0\n    res = []\n    while i < len(sort_l1) and j < len(sort_l2):\n\
    \        if sort_l1[i] == sort_l2[j]:\n            res.append(sort_l1[i])\n  \
    \          i += 1\n            j += 1\n        elif sort_l1[i] < sort_l2[j]:\n\
    \            i += 1\n        else:\n            j += 1\n    return res\n\n", " \
    \   return sorted(set(l1) & set(l2))\n\n", "    common_nums = [num for num in\
    \ l1 if num in l2]\n    common_nums.sort()\n    # remove duplicates from list\n\
    \    new_list = [nums for nums in common_nums if nums not in common_nums[common_nums.index(nums)\
    \ + 1:]]\n    return new_list\n", "    l1.sort()\n    l2.sort()\n    i, j = 0,\
    \ 0\n    res = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] ==\
    \ l2[j]:\n            res.append(l1[i])\n            i += 1\n            j +=\
    \ 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n        \
    \    j += 1\n    return res\n", "    a = set(l1)\n    b = set(l2)\n    return\
    \ sorted(list(a & b))\n\n", "    ls1 = set(l1)\n    ls2 = set(l2)\n    return\
    \ sorted(ls1 & ls2)\n", "    return sorted(set(l1) & set(l2))\n\n", "    com =\
    \ []\n    for i in l1:\n        if i in l2:\n            com.append(i)\n    com.sort()\n\
    \    return set(com)\n\n", "    # common1 = []\n    # for num in l1:\n    #  \
    \   if num in l2:\n    #         common1.append(num)\n    #\n    # common2 = []\n\
    \    # for num in l2:\n    #     if num in l1:\n    #         common2.append(num)\n\
    \    #\n    # if len(common1) == len(common2):\n    #     return sorted(list(set(common1)))\n\
    \    # else:\n    #     return []\n\n    return sorted(list(set(l1) & set(l2)))\n\
    \n", "    l3 = []\n    for i in l1:\n        if i in l2:\n            l3.append(i)\n\
    \    return list(sorted(set(l3)))\n", "    common_list = []\n    # O(n^2)\n  \
    \  for i in l1:\n        if i in l2:\n            common_list.append(i)\n    return\
    \ sorted(set(common_list))\n", "    res = list(set(l1) & set(l2))\n    res.sort()\n\
    \    return res\n\n", "    l1.sort()\n    l2.sort()\n    i = 0\n    j = 0\n  \
    \  res = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n\
    \            res.append(l1[i])\n            i += 1\n            j += 1\n     \
    \   elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n\
    \    return res\n\n", "    return sorted(set(l1) & set(l2))\n", "    l1 = set(l1)\n\
    \    l2 = set(l2)\n    return sorted(l1 & l2)\n", "    return sorted(set(l1) &\
    \ set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n", "    common_elements\
    \ = []\n    for item in l1:\n        if item in l2 and item not in common_elements:\n\
    \            common_elements.append(item)\n    return sorted(common_elements)\n\
    \n", "    return sorted(set(l1) & set(l2))\n", "    # Use sets to eliminate duplicate\
    \ elements\n    return sorted(set(l1) & set(l2))\n", "    common_lst = []\n  \
    \  for n in l1:\n        if n in l2:\n            common_lst.append(n)\n    return\
    \ sorted(list(set(common_lst)))\n\n", "    return sorted(set(l1) & set(l2))\n",
  "    set1 = set(l1)\n    set2 = set(l2)\n    union = list(set1.intersection(set2))\n\
    \    union.sort()\n    return union\n", "    l1.sort()\n    l2.sort()\n    return\
    \ sorted(list(set(l1).intersection(l2)))\n\n", "    return sorted(set(l1) & set(l2))\n",
  "    # count elements of the first list\n    dict1 = dict()\n    for e in l1:\n\
    \        dict1[e] = dict1.get(e, 0) + 1\n    # find common elements\n    common\
    \ = list()\n    for e in l2:\n        if e in dict1 and dict1[e] > 0:\n      \
    \      common.append(e)\n            dict1[e] -= 1\n    # sort and return\n  \
    \  common.sort()\n    return common\n\n", "    lst = []\n    for i in l1:\n  \
    \      if i in l2:\n            lst.append(i)\n    s = list(set(lst))\n    s.sort()\n\
    \    return s\n", "    return sorted(set(l1) & set(l2))\n", "    l1.sort()\n \
    \   l2.sort()\n    if len(l1) > len(l2):\n        l1, l2 = l2, l1\n    result\
    \ = []\n    i = 0\n    for item in l1:\n        i = bisect.bisect_left(l2, item,\
    \ i)\n        if i < len(l2) and l2[i] == item:\n            result.append(item)\n\
    \            i += 1\n    return result\n", "    return sorted(set(l1) & set(l2))\n",
  "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\
    \n", "    return sorted(set(l1) & set(l2))\n\nprint(common([1, 4, 3, 34, 653,\
    \ 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))", " \
    \   common_list = []\n    for e in l1:\n        if e in l2:\n            common_list.append(e)\n\
    \    common_list.sort()\n    return common_list\n\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    # l1 = [1, 4, 3, 34, 653, 2, 5]\n    # l2 = [5, 7, 1, 5,\
    \ 9, 653, 121]\n    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    common = []\n    # write your code here\n    return common\n",
  "    return sorted(set(l1) & set(l2))\n\ncommon([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121])", "    return sorted(set(l1) & set(l2))\n", "    s1 = set(l1)\n\
    \    s2 = set(l2)\n    comm = s1.intersection(s2)\n    comm = list(comm)\n   \
    \ comm.sort()\n    return comm\n\n", "    return sorted(set(l1) & set(l2))\n",
  "    s1 = set(l1)\n    s2 = set(l2)\n    common_elements = s1.intersection(s2)\n\
    \    return sorted(list(common_elements))\n", "    return sorted(set(l1) & set(l2))\n",
  "    l1_set = set(l1)\n    l2_set = set(l2)\n    l3 = sorted(l1_set.intersection(l2_set))\n\
    \    return l3\n\n", "    if len(l1) < len(l2):\n        return common(l2, l1)\n\
    \    else:\n        l2 = set(l2)\n        return sorted(list(l2.intersection(l1)))\n",
  "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n",
  "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n",
  "    # TODO: add code here\n    return list(set(l1) & set(l2))\n\n", "    common\
    \ = list(set(l1) & set(l2))\n    common.sort()\n    return common\n", "    # l1.sort()\n\
    \    # l2.sort()\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n\
    \            if l1[i] == l2[j]:\n                return [l1[i]]\n            else:\n\
    \                return []\n\n\n", "    set1 = set(l1)\n    set2 = set(l2)\n \
    \   return sorted(set1 & set2)\n", "    s1 = set(l1)\n    s2 = set(l2)\n    return\
    \ sorted(s1 & s2)\n", "    a = set(l1)\n    b = set(l2)\n    c = a & b\n    return\
    \ sorted(c)\n    \n    ", "    # run into each list and add to a set.\n    # elements\
    \ in a set are unique\n    s1 = set(l1)\n    s2 = set(l2)\n    # now get the intersection\
    \ of these two sets\n    # this will return a set\n    # convert to list and return\
    \ it\n    return list(s1.intersection(s2))\n", "    if not isinstance(l1, list)\
    \ or not isinstance(l2, list):\n        raise TypeError('Function common() must\
    \ take two lists')\n    else:\n        for element in l1:\n            if not\
    \ isinstance(element, int):\n                raise TypeError('Function common()\
    \ must take lists with numbers')\n        for element in l2:\n            if not\
    \ isinstance(element, int):\n                raise TypeError('Function common()\
    \ must take lists with numbers')\n        answer = []\n        for i in l1:\n\
    \            if i in l2 and i not in answer:\n                answer.append(i)\n\
    \        answer.sort()\n        return answer\n", "    return sorted(set(l1) &\
    \ set(l2))\n", "    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\n", "    # new_list =\
    \ []\n    # for i in l1:\n    #     if i in l2:\n    #         new_list.append(i)\n\
    \    # return sorted(list(set(new_list)))\n    return sorted(list(set(l1) & set(l2)))\n",
  "    intersection = [x for x in l1 if x in l2]\n    if len(intersection) > 0:\n\
    \        return sorted(list(set(intersection)))\n    else:\n        return None\n",
  "    l1.sort()\n    l2.sort()\n    a = 0\n    b = 0\n    unique = []\n    while\
    \ a < len(l1) and b < len(l2):\n        if l1[a] == l2[b]:\n            if not\
    \ unique or unique[-1] != l1[a]:\n                unique.append(l1[a])\n     \
    \       a += 1\n            b += 1\n        elif l1[a] < l2[b]:\n            a\
    \ += 1\n        else:\n            b += 1\n    return unique\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    l1_set = set(l1)\n    return sorted(list(l1_set.intersection(l2)))\n\
    \n", "    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1) &\
    \ set(l2))\n", "    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\n\n", "    l1.sort()\n\
    \    l2.sort()\n    i = 0\n    common_l = []\n    for v in l1:\n        if v in\
    \ l2:\n            if v != i:\n                common_l.append(v)\n          \
    \      i = v\n    return common_l\n", "    return sorted(set(l1) & set(l2))\n\n",
  "    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n\
    \    common_elements = list(common_elements)\n    common_elements.sort()\n   \
    \ return common_elements\n\n", "    comm = []\n    l1.sort()\n    l2.sort()\n\
    \    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i]\
    \ < l2[j]:\n            i += 1\n        elif l1[i] > l2[j]:\n            j +=\
    \ 1\n        else:\n            comm.append(l1[i])\n            i += 1\n     \
    \       j += 1\n    return comm\n", "    return sorted(set(l1) & set(l2))\n\n",
  "    return sorted(set(l1) & set(l2))\n\nprint(common([1, 4, 3, 34, 653, 2, 5],\
    \ [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))", "    if l1\
    \ == [] or l2 == []:\n        return []\n    l1.sort()\n    l2.sort()\n    common_list\
    \ = []\n    for number in l1:\n        if number in l2 and number not in common_list:\n\
    \            common_list.append(number)\n    return common_list\n\n", "    cmn\
    \ = set(l1) & set(l2)\n    cmn = list(cmn)\n    cmn.sort()\n    return cmn\n",
  "    l1.sort()\n    l2.sort()\n    r = []\n    i = 0\n    j = 0\n    while i < len(l1)\
    \ and j < len(l2):\n        if l1[i] == l2[j]:\n            r.append(l1[i])\n\
    \            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n       \
    \     i += 1\n        else:\n            j += 1\n    return r\n", "    d1 = {}\n\
    \    d2 = {}\n    ret = []\n    for i in l1:\n        d1[i] = True\n    for i\
    \ in l2:\n        d2[i] = True\n    for i in d1:\n        if i in d2:\n      \
    \      ret.append(i)\n    return sorted(ret)\n", "    #lists = [l1, l2]\n    #return\
    \ sorted(set(l1).intersection(l2))\n    return sorted(list(set(l1).intersection(l2)))\n\
    \n", "    common_list = []\n    for num in l1:\n        if num in l2:\n      \
    \      common_list.append(num)\n    return sorted(set(common_list))\n    \n",
  "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1 & s2)\n", "    return\
    \ sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n\n",
  "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n",
  "    return sorted(set(l1) & set(l2))\n\n", "    from collections import Counter\n\
    \    c1 = Counter(l1)\n    c2 = Counter(l2)\n    common = c1 & c2\n    lcommon\
    \ = list(common.elements())\n    lcommon.sort()\n    return lcommon", "    # T\
    \ = O(nlog(n))\n    l1_set = set(l1)\n    l2_set = set(l2)\n    common_set = l1_set.intersection(l2_set)\n\
    \    common_list = list(common_set)\n    common_list.sort()\n    return common_list\n\
    \n", "    l1.sort()\n    l2.sort()\n    common_elements = []\n    for i in l1:\n\
    \        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\
    \n", "    d = {}\n    c = []\n    for i in l1:\n        d[i] = d.get(i, 0) + 1\n\
    \    for i in l2:\n        d[i] = d.get(i, 0) + 1\n    for i in d:\n        if\
    \ d[i] == 2:\n            c.append(i)\n    return sorted(c)", "    # Try to write\
    \ this using set union.\n    s1 = set(l1)\n    s2 = set(l2)\n    s = s1.intersection(s2)\n\
    \    return sorted(list(s))\n", "    # return list(set(l1) & set(l2))\n    return\
    \ list(set(l1).intersection(set(l2)))\n\n", "    return sorted(set(l1) & set(l2))\n\
    \nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5,\
    \ 3, 2, 8], [3, 2]))", "    if not l1 or not l2:\n        return []\n    l1 =\
    \ set(l1)\n    l2 = set(l2)\n    l3 = l1.intersection(l2)\n    return sorted(l3)\n\
    \n", "    return sorted(set(l1) & set(l2))\n", "    # create an empty set to store\
    \ the common elements\n    com_elements = set()\n    # loop through the first\
    \ list\n    for el in l1:\n        # if the element is in the second list, add\
    \ it to the common elements set\n        if el in l2:\n            com_elements.add(el)\n\
    \    # return a sorted list of the common elements\n    return sorted(com_elements)\n\
    \n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\
    \n", "    res = []\n    for i in l1:\n        if i in l2:\n            res.append(i)\n\
    \    return sorted(set(res))\n", "    return sorted(set(l1) & set(l2))\n", " \
    \   for x in l1:\n        if x in l2:\n            return sorted(list(set(l1)\
    \ & set(l2)))\n\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    l3 = list(set(l1).intersection(set(l2)))\n    l3.sort()\n\
    \    return l3\n\n", "    return sorted(set(l1) & set(l2))\n", "    #convert to\
    \ set, find common elements and cast back to list\n    return list(set(l1) & set(l2))\n",
  "    return sorted(set(l1) & set(l2))\n", "    # your code here\n    return sorted(list(set(l1)\
    \ & set(l2)))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    res = set(l1)\
    \ & set(l2)\n    return sorted(res)\n", "    s1 = set(l1)\n    s2 = set(l2)\n\
    \    common_elements = list(s1.intersection(s2))\n    common_elements.sort()\n\
    \    return common_elements\n", "    return sorted(set(l1) & set(l2))\n", "  \
    \  return sorted(set(l1) & set(l2))\n\n", "    # Converts the lists to sets to\
    \ get their unique elements\n    s1 = set(l1)\n    s2 = set(l2)\n    # finds the\
    \ intersection of the sets and converts the results to a list\n    r = list(s1.intersection(s2))\n\
    \    # sort the list\n    r.sort()\n    return r\n\n", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    d1 = dict()\n    d2 = dict()\n    result = []\n    for\
    \ i in l1:\n        d1[i] = d1.get(i, 0) + 1\n    for i in l2:\n        d2[i]\
    \ = d2.get(i, 0) + 1\n    for i in d1:\n        if i in d2:\n            result.append(i)\n\
    \    return sorted(result)\n", "    return sorted(set(l1) & set(l2))\n\n", " \
    \   # return list(set(l1) & set(l2))\n    if l1 is None or l2 is None:\n     \
    \   return []\n    if len(l1) < len(l2):\n        l2, l1 = l1, l2\n    common_list\
    \ = []\n    for i in l1:\n        if i in l2:\n            common_list.append(i)\n\
    \    return sorted(list(set(common_list)))\n\nprint(common([1, 4, 3, 34, 653,\
    \ 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))", " \
    \   return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n\
    \n", "    common = []\n    for el in l1:\n        if el in l2:\n            common.append(el)\n\
    \    return sorted(list(set(common)))\n", "    #l1 = [1, 4, 3, 34, 653, 2, 5]\n\
    \    #l2 = [5, 7, 1, 5, 9, 653, 121]\n    return sorted(set(l1) & set(l2))\n\n",
  "    return sorted(set(l1) & set(l2))\n", "    res = []\n    for i in l1:\n    \
    \    if i in l2:\n            res.append(i)\n    return sorted(set(res))\n", " \
    \   res = []\n    for item in l1:\n        if item in l2 and item not in res:\n\
    \            res.append(item)\n    return sorted(res)\n\n", "    l1.sort()\n \
    \   l2.sort()\n    out = []\n    for l in l1:\n        if l in l2 and l not in\
    \ out:\n            out.append(l)\n    return out\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    common_elements\
    \ = []\n    for element in l1:\n        if element in l2 and element not in common_elements:\n\
    \            common_elements.append(element)\n    common_elements.sort()\n   \
    \ return common_elements\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    common = []\n    for e in l1:\n        if e in l2:\n   \
    \         common.append(e)\n    return sorted(set(common))\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    l1 = set(l1)\n\
    \    l2 = set(l2)\n    l3 = sorted(l1 & l2)\n    return l3\n\n\nprint(common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8],\
    \ [3, 2]))", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    res = []\n    i = 0\n    j = 0\n    while i < len(l1)\
    \ and j < len(l2):\n        if l1[i] == l2[j]:\n            res.append(l1[i])\n\
    \            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n       \
    \     i += 1\n        else:\n            j += 1\n    return res\n\nprint(common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8],\
    \ [3, 2]))", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    # return sorted(set(l1) & set(l2))\n    return sorted(set(l1).intersection(l2))\n\
    \n\n", "    if len(l1) < len(l2):\n        shorter = l1\n        longer = l2\n\
    \    else:\n        shorter = l2\n        longer = l1\n    common_elements = []\n\
    \    for s in shorter:\n        if s in longer:\n            common_elements.append(s)\n\
    \    return list(set(common_elements))\n", "    return sorted(set(l1) & set(l2))\n",
  "    i = 0\n    j = 0\n    common = []\n    l1.sort()\n    l2.sort()\n    while\
    \ i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n\
    \            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n       \
    \     i += 1\n        else:\n            j += 1\n    return common\n", "    return\
    \ sorted(set(l1) & set(l2))\n", "    s1 = set(l1)\n    s2 = set(l2)\n    l = list(s1\
    \ & s2)\n    l.sort()\n    return l\n", "    return sorted(set(l1) & set(l2))\n\
    \n\n", "    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1 &\
    \ s2)\n", "    return sorted(set(l1) & set(l2))\n\nprint(common([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))",
  "    if l1 == [] or l2 == []:\n        return []\n    return sorted(list(set(l1)\
    \ & set(l2)))\n    \n    \nimport doctest\ndoctest.testmod()", "    u1 = set(l1)\n\
    \    u2 = set(l2)\n    return sorted(u1 & u2)\n", "    return sorted(set(l1) &\
    \ set(l2))\n    \n    \n    \n    \n    \n    \n    \n    \n", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    d = {}\n    for x in l1:\n        d[x] = d.get(x, 0) +\
    \ 1\n    for x in l2:\n        d[x] = d.get(x, 0) + 1\n    return sorted(k for\
    \ k, v in d.items() if v == 2)\n", "    return sorted(set(l1) & set(l2))\n", " \
    \   s1 = set(l1)\n    s2 = set(l2)\n    s3 = s1 & s2\n    l3 = list(s3)\n    l3.sort()\n\
    \    return l3\n\n", "    return sorted(set(l1) & set(l2))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
