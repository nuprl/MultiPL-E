name: HumanEval_161_solve
language: py
results:
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # return ''.join(map(reverse, s))\n    return s[::-1]\
    \ if s.isalpha() else ''.join(map(reverse, s))\n\n\ndef check(candidate):\n  \
    \  assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiyqy8023.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpiyqy8023.py\", line 27,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpiyqy8023.py\", line 17, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s\n    s = list(s)\n \
    \   for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n\
    \        else:\n            s[i] = s[i]\n    return \"\".join(s)\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpchhi6t0z.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpchhi6t0z.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpchhi6t0z.py\", line 25, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # your code here\n    return s.swapcase()\n \n \n\
    def check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8s3lman.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpi8s3lman.py\", line 27,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpi8s3lman.py\", line 18, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    s = s[::-1]\n    return s\n\n\nprint(solve(\"1234\"\
    ))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: "4321\nba\nC@a#\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7grznjo.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpi7grznjo.py\", line 30,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpi7grznjo.py\", line 20, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s.isalpha():\n        return s[::-1]\n  \
    \  for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n\
    \                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n     \
    \           s = s[:i] + s[i].lower() + s[i+1:]\n    return s\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcb71h781.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcb71h781.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpcb71h781.py\", line 27, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s.isalpha():\n        return s.swapcase()\n \
    \   else:\n        return s[::-1]\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpai8owngb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpai8owngb.py\", line 28,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpai8owngb.py\", line 21, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    is_only_digits = s.isdigit()\n    if is_only_digits:\n\
    \        return s[::-1]\n    letters = list(map(str.swapcase, filter(str.isalpha,\
    \ s)))\n    others = list(filter(lambda c: not str.isalpha(c), s))\n    return\
    \ \"\".join(others + letters)\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjkv5t050.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjkv5t050.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpjkv5t050.py\", line 22, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    s = s[::-1]\n    if s.isalpha():\n        return\
    \ s.swapcase()\n    else:\n        return s\n\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfj7cyg6_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfj7cyg6_.py\", line 30,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpfj7cyg6_.py\", line 20, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not [char for char in s if char.isalpha()]:\n\
    \        return s[::-1]\n    else:\n        return ''.join([char.swapcase() if\
    \ char.isalpha() else char for char in s])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    def convert(c: str) -> str:\n        if c.isalpha():\n\
    \            return c.upper() if c.islower() else c.lower()\n        return c\n\
    \    return s[::-1] if not s.isalpha() else ''.join(map(convert, s))\n\nprint(solve(\"\
    1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: "4321\nAB\nC@a#\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg67h_pxx.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpg67h_pxx.py\", line 32,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpg67h_pxx.py\", line 25, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.lower() if c.isupper()\
    \ else c.upper() for c in s)\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return \"\".join(ch.swapcase() if ch.isalpha() else\
    \ ch for ch in s[::-1])\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj252kle5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpj252kle5.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpj252kle5.py\", line 16, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    new_string = \"\"\n    if s.islower() or s.isupper():\n\
    \        return s[::-1]\n    for char in s:\n        if char.isalpha():\n    \
    \        if char.islower():\n                new_string += char.upper()\n    \
    \        else:\n                new_string += char.lower()\n        else:\n  \
    \          new_string += char\n    return new_string\n\n\nassert solve(\"1234\"\
    ) == \"4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\"\
    \nassert solve(\"\") == \"\"\nassert solve(\"AA\") == \"AA\"\nassert solve(\"\
    123456789\") == \"987654321\"\nassert solve(\"aA\") == \"Aa\"\nassert solve(\"\
    \ ab\") == \" AB\"\nassert solve(\"#@$$\") == \"#@$$\"\nassert solve(\"123b\"\
    ) == \"321B\"\nassert solve(\"b123\") == \"B321\"\nassert solve(\"\") == \"\"\n\
    assert solve(\"1\") == \"1\"\nassert solve(\"aBcDeF\") == \"AbCdEf\"\nassert solve(\"\
    AbCdEf\") == \"aBcDeF\"\nassert solve(\"12345\") == \"54321\"\nassert solve(\"\
    123456789\") == \"987654321\"\nassert solve(\"#a@C\") == \"#A@c\"\nassert solve(\"\
    Aa\") == \"aA\"\nassert solve(\"AaAa\") == \"aAaA\"\nassert solve(\"BbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    ) == \"bBcCdD\" \\\n                                                         \
    \          \"eEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"\nassert solve(\"QweRtyUiop[]AsdFghJkl;'ZxcVbnM,.1234567890\"\
    ) == \"qWeRtYuIoP[]aSdFgHjKl;'zX\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp9jhdvx3y.py\", line 48\n    assert solve(\"QweRtyUiop[]AsdFghJkl;'ZxcVbnM,.1234567890\"\
    ) == \"qWeRtYuIoP[]aSdFgHjKl;'zX\n                                           \
    \                                                ^\nSyntaxError: EOL while scanning\
    \ string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.isalpha() else s.swapcase()\n\
    \ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr2xejaoa.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpr2xejaoa.py\", line 25,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpr2xejaoa.py\", line 18, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s\n\n    s = s[::-1]\n\
    \    res = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n\
    \                res += c.upper()\n            else:\n                res += c.lower()\n\
    \        else:\n            res += c\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyf0h9s0v.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpyf0h9s0v.py\", line 39,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpyf0h9s0v.py\", line 29, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if any(map(str.isalpha, s)):\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.isalpha() else s.swapcase()\n\
    \ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpke91wuwc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpke91wuwc.py\", line 25,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpke91wuwc.py\", line 18, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.islower() else s.swapcase()\n\
    \ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1z4ymwh3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1z4ymwh3.py\", line 25,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp1z4ymwh3.py\", line 15, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    out = []\n    if s.isalpha():\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"\
    ))\nprint(solve(\"#a@C\"))\nprint(solve(\"\"))\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: "4321\nAB\nC@a#\n\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps31iqytg.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmps31iqytg.py\", line 33,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmps31iqytg.py\", line 26, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # using extend\n    s_lst = list(s)\n    d = []\n\
    \    for char in s_lst:\n        if char.isalpha():\n            d.append(char.swapcase())\n\
    \        else:\n            d.append(char)\n    return \"\".join(d)\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_flrrdau.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_flrrdau.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp_flrrdau.py\", line 25, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    chars = [char for char in s]\n    if 'A' not in\
    \ chars and 'a' not in chars:\n        chars.reverse()\n    for i in range(len(chars)):\n\
    \        if chars[i].isalpha():\n            if chars[i].isupper():\n        \
    \        chars[i] = chars[i].lower()\n            else:\n                chars[i]\
    \ = chars[i].upper()\n    return ''.join(chars)\n\n\ndef check(candidate):\n \
    \   assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfmowaqe.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpjfmowaqe.py\", line 35,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpjfmowaqe.py\", line 32, in\
    \ check\n    assert candidate('#ccc') == '#CCC'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    def is_letter(c: str) -> bool:\n        return c.lower()\
    \ != c.upper()\n    found_letter = False\n    new_s = \"\"\n    for i in range(len(s)):\n\
    \        if is_letter(s[i]):\n            found_letter = True\n            if\
    \ s[i].isupper():\n                new_s += s[i].lower()\n            else:\n\
    \                new_s += s[i].upper()\n        else:\n            new_s += s[i]\n\
    \    if not found_letter:\n        new_s = new_s[::-1]\n    return new_s\n\n\n\
    assert solve(\"1234\") == \"4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"\
    #a@C\") == \"#A@c\"\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    new_s = \"\"\n    for char in s:\n        if char.isalpha():\n\
    \            new_s += char.lower() if char.isupper() else char.upper()\n     \
    \   else:\n            new_s += char\n    return new_s[::-1] if new_s == s else\
    \ new_s\n\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n \
    \   assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n \
    \   assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    result\
    \ = \"\"\n    if s == \"\":\n        return s\n    else:\n        for i in s:\n\
    \            if i in letters:\n                if i.islower():\n             \
    \       result += i.upper()\n                else:\n                    result\
    \ += i.lower()\n            else:\n                result += i\n        return\
    \ result\n    return s\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd67vn_su.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpd67vn_su.py\", line 40,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpd67vn_su.py\", line 30, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    lst = list(s)\n    for i in range(len(lst)):\n \
    \       if lst[i].isalpha():\n            lst[i] = lst[i].swapcase()\n       \
    \ else:\n            lst[i] = lst[i]\n    return ''.join(lst)\n    \ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjnjd1l06.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpjnjd1l06.py\", line 31,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpjnjd1l06.py\", line 22, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    s\
    \ = s.lower()\n    if any(char in letters for char in s):\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmuk3aphk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpmuk3aphk.py\", line 31,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpmuk3aphk.py\", line 21, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s\n    else:\n       \
    \ if not s.isalpha():\n            return s[::-1]\n        else:\n           \
    \ res = ''\n            for c in s:\n                if c.isupper():\n       \
    \             res += c.lower()\n                else:\n                    res\
    \ += c.upper()\n            return res\n\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb5zyol2n.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpb5zyol2n.py\", line 38,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpb5zyol2n.py\", line 31, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s.islower() or s.isupper():\n        return s[::-1]\n\
    \    return ''.join([i.upper() if i.islower() else i.lower() for i in s])\n\n\n\
    def check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpal6hxfcw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpal6hxfcw.py\", line 28,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpal6hxfcw.py\", line 19, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.isalpha() else ''.join(c.lower()\
    \ if c.isupper() else c.upper() for c in s)\n\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzt1shvql.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpzt1shvql.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpzt1shvql.py\", line 19, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    all_lower = True\n    for i in s:\n        if i.isalpha():\n\
    \            all_lower = False\n            break\n    if all_lower:\n       \
    \ return s[::-1]\n    else:\n        new_s = \"\"\n        for i in s:\n     \
    \       if i.isalpha():\n                if i.islower():\n                   \
    \ new_s += i.upper()\n                else:\n                    new_s += i.lower()\n\
    \            else:\n                new_s += i\n        return new_s\n\n\ndef\
    \ check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.islower() else s.lower()[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiexf7n6i.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpiexf7n6i.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpiexf7n6i.py\", line 16, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    res = \"\"\n    hasLetter = False\n    for c in\
    \ s:\n        if c.isalpha():\n            hasLetter = True\n            res +=\
    \ c.swapcase()\n        else:\n            res += c\n    if not hasLetter:\n \
    \       res = res[::-1]\n    return res\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    r = \"\"\n    for c in s:\n        if c.isalpha():\n\
    \            r += c.swapcase()\n        else:\n            r += c\n    return\
    \ r[::-1] if r.isalpha() else r\n\n\n\"\"\"\nTake a Number And Sum Its Digits\
    \ Raised To The Consecutive Powers And ....\xA1Eureka!!\n\nThe number 89 is the\
    \ first integer with more than one digit that fulfills the property partially\
    \ introduced in the title of this kata. What's the use of saying \"Eureka\"? Because\
    \ this sum gives the same number.\n\nIn effect: 89 = 8^1 + 9^2\n\nThe next number\
    \ in having this property is 135.\n\nSee this property again: 135 = 1^1 + 3^2\
    \ + 5^3\n\nWe need a function to collect these numbers, that may receive two integers\
    \ a, b that defines the range [a, b] (inclusive) and outputs a list of the sorted\
    \ numbers in the range that fulfills the property described above.\n\nLet's see\
    \ some cases:\n\nsum_dig_pow(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nsum_dig_pow(1,\
    \ 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 89]\nIf there are no numbers of this kind\
    \ in the range [a, b] the function should output an empty list.\n\nsum_dig_pow(90,\
    \ 100) == []\nEnjoy it!!\n\"\"\"\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8e410d4j.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmp8e410d4j.py\", line 55,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp8e410d4j.py\", line 45, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return ''.join([x.lower() if x.isupper() else x.upper() for x in\
    \ s])\n\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n   \
    \ assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n   \
    \ assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s\n    elif not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphd5tb45a.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphd5tb45a.py\", line 31,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmphd5tb45a.py\", line 24, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s == \"\":\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    res = []\n    for c in s:\n      \
    \  if c.isalpha():\n            res.append(c.swapcase())\n        else:\n    \
    \        res.append(c)\n    return \"\".join(res)\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    is_letter = lambda x: x.isalpha()\n    letters =\
    \ [x for x in s if is_letter(x)]\n    length = len(letters)\n    no_letters =\
    \ length == 0\n    reverted = letters[::-1]\n    reverted_string = \"\".join(reverted)\n\
    \    if no_letters:\n        return reverted_string\n    res = \"\"\n    for i\
    \ in range(len(s)):\n        if not is_letter(s[i]):\n            res += s[i]\n\
    \        else:\n            res += reverted_string[i]\n    return res\n\n\nprint(solve(\"\
    1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"\"))\ndef\
    \ check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: "\nba\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_77w747.py\", line\
    \ 31, in <module>\n    print(solve(\"#a@C\"))\n  File \"/tmp/tmp8_77w747.py\"\
    , line 25, in solve\n    res += reverted_string[i]\nIndexError: string index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # your code here\n    new_s = \"\"\n    for i in\
    \ s:\n        if i.isalpha():\n            new_s += i.swapcase()\n        else:\n\
    \            new_s += i\n    if new_s == s:\n        return s[::-1]\n    return\
    \ new_s\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n   \
    \ assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n   \
    \ assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.islower() and not s.isupper()\
    \ else ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n    \n   \
    \ # you can use: s = s.swapcase() \n    # return s if s.islower() or s.isupper()\
    \ else s[::-1]\n        \n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1_vb49ey.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1_vb49ey.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp1_vb49ey.py\", line 19, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if s == s.swapcase() else s.swapcase()\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    l_str = list(s)\n    for i in range(len(l_str)):\n\
    \        if l_str[i].isalpha():\n            l_str[i] = l_str[i].swapcase()\n\
    \    if l_str[-1].isalpha():\n        return \"\".join(l_str)\n    else:\n   \
    \     return \"\".join(l_str[::-1])\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1211vztt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1211vztt.py\", line 33,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp1211vztt.py\", line 27, in\
    \ check\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s.isalpha():\n        return s.swapcase()\n \
    \   else:\n        return s[::-1]\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplnxt5dsd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplnxt5dsd.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmplnxt5dsd.py\", line 22, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if any(c.isalpha() for c in s):\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s.isalpha():\n        return s[::-1]\n  \
    \  else:\n        r = \"\"\n        for l in s:\n            if l.isalpha():\n\
    \                r += l.swapcase()\n            else:\n                r += l\n\
    \        return r\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3xq5g9z_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3xq5g9z_.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp3xq5g9z_.py\", line 27, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    res = \"\"\n    for c in s:\n        if c.isalpha():\n\
    \            res += c.swapcase()\n        else:\n            res += c\n    return\
    \ res if res else s[::-1]\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppe5j3im1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmppe5j3im1.py\", line 32,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmppe5j3im1.py\", line 23, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not any(x.isalpha() for x in s):\n        return\
    \ s[::-1]\n    return \"\".join(\n        x.lower() if x.isupper() else x.upper()\
    \ if x.islower() else x for x in s\n    )\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    no_letters = True\n    for char in s:\n        if\
    \ char.isalpha():\n            no_letters = False\n            break\n    if no_letters:\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    r = []\n    for i in s:\n        if i.isalpha():\n\
    \            r.append(i.swapcase())\n        else:\n            r.append(i)\n\
    \    if len(r) == 0:\n        return s[::-1]\n    return ''.join(r)\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp91i_ezi.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp91i_ezi.py\", line 33,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpp91i_ezi.py\", line 24, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    try:\n        if type(s) == str:\n            str1\
    \ = ''\n            if s.isalpha():\n                for letter in s:\n      \
    \              if letter.islower():\n                        str1 += letter.upper()\n\
    \                    else:\n                        str1 += letter.lower()\n \
    \               return str1\n            else:\n                return s[::-1]\n\
    \        else:\n            return None\n    except Exception as error:\n    \
    \    return error\n\n\ndef check(candidate):\n    assert candidate('AsDf') ==\
    \ 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab') ==\
    \ 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6xbgprk1.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp6xbgprk1.py\", line 41,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp6xbgprk1.py\", line 34, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    is_word = False\n    new_string = \"\"\n    for\
    \ char in s:\n        if char.isalpha():\n            new_string += char.swapcase()\n\
    \            is_word = True\n        else:\n            new_string += char\n \
    \   if is_word:\n        return new_string\n    else:\n        return new_string[::-1]\n\
    \        \nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"1234\"\
    ))\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: "AB\n#A@c\n4321\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s\n\n    res = ''\n  \
    \  for c in s:\n        if c.isalpha():\n            res += c.swapcase()\n   \
    \     else:\n            res += c\n    return res if res.isalpha() else res[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfz65uwfo.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfz65uwfo.py\", line 35,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpfz65uwfo.py\", line 28, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    def reverse_case(c: str) -> str:\n        if c.isalpha():\n\
    \            return c.upper() if c.islower() else c.lower()\n        return c\n\
    \    return ''.join(list(map(reverse_case, s[::-1]))) if any(s.isalpha()) else\
    \ s[::-1]\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n \
    \   assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n \
    \   assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjzzosgq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqjzzosgq.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpqjzzosgq.py\", line 19, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\n  File \"/tmp/tmpqjzzosgq.py\"\
    , line 16, in solve\n    return ''.join(list(map(reverse_case, s[::-1]))) if any(s.isalpha())\
    \ else s[::-1]\nTypeError: 'bool' object is not iterable\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    t = [c.lower() if c.isupper() else c.upper() if\
    \ c.islower() else c for c in s]\n    return ''.join(t) if ''.join(t).isalpha()\
    \ else ''.join(t[::-1])\ndef check(candidate):\n    assert candidate('AsDf') ==\
    \ 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab') ==\
    \ 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqy0pp85.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplqy0pp85.py\", line 25,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmplqy0pp85.py\", line 18, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # create dictionary with letter as key and value\
    \ is 2*letter and 2*letter.upper()\n    letters = {i: i*2 for i in s if i.isalpha()}\n\
    \    # check if there are no letters\n    if len(letters) == 0:\n        return\
    \ s[::-1]\n    else:\n        # iterate through the string and replace letters\
    \ with the value\n        for letter in letters:\n            s = s.replace(letter,\
    \ letters[letter])\n        return s\n\n\"\"\"\nBest solution on site:\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqg9oh5wd.py\", line 40\n    test_check()\n           \
    \    ^\nSyntaxError: EOF while scanning triple-quoted string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s.isalpha():\n        return s.swapcase()\n \
    \   else:\n        return s[::-1]\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvhf4cji.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcvhf4cji.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpcvhf4cji.py\", line 22, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    new_str = []\n    for char in s:\n        if char.isalpha():\n\
    \            if char.islower():\n                new_str.append(char.upper())\n\
    \            else:\n                new_str.append(char.lower())\n        else:\n\
    \            new_str.append(char)\n    if len(new_str) == 0:\n        return s[::-1]\n\
    \    return \"\".join(new_str)\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5twqslgc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5twqslgc.py\", line 35,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp5twqslgc.py\", line 26, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    s = s[::-1]\n    solution = ''\n    letters = {'a':\
    \ 'A', 'b': 'B', 'c': 'C', 'd': 'D', 'e': 'E', 'f': 'F', 'g': 'G', 'h': 'H', 'i':\
    \ 'I', 'j': 'J', 'k': 'K', 'l': 'L', 'm': 'M', 'n': 'N', 'o': 'O', 'p': 'P', 'q':\
    \ 'Q', 'r': 'R', 's': 'S', 't': 'T', 'u': 'U', 'v': 'V', 'w': 'W', 'x': 'X', 'y':\
    \ 'Y', 'z': 'Z'}\n    for i in s:\n        if i in letters:\n            solution\
    \ += letters[i]\n        else:\n            solution += i\n    return solution\n\
    \nprint(solve(\"aB\"))\nprint(solve(\"Aa1b2c3d4\"))\nprint(solve(\"!#1?z\"))\n\
    print(solve(\"4321\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"\"))\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: "BA\n4D3C2B1AA\nZ?1#!\n1234\nC@A#\n\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92sedx06.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp92sedx06.py\", line 39,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp92sedx06.py\", line 29, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    new_string = \"\"\n    if s.isalpha():\n       \
    \ for i in s:\n            if i.isupper():\n                new_string += i.lower()\n\
    \            else:\n                new_string += i.upper()\n    else:\n     \
    \   new_string = s[::-1]\n    return new_string\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw6mzv50t.py\", line\
    \ 253, in <module>\n    test_check()\n  File \"/tmp/tmpw6mzv50t.py\", line 251,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpw6mzv50t.py\", line 244, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s.isalpha():\n        return s.swapcase()\n \
    \   return s[::-1]\n\n\nassert solve(\"1234\") == \"4321\"\nassert solve(\"ab\"\
    ) == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\"\nassert solve(\"123#\") == \"\
    321#\"\nassert solve(\"\") == \"\"\nassert solve(\"AAAA\") == \"aaaa\"\nassert\
    \ solve(\"aBcD\") == \"AbCd\"\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6gr9ogjr.py\", line\
    \ 19, in <module>\n    assert solve(\"#a@C\") == \"#A@c\"\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s == s.swapcase():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s.islower() or s.isupper():\n        return s[::-1]\n\
    \    else:\n        return ''.join([i.lower() if i.isupper() else i.upper() for\
    \ i in s])\n\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptlshewtr.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptlshewtr.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmptlshewtr.py\", line 20, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.isalpha() else s.swapcase()\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp00k_gytu.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp00k_gytu.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp00k_gytu.py\", line 19, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return ''.join(c.swapcase() if c.isalpha() else\
    \ c for c in s)\n\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjievz_ds.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjievz_ds.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpjievz_ds.py\", line 17, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    letters = [i for i in s if i.isalpha()]\n    if\
    \ letters:\n        return s.swapcase()\n    else:\n        return s[::-1]\n\n\
    \ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if len(s) == 0:\n        return s[::-1]\n    lst\
    \ = []\n    for c in s:\n        if c.isalpha():\n            lst.append(c.swapcase())\n\
    \        else:\n            lst.append(c)\n    return ''.join(lst)\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv45ztt06.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv45ztt06.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpv45ztt06.py\", line 25, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    new_s = []\n    for ch in s:\n        if ch.isalpha():\n\
    \            new_s.append(ch.swapcase())\n        else:\n            new_s.append(ch)\n\
    \    if len(new_s) > 0:\n        return ''.join(new_s)\n    else:\n        return\
    \ s[::-1]\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n \
    \   assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n \
    \   assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd2zl_6r2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd2zl_6r2.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpd2zl_6r2.py\", line 25, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    res = ''\n    for i in s:\n        if i.isalpha():\n\
    \            res += i.swapcase()\n        else:\n            res += i\n    return\
    \ res[::-1] if res.isalpha() else res\n\n\nprint(solve(\"1234\"))\nprint(solve(\"\
    ab\"))\nprint(solve(\"#a@C\"))\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: "1234\nBA\n#A@c\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5pkwmjcn.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5pkwmjcn.py\", line 35,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp5pkwmjcn.py\", line 25, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s.isalpha():\n        return s[::-1]\n  \
    \  else:\n        return s.swapcase()\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8gxkadea.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8gxkadea.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp8gxkadea.py\", line 22, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    is_lower = lambda x: x.islower()\n    if not any(map(is_lower,\
    \ s)):\n        return s[::-1]\n    else:\n        res = \"\"\n        for i in\
    \ s:\n            if i.islower():\n                res += i.upper()\n        \
    \    elif i.isupper():\n                res += i.lower()\n            else:\n\
    \                res += i\n        return res\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    regex = re.compile(r'[a-zA-Z]')\n    letters = regex.findall(s)\n\
    \    if len(letters) == 0:\n        return s[::-1]\n    else:\n        new_str\
    \ = \"\"\n        for char in s:\n            if char.isalpha():\n           \
    \     new_str += char.swapcase()\n            else:\n                new_str +=\
    \ char\n        return new_str\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi4p0kqyy.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpi4p0kqyy.py\", line 37,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpi4p0kqyy.py\", line 27, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\n  File \"/tmp/tmpi4p0kqyy.py\"\
    , line 12, in solve\n    regex = re.compile(r'[a-zA-Z]')\nNameError: name 're'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # return \"\".join(s[::-1])\n    # return str(s[::-1])\n\
    \n    if s.islower():\n        return s.upper()\n    elif s.isupper():\n     \
    \   return s.lower()\n    else:\n        return \"\".join(s[::-1])\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr4xccpk0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpr4xccpk0.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpr4xccpk0.py\", line 24, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.isalpha() else \"\".join(ch.lower()\
    \ if ch.isupper() else ch.upper() for ch in s)\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu4m41lan.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpu4m41lan.py\", line 25,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpu4m41lan.py\", line 18, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    letters = re.compile(r\"[a-zA-Z]\")\n    no_letters\
    \ = re.compile(r\"[^a-zA-Z]\")\n    numbers = re.compile(r\"[0-9]\")\n    s =\
    \ list(s)\n    for index, char in enumerate(s):\n        if letters.match(char):\n\
    \            s[index] = char.swapcase()\n        elif numbers.match(char):\n \
    \           s[index] = char\n        else:\n            continue\n    if no_letters.match(s[-1]):\n\
    \        return s[::-1]\n    else:\n        return \"\".join(s)\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6lvndpq5.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp6lvndpq5.py\", line 38,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp6lvndpq5.py\", line 28, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\n  File \"/tmp/tmp6lvndpq5.py\"\
    , line 12, in solve\n    letters = re.compile(r\"[a-zA-Z]\")\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower() for c in\
    \ s)\n\n\nassert solve(\"1234\") == \"4321\"\nassert solve(\"ab\") == \"AB\"\n\
    assert solve(\"#a@C\") == \"#A@c\"\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    s = s[::-1]\n    return s.swapcase()\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp02pnz05m.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp02pnz05m.py\", line 25,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp02pnz05m.py\", line 15, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s.isalpha():\n        return s[::-1]\n  \
    \  return s.swapcase()\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3g2d6tlm.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3g2d6tlm.py\", line 28,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp3g2d6tlm.py\", line 21, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s\n    elif not s.islower()\
    \ and not s.isupper():\n        return ''.join(list(reversed(s)))\n    else:\n\
    \        s = s.swapcase()\n        return s\n\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmqqzdvgn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpmqqzdvgn.py\", line 32,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpmqqzdvgn.py\", line 22, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return ''.join(s[i].swapcase() if s[i].isalpha()\
    \ else s[i] for i in range(len(s))) if s.isalpha() else s[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3xh6r39h.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3xh6r39h.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp3xh6r39h.py\", line 19, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if any(a.isalpha() for a in s):\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\ndef check(candidate):\n \
    \   assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if any(x.isalpha() for x in s):\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\ndef check(candidate):\n \
    \   assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # my solution\n    letters = set(string.ascii_letters)\n\
    \    result = []\n    is_letters = False\n    for c in s:\n        if c in letters:\n\
    \            is_letters = True\n            result.append(c.swapcase())\n    \
    \    else:\n            result.append(c)\n    return ''.join(result) if is_letters\
    \ else s[::-1]\n\n    # best solution\n    # letters = set(string.ascii_letters)\n\
    \    # result = [c.swapcase() if c in letters else c for c in s]\n    # return\
    \ ''.join(result) if len(result) != len(s) else s[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7m7iybui.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp7m7iybui.py\", line 41,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp7m7iybui.py\", line 31, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\n  File \"/tmp/tmp7m7iybui.py\"\
    , line 13, in solve\n    letters = set(string.ascii_letters)\nNameError: name\
    \ 'string' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # your code here\n    return s\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsu8t5aak.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpsu8t5aak.py\", line 27,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpsu8t5aak.py\", line 17, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if s == s.lower() or s == s.upper()\
    \ else s.swapcase()\n\n\ndef check(candidate):\n    assert candidate('AsDf') ==\
    \ 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab') ==\
    \ 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmvgp9q59.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpmvgp9q59.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpmvgp9q59.py\", line 18, in\
    \ check\n    assert candidate('ab') == 'AB'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return \"\"\n    for i in s:\n\
    \        if not i.isalpha():\n            return s[::-1]\n    return s.swapcase()\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxid0emcg.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxid0emcg.py\", line 31,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpxid0emcg.py\", line 24, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    res = ''\n    if not any(char.isalpha() for char\
    \ in s):\n        return s[::-1]\n    for char in s:\n        if char.isalpha():\n\
    \            res += char.swapcase()\n        else:\n            res += char\n\
    \    return res\n    \n    \ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    no_letters = True\n    for i in s:\n        if i.isalpha():\n\
    \            no_letters = False\n            break\n    if no_letters:\n     \
    \   return s[::-1]\n    out = \"\"\n    for i in s:\n        if i.isalpha():\n\
    \            out += i.swapcase()\n        else:\n            out += i\n    return\
    \ out\n\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"\
    ))\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: "4321\nAB\n#A@c\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return \"\".join(i.upper() if i.islower() else i.lower()\
    \ for i in s[::-1])\n\ndef check(candidate):\n    assert candidate('AsDf') ==\
    \ 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab') ==\
    \ 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9f0a2zuw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9f0a2zuw.py\", line 25,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp9f0a2zuw.py\", line 15, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s.islower() and not s.isupper():\n      \
    \  s = s[::-1]\n    else:\n        for letter in s:\n            if letter.isalpha():\n\
    \                new_s = s.swapcase()\n                return new_s\n        \
    \    else:\n                return s\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx8m9lkh9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpx8m9lkh9.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpx8m9lkh9.py\", line 24, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.isalpha() else s.swapcase()\n\
    \ \ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphx2jfx9r.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphx2jfx9r.py\", line 25,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmphx2jfx9r.py\", line 18, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not any(letter.isalpha() for letter in s):\n\
    \        return s[::-1]\n    return ''.join(letter.upper() if letter.islower()\
    \ else letter.lower() for letter in s)\n\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    else:\n        s = list(s)\n        for i in range(len(s)):\n \
    \           if s[i].isalpha():\n                s[i] = s[i].swapcase()\n     \
    \   return \"\".join(s)\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return ''.join(\n        [s[i].swapcase() if s[i].isalpha()\
    \ else s[i] for i in range(len(s))])[::-1]\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpus_tn7dp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpus_tn7dp.py\", line 25,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpus_tn7dp.py\", line 15, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if any(c.isalpha() for c in s):\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if set(s).intersection(ascii_letters):\n       \
    \ return s.swapcase()\n    else:\n        return s[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyqmkmw_o.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpyqmkmw_o.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpyqmkmw_o.py\", line 19, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\n  File \"/tmp/tmpyqmkmw_o.py\"\
    , line 12, in solve\n    if set(s).intersection(ascii_letters):\nNameError: name\
    \ 'ascii_letters' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    res = \"\"\n    if len(s) == 0:\n        return\
    \ res\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if\
    \ s[i].islower():\n                res += s[i].upper()\n            else:\n  \
    \              res += s[i].lower()\n        else:\n            res += s[i]\n \
    \   return res[::-1]\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8n29ancu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8n29ancu.py\", line 35,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp8n29ancu.py\", line 25, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s.lower() == s:\n        return s[::-1]\n   \
    \ return ''.join(i.upper() if i.islower() else i.lower() for i in s)\n\n\n\"\"\
    \"\nimport re\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjrcsfeek.py\", line 35\n    test_check()\n           \
    \    ^\nSyntaxError: EOF while scanning triple-quoted string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    s = list(s)\n    letters = []\n    for i in range(len(s)):\n\
    \        if s[i].isalpha():\n            letters.append(i)\n    if letters ==\
    \ []:\n        return \"\".join(s[::-1])\n    else:\n        for i in letters:\n\
    \            if s[i].islower():\n                s[i] = s[i].upper()\n       \
    \     else:\n                s[i] = s[i].lower()\n        return \"\".join(s)\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    assert type(s) == str\n    s = list(s)\n    assert\
    \ len(s) < 1e5\n    assert all(i in string.ascii_letters + string.digits + \"\
    #@$%^&*()-+=[]{}<>?:.,/;\" for i in s)\n    flag = True\n    for i in s:\n   \
    \     if i in string.ascii_letters:\n            flag = False\n            break\n\
    \    if flag:\n        s.reverse()\n        return \"\".join(s)\n    for i in\
    \ range(len(s)):\n        if s[i] in string.ascii_letters:\n            if s[i].islower():\n\
    \                s[i] = s[i].upper()\n            else:\n                s[i]\
    \ = s[i].lower()\n    return \"\".join(s)\n\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcsw9dzg7.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpcsw9dzg7.py\", line 44,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpcsw9dzg7.py\", line 34, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\n  File \"/tmp/tmpcsw9dzg7.py\"\
    , line 15, in solve\n    assert all(i in string.ascii_letters + string.digits\
    \ + \"#@$%^&*()-+=[]{}<>?:.,/;\" for i in s)\n  File \"/tmp/tmpcsw9dzg7.py\",\
    \ line 15, in <genexpr>\n    assert all(i in string.ascii_letters + string.digits\
    \ + \"#@$%^&*()-+=[]{}<>?:.,/;\" for i in s)\nNameError: name 'string' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return \"\".join(c.swapcase() if c.isalpha() else\
    \ c for c in s)\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"\
    #a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"4321\"))\nprint(solve(\"AB\"))\n\
    print(solve(\"#A@c\"))\nprint(solve(\"#A@c\"))\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: "1234\nAB\n#A@c\n#A@c\n4321\nab\n#a@C\n#a@C\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnc7ontl8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnc7ontl8.py\", line 33,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpnc7ontl8.py\", line 24, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # your code here\n    new_s = ''\n    for letter\
    \ in s:\n        if letter.isalpha():\n            new_s += letter.swapcase()\n\
    \        else:\n            new_s += letter\n    if new_s == s:\n        return\
    \ new_s[::-1]\n    return new_s\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    s = s[::-1]\n    if not any(c.isalpha() for c in\
    \ s):\n        return s\n    else:\n        return \"\".join(c.lower() if c.isupper()\
    \ else c.upper() for c in s)\n\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\n\
    print(solve(\"#a@C\"))\ndef check(candidate):\n    assert candidate('AsDf') ==\
    \ 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab') ==\
    \ 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: "4321\nBA\nc@A#\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6kxuo2si.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp6kxuo2si.py\", line 33,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp6kxuo2si.py\", line 23, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not any(map(str.isalpha, s)):\n        return\
    \ s[::-1]\n    res = []\n    for c in s:\n        if c.isalpha():\n          \
    \  res.append(c.swapcase())\n        else:\n            res.append(c)\n    return\
    \ ''.join(res)\n\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    s_reversed = s[::-1]\n    if not any(c.isalpha()\
    \ for c in s):\n        return s_reversed\n    return \"\".join(c.swapcase() if\
    \ c.isalpha() else c for c in s_reversed)\n\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ym71r6q.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5ym71r6q.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp5ym71r6q.py\", line 19, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    n = len(s)\n    r = \"\"\n    if n == 0:\n     \
    \   return s\n    for i in range(n):\n        if s[i].isalpha():\n           \
    \ r += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n     \
    \       r += s[i]\n    return r[::-1] if r.isalpha() else r\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpljz5nbvu.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpljz5nbvu.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpljz5nbvu.py\", line 24, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.isalpha() else s.swapcase()\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0r6217k.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmph0r6217k.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmph0r6217k.py\", line 19, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if len(s) < 1:\n        return s\n    return solve(s[1:])\
    \ + s[0]\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n  \
    \  assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n  \
    \  assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpziws7k4d.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpziws7k4d.py\", line 27,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpziws7k4d.py\", line 17, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # My code here\n    return s[::-1] if s.isalpha()\
    \ else \"\".join([i.upper() if i.islower() else i.lower() for i in s])\n\ndef\
    \ check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj9_ibovx.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpj9_ibovx.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpj9_ibovx.py\", line 16, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if len(s) == 0:\n        return s\n    if not (s.isalpha()):\n\
    \        new_s = s[::-1]\n        return new_s\n    else:\n        chars = []\n\
    \        for c in s:\n            if c.isalpha():\n                chars.append(c.swapcase())\n\
    \            else:\n                chars.append(c)\n        return ''.join(chars)\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2rgmy_po.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp2rgmy_po.py\", line 38,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp2rgmy_po.py\", line 31, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    alphabet = 'qwertyuiopasdfghjklzxcvbnm'\n    letters\
    \ = set()\n    for c in alphabet:\n        letters.add(c)\n        letters.add(c.upper())\n\
    \    result = ''\n    for c in s:\n        if c in letters:\n            if c.isupper():\n\
    \                result += c.lower()\n            else:\n                result\
    \ += c.upper()\n        else:\n            result += c\n    if result.islower()\
    \ or result.isupper():\n        return result[::-1]\n    return result\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi989eu05.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpi989eu05.py\", line 40,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpi989eu05.py\", line 31, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.isalpha() else \"\".join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeel71n7c.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpeel71n7c.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpeel71n7c.py\", line 19, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s.isalpha():\n        return s[::-1]\n  \
    \  else:\n        return s.swapcase()\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptmg82_gr.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptmg82_gr.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmptmg82_gr.py\", line 22, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # Use an empty string for result\n    res = \"\"\
    \n    # Iterate over the string and check if each character is a letter\n    for\
    \ i in s:\n        if i.isalpha():\n            # Check if the character is lowercase\
    \ or uppercase and apply the corresponding\n            # transformation\n   \
    \         if i.islower():\n                res += i.upper()\n            else:\n\
    \                res += i.lower()\n        else:\n            res += i\n    #\
    \ If the resulted string contains no letters, return the reversed string\n   \
    \ if not res.isalpha():\n        return res[::-1]\n    # Otherwise, return the\
    \ resulted string\n    return res\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hvs1s1o.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp9hvs1s1o.py\", line 43,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp9hvs1s1o.py\", line 36, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not any(l.isalpha() for l in s)\
    \ else ''.join(l.upper() if l.islower() else l.lower() for l in s)\n\nprint(solve(\"\
    AB\"))\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: "ab\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.isalpha() else s.swapcase()\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa0r572vd.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpa0r572vd.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpa0r572vd.py\", line 19, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s\n    return ''.join(\n\
    \        c.swapcase() if c.isalpha() else c for c in s[::-1]\n    )\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvs9ha18.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmptvs9ha18.py\", line 30,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmptvs9ha18.py\", line 20, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    has_letters = False\n    for c in s:\n        if\
    \ c.isalpha():\n            has_letters = True\n            break\n    if has_letters:\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    out = ''\n    if s.isalpha():\n        for ch in\
    \ s:\n            if ch.isupper():\n                out += ch.lower()\n      \
    \      else:\n                out += ch.upper()\n    else:\n        out = s[::-1]\n\
    \    return out\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplp4byq5p.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmplp4byq5p.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmplp4byq5p.py\", line 27, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    res = \"\"\n    if not any(c.isalpha() for c in\
    \ s):\n        return s[::-1]\n    for c in s:\n        if c.isalpha():\n    \
    \        res += c.swapcase()\n        else:\n            res += c\n    return\
    \ res\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower() for c in\
    \ s)\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # your code goes here\n    return \"\"\n\n\ndef\
    \ check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgmu04ave.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgmu04ave.py\", line 27,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpgmu04ave.py\", line 17, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not any(c.isalpha() for c in s)\
    \ else \"\".join(c.upper() if c.islower() else c.lower() for c in s)\n\n\ndef\
    \ check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return ''.join(char.upper() if char.islower() else\
    \ char.lower() if char.isupper() else char for char in s[::-1])\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp83j2sio.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpp83j2sio.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpp83j2sio.py\", line 16, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    l = []\n    for i in s:\n        l.append(i)\n \
    \   for j in range(len(l)):\n        if l[j].isalpha():\n            l[j] = l[j].swapcase()\n\
    \    if len(l) == 0:\n        return s[::-1]\n    return \"\".join(l)\n\nprint(solve(\"\
    ab\"))\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: "AB\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbhnfwxdj.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpbhnfwxdj.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpbhnfwxdj.py\", line 25, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    s = s[::-1]\n    if not s.isalpha():\n        return\
    \ s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n\
    \                s = s[:i] + s[i].lower() + s[i+1:]\n            else:\n     \
    \           s = s[:i] + s[i].upper() + s[i+1:]\n    return s\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr0uzc45v.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpr0uzc45v.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpr0uzc45v.py\", line 24, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    is_letter = False\n    for c in s:\n        if c.isalpha():\n\
    \            is_letter = True\n            break\n    if is_letter:\n        ret\
    \ = ''\n        for c in s:\n            if c.isalpha():\n                ret\
    \ += c.swapcase()\n            else:\n                ret += c\n        return\
    \ ret\n    else:\n        return s[::-1]\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    length = len(s)\n    if length <= 1:\n        return\
    \ s[::-1]\n    else:\n        result = ''\n        for i in range(length):\n \
    \           if s[i].isalpha():\n                if s[i].islower():\n         \
    \           result += s[i].upper()\n                else:\n                  \
    \  result += s[i].lower()\n            else:\n                result += s[i]\n\
    \        return result\n\nprint(solve(\"#a@C\"))\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: "#A@c\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmregvn_e.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpmregvn_e.py\", line 39,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpmregvn_e.py\", line 30, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s.isalpha():\n        return s[::-1]\n  \
    \  return s.swapcase()\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33n00wpt.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp33n00wpt.py\", line 27,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp33n00wpt.py\", line 20, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s.islower() or s.isupper():\n        return s[::-1]\n\
    \    return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n\
    print(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: "1234\nba\n#A@c\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprq2o1tgu.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmprq2o1tgu.py\", line 31,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmprq2o1tgu.py\", line 22, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    tmp = []\n    for i in s:\n        if i.isalpha():\n\
    \            if i.islower():\n                tmp.append(i.upper())\n        \
    \    else:\n                tmp.append(i.lower())\n        else:\n           \
    \ tmp.append(i)\n    if tmp:\n        return ''.join(tmp)\n    else:\n       \
    \ return s[::-1]\nprint(solve(\"#a@C\"))\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: "#A@c\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp653bsxsd.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp653bsxsd.py\", line 38,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp653bsxsd.py\", line 29, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    letters = {chr(c) for c in range(ord('a'), ord('z')\
    \ + 1)}\n    letters.update({chr(c) for c in range(ord('A'), ord('Z') + 1)})\n\
    \    res = []\n    for ch in s:\n        if ch in letters:\n            if ch.islower():\n\
    \                res.append(ch.upper())\n            else:\n                res.append(ch.lower())\n\
    \        else:\n            res.append(ch)\n    return ''.join(res[::-1]) if res\
    \ else s\n\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprke14s2c.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmprke14s2c.py\", line 37,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmprke14s2c.py\", line 27, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return \"\"\n    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        res = \"\"\n        for i in s:\n\
    \            if i.isupper():\n                res += i.lower()\n            else:\n\
    \                res += i.upper()\n        return res\n    \n    \n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf26mjwle.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpf26mjwle.py\", line 38,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpf26mjwle.py\", line 31, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    letters = []\n    for c in s:\n        if c.isalpha():\n\
    \            letters.append(c)\n    if letters:\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.isalpha() else \"\".join(i.upper()\
    \ if i.islower() else i.lower() for i in s)\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc7jdq5v4.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpc7jdq5v4.py\", line 24,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpc7jdq5v4.py\", line 17, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if any(c.isalpha() for c in s):\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    for char in s:\n        if char.isalpha():\n   \
    \         return s.swapcase()\n    return s[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    s_list = list(s)\n    flag = False\n    for i in\
    \ range(len(s_list)):\n        if s_list[i].isalpha():\n            flag = True\n\
    \            if s_list[i].islower():\n                s_list[i] = s_list[i].upper()\n\
    \            else:\n                s_list[i] = s_list[i].lower()\n    if flag:\n\
    \        return \"\".join(s_list)\n    else:\n        return s[::-1]\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return \"\".join(ch.upper() if ch.islower() else\
    \ ch.lower() for ch in s) if any(ch.isalpha() for ch in s) else s[::-1]\n\nprint(solve(\"\
    1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"1234\"))\n\
    print(solve(\"\"))\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: "4321\nAB\n#A@c\n4321\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # 1. Check if s is alphabetic\n    if s.isalpha():\n\
    \        # 2. Create a new string\n        new_s = \"\"\n        # 3. Create a\
    \ for loop to go through s and reverse the case, then add it to the new string\n\
    \        for c in s:\n            new_s += c.swapcase()\n        # 4. Return the\
    \ new string\n        return new_s\n    # 5. If s is not alphabetic, reverse it\n\
    \    else:\n        return s[::-1]\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpac1tnvha.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpac1tnvha.py\", line 36,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpac1tnvha.py\", line 29, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # your code here\n    return None\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mis4q6l.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3mis4q6l.py\", line 27,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp3mis4q6l.py\", line 17, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    string = \"\"\n    for char in s:\n        if char.isalpha():\n\
    \            string += char.swapcase()\n        else:\n            string += char\n\
    \    return string[::-1]\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuo64y10x.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpuo64y10x.py\", line 32,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpuo64y10x.py\", line 22, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # There's no letters in the string, just reverse\
    \ it and return.\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\
    \    # There are letters in the string, reverse it and reverse letters' cases.\n\
    \    return \"\".join(c.upper() if c.islower() else c.lower() for c in s[::-1])\n\
    \n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\ndef\
    \ check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: "4321\nBA\nc@A#\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphre58hda.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmphre58hda.py\", line 33,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmphre58hda.py\", line 23, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s:\n        s = s.swapcase()\n        return\
    \ s[::-1]\n    else:\n        return s\n\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph78exrey.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmph78exrey.py\", line 30,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmph78exrey.py\", line 20, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not set(s) & set(string.ascii_letters):\n   \
    \     return s[::-1]\n    return \"\".join(c.swapcase() if c.isalpha() else c\
    \ for c in s)\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpymh70ha2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpymh70ha2.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpymh70ha2.py\", line 16, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\n  File \"/tmp/tmpymh70ha2.py\"\
    , line 12, in solve\n    if not set(s) & set(string.ascii_letters):\nNameError:\
    \ name 'string' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s.isalpha():\n        if s.islower():\n     \
    \       return s.upper()\n        else:\n            return s.lower()\n    return\
    \ \"\".join(reversed(s))\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn7k8pm6p.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpn7k8pm6p.py\", line 30,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpn7k8pm6p.py\", line 20, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    s_\
    \ = \"\"\n    for i in s:\n        if i in letters:\n            if i.isupper():\n\
    \                s_ += i.lower()\n            else:\n                s_ += i.upper()\n\
    \        else:\n            s_ += i\n    if s_ == s:\n        return s_[::-1]\n\
    \    return s_\n\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6q1ftos2.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp6q1ftos2.py\", line 38,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp6q1ftos2.py\", line 28, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.isalpha() else s.swapcase()\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqbo9ztsg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqbo9ztsg.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpqbo9ztsg.py\", line 19, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    x = ''.join(i.swapcase() if i.isalpha() else i for\
    \ i in s)\n    if x == s:\n        return x[::-1]\n    return x\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s.isalpha():\n        return s.swapcase()\n \
    \   else:\n        return s[::-1]\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr_hjsgzy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpr_hjsgzy.py\", line 28,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpr_hjsgzy.py\", line 21, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return \"\".join(map(lambda x: x.upper() if x.islower()\
    \ else x.lower(), s)) if s.isalpha() else s[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoi02vjs2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpoi02vjs2.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpoi02vjs2.py\", line 19, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    letters = set(string.ascii_letters)\n    if not\
    \ any(i in letters for i in s):\n        return s[::-1]\n    return ''.join(i.lower()\
    \ if i.isupper() else i.upper() for i in s)\n\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppzktlnjg.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppzktlnjg.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmppzktlnjg.py\", line 19, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\n  File \"/tmp/tmppzktlnjg.py\"\
    , line 12, in solve\n    letters = set(string.ascii_letters)\nNameError: name\
    \ 'string' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return \"\"\n    s = list(s)\n\
    \    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n\
    \        else:\n            s[i] = s[i]\n    return \"\".join(s)\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp86qdfgpk.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp86qdfgpk.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp86qdfgpk.py\", line 25, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # replace all letters with lowercase\n    n = s.translate(str.maketrans('',\
    \ '', string.ascii_letters))\n    # replace all letters with uppercase\n    m\
    \ = s.translate(str.maketrans('', '', string.ascii_lowercase))\n    # if the string\
    \ contains no letters, reverse the string\n    if len(n) == len(s):\n        return\
    \ s[::-1]\n    # if the string contains at least one letter\n    # and it's uppercase,\
    \ return the lowercase version\n    elif len(m) < len(s):\n        return s.swapcase()\n\
    \    # if the string contains at least one letter\n    # and it's lowercase, return\
    \ the uppercase version\n    else:\n        return s.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5k8zr31.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpw5k8zr31.py\", line 39,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpw5k8zr31.py\", line 29, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\n  File \"/tmp/tmpw5k8zr31.py\"\
    , line 13, in solve\n    n = s.translate(str.maketrans('', '', string.ascii_letters))\n\
    NameError: name 'string' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    is_lower = lambda c: 'a' <= c <= 'z'\n    is_upper\
    \ = lambda c: 'A' <= c <= 'Z'\n    is_letter = lambda c: is_lower(c) or is_upper(c)\n\
    \    return ''.join(list(map(lambda c: c.upper() if is_lower(c) else c.lower()\
    \ if is_upper(c) else c, s))) if any(map(is_letter, s)) else s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s\n    return s.swapcase()\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeoxj9ksc.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpeoxj9ksc.py\", line 28,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpeoxj9ksc.py\", line 19, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    cap_letters\
    \ = letters.upper()\n    if not s.isalpha():\n        return s[::-1]\n    res\
    \ = ''\n    for c in s:\n        if c in letters:\n            res += cap_letters[letters.index(c)]\n\
    \        elif c in cap_letters:\n            res += letters[cap_letters.index(c)]\n\
    \        else:\n            res += c\n    return res\n\nprint(solve(\"ab\"))\n\
    def check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: "AB\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdhafutwo.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpdhafutwo.py\", line 38,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpdhafutwo.py\", line 31, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s.islower() or s.isupper():\n        return s[::-1]\n\
    \    else:\n        pass\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaj_kwgqi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpaj_kwgqi.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpaj_kwgqi.py\", line 19, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    s = s[::-1]\n    for i in range(len(s)):\n     \
    \   if s[i].isalpha():\n            s = s[:i] + s[i].swapcase() + s[i+1:]\n  \
    \  return s\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsz0fnbnv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpsz0fnbnv.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpsz0fnbnv.py\", line 19, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return \"\"\n    is_letter =\
    \ lambda c: 'a' <= c <= 'z' or 'A' <= c <= 'Z'\n    if any(map(is_letter, s)):\n\
    \        return \"\".join(s.swapcase())\n    else:\n        return s[::-1]\n\n\
    \ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1]\n\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirlmhiff.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpirlmhiff.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpirlmhiff.py\", line 16, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not any(x.isalpha() for x in s)\
    \ else ''.join(\n        [i.lower() if i.isupper() else i.upper() for i in s])\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return \"\"\n    letters = [x\
    \ for x in s if x.isalpha()]\n    # reverse letters\n    if letters:\n       \
    \ letters = reversed([x.lower() if x.isupper() else x.upper() for x in letters])\n\
    \        for i, x in enumerate(s):\n            if x.isalpha():\n            \
    \    s = s[:i] + next(letters) + s[i+1:]\n    else:\n        s = s[::-1]\n   \
    \ return s\n\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptmurw2vj.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmptmurw2vj.py\", line 37,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmptmurw2vj.py\", line 27, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s.lower() == s:\n        return s[::-1]\n   \
    \ return ''.join(ch.lower() if ch.isupper() else ch.upper() for ch in s)\n\n\n\
    def check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1a45qv12.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1a45qv12.py\", line 28,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp1a45qv12.py\", line 20, in\
    \ check\n    assert candidate('ab') == 'AB'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return \"\"\n    s = s[::-1]\n\
    \    rev = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n\
    \                rev += i.upper()\n            else:\n                rev += i.lower()\n\
    \        else:\n            rev += i\n    return rev\n\n\n@pytest.mark.parametrize(\n\
    \    \"s, expected\",\n    [\n        (\"\", \"\"),\n        (\"1234\", \"4321\"\
    ),\n        (\"ab\", \"AB\"),\n        (\"#a@C\", \"#A@c\"),\n        (\"#a@C\
    \  ??\", \"??  #A@c\"),\n        (\"\", \"\"),\n        (\"1234\", \"4321\"),\n\
    \        (\"ab\", \"AB\"),\n        (\"#a@C\", \"#A@c\"),\n        (\"#a@C  ??\"\
    , \"??  #A@c\"),\n    ],\n)\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz25_5a1y.py\", line\
    \ 27, in <module>\n    @pytest.mark.parametrize(\nNameError: name 'pytest' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return \"\"\n    if not s.isalpha():\n\
    \        return s[::-1]\n    s = list(s)\n    for i in range(len(s)):\n      \
    \  if s[i].isalpha():\n            s[i] = s[i].swapcase()\n    return \"\".join(s)\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprsb9atd5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmprsb9atd5.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmprsb9atd5.py\", line 27, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if s.isalpha() else ''.join(reversed(s))\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0322qy3.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpz0322qy3.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpz0322qy3.py\", line 16, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s.lower() == s:\n        return s[::-1]\n   \
    \ else:\n        return ''.join([chr(ord(c) - 32) if c.islower() else chr(ord(c)\
    \ + 32)\n                        for c in s[::-1]])\ndef check(candidate):\n \
    \   assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo4jf8leg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpo4jf8leg.py\", line 28,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpo4jf8leg.py\", line 18, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if re.search(r'[a-zA-Z]', s):\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbuhwuktl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbuhwuktl.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpbuhwuktl.py\", line 19, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\n  File \"/tmp/tmpbuhwuktl.py\"\
    , line 12, in solve\n    if re.search(r'[a-zA-Z]', s):\nNameError: name 're' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s:\n        letters = [chr(x) for x in range(ord('a'),\
    \ ord('z') + 1)]\n        letter_set = set(letters)\n        if set(s) & letter_set:\n\
    \            new_string = ''\n            for c in s:\n                if c in\
    \ letter_set:\n                    new_string += c.swapcase()\n              \
    \  else:\n                    new_string += c\n            return new_string\n\
    \        else:\n            return s[::-1]\n    else:\n        return s\n\n\n\
    def check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdtxibe7w.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpdtxibe7w.py\", line 40,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpdtxibe7w.py\", line 30, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return \"\".join(c.swapcase() if c.isalpha() else\
    \ c for c in s[::-1])\n    # return \"\".join(c.swapcase() if c.isalpha() else\
    \ c for c in s[::-1])\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7ve5lvt.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmph7ve5lvt.py\", line 27,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmph7ve5lvt.py\", line 17, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1]\n\n\ndef check(candidate):\n    assert\
    \ candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert\
    \ candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert\
    \ candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n\
    \    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\
    \ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7vwe1fi0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7vwe1fi0.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp7vwe1fi0.py\", line 16, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    ret = \"\"\n    is_letter = False\n    for c in\
    \ s:\n        if c.isalpha():\n            ret += c.swapcase()\n            is_letter\
    \ = True\n        else:\n            ret += c\n    if not is_letter:\n       \
    \ ret = ret[::-1]\n    return ret\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if s.isupper() or s.islower() else\
    \ s.swapcase()\n\nprint(solve(\"heLLo\")) # should be \"oLLeh\"\nprint(solve(\"\
    #a@C\")) # should be \"#A@c\"\nprint(solve(\"\")) # should be \"\"\nprint(solve(\"\
    123\")) # should be \"321\"\nprint(solve(\"@A#\")) # should be \"#A@\"\nprint(solve(\"\
    1a2b3c\")) # should be \"c1b2a3\"\nprint(solve(\"123456789\")) # should be \"\
    987654321\"\nprint(solve(\"9\")) # should be \"9\"\nprint(solve(\"abCd\")) # should\
    \ be \"dCbA\"\nprint(solve(\"Hello, world!\")) # should be \"!dlrow ,olleH\"\n\
    print(solve(\"HELlo, WORLD!\")) # should be \"!DLROW ,OLLEh\"\nprint(solve(\"\
    Hello, world!!!123\")) # should be \"321!!!dlrow ,olleH\"\nprint(solve(\"!@#Dfghj\"\
    )) # should be \"JHGFD#@!\"\nprint(solve(\"123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )) # should be \"ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba\"\nprint(solve(\"\
    Hello, world123\")) # should be \"321dlrow ,olleH\"\nprint(solve(\"Hello, world!\"\
    )) # should be \"!dlrow ,olleH\"\nprint(solve(\"abc\")) # should be \"CBA\"\n\
    print(solve(\"My name is (your_name_here)!!!\")) # should be \"!!!(ereh_eman_ruoy_si_ema_yM\"\
    \nprint(solve(\"CodeWars\")) # should be \"srawedO\"\nprint(solve(\"Qaz zaq\"\
    )) # should be \"zaq Qaz\"\nprint(solve(\"I'm a little\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqzd8ti9t.py\", line 34\n    print(solve(\"I'm a little\n\
    \                            ^\nSyntaxError: EOL while scanning string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    reverse = \"\"\n    for i in s:\n        if i.isalpha():\n\
    \            reverse += i.swapcase()\n        else:\n            reverse += i\n\
    \    return reverse[::-1] if reverse else reverse\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_5pbpt53.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_5pbpt53.py\", line 32,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp_5pbpt53.py\", line 22, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    s = s[::-1]\n    return s\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppv2kl278.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmppv2kl278.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmppv2kl278.py\", line 16, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    is_all_letter = True\n    for c in s:\n        if\
    \ not c.isalpha():\n            is_all_letter = False\n            break\n   \
    \ return s[::-1] if is_all_letter else s.swapcase()\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12jtbpg8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp12jtbpg8.py\", line 31,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp12jtbpg8.py\", line 21, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    letters = [c for c in s if c.isalpha()]\n    return\
    \ \"\".join(letters[::-1]) if letters else s[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbgjwuxgj.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpbgjwuxgj.py\", line 27,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpbgjwuxgj.py\", line 17, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s.isalpha():\n        return s.swapcase()\n \
    \   else:\n        return s[::-1]\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc4xqlb0z.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpc4xqlb0z.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpc4xqlb0z.py\", line 22, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # My solution\n    # return s[::-1] if s.isalpha()\
    \ else \"\".join([i.upper() if i.islower() else i.lower() for i in s])[::-1]\n\
    \n    # Better solution\n    # return s[::-1].swapcase() if s.isalpha() else s[::-1]\n\
    \n    # Most pythonic\n    # return s[::-1].swapcase() if s.isalpha() else s[::-1]\n\
    \n    # Easier to read\n\n    return s[::-1].swapcase() if s.isalpha() else s[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwcjl05uz.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpwcjl05uz.py\", line 37,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpwcjl05uz.py\", line 27, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if any(c.isalpha() for c in s):\n        return\
    \ ''.join(i.lower() if i.isupper() else i.upper() for i in s)\n    else:\n   \
    \     return s[::-1]\n\ndef check(candidate):\n    assert candidate('AsDf') ==\
    \ 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab') ==\
    \ 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq913usoy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpq913usoy.py\", line 25,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpq913usoy.py\", line 15, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.isalpha() else s.swapcase()\n\
    \n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\ndef\
    \ check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: "4321\nAB\nC@a#\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpexyp9kuq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpexyp9kuq.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpexyp9kuq.py\", line 22, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s\n    if s.isalpha():\n\
    \        return s[::-1].swapcase()\n    return ''.join(c.swapcase() if c.isalpha()\
    \ else c for c in s[::-1])\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1dfqx2j_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1dfqx2j_.py\", line 28,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp1dfqx2j_.py\", line 18, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    else:\n        return \"\".join(\n            c.upper() if c.islower()\
    \ else c.lower() if c.isupper() else c for c in s\n        )\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    try:\n        return \"\".join(\n            (c.upper()\
    \ if c.islower() else c.lower())\n            if c.isalpha()\n            else\
    \ c\n            for c in s\n        )\n    except TypeError:\n        return\
    \ \"\"\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxqxomm6d.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxqxomm6d.py\", line 32,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpxqxomm6d.py\", line 23, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    # check if string contain alphabet\n    if is_alphabet(s):\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_gp25fii.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_gp25fii.py\", line 30,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp_gp25fii.py\", line 20, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\n  File \"/tmp/tmp_gp25fii.py\"\
    , line 13, in solve\n    if is_alphabet(s):\nNameError: name 'is_alphabet' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    s_list = list(s)\n    reverse_list = []\n    for\
    \ char in s_list:\n        if char.isalpha():\n            reverse_list.append(char.swapcase())\n\
    \        else:\n            reverse_list.append(char)\n    if len(reverse_list)\
    \ == 0:\n        return s[::-1]\n    else:\n        return \"\".join(reverse_list)\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjaznx7l5.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjaznx7l5.py\", line 36,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpjaznx7l5.py\", line 27, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s\n    s = s[::-1]\n \
    \   ret = []\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n\
    \                ret.append(i.upper())\n            else:\n                ret.append(i.lower())\n\
    \        else:\n            ret.append(i)\n    return ''.join(ret)\n\n\nprint(solve(\"\
    ab\"))\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: "BA\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt8jzalkl.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpt8jzalkl.py\", line 39,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpt8jzalkl.py\", line 29, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if s == \"\":\n        return s\n    letters = list(filter(lambda\
    \ x: x.isalpha(), s))\n    letters.reverse()\n    new_s = \"\"\n    for c in s:\n\
    \        if c.isalpha():\n            letter = letters.pop()\n            new_s\
    \ += letter\n        else:\n            new_s += c\n    return new_s\n\n\ndef\
    \ check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234')\
    \ == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
    \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp96me0gq6.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp96me0gq6.py\", line 37,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp96me0gq6.py\", line 27, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if any(c.isalpha() for c in s):\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\ndef check(candidate):\n \
    \   assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not any(c.isalpha() for c in s)\
    \ else s.swapcase()\n\n\ndef check(candidate):\n    assert candidate('AsDf') ==\
    \ 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab') ==\
    \ 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return \"\".join(\n        chr(ord(c) ^ 32) if c.isalpha() else\
    \ c for c in s)\n\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not any(char.isalpha() for char in s):\n    \
    \    return s[::-1]\n    return ''.join(char.upper() if char.islower() else char.lower()\
    \ for char in s)\n\n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if s.isdigit() else s.swapcase()\n\
    \n\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
    \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert\
    \ candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n\
    \    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n\
    \    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n    check(solve)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdlxsvwie.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpdlxsvwie.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpdlxsvwie.py\", line 21, in\
    \ check\n    assert candidate('#6@2') == '2@6#'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    s_ = []\n    for x in s:\n        if x.isalpha():\n\
    \            if x.islower():\n                s_.append(x.upper())\n         \
    \   else:\n                s_.append(x.lower())\n        else:\n            s_.append(x)\n\
    \    return \"\".join(s_[::-1]) if s_ else s[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_0cvqipz.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_0cvqipz.py\", line 35,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp_0cvqipz.py\", line 25, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if not s.isalpha() else ''.join(map(lambda\
    \ c: c.upper() if c.islower() else c.lower(), s))\n\ndef check(candidate):\n \
    \   assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvu9rng67.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvu9rng67.py\", line 25,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpvu9rng67.py\", line 18, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s.isalpha():\n        return s[::-1]\n  \
    \  res = []\n    for c in s:\n        if c.isalpha():\n            res.append(c.swapcase())\n\
    \        else:\n            res.append(c)\n    return ''.join(res)\n\n\ndef check(candidate):\n\
    \    assert candidate('AsDf') == 'aSdF'\n    assert candidate('1234') == '4321'\n\
    \    assert candidate('ab') == 'AB'\n    assert candidate('#a@C') == '#A@c'\n\
    \    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
    \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
    \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8uwypcgl.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8uwypcgl.py\", line 34,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp8uwypcgl.py\", line 27, in\
    \ check\n    assert candidate('#a@C') == '#A@c'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcc8rrg2w.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpcc8rrg2w.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpcc8rrg2w.py\", line 16, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if s.isalpha() else \"\".join(\n\
    \        [c.upper() if c.islower() else c.lower() for c in s]\n    )\n\n\nprint(solve(\"\
    1234\"))  # \"4321\"\nprint(solve(\"ab\"))  # \"AB\"\nprint(solve(\"#a@C\")) \
    \ # \"#A@c\"\ndef check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n\
    \    assert candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n\
    \    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45') ==\
    \ '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: "1234\nba\n#A@c\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84t0hpt3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp84t0hpt3.py\", line 31,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp84t0hpt3.py\", line 21, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    if not s.strip():\n        return s[::-1]\n    return\
    \ ''.join(\n        c.upper() if c.islower() else c.lower() if c.isupper() else\
    \ c\n        for c in s\n    )\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3_eaqtbj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3_eaqtbj.py\", line 29,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmp3_eaqtbj.py\", line 20, in\
    \ check\n    assert candidate('1234') == '4321'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if\
    \ s[i] is a letter, reverse its case from lower to upper or vise versa, \n   \
    \ otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"\n    return s[::-1] if len(s) == len(re.sub(r\"[a-zA-Z]\"\
    , \"\", s)) else s.swapcase()\n\n\ndef check(candidate):\n    assert candidate('AsDf')\
    \ == 'aSdF'\n    assert candidate('1234') == '4321'\n    assert candidate('ab')\
    \ == 'AB'\n    assert candidate('#a@C') == '#A@c'\n    assert candidate('#AsdfW^45')\
    \ == '#aSDFw^45'\n    assert candidate('#6@2') == '2@6#'\n    assert candidate('#$a^D')\
    \ == '#$A^d'\n    assert candidate('#ccc') == '#CCC'\n\ndef test_check():\n  \
    \  check(solve)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkoo9kw9k.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpkoo9kw9k.py\", line 26,\
    \ in test_check\n    check(solve)\n  File \"/tmp/tmpkoo9kw9k.py\", line 16, in\
    \ check\n    assert candidate('AsDf') == 'aSdF'\n  File \"/tmp/tmpkoo9kw9k.py\"\
    , line 12, in solve\n    return s[::-1] if len(s) == len(re.sub(r\"[a-zA-Z]\"\
    , \"\", s)) else s.swapcase()\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
