name: HumanEval_99_closest_integer
language: py
results:
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6bousb2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpm6bousb2.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpm6bousb2.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if float(value) % 1 == 0:\n        return\
    \ int(value)\n    elif float(value) > 0:\n        return math.ceil(float(value))\n\
    \    else:\n        return math.floor(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4p5hy7ni.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4p5hy7ni.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4p5hy7ni.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmp4p5hy7ni.py\"\
    , line 22, in closest_integer\n    return math.ceil(float(value))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number - int(number)\
    \ >= 0.5:\n        return int(number) + 1\n    else:\n        return int(number)\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyixa70a_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpyixa70a_.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpyixa70a_.py\", line\
    \ 29, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt89j2m86.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpt89j2m86.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpt89j2m86.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lsy1yr0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9lsy1yr0.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9lsy1yr0.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpagd5kucv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpagd5kucv.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpagd5kucv.py\", line\
    \ 23, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if \".\" in value:\n        if \"-\" in\
    \ value:\n            return int(value.split(\".\")[0]) - 1\n        else:\n \
    \           return int(value.split(\".\")[0]) + 1\n    else:\n        return int(value)\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4a6lz1o.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpg4a6lz1o.py\", line 36,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpg4a6lz1o.py\", line\
    \ 32, in check\n    assert candidate('15.3') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    try:\n        a = int(float(value))\n  \
    \      return a\n    except ValueError:\n        raise ValueError(f\"{value} is\
    \ not an integer\")\n\n\ndef check(candidate):\n    assert candidate('10') ==\
    \ 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n\
    \    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4c_hq002.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4c_hq002.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4c_hq002.py\", line\
    \ 28, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5q_98b1w.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5q_98b1w.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5q_98b1w.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = int(float(value))\n    if value.count(\"\
    .\") == 1:\n        number_length = len(value) - value.index(\".\") - 1\n    \
    \    if number_length == 1:\n            if int(value[-1]) >= 5:\n           \
    \     number += 1\n        elif number_length == 2:\n            if int(value[-2:])\
    \ >= 50:\n                number += 1\n    return number\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2pwp059e.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2pwp059e.py\", line 39,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2pwp059e.py\", line\
    \ 34, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if not value:\n        return 0\n    try:\n\
    \        return int(value)\n    except ValueError:\n        pass\n    return int(round(float(value)))\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwfrmhbei.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpwfrmhbei.py\", line 36,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwfrmhbei.py\", line\
    \ 30, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj6ef11ju.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpj6ef11ju.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpj6ef11ju.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(float(value) + 0.5)\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpizah9lgf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpizah9lgf.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpizah9lgf.py\", line\
    \ 25, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rj02zs5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1rj02zs5.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1rj02zs5.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2x2seam6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2x2seam6.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2x2seam6.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if \".\" in value:\n        if value[-1]\
    \ in \"56789\":\n            return int(value.replace(\".\", \"\")) + 1\n    \
    \    else:\n            return int(value.replace(\".\", \"\"))\n    else:\n  \
    \      return int(value)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpotewbyau.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpotewbyau.py\", line 36,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpotewbyau.py\", line\
    \ 30, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk0po4_x5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpk0po4_x5.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpk0po4_x5.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    return int(value\
    \ + 0.5) if value >= 0 else int(value - 0.5)\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\n@pytest.mark.parametrize(\"\
    test_input,expected\", [\n    ('10', 10),\n    ('15.3', 15),\n    ('-14.5', -15),\n\
    \    ('-14.3', -14),\n    ('14.8', 15),\n    ('14.5', 15),\n    ('-14.5', -15),\n\
    \    ('-14.3', -14),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482',\
    \ 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n\
    \    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482',\
    \ 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n\
    \    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482',\
    \ 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n\
    \    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482',\
    \ 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n\
    \    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482',\
    \ 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n\
    \    ('1.6180339887498948482', 2),\n    ('\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpk8cqnx1w.py\", line 56\n    ('\n     ^\nSyntaxError: EOL\
    \ while scanning string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wx7j5s7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1wx7j5s7.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1wx7j5s7.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[-1] == \"5\":\n        return round(float(value))\n\
    \    else:\n        return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcb_bpzbt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpcb_bpzbt.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpcb_bpzbt.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbqukfz9y.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbqukfz9y.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbqukfz9y.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpouwulmia.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpouwulmia.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpouwulmia.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    return int(value\
    \ + 0.5 * (1 if value > 0 else -1))\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    # if the input is an integer, return it\n\
    \    try:\n        value = int(value)\n        return value\n    except ValueError:\n\
    \        # check if input is negative\n        if \"-\" in value:\n          \
    \  integer = math.ceil(float(value))\n        else:\n            integer = math.floor(float(value))\n\
    \        return integer\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqx0dcglb.py\", line\
    \ 21, in closest_integer\n    value = int(value)\nValueError: invalid literal\
    \ for int() with base 10: '14.5'\n\nDuring handling of the above exception, another\
    \ exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpqx0dcglb.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/tmp/tmpqx0dcglb.py\", line\
    \ 40, in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqx0dcglb.py\"\
    , line 34, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmpqx0dcglb.py\"\
    , line 28, in closest_integer\n    integer = math.floor(float(value))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwfqnzp6o.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwfqnzp6o.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwfqnzp6o.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    string_value = str(value)\n    dots = [i\
    \ for i, char in enumerate(string_value) if char == \".\"]\n    if len(dots) ==\
    \ 0:\n        return int(value)\n    else:\n        first_dot = dots[0]\n    \
    \    second_dot = dots[1]\n        last_digit = first_dot + 1\n        last_digit_value\
    \ = int(string_value[last_digit])\n        return (\n            int(string_value[:first_dot])\n\
    \            if last_digit_value < 5\n            else int(string_value[:first_dot])\
    \ + 1\n        )\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n\
    \    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n  \
    \  assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_74z272.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpu_74z272.py\", line 43,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpu_74z272.py\", line\
    \ 37, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmpu_74z272.py\"\
    , line 25, in closest_integer\n    second_dot = dots[1]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeg5_yzx7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpeg5_yzx7.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpeg5_yzx7.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    return math.ceil(value)\
    \ if value % 1 > 0.5 else math.floor(value)\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqnxrye03.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqnxrye03.py\", line 31,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqnxrye03.py\", line\
    \ 24, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpqnxrye03.py\"\
    , line 20, in closest_integer\n    return math.ceil(value) if value % 1 > 0.5\
    \ else math.floor(value)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if not isinstance(value, str):\n       \
    \ raise TypeError(\"The value must be a string.\")\n    if not value.replace(\"\
    .\", \"\").isdigit():\n        raise ValueError(\"The value must be a number.\"\
    )\n    return int(round(float(value)))\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkelm6nrg.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkelm6nrg.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpkelm6nrg.py\", line\
    \ 26, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(value)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy391viex.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy391viex.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpy391viex.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmpy391viex.py\"\
    , line 19, in closest_integer\n    return int(value)\nValueError: invalid literal\
    \ for int() with base 10: '14.5'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    up = math.ceil(number)\n\
    \    down = math.floor(number)\n    if abs(number - up) >= abs(number - down):\n\
    \        return down\n    return up\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphx7x__qu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphx7x__qu.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphx7x__qu.py\", line\
    \ 28, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmphx7x__qu.py\"\
    , line 20, in closest_integer\n    up = math.ceil(number)\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lmlz11v.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9lmlz11v.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9lmlz11v.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.startswith(\"-\"):\n        return\
    \ round(float(value))\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xry8r8d.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp9xry8r8d.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9xry8r8d.py\", line\
    \ 26, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if not value:\n        return\n\n    value\
    \ = float(value)\n    return int(value + 0.5)\n\n\ndef check(candidate):\n   \
    \ assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp58w9yopu.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp58w9yopu.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp58w9yopu.py\", line\
    \ 29, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    closest = round(float(value))\n    if closest\
    \ > float(value):\n        return closest - 1\n    return closest\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptt1984mc.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmptt1984mc.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmptt1984mc.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpidubptuq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpidubptuq.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpidubptuq.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.endswith(\".0\"):\n        return\
    \ int(value)\n    elif float(value) > 0:\n        return int(value) + 1\n    else:\n\
    \        return int(value) - 1\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpngx4bgsf.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpngx4bgsf.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpngx4bgsf.py\", line\
    \ 26, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    decimal = value\
    \ - int(value)\n    if decimal < 0.5:\n        return int(value)\n    else:\n\
    \        return int(value) + 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvux2ref.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppvux2ref.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppvux2ref.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    try:\n        return round(float(value))\n\
    \    except ValueError:\n        return None\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydcy1uha.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpydcy1uha.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpydcy1uha.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    dec_part = float(value) - int(value)\n \
    \   return int(value) + (1 if dec_part >= 0.5 else 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2wgi_68_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp2wgi_68_.py\", line 31,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2wgi_68_.py\", line\
    \ 25, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmp2wgi_68_.py\"\
    , line 19, in closest_integer\n    dec_part = float(value) - int(value)\nValueError:\
    \ invalid literal for int() with base 10: '14.5'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    try:\n        value = float(value)\n   \
    \ except ValueError:\n        return None\n    if value < 0:\n        return int(math.ceil(value))\n\
    \    return int(math.floor(value))\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5rgf85qr.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp5rgf85qr.py\", line 36,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5rgf85qr.py\", line\
    \ 29, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmp5rgf85qr.py\"\
    , line 25, in closest_integer\n    return int(math.floor(value))\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdpu26ojy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdpu26ojy.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpdpu26ojy.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    # return round(float(value))\n    return\
    \ int(round(float(value)))\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rg_n9tb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6rg_n9tb.py\", line 31,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6rg_n9tb.py\", line\
    \ 25, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7tbg6_2m.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7tbg6_2m.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7tbg6_2m.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    try:\n        return int(round(float(value)))\n\
    \    except ValueError:\n        raise ValueError(\"Provided value is not a number.\"\
    )\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy68kst32.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpy68kst32.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpy68kst32.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpomr_46hd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpomr_46hd.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpomr_46hd.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    if abs(value)\
    \ % 1 < 0.5:\n        return int(value)\n    elif value < 0:\n        return int(value\
    \ - 1)\n    return int(value + 1)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\n@check_types\n\
    def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy1e168c4.py\", line\
    \ 22, in <module>\n    @check_types\nNameError: name 'check_types' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    # your code here\n    if value[-1] not in\
    \ [\"5\", \"0\"]:\n        if float(value) - int(value) > 0.5:\n            return\
    \ int(value) + 1\n        else:\n            return int(value)\n    elif value[-1]\
    \ == \"5\":\n        if float(value) - int(value) >= 0.5:\n            return\
    \ int(value) + 1\n        else:\n            return int(value)\n    else:\n  \
    \      return int(value)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfgdhhkh.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpzfgdhhkh.py\", line 42,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpzfgdhhkh.py\", line\
    \ 36, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmpzfgdhhkh.py\"\
    , line 26, in closest_integer\n    if float(value) - int(value) >= 0.5:\nValueError:\
    \ invalid literal for int() with base 10: '14.5'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb0eosu9j.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb0eosu9j.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpb0eosu9j.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    if value % 1 >=\
    \ 0.5:\n        return int(value) + 1\n    return int(value)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplrhkt3ee.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmplrhkt3ee.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmplrhkt3ee.py\", line\
    \ 28, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjcjtto9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwjcjtto9.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwjcjtto9.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8eq2k4e6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8eq2k4e6.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp8eq2k4e6.py\", line\
    \ 23, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq49uwn43.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq49uwn43.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpq49uwn43.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl4y4bon8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpl4y4bon8.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpl4y4bon8.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    decimal = float(value)\n    if decimal >=\
    \ 0:\n        if decimal % 1 > 0.5:\n            return int(decimal) + 1\n   \
    \     return int(decimal)\n    if decimal % 1 < -0.5:\n        return int(decimal)\
    \ - 1\n    return int(decimal)\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaq9uamuq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpaq9uamuq.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpaq9uamuq.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value == \"\":\n        return 0\n  \
    \  else:\n        # round down if less than .5\n        # otherwise round up\n\
    \        return math.ceil(float(value)) if float(value) - math.floor(float(value))\
    \ >= 0.5 else math.floor(float(value))\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1plglad4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1plglad4.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1plglad4.py\", line\
    \ 28, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmp1plglad4.py\"\
    , line 24, in closest_integer\n    return math.ceil(float(value)) if float(value)\
    \ - math.floor(float(value)) >= 0.5 else math.floor(float(value))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa7_bt2su.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpa7_bt2su.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpa7_bt2su.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxj0yztss.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxj0yztss.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxj0yztss.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6__qn685.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6__qn685.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6__qn685.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmf3xup29.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmf3xup29.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpmf3xup29.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    # Split the string into two values (before\
    \ and after decimal point)\n    value_1, value_2 = value.split(\".\")\n\n    #\
    \ If there is no decimal point, return the integer\n    if value_2 == \"0\":\n\
    \        return int(value_1)\n\n    # If the number to the right of the decimal\
    \ point is less than 5\n    # and greater than or equal to 0, return the integer\n\
    \    elif int(value_2) < 5 and int(value_2) >= 0:\n        return int(value_1)\n\
    \n    # If the number to the right of the decimal point is greater than or\n \
    \   # equal to 5 and less than 10, return the integer plus 1\n    elif int(value_2)\
    \ >= 5 and int(value_2) < 10:\n        return int(value_1) + 1\n\n    # If the\
    \ number to the right of the decimal point is greater than\n    # or equal to\
    \ 10 and less than 15, return the integer plus 2\n    elif int(value_2) >= 10\
    \ and int(value_2) < 15:\n        return int(value_1) + 2\n\n    # If the number\
    \ to the right of the decimal point is greater than\n    # or equal to 15 and\
    \ less than 20, return the integer plus 3\n    elif int(value_2) >= 15 and int(value_2)\
    \ < 20:\n        return int(value_1) + 3\n\n    # If the number to the right of\
    \ the decimal point is greater than\n    # or equal to 20 and less than 25, return\
    \ the integer plus 4\n    elif int(value_2) >= 20 and int(value_2) < 25:\n   \
    \     return int(value_1) + 4\n\n    # If the number to the right of the decimal\
    \ point is greater than\n    # or equal to 25 and less than 30, return the integer\
    \ plus 5\n    elif int(value_2) >= 25 and int(value_2) < 30:\n        return int(value_1)\
    \ + 5\n\n    # If the number to the right of the decimal point is greater than\n\
    \    # or equal to 30 and less than 35, return the integer plus 6\n    elif int(value_2)\
    \ >= 30 and int(value_2) < 35:\n       \ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpup70h_yn.py\", line 60\n    def check(candidate):\n  \
    \  ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskzwnhr0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpskzwnhr0.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpskzwnhr0.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    try:\n        float_value = float(value)\n\
    \        return int(float_value)\n    except ValueError:\n        print(f\"{value}\
    \ is not a number.\")\n\n\ndef check(candidate):\n    assert candidate('10') ==\
    \ 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n\
    \    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpul_tvwfo.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpul_tvwfo.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpul_tvwfo.py\", line\
    \ 28, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    split_value = value.split(\".\")\n    if\
    \ len(split_value) == 1:\n        return int(value)\n    else:\n        if split_value[1][0]\
    \ >= \"5\":\n            return int(split_value[0]) + 1\n        else:\n     \
    \       return int(split_value[0])\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpca9rsq4b.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpca9rsq4b.py\", line 37,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpca9rsq4b.py\", line\
    \ 32, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    try:\n        return round(float(value))\n\
    \    except (TypeError, ValueError):\n        raise ValueError(f\"`{value}` is\
    \ not a floatable value.\")\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnwr00jfz.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnwr00jfz.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpnwr00jfz.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    try:\n        if \".\" in value:\n     \
    \       # if it's a float\n            if value[0] == \"-\":\n               \
    \ # just make it a positive float\n                value = abs(float(value))\n\
    \            else:\n                value = float(value)\n        else:\n    \
    \        value = int(value)\n    except ValueError:\n        raise ValueError(\"\
    You must use a value (string).\")\n\n    return int(round(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmfxgk1d_.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpmfxgk1d_.py\", line 43,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpmfxgk1d_.py\", line\
    \ 37, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if float(value) % 1 == 0:\n        return\
    \ int(value)\n    else:\n        return int(value) + 1 if value[-1] >= '5' else\
    \ int(value)\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n  \
    \  assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n    assert\
    \ candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnpkel5w.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppnpkel5w.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppnpkel5w.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmppnpkel5w.py\"\
    , line 22, in closest_integer\n    return int(value) + 1 if value[-1] >= '5' else\
    \ int(value)\nValueError: invalid literal for int() with base 10: '14.5'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    # TODO: Your code goes here\n    #raise\
    \ NotImplementedError()\n    return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpixqo8v9k.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpixqo8v9k.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpixqo8v9k.py\", line\
    \ 26, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    if value < 0:\n\
    \        return int(value - 0.5)\n    return int(value + 0.5)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    closest_integer\
    \ = 0\n\n    if value > 0:\n        closest_integer = math.ceil(value)\n    elif\
    \ value < 0:\n        closest_integer = math.floor(value)\n    else:\n       \
    \ closest_integer = 0\n\n    return closest_integer\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwwk0hlyv.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpwwk0hlyv.py\", line 40,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwwk0hlyv.py\", line\
    \ 33, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpwwk0hlyv.py\"\
    , line 23, in closest_integer\n    closest_integer = math.ceil(value)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnlbo79it.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnlbo79it.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpnlbo79it.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if '.' in value:\n        if value[0] ==\
    \ '-':\n            return -round(float(value))\n        return round(float(value))\n\
    \    return int(value)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_rtn45r.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy_rtn45r.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpy_rtn45r.py\", line\
    \ 28, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmw3_2998.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmw3_2998.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpmw3_2998.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    # return math.ceil(float(value))\n    return\
    \ int(round(float(value)))\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9_7r9txe.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9_7r9txe.py\", line 31,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9_7r9txe.py\", line\
    \ 25, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(value) + 1 if float(value) -\
    \ int(value) >= 0.5 else int(value)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps9i3fgga.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmps9i3fgga.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmps9i3fgga.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmps9i3fgga.py\"\
    , line 19, in closest_integer\n    return int(value) + 1 if float(value) - int(value)\
    \ >= 0.5 else int(value)\nValueError: invalid literal for int() with base 10:\
    \ '14.5'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    try:\n        return int(value)\n    except\
    \ ValueError:\n        pass\n\n    # value is not integer\n\n    m = re.match(r\"\
    ^([\\d.]+)\\.[5]$\", value)\n    if m:\n        n, r = int(m.group(1)), .5\n \
    \   else:\n        n, r = map(float, value.split(\".\"))\n\n    q, c = divmod(n,\
    \ 1)\n    return int(q + 1) if r > c else int(q)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_28gao8.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmps_28gao8.py\", line 44,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmps_28gao8.py\", line\
    \ 38, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmps_28gao8.py\"\
    , line 26, in closest_integer\n    m = re.match(r\"^([\\d.]+)\\.[5]$\", value)\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if isinstance(value, str):\n        value\
    \ = float(value)\n    rounded = round(value)\n    return int(rounded)\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqa545nsa.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqa545nsa.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqa545nsa.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiephp_8v.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpiephp_8v.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpiephp_8v.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    try:\n        return int(float(value))\n\
    \    except (ValueError, TypeError):\n        return 0\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu82_cm0x.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu82_cm0x.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpu82_cm0x.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn5n6k_gu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpn5n6k_gu.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpn5n6k_gu.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    try:\n        value = float(value)\n   \
    \ except ValueError:\n        raise\n    if value > 0:\n        closest_int =\
    \ math.ceil(value)\n    else:\n        closest_int = math.floor(value)\n    return\
    \ closest_int\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n \
    \   assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n   \
    \ assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt3hvzfua.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpt3hvzfua.py\", line 38,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpt3hvzfua.py\", line\
    \ 31, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpt3hvzfua.py\"\
    , line 24, in closest_integer\n    closest_int = math.ceil(value)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpos0k1jmy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpos0k1jmy.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpos0k1jmy.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    x = float(value)\n    y = math.ceil(x)\n\
    \    z = math.floor(x)\n    return y if y - x < x - z else z\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu86wy3ko.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu86wy3ko.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpu86wy3ko.py\", line\
    \ 26, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpu86wy3ko.py\"\
    , line 20, in closest_integer\n    y = math.ceil(x)\nNameError: name 'math' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph3i_vydr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmph3i_vydr.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmph3i_vydr.py\", line\
    \ 23, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\n@log\n\
    def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_lfht76.py\", line\
    \ 22, in <module>\n    @log\nNameError: name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo4u8qe67.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpo4u8qe67.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpo4u8qe67.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqr2t1g7h.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqr2t1g7h.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqr2t1g7h.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    v = float(value)\n    return math.ceil(v)\
    \ if v > 0 and v - math.floor(v) > 0.5 else math.floor(v)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkkxfs46.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpkkkxfs46.py\", line 31,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpkkkxfs46.py\", line\
    \ 24, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpkkkxfs46.py\"\
    , line 20, in closest_integer\n    return math.ceil(v) if v > 0 and v - math.floor(v)\
    \ > 0.5 else math.floor(v)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl89cszjo.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpl89cszjo.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpl89cszjo.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbomd2ihm.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbomd2ihm.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbomd2ihm.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ajromd2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0ajromd2.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0ajromd2.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4lziiqjw.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4lziiqjw.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4lziiqjw.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    integer = int(float(value))\n    if float(value)\
    \ == integer:\n        return integer\n    elif float(value) > integer:\n    \
    \    return integer + 1\n    elif float(value) < integer:\n        return integer\
    \ - 1\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert\
    \ candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3')\
    \ == 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_rw4alj.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpw_rw4alj.py\", line 36,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpw_rw4alj.py\", line\
    \ 32, in check\n    assert candidate('15.3') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8w559lai.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8w559lai.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp8w559lai.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp41sszvhx.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp41sszvhx.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp41sszvhx.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = int(round(float(value)))\n    return\
    \ value\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprbxlxpik.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmprbxlxpik.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmprbxlxpik.py\", line\
    \ 23, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw9so0gyj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpw9so0gyj.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpw9so0gyj.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmply4w20ue.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmply4w20ue.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmply4w20ue.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    # We can round a number to the closest integer\
    \ by using the round\n    # function, but round() rounds to the nearest even number.\n\
    \    # We can work around this by using numpy.round() instead.\n\n    return numpy.round(float(value))\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiii50vce.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpiii50vce.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpiii50vce.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpiii50vce.py\"\
    , line 23, in closest_integer\n    return numpy.round(float(value))\nNameError:\
    \ name 'numpy' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_k3avmth.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_k3avmth.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_k3avmth.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    return int(round(value))\n\
    \n\n@pytest.mark.parametrize(\n    's, result',\n    [\n        ('10', 10),\n\
    \        ('15.3', 15),\n        ('-15.3', -15),\n        ('14.5', 15),\n     \
    \   ('-14.5', -15),\n    ]\n)\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4n3mcnd_.py\", line\
    \ 23, in <module>\n    @pytest.mark.parametrize(\nNameError: name 'pytest' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpug5uj5lp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpug5uj5lp.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpug5uj5lp.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpio8ytbp9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpio8ytbp9.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpio8ytbp9.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    integer = int(value)\n\
    \    return integer if math.fabs(value - integer) < 0.5 else integer + math.copysign(1,\
    \ value)\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert\
    \ candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3')\
    \ == 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptocyk_j2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmptocyk_j2.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmptocyk_j2.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmptocyk_j2.py\"\
    , line 21, in closest_integer\n    return integer if math.fabs(value - integer)\
    \ < 0.5 else integer + math.copysign(1, value)\nNameError: name 'math' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8q5bx82z.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8q5bx82z.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp8q5bx82z.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    _value = float(value)\n    _int_value =\
    \ int(_value)\n    if _value - _int_value < 0.5:\n        return _int_value\n\
    \    else:\n        return _int_value + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd8euczto.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpd8euczto.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpd8euczto.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    try:\n        return int(round(float(value)))\n\
    \    except ValueError:\n        return None\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9cpdl4o4.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9cpdl4o4.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9cpdl4o4.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    def round_to_multiple(value, base):\n  \
    \      return int(base * round(float(value) / base))\n\n    return round_to_multiple(value,\
    \ 1)\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert\
    \ candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3')\
    \ == 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvajr_jrr.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpvajr_jrr.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpvajr_jrr.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphsai4zkc.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphsai4zkc.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphsai4zkc.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1mvca0ai.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1mvca0ai.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1mvca0ai.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0xztsdq3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0xztsdq3.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0xztsdq3.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[-1] == \".\":\n        value =\
    \ value[:-1]\n    value = float(value)\n    return int(value + 0.5)\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwssh6p5o.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwssh6p5o.py\", line 31,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwssh6p5o.py\", line\
    \ 26, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    # float value\n    round_up_closest_int\
    \ = ceil(float(value))\n    round_down_closest_int = floor(float(value))\n\n \
    \   if round_up_closest_int - float(value) < float(value) - round_down_closest_int:\n\
    \        return round_up_closest_int\n    else:\n        return round_down_closest_int\n\
    def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptyawto7e.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptyawto7e.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmptyawto7e.py\", line\
    \ 28, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmptyawto7e.py\"\
    , line 20, in closest_integer\n    round_up_closest_int = ceil(float(value))\n\
    NameError: name 'ceil' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    import math\n    return math.floor(float(value)\
    \ + .5)\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert\
    \ candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3')\
    \ == 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0hfawfg3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp0hfawfg3.py\", line 31,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0hfawfg3.py\", line\
    \ 26, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdmt63oni.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdmt63oni.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpdmt63oni.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[-1] in (\"5\", \"6\", \"7\", \"\
    8\", \"9\"):\n        return int(value) + 1\n    return int(value)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl4uxi0qk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpl4uxi0qk.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpl4uxi0qk.py\", line\
    \ 26, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmpl4uxi0qk.py\"\
    , line 20, in closest_integer\n    return int(value) + 1\nValueError: invalid\
    \ literal for int() with base 10: '14.5'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9pj1to5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpa9pj1to5.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpa9pj1to5.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    try:\n        return int(round(float(value)))\n\
    \    except ValueError:\n        return 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxvs3iyxp.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxvs3iyxp.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxvs3iyxp.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    if value % 1 ==\
    \ 0:\n        return int(value)\n    else:\n        return value // 1 + (value\
    \ > 0)\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert\
    \ candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3')\
    \ == 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1xmn3457.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1xmn3457.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1xmn3457.py\", line\
    \ 30, in check\n    assert candidate('15.3') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.endswith(\".0\"):\n        return\
    \ int(value)\n    return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph5l3hxaa.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmph5l3hxaa.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmph5l3hxaa.py\", line\
    \ 26, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    if value > 0:\n\
    \        return int(math.ceil(value))\n    else:\n        return int(math.floor(value))\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp06oryuli.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp06oryuli.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp06oryuli.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmp06oryuli.py\"\
    , line 21, in closest_integer\n    return int(math.ceil(value))\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number: float = float(value)\n    if number\
    \ > 0:\n        return math.ceil(number)\n    return math.floor(number)\n\n\n\
    def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoeqy286.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpaoeqy286.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpaoeqy286.py\", line\
    \ 26, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpaoeqy286.py\"\
    , line 21, in closest_integer\n    return math.ceil(number)\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if '.' in value:\n        value = value.split('.')\n\
    \        num = int(value[0])\n        if len(value[1]) > 1:\n            num +=\
    \ 1 if value[1][1] >= '5' else 0\n        else:\n            num += 0.5 if value[1][0]\
    \ >= '5' else 0\n    else:\n        num = int(value)\n    return num\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2jyosxif.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2jyosxif.py\", line 39,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2jyosxif.py\", line\
    \ 33, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiv7f_1t7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpiv7f_1t7.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpiv7f_1t7.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp894_v9d3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp894_v9d3.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp894_v9d3.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(float(value) + 0.5)\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwuf92wqu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwuf92wqu.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwuf92wqu.py\", line\
    \ 25, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu19hdrsm.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpu19hdrsm.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpu19hdrsm.py\", line\
    \ 23, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    # TODO: consider handling negative numbers\n\
    \    return int(round(float(value)))\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkyxg5zw3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpkyxg5zw3.py\", line 31,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpkyxg5zw3.py\", line\
    \ 25, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi2t6edpf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpi2t6edpf.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpi2t6edpf.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcbp7v3_2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpcbp7v3_2.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpcbp7v3_2.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    round_value = round(float(value))\n    return\
    \ int(round_value)\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n\
    \    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n  \
    \  assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpakj5sm61.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpakj5sm61.py\", line 31,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpakj5sm61.py\", line\
    \ 25, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(float(value) + 0.5)\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpex105zi1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpex105zi1.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpex105zi1.py\", line\
    \ 23, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(float(value) + 0.5)\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphzxtguj8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphzxtguj8.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphzxtguj8.py\", line\
    \ 23, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    if value - int(value)\
    \ >= 0.5:\n        return int(value) + 1\n    else:\n        return int(value)\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp35xz3t07.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp35xz3t07.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp35xz3t07.py\", line\
    \ 29, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    closest = int(value)\n    rem = closest\
    \ - float(value)\n    if rem < 0:\n        if rem < -0.5:\n            closest\
    \ += 1\n    elif rem > 0:\n        if rem > 0.5:\n            closest -= 1\n \
    \   return closest\ndef check(candidate):\n    assert candidate('10') == 10\n\
    \    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n  \
    \  assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoik_aj8t.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpoik_aj8t.py\", line 36,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpoik_aj8t.py\", line\
    \ 30, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmpoik_aj8t.py\"\
    , line 19, in closest_integer\n    closest = int(value)\nValueError: invalid literal\
    \ for int() with base 10: '14.5'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqy8y26_u.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqy8y26_u.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqy8y26_u.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6dauuo5p.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6dauuo5p.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6dauuo5p.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptkxjxpmp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptkxjxpmp.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmptkxjxpmp.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxj4ofly8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxj4ofly8.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxj4ofly8.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpptmazekm.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpptmazekm.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpptmazekm.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2msl1iao.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2msl1iao.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2msl1iao.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    if abs(value -\
    \ int(value)) > 0.5:\n        return int(value + 1 if value > 0 else value - 1)\n\
    \    return int(value)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1gwq0ulq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1gwq0ulq.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1gwq0ulq.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa2sbkkq5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpa2sbkkq5.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpa2sbkkq5.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6qzuqupm.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6qzuqupm.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6qzuqupm.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    a = round(float(value))\n    return a\n\n\
    \ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa1xi5pwf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa1xi5pwf.py\", line 31,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpa1xi5pwf.py\", line\
    \ 25, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuz9_z81z.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpuz9_z81z.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpuz9_z81z.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps57qthlv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmps57qthlv.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmps57qthlv.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    num = float(value)\n    if int(num) == num:\n\
    \        return int(num)\n    elif num > 0:\n        return int(num) + 1\n   \
    \ else:\n        return int(num) - 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1deu9lj7.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp1deu9lj7.py\", line 36,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1deu9lj7.py\", line\
    \ 32, in check\n    assert candidate('15.3') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwwqkgyv2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwwqkgyv2.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwwqkgyv2.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9rkfubaj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9rkfubaj.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9rkfubaj.py\", line\
    \ 23, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.count(\".\") == 0:\n        return\
    \ int(value)\n    else:\n        return int(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpavrp9vke.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpavrp9vke.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpavrp9vke.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    floor = math.floor(number)\n\
    \    ceil = math.ceil(number)\n    if ceil - number < number - floor:\n      \
    \  return ceil\n    return floor\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp31gjyx5k.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp31gjyx5k.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp31gjyx5k.py\", line\
    \ 28, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmp31gjyx5k.py\"\
    , line 20, in closest_integer\n    floor = math.floor(number)\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    return int(round(value))\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit7fvgth.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpit7fvgth.py\", line 31,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpit7fvgth.py\", line\
    \ 25, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    try:\n        return int(round(float(value)))\n\
    \    except ValueError:\n        return int(value)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6upkvjk.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpm6upkvjk.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpm6upkvjk.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr3e9p2lp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpr3e9p2lp.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpr3e9p2lp.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.count(\".\") == 0:\n        return\
    \ int(value)\n    return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgbk741dn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgbk741dn.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpgbk741dn.py\", line\
    \ 26, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\n@pysnooper.snoop()\n\
    def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsnu3oowf.py\", line\
    \ 22, in <module>\n    @pysnooper.snoop()\nNameError: name 'pysnooper' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt9oj0zd7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpt9oj0zd7.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpt9oj0zd7.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj08o2wzu.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpj08o2wzu.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpj08o2wzu.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return math.floor(float(value) + 0.5)\n\n\
    \ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8x2aw0ab.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8x2aw0ab.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp8x2aw0ab.py\", line\
    \ 23, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmp8x2aw0ab.py\"\
    , line 19, in closest_integer\n    return math.floor(float(value) + 0.5)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnr9xogmp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnr9xogmp.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpnr9xogmp.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value == '.':\n        return 0\n   \
    \ else:\n        return int(float(value))\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoe1gs3zh.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpoe1gs3zh.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpoe1gs3zh.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpps354g7_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpps354g7_.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpps354g7_.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    ret_val = 0\n\n    if value.find(\".\")\
    \ == -1:\n        ret_val = int(value)\n    else:\n        ret_val = int(round(float(value)))\n\
    \n    return ret_val\n\n\ndef check(candidate):\n    assert candidate('10') ==\
    \ 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n\
    \    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_b9elyvv.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp_b9elyvv.py\", line 37,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_b9elyvv.py\", line\
    \ 31, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = Decimal(value)\n    # Get the floor\
    \ and ceiling of the input value\n    floor, ceiling = value.quantize(1, rounding=ROUND_FLOOR),\
    \ value.quantize(1, rounding=ROUND_CEILING)\n    # If the input value is equidistant\
    \ from both the floor and ceiling\n    # use the floor if it is positive and the\
    \ ceiling if it is negative\n    if ceiling - value == value - floor:\n      \
    \  return floor if floor >= 0 else ceiling\n    # Otherwise, use the closest one\n\
    \    return int(floor if value - floor < ceiling - value else ceiling)\n\n\n@pytest.mark.parametrize(\n\
    \    \"test_input,expected\",\n    [\n        # Exact\n        (\"10\", 10),\n\
    \        (\"15.3\", 15),\n        # Rounding away from zero\n        (\"14.5\"\
    , 15),\n        (\"-14.5\", -15),\n        # Rounding toward zero\n        (\"\
    14.1\", 14),\n        (\"-14.1\", -14),\n        # Rounding\n        (\"11.5\"\
    , 12),\n        (\"-11.5\", -12),\n        # Max/min\n        (\"2147483647\"\
    , 2147483647),\n        (\"-2147483648\", -2147483648),\n    ],\n)\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppkg7ean1.py\", line\
    \ 30, in <module>\n    @pytest.mark.parametrize(\nNameError: name 'pytest' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    float_value = float(value)\n    return int(float_value)\
    \ if float_value - int(float_value) <= 0.5 else int(float_value) + 1\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbbf6zfrv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbbf6zfrv.py\", line 31,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbbf6zfrv.py\", line\
    \ 25, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    def select_rounding_direction(num: float)\
    \ -> int:\n        \"\"\"\n        Select the rounding direction based on the\
    \ sign of the number.\n        \"\"\"\n        if num < 0:\n            return\
    \ math.floor(num)\n        return math.ceil(num)\n\n    decimal = float(value)\n\
    \    whole = int(value)\n    truncated = math.trunc(decimal)\n    if decimal ==\
    \ truncated:\n        return whole\n    else:\n        return select_rounding_direction(decimal)\n\
    \n\n@pytest.mark.parametrize(\n    \"test_input,expected\",\n    [\n        (\"\
    14.5\", 15),\n        (\"-14.5\", -15),\n        (\"-14.3\", -14),\n        (\"\
    10\", 10),\n        (\"-10\", -10),\n        (\"15.3\", 15),\n        (\"-15.3\"\
    , -15),\n        (\"0\", 0),\n        (\"1.2\", 1),\n        (\"-1.2\", -1),\n\
    \        (\"-1.6\", -2),\n        (\"-1.4\", -1),\n        (\"5.5\", 6),\n   \
    \     (\"0.5\", 1),\n        (\"10.5\", 11),\n        (\"13.7\", 14),\n      \
    \  (\"-10.5\", -11),\n        (\"10.5\", 11),\n        (\"-10.5\", -11),\n   \
    \     (\"-12.5\", -13),\n        (\"8.6\", 9),\n        (\"12.5\", 13),\n    \
    \    (\"-0.5\", 0),\n        (\"11.6\", 12),\n        (\"0.9\", 1),\n        (\"\
    -0.9\", -1),\n        (\"-2.3\", -2),\n        (\"-11.5\", -12),\n        (\"\
    -8.5\", -9),\n        (\"2.3\", 2),\n        (\"-13.5\", -14),\n        (\"-1.8\"\
    , -2),\n        (\"-10.5\", -11),\n        (\"-13.9\", -14),\n        (\"11.8\"\
    , 12),\n        (\"-2.6\", -3),\n        (\"-13.5\", -\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpzhvmpcox.py\", line 76\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_awrw_s.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpa_awrw_s.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpa_awrw_s.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydyhnye9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpydyhnye9.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpydyhnye9.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3_ujipl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk3_ujipl.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpk3_ujipl.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if not value:\n        return 0\n    value\
    \ = float(value)\n    if value == 0:\n        return 0\n    if value == round(value):\n\
    \        return int(value)\n    digit = 1 if value > 0 else -1\n    return int(value)\
    \ + digit\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert\
    \ candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3')\
    \ == 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbssb9l14.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbssb9l14.py\", line 38,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbssb9l14.py\", line\
    \ 34, in check\n    assert candidate('15.3') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr7jb7a4p.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpr7jb7a4p.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpr7jb7a4p.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptg2v3f2u.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmptg2v3f2u.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmptg2v3f2u.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(float(value) + 0.5)\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7forvqjs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp7forvqjs.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7forvqjs.py\", line\
    \ 25, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    return round(number)\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuc5qhwzm.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuc5qhwzm.py\", line 31,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpuc5qhwzm.py\", line\
    \ 25, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return -1\
    \ * closest_integer(value[1:])\n    elif \".\" in value:\n        val = value.split(\"\
    .\")\n        if int(val[1]) > 4:\n            return int(val[0]) + 1\n      \
    \  return int(val[0])\n    else:\n        return int(value)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn0b9sl5q.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpn0b9sl5q.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpn0b9sl5q.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    return int(value\
    \ - .5) if value < 0 else int(value + .5)\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(float(value) + 0.5)\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvew01dx.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpuvew01dx.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpuvew01dx.py\", line\
    \ 25, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa90ef70t.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpa90ef70t.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpa90ef70t.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuykpe3_d.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpuykpe3_d.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpuykpe3_d.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    return math.ceil(value)\
    \ if value - math.floor(value) >= 0.5 else math.floor(value)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwlumes9z.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwlumes9z.py\", line 31,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwlumes9z.py\", line\
    \ 24, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpwlumes9z.py\"\
    , line 20, in closest_integer\n    return math.ceil(value) if value - math.floor(value)\
    \ >= 0.5 else math.floor(value)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_hfcn2x7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_hfcn2x7.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_hfcn2x7.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if '.' in value:\n        return round(float(value))\n\
    \    else:\n        return int(value)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwv_snrn5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpwv_snrn5.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwv_snrn5.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    num = float(value)\n    if num % 1 < 0.5:\n\
    \        return int(num)\n    else:\n        return int(num + 1)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpejejwx15.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpejejwx15.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpejejwx15.py\", line\
    \ 29, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwvx5ywsq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwvx5ywsq.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwvx5ywsq.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.endswith(\"0\"):\n        return\
    \ int(value)\n    elif \".\" in value:\n        base, dec = value.split(\".\"\
    )\n        if int(dec) >= 5:\n            return int(base) + 1\n        else:\n\
    \            return int(base)\n    else:\n        return int(value)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2pnl_q0f.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2pnl_q0f.py\", line 39,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2pnl_q0f.py\", line\
    \ 34, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    try:\n        return int(round(float(value)))\n\
    \    except ValueError:\n        return None\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz7rwlsq7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpz7rwlsq7.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpz7rwlsq7.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return math.ceil(float(value))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmahic5g.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmahic5g.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppmahic5g.py\", line\
    \ 23, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmppmahic5g.py\"\
    , line 19, in closest_integer\n    return math.ceil(float(value))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsfxpzgg5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsfxpzgg5.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpsfxpzgg5.py\", line\
    \ 23, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwc8zeo7v.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwc8zeo7v.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwc8zeo7v.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\n@given(st.integers(min_value=1,\
    \ max_value=1000))\ndef check(candidate):\n    assert candidate('10') == 10\n\
    \    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n  \
    \  assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu248yquj.py\", line\
    \ 22, in <module>\n    @given(st.integers(min_value=1, max_value=1000))\nNameError:\
    \ name 'given' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[-1] in [\"5\", \"0\"]:\n      \
    \  return int(value[:-1]) + 1\n    return int(value)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphnk10o6k.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphnk10o6k.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphnk10o6k.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppwb7nzze.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppwb7nzze.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppwb7nzze.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvwdttf9t.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvwdttf9t.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpvwdttf9t.py\", line\
    \ 23, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    value = float(value)\n    if value > 0:\n\
    \        return math.ceil(value)\n    elif value < 0:\n        return math.floor(value)\n\
    \    else:\n        return 0\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsa5715ca.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpsa5715ca.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpsa5715ca.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpsa5715ca.py\"\
    , line 21, in closest_integer\n    return math.ceil(value)\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb_a99_z8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpb_a99_z8.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpb_a99_z8.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if float(value) == int(float(value)):\n\
    \        return int(float(value))\n    else:\n        test_value = int(float(value))\n\
    \        if test_value < 0:\n            test_value -= 1\n        else:\n    \
    \        test_value += 1\n        return test_value\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnawo3wo.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpwnawo3wo.py\", line 38,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwnawo3wo.py\", line\
    \ 34, in check\n    assert candidate('15.3') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
