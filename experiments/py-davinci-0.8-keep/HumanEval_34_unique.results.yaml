name: HumanEval_34_unique
language: py
results:
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if l:\n       \
    \ return sorted(set(l))\n    else:\n        return []\ndef check(candidate):\n\
    \    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    #with dictionary\n\
    \    # d = {}\n    # for i in l:\n    #     d[i] = True\n    # return sorted(d.keys())\n\
    \n    #without dictionary\n    u = []\n    for i in l:\n        if i not in u:\n\
    \            u.append(i)\n    return sorted(u)\n\ndef check(candidate):\n    assert\
    \ candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n\
    \    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = list(set(l))\n\
    \    unique_list.sort()\n    return unique_list\ndef check(candidate):\n    assert\
    \ candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n\
    \    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  return sorted(s)\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))\ndef check(candidate):\n    assert\
    \ candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n\
    \    check(unique)\n\ntest_check()\n"
  stdout: "[0, 2, 3, 5, 9, 123]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    xs = []\n    for\
    \ x in l:\n        if x not in xs:\n            xs.append(x)\n    return sorted(xs)\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # FIXME: Does not\
    \ work\n\n    # return sorted(list(set(l)))\n    s = set()\n    for e in l:\n\
    \        s.add(e)\n    return sorted(list(s))\n\ndef check(candidate):\n    assert\
    \ candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n\
    \    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  return sorted(s)\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if len(l) == 0:\n\
    \        return []\n    else:\n        return sorted(set(l))\ndef check(candidate):\n\
    \    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n\ndef check(candidate):\n    assert\
    \ candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n\
    \    check(unique)\n\ntest_check()\n"
  stdout: "[0, 2, 3, 5, 9, 123]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    u = set(l)\n  \
    \  return sorted(u)\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    n = len(l)\n  \
    \  s = sorted(l)\n    unique = []\n    for i in range(n):\n        if i == 0 or\
    \ s[i] != s[i-1]:\n            unique.append(s[i])\n    return unique\n\ndef check(candidate):\n\
    \    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    final_list = []\n\
    \    seen = set()\n    for item in l:\n        if item not in seen:\n        \
    \    seen.add(item)\n            final_list.append(item)\n    return sorted(final_list)\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    output = []\n \
    \   for i in l:\n        if i not in output:\n            output.append(i)\n \
    \   return sorted(output)\n\ndef check(candidate):\n    assert candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if len(l) <= 1:\n\
    \        return l\n    return list(set(l))\n\n\ndef check(candidate):\n    assert\
    \ candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n\
    \    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_elements\
    \ = set(l)\n    return sorted(unique_elements)\n\ndef check(candidate):\n    assert\
    \ candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n\
    \    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if not l:\n   \
    \     return []\n    l.sort()\n    if len(l) == 1:\n        return l\n    result\
    \ = [l[0]]\n    for num in l[1:]:\n        if num != result[-1]:\n           \
    \ result.append(num)\n    return result\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # one line\n  \
    \  return sorted(list(set(l)))\n\n    # multi-line\n    # unique_list = list(set(l))\n\
    \    # unique_list.sort()\n    # return unique_list\n\n\ndef check(candidate):\n\
    \    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  return sorted(s)\n    \ndef check(candidate):\n    assert candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    new_list = []\n\
    \    for el in l:\n        if el not in new_list:\n            new_list.append(el)\n\
    \    return sorted(new_list)\n\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Your code here\n\
    \    return sorted(list(set(l)))\n\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if not isinstance(l,\
    \ list):\n        raise TypeError(\"Input must be of type list\")\n    return\
    \ sorted(list(set(l)))\n\ndef check(candidate):\n    assert candidate([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if len(l) < 2:\n\
    \        return l\n    left = unique(l[:len(l)//2])\n    right = unique(l[len(l)//2:])\n\
    \    r = [x for x in left if x not in right]\n    return sorted(r + right)\n\n\
    print(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))\ndef check(candidate):\n    assert\
    \ candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n\
    \    check(unique)\n\ntest_check()\n"
  stdout: "[0, 2, 3, 5, 9, 123]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # your code here\n\
    \    return None\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp55irrgax.py\", line\
    \ 17, in <module>\n    test_check()\n  File \"/tmp/tmp55irrgax.py\", line 15,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp55irrgax.py\", line 12, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # return list(set(l))\n\
    \    # return sorted(set(l))\n    return sorted(list(set(l)))\n\n\ndef check(candidate):\n\
    \    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if len(l) == 0:\n\
    \        return []\n    else:\n        return sorted(set(l))\n\ndef check(candidate):\n\
    \    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    r = []\n    for\
    \ x in l:\n        if x not in r:\n            r.append(x)\n    r.sort()\n   \
    \ return r\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    l.sort()\n    res\
    \ = []\n    uniq = 0\n    if len(l) > 0:\n        res.append(l[0])\n        uniq\
    \ = l[0]\n    for i in range(1, len(l)):\n        if l[i] != uniq:\n         \
    \   res.append(l[i])\n            uniq = l[i]\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    l.sort()\n    return\
    \ list(set(l))\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if l == []:\n \
    \       return []\n    else:\n        return sorted(set(l))\n\ndef check(candidate):\n\
    \    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # your code here\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnsbgcekr.py\", line\
    \ 17, in <module>\n    test_check()\n  File \"/tmp/tmpnsbgcekr.py\", line 15,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpnsbgcekr.py\", line 12, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    l = sorted(l)\n\
    \    i = 1\n    while i < len(l):\n        if l[i] == l[i-1]:\n            l.pop(i)\n\
    \        else:\n            i += 1\n    return l\n\ndef check(candidate):\n  \
    \  assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n\
    def test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if len(l) == 0:\n\
    \        return []\n    elif len(l) == 1:\n        return l\n    else:\n     \
    \   if l[0] not in l[1:]:\n            return [l[0]] + unique(l[1:])\n       \
    \ else:\n            return unique(l[1:])\n\ndef check(candidate):\n    assert\
    \ candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n\
    \    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl9k113z3.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpl9k113z3.py\", line 22,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpl9k113z3.py\", line 19, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if len(l) == 0:\n\
    \        return []\n    unique_l = [l[0]]\n    for i in range(1, len(l)):\n  \
    \      if l[i] not in unique_l:\n            unique_l.append(l[i])\n    return\
    \ sorted(unique_l)\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    mset = set(l)\n\
    \    res = sorted(mset)\n    return res\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))\ndef check(candidate):\n    assert\
    \ candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n\
    \    check(unique)\n\ntest_check()\n"
  stdout: "[0, 2, 3, 5, 9, 123]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_elements\
    \ = []\n    for i in l:\n        if i not in unique_elements:\n            unique_elements.append(i)\n\
    \    return sorted(unique_elements)\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \nunique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    uniq = set(l)\n\
    \    unique_l = sorted(uniq)\n    return unique_l\n\ndef check(candidate):\n \
    \   assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n\
    def test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  s = list(s)\n    s.sort()\n    return s\n\ndef check(candidate):\n    assert\
    \ candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n\
    \    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    u = []\n    for\
    \ x in l:\n        if x not in u:\n            u.append(x)\n    u.sort()\n   \
    \ return u\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    res = set()\n \
    \   for i in l:\n        res.add(i)\n    return sorted(res)\n\ndef check(candidate):\n\
    \    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  return sorted(s)\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    r = []\n    for\
    \ n in l:\n        if n not in r:\n            r.append(n)\n    return sorted(r)\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Unique set of\
    \ numbers\n    s = set(l)\n    return sorted(s)\n\ndef check(candidate):\n   \
    \ assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n\
    def test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    result = []\n \
    \   for element in l:\n        if element not in result:\n            result.append(element)\n\
    \    result.sort()\n    return result\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  return sorted(s)\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    print(l)\n    my_set = set(l)\n    print(my_set)\n    return sorted(my_set)\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: "[5, 3, 5, 2, 3, 3, 9, 0, 123]\n{0, 2, 3, 5, 9, 123}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_l = list(set(l))\n\
    \    unique_l.sort()\n    return unique_l\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    u = []\n    for\
    \ i in l:\n        if i not in u:\n            u.append(i)\n    return sorted(u)\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  l = list(s)\n    l.sort()\n    return l\n\ndef check(candidate):\n    assert\
    \ candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n\
    \    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # use set() to\
    \ remove all duplicates, then sort() to order elements\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if len(l) == 0:\n\
    \        return []\n    elif len(l) == 1:\n        return l\n    else:\n     \
    \   s = []\n        for e in l:\n            if e not in s:\n                s.append(e)\n\
    \        return sorted(s)\n\ndef check(candidate):\n    assert candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  l = list(s)\n    l.sort()\n    return l\n\nprint(unique([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]))\nprint(unique([]))\nprint(unique([1, 2, 3, 3, 3, 4, 4, 4, 5, 6,\
    \ 6, 7, 7, 8, 8, 8, 8, 8, 8, 9, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 3, 4, 4, 4,\
    \ 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpsqmylif4.py\", line 16\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  return sorted(s)\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    x = set(l)\n  \
    \  return sorted(x)\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \nunique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\nhelp(unique)\n\nassert unique([1, 1,\
    \ 2, 1, 2, 3]) == [1, 2, 3]\ndef check(candidate):\n    assert candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: "Help on function unique in module __main__:\n\nunique(l: List[int]) ->\
    \ List[int]\n    Return sorted unique elements in a list\n    >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  return sorted(s)\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  return sorted(s)\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  u = []\n    for num in s:\n        u.append(num)\n    u.sort()\n    return\
    \ u\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))\ndef check(candidate):\n    assert\
    \ candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n\
    \    check(unique)\n\ntest_check()\n"
  stdout: "[0, 2, 3, 5, 9, 123]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if len(l) == 0:\n\
    \        return []\n    else:\n        v = l[0]\n        return [v] + unique([x\
    \ for x in l if x != v])\ndef check(candidate):\n    assert candidate([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp68thojum.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp68thojum.py\", line 17,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp68thojum.py\", line 14, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    res = []\n    for\
    \ i in l:\n        if i not in res:\n            res.append(i)\n    return sorted(res)\n\
    print(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n\ndef check(candidate):\n    assert\
    \ candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n\
    \    check(unique)\n\ntest_check()\n"
  stdout: "[0, 2, 3, 5, 9, 123]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  return sorted(s)\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    l = sorted(l)\n\
    \    s = [l[0]]\n    for elem in l[1:]:\n        if elem != s[-1]:\n         \
    \   s.append(elem)\n    return s\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    uniques = set()\n\
    \    for i in l:\n        uniques.add(i)\n    return sorted(uniques)\n\ndef check(candidate):\n\
    \    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # return sorted(set(l))\n\
    \    u = []\n    for x in l:\n        if x not in u:\n            u.append(x)\n\
    \    return sorted(u)\n\ndef check(candidate):\n    assert candidate([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n\
    \    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n\
    \    return sorted(unique_list)\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_l = []\n\
    \    for el in l:\n        if el not in unique_l:\n            unique_l.append(el)\n\
    \    return sorted(unique_l)\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n\
    \    for e in l:\n        if e not in unique_list:\n            unique_list.append(e)\n\
    \    return sorted(unique_list)\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n\
    \    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n\
    \    return sorted(unique_list)\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = set(l)\n\
    \    unique_list = list(unique_list)\n    unique_list.sort()\n    return unique_list\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    ret = []\n    for\
    \ i in l:\n        if i not in ret:\n            ret.append(i)\n    ret.sort()\n\
    \    return ret\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n\
    \    for x in l:\n        if x not in unique_list:\n            unique_list.append(x)\n\
    \    return sorted(unique_list)\n\nunique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\nfrom\
    \ typing import Callable\n\ndef check(candidate):\n    assert candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Your code here\n\
    \    seen = set()\n    unique_items = [i for i in l if i not in seen and not seen.add(i)]\n\
    \    return sorted(unique_items)\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  return sorted(s)\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    u = set(l)\n  \
    \  return sorted(u)\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    #return sorted(set(l))\n\
    \    #return sorted(list(set(l)))\n    #return list(set(l))\n    #return list(set(l)).sort()\n\
    \    return sorted(list(set(l)))\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  return sorted(s)\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # return sorted(set(l))\n\
    \    if len(l) == 0:\n        return []\n    a = l[0]\n    b = unique(l[1:])\n\
    \    if a in b:\n        return b\n    else:\n        return [a] + b\n\ndef check(candidate):\n\
    \    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2feor74.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpq2feor74.py\", line 22,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpq2feor74.py\", line 19, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    s = set(l)\n  \
    \  return sorted(s)\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if len(l) == 0:\n\
    \        return []\n    if len(l) == 1:\n        return l\n    else:\n       \
    \ if l[0] == l[1]:\n            return unique(l[1:])\n        else:\n        \
    \    return [l[0]] + unique(l[1:])\n\ndef check(candidate):\n    assert candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n  \
    \  check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpew57w0s7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpew57w0s7.py\", line 22,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpew57w0s7.py\", line 19, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
