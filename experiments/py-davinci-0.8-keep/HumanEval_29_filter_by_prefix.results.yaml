name: HumanEval_29_filter_by_prefix
language: py
results:
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    for i in range(len(strings)):\n        if strings[i].startswith(prefix):\n\
    \            return strings[i]\n    return strings\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvro6cabp.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpvro6cabp.py\", line 21,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmpvro6cabp.py\",\
    \ line 18, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda word: word.startswith(prefix), strings))\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    strings_filtered = []\n    for string in strings:\n        if\
    \ string.startswith(prefix):\n            strings_filtered.append(string)\n  \
    \  return strings_filtered\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\
    \n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    output = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            output.append(s)\n    return output\n\n@pytest.mark.parametrize('strings,\
    \ prefix, expected', [\n    ([], 'a', []),\n    (['abc', 'bcd', 'cde', 'array'],\
    \ 'a', ['abc', 'array']),\n])\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjtl9hajw.py\", line\
    \ 16, in <module>\n    @pytest.mark.parametrize('strings, prefix, expected', [\n\
    NameError: name 'pytest' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    strs = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            strs.append(s)\n    return strs\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    output = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            output.append(s)\n    return output\n\nprint(filter_by_prefix([],\
    \ 'a'))\nprint(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: "[]\n['abc', 'array']\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    if strings == []:\n        return []\n    else:\n        prefix_string\
    \ = []\n        for i in strings:\n            if i.startswith(prefix):\n    \
    \            prefix_string.append(i)\n        return prefix_string\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \nimport doctest\ndoctest.testmod()\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    out = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            out.append(s)\n    return out\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for item in strings:\n        if item.startswith(prefix):\n\
    \            filtered.append(item)\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    #result = []\n    #for s in strings:\n    #    if s.startswith(prefix):\n\
    \    #        result.append(s)\n    #return result\n    return [s for s in strings\
    \ if s.startswith(prefix)]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    # return [s for s in strings if s.startswith(prefix)]\n    #\
    \ print(strings)\n    new_list = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            new_list.append(s)\n    return new_list\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [word for word in strings if word.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            filtered.append(s)\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [str for str in strings if str.startswith(prefix)]\n\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    # rtype: List[str]\n    return [string for string in strings\
    \ if string.startswith(prefix)]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    #return [string for string in strings if string.startswith(prefix)]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n\
    \    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdlw2z9y.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpxdlw2z9y.py\", line 18,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmpxdlw2z9y.py\",\
    \ line 15, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n\
    \            filtered.append(string)\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\
    \n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda s: s.startswith(prefix), strings))\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda s: s.startswith(prefix), strings))\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    if len(strings) < 1:\n        return []\n    else:\n        return\
    \ [x for x in strings if x.startswith(prefix)]\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [str for str in strings if str.startswith(prefix)]\n\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n\
    \            filtered.append(string)\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    res = []\n    for elem in strings:\n        if elem.startswith(prefix):\n\
    \            res.append(elem)\n    return res\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda word: word.startswith(prefix), strings))\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = [s for s in strings if s.startswith(prefix)]\n   \
    \ return filtered\n\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    # TODO: 3/10/2019\n    return [x for x in strings if x.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    prefix_len = len(prefix)\n    return [x for x in strings if x[:prefix_len]\
    \ == prefix]\ndef check(candidate):\n    assert candidate([], 'john') == []\n\
    \    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    output_list = []\n    for string in strings:\n        if string.startswith(prefix):\n\
    \            output_list.append(string)\n    return output_list\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    strings_filtered = []\n    for string in strings:\n        if\
    \ string.startswith(prefix):\n            strings_filtered.append(string)\n  \
    \  return strings_filtered\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = [str for str in strings if str.startswith(prefix)]\n\
    \    return filtered\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\nprint(filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a'))\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: "['abc', 'array']\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    res = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            res.append(s)\n    return res\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda s: s.startswith(prefix), strings))\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\nfilter_by_prefix([],\
    \ 'a')\nfilter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    # Using list comprehension\n    return [s for s in strings if\
    \ s.startswith(prefix)]\n\n    # Using list comprehension with filter\n    # return\
    \ list(filter(lambda x: x.startswith(prefix), strings))\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    output = []\n    for word in strings:\n        if word.startswith(prefix):\n\
    \            output.append(word)\n    return output\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda s: s.startswith(prefix), strings))\n\
    \n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    if len(strings) <= 0:\n        return []\n    # if not strings:\n\
    \    #     return []\n    return [s for s in strings if s.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [w for w in strings if w.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    ret = [x for x in strings if x.startswith(prefix)]\n    return\
    \ ret\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    output_list = []\n    for i in strings:\n        if i.startswith(prefix):\n\
    \            output_list.append(i)\n    return output_list\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [item for item in strings if item.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\nprint(filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a'))\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: "['abc', 'array']\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    if len(strings) < 1:\n        return []\n    # Split strings\n\
    \    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n\
    \            filtered.append(string)\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    prefix_len = len(prefix)\n    return [string for string in strings\
    \ if string[:prefix_len] == prefix]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [ s for s in strings if s.startswith(prefix) ]\n\ndef\
    \ check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    new_list = [value for value in strings if value.startswith(prefix)]\n\
    \    return new_list\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            filtered.append(s)\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\n@dataclass\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv7l6cpm1.py\", line\
    \ 12, in <module>\n    @dataclass\nNameError: name 'dataclass' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [str for str in strings if str.startswith(prefix)]\n\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [item for item in strings if item.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\nstrings\
    \ = ['abc', 'bcd', 'cde', 'array']\nfor s in filter_by_prefix(strings, 'a'):\n\
    \    print(s)\n\nfilter_by_prefix(strings, 'a')\n\n\ndef check(candidate):\n \
    \   assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: "abc\narray\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    output = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            output.append(s)\n    return output\n    \ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    # TODO - your code here!\n\n    # list comprehensions are fast\n\
    \    # but not much faster than regular loops\n    # I think the point of this\
    \ is to create a list on the fly\n    # good for when you have a starting list,\
    \ but you need a\n    # modified copy of it\n    # which is what we are doing\
    \ here\n\n    # BINDING METHOD\n    # initializes a new variable and returns a\
    \ new list\n    # start_with_a = [str for str in strings if str.startswith(prefix)]\n\
    \    # return start_with_a\n\n    # FILTER METHOD\n    # returns a filter object\n\
    \    # can be used in a loop or by itself\n    # start_with_a = filter(lambda\
    \ str: str.startswith(prefix), strings)\n    # return list(start_with_a)\n\n \
    \   # LIST COMPREHENSION METHOD\n    # best if you can do it in a single line\n\
    \    return [str for str in strings if str.startswith(prefix)]\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    lst = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            lst.append(s)\n    return lst\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [item for item in strings if item.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [elem for elem in strings if elem.startswith(prefix)]\n\
    \nassert filter_by_prefix([], 'a') == []\nassert filter_by_prefix(['abc', 'bcd',\
    \ 'cde', 'array'], 'a') == ['abc', 'array']\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    new_list = [s for s in strings if s.startswith(prefix)]\n   \
    \ return new_list\n\nprint(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: "['abc', 'array']\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    # TODO: implement\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwa583aun.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpwa583aun.py\", line 18,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmpwa583aun.py\",\
    \ line 14, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp902kjhn0.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp902kjhn0.py\", line 18,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmp902kjhn0.py\",\
    \ line 14, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    for entry in strings:\n        if not entry.startswith(prefix):\n\
    \            strings.remove(entry)\n    return strings\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4da7wlsl.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp4da7wlsl.py\", line 20,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmp4da7wlsl.py\",\
    \ line 17, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyem3xm8e.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpyem3xm8e.py\", line 18,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmpyem3xm8e.py\",\
    \ line 14, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp50nlu3on.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp50nlu3on.py\", line 17,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmp50nlu3on.py\",\
    \ line 13, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    new_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n\
    \            new_strings.append(string)\n    return new_strings\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    res = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            res.append(s)\n    return res\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    res = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            res.append(s)\n    return res\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n\
    \            filtered.append(string)\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
