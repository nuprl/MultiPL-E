name: HumanEval_56_correct_bracketing
language: py
results:
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"<\":\n          \
    \  count += 1\n        elif char == \">\":\n            count -= 1\n         \
    \   if count < 0:\n                return False\n    return count == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for i in brackets:\n        if i == \"<\":\n            count\
    \ += 1\n        elif i == \">\":\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ close = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        close += 1\n        else:\n            close -= 1\n        if close <\
    \ 0:\n            return False\n    return close == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ #\n    # solution 1\n    #\n    count = 0\n    for ch in brackets:\n       \
    \ if ch == \"<\":\n            count += 1\n        else:\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    \    #\n    # solution 2\n    #\n    count = 0\n    while count >= 0 and len(brackets)\
    \ > 0:\n        if brackets[0] == \"<\":\n            count += 1\n        else:\n\
    \            count -= 1\n        brackets = brackets[1:]\n    return count ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if len(brackets) % 2 != 0:\n        return False\n    if brackets[0] == \">\"\
    :\n        return False\n    if len(brackets) == 0:\n        return True\n   \
    \ if brackets[0] == \"<\":\n        if brackets[-1] == \">\":\n            return\
    \ correct_bracketing(brackets[1:-1])\n        return False\n    if brackets[0]\
    \ == \">\":\n        return False\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm69a47_0.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpm69a47_0.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpm69a47_0.py\"\
    , line 29, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpm69a47_0.py\"\
    , line 22, in correct_bracketing\n    return correct_bracketing(brackets[1:-1])\n\
    \  File \"/tmp/tmpm69a47_0.py\", line 16, in correct_bracketing\n    if brackets[0]\
    \ == \">\":\nIndexError: string index out of range\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # initialize a stack of indices of open brackets\n    stack = []\n    for i\
    \ in range(len(brackets)):\n        # if the current character is an open bracket\
    \ \"<\", push i onto the stack\n        if brackets[i] == \"<\":\n           \
    \ stack.append(i)\n        else:\n            # if the current character is a\
    \ close bracket \">\", check if the stack is empty\n            if stack == []:\n\
    \                return False\n            # if the stack is not empty, pop the\
    \ stack\n            else:\n                stack.pop()\n    return stack == []\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"<\":\n          \
    \  count += 1\n        else:\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"<\") == brackets.count(\">\")\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8bp8t8r1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8bp8t8r1.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp8bp8t8r1.py\"\
    , line 22, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \            if count < 0:\n                return False\n    return count ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ new_brackets = brackets\n    i = 0\n    while i < len(new_brackets) - 1:\n \
    \       if new_brackets[i] == \"<\" and new_brackets[i + 1] == \">\":\n      \
    \      new_brackets = new_brackets[:i] + new_brackets[i + 2:]\n            i =\
    \ 0\n        else:\n            i += 1\n    return not new_brackets\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ num_left = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n \
    \           num_left += 1\n        elif bracket == \">\":\n            num_left\
    \ -= 1\n        if num_left < 0:\n            return False\n    return num_left\
    \ == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for symbol in brackets:\n        if symbol == \"<\":\n      \
    \      count += 1\n        else:\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # check for correct number of opening/closing brackets\n    if brackets.count(\"\
    <\") != brackets.count(\">\"):\n        return False\n\n    # now check for correct\
    \ ordering of brackets\n    # keep track of current balance\n    balance = 0\n\
    \    for b in brackets:\n        if b == \"<\":\n            balance += 1\n  \
    \      else:\n            balance -= 1\n        # note that if we got here, we\
    \ know # of < == # of >\n        # if balance ever goes negative, we have a \"\
    >\" with no preceeding \"<\"\n        if balance < 0:\n            return False\n\
    \    # if we get here, and if balance == 0, then we have a good string\n    return\
    \ balance == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"<\") == brackets.count(\">\")\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyjos2tpy.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpyjos2tpy.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpyjos2tpy.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ left, right = 0, 0\n    for i in brackets:\n        if i == \"<\":\n       \
    \     left += 1\n        elif i == \">\":\n            right += 1\n        if\
    \ right > left:\n            return False\n    return left == right\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ x = 0\n    for c in brackets:\n        if c == \"<\":\n            x += 1\n\
    \        elif c == \">\":\n            x -= 1\n            if x < 0:\n       \
    \         return False\n    return x == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n  \
    \          counter += 1\n        else:\n            counter -= 1\n        if counter\
    \ < 0:\n            return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            bracket_count += 1\n        else:\n            bracket_count -=\
    \ 1\n        if bracket_count < 0:\n            return False\n    return bracket_count\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # Hint: bracket_count, as defined in slide 17 of the \"Mutable Data\" lecture,\n\
    \    # might be useful.\n    bracket_count = 0\n    for bracket in brackets:\n\
    \        if bracket == \"<\":\n            bracket_count += 1\n        elif bracket\
    \ == \">\":\n            bracket_count -= 1\n            if bracket_count < 0:\n\
    \                return False\n    return bracket_count == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \            if count < 0:\n                return False\n    return count ==\
    \ 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ x = 0\n    for char in brackets:\n        if char == \"<\":\n            x +=\
    \ 1\n        else:\n            x -= 1\n        if x < 0:\n            return\
    \ False\n    return x == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ num_open = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n \
    \           num_open += 1\n        else:\n            num_open -= 1\n        \
    \    if num_open < 0:\n                return False\n    return num_open == 0\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ n = 0\n    for ch in brackets:\n        if ch == \"<\":\n            n += 1\n\
    \        else:\n            n -= 1\n        if n < 0:\n            return False\n\
    \    return n == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ num_open = 0\n    for ch in brackets:\n        if ch == \"<\":\n           \
    \ num_open += 1\n        elif ch == \">\":\n            num_open -= 1\n      \
    \  if num_open < 0:\n            return False\n    return num_open == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # for i in range(0, len(brackets)):\n    #     if brackets[i] == \"<\":\n  \
    \  #         for j in range(i + 1, len(brackets)):\n    #             if brackets[j]\
    \ == \">\":\n    #                 brackets = brackets[:i] + brackets[i + 1:j]\
    \ + brackets[j + 1:]\n    #                 break\n    #             if j == len(brackets)\
    \ - 1:\n    #                 return False\n    # return brackets == \"\"\n  \
    \  stack = []\n    for i in range(0, len(brackets)):\n        if brackets[i] ==\
    \ \"<\":\n            stack.append(brackets[i])\n        else:\n            if\
    \ stack:\n                stack.pop()\n            else:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ \"*** YOUR CODE HERE ***\"\n    opening = closing = 0\n    for bracket in brackets:\n\
    \        if bracket == '<':\n            opening += 1\n        else:\n       \
    \     closing += 1\n    return opening == closing\n\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp50et9pbw.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp50et9pbw.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp50et9pbw.py\"\
    , line 31, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ close = 0\n    for bracket in brackets:\n        if bracket == '<':\n      \
    \      close += 1\n        elif bracket == '>':\n            close -= 1\n    \
    \        if close < 0:\n                return False\n    return close == 0\n\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            bracket_count += 1\n        elif bracket == \">\":\n          \
    \  bracket_count -= 1\n        if bracket_count < 0:\n            return False\n\
    \    return bracket_count == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for ch in brackets:\n        if ch == \"<\":\n            count\
    \ += 1\n        elif ch == \">\":\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ check = 0\n    for ch in brackets:\n        if ch == \"<\":\n            check\
    \ += 1\n        elif ch == \">\":\n            check -= 1\n        if check <\
    \ 0:\n            return False\n    return check == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ left_brackets = 0\n\n    for char in brackets:\n        if char == \"<\":\n\
    \            left_brackets += 1\n        elif char == \">\":\n            left_brackets\
    \ -= 1\n            if left_brackets < 0:\n                return False\n\n  \
    \  return left_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ balance = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n  \
    \          balance += 1\n        else:\n            balance -= 1\n        if balance\
    \ < 0:\n            return False\n    return balance == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \            if count < 0:\n                return False\n    return count ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # Use a stack to keep track of opening brackets.\n    stack = []\n    for c\
    \ in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif\
    \ c == \">\":\n            if len(stack) == 0:\n                return False\n\
    \            stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ bracket_number = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            bracket_number += 1\n        else:\n            bracket_number\
    \ -= 1\n        if bracket_number < 0:\n            return False\n    return bracket_number\
    \ == 0\n    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # Assume every opening bracket has a corresponding closing bracket\n    # Keep\
    \ track of the number of unclosed opening brackets\n    num_open = 0\n    for\
    \ char in brackets:\n        if char == \"<\":\n            num_open += 1\n  \
    \      elif char == \">\":\n            num_open -= 1\n        if num_open < 0:\n\
    \            return False\n    return num_open == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ number_of_open_brackets = 0\n    for bracket in brackets:\n        if bracket\
    \ == \"<\":\n            number_of_open_brackets += 1\n        elif bracket ==\
    \ \">\":\n            number_of_open_brackets -= 1\n        if number_of_open_brackets\
    \ < 0:\n            return False\n    return number_of_open_brackets == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"<\":\n          \
    \  count += 1\n        else:\n            count -= 1\n            if count < 0:\n\
    \                return False\n    return count == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        else:\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # return False if <>\n    #     else, remove 1 <>, and call function again on\
    \ rest of string\n    #     if recursion ends, then return True\n\n    if len(brackets)\
    \ == 0:\n        return True\n    elif \"<>\" in brackets:\n        return False\n\
    \    else:\n        return correct_bracketing(brackets.replace(\"<>\", \"\", 1))\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdg_83xxw.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpdg_83xxw.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdg_83xxw.py\"\
    , line 27, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # New Function\n    if len(brackets) % 2 != 0:\n        return False\n    elif\
    \ brackets == \"<>\":\n        return True\n    else:\n        return False\n\
    \    # New Function\n\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1turmrvz.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1turmrvz.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp1turmrvz.py\"\
    , line 26, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # if brackets == '':\n    #     return True\n    # else:\n    #     counter\
    \ = 0\n    #     for bracket in brackets:\n    #         if bracket == '<':\n\
    \    #             counter += 1\n    #         elif bracket == '>':\n    #   \
    \          counter -= 1\n    #         if counter < 0:\n    #             return\
    \ False\n    #     return counter == 0\n    counter = 0\n    for bracket in brackets:\n\
    \        if bracket == '<':\n            counter += 1\n        elif bracket ==\
    \ '>':\n            counter -= 1\n        if counter < 0:\n            return\
    \ False\n    return counter == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ opening = 0\n    for char in brackets:\n        if char == \"<\":\n        \
    \    opening += 1\n        else:\n            opening -= 1\n        if opening\
    \ < 0:\n            return False\n    return opening == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ depth = 0\n    for c in brackets:\n        if c == \"<\":\n            depth\
    \ += 1\n        elif c == \">\":\n            depth -= 1\n        if depth < 0:\n\
    \            return False\n    return depth == 0\n        \n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n  \
    \          counter += 1\n        elif bracket == \">\":\n            counter -=\
    \ 1\n            if counter < 0:\n                return False\n    return counter\
    \ == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # TODO: if len(brackets) is 0:\n    #           return True\n    #       if\
    \ brackets[0] == \"<\":\n    #           return brackets[0] == brackets[1] and\
    \ correct_bracketing(brackets[2:])\n    #       return False\n    #   if brackets[0]\
    \ == \">\":\n    #       return False\n    #   return correct_bracketing(brackets[1:])\n\
    \    return brackets == \"\" or brackets == \"<>\" or (brackets[0] == \"<\" and\
    \ brackets[1] == \">\" and correct_bracketing(brackets[2:]))\n    \n    \ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfg128iq.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpkfg128iq.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkfg128iq.py\"\
    , line 27, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if brackets == \"\":\n        return True\n    elif brackets[0] == \"<\":\n\
    \        if not correct_bracketing(brackets[1:]):\n            return False\n\
    \        else:\n            return correct_bracketing(brackets[1:])\n    elif\
    \ brackets[0] == \">\":\n        return False\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5t6l31v.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpw5t6l31v.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpw5t6l31v.py\"\
    , line 25, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ num_left = 0\n    for ch in brackets:\n        if ch == \"<\":\n           \
    \ num_left += 1\n        elif ch == \">\":\n            num_left -= 1\n      \
    \  if num_left < 0:\n            return False\n    return num_left == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"<\") == brackets.count(\">\")\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpow5mweu9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpow5mweu9.py\", line 30,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpow5mweu9.py\"\
    , line 21, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for i in brackets:\n        if i == \"<\":\n            count\
    \ += 1\n        else:\n            count -= 1\n            if count < 0:\n   \
    \             return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # if \">\" or \"<\" is not in string then return True\n    if \">\" not in brackets\
    \ and \"<\" not in brackets:\n        return True\n    # if \">\" is not in string\
    \ then return False\n    elif \">\" not in brackets:\n        return False\n \
    \   # if \"<\" is not in string then return False\n    elif \"<\" not in brackets:\n\
    \        return False\n    # remove leading/trailing brackets\n    # count total\
    \ number of \">\" and \"<\"\n    elif len(brackets) > 2:\n        while brackets[0]\
    \ == \">\" or brackets[-1] == \"<\":\n            if brackets[0] == \">\":\n \
    \               brackets = brackets[1:]\n            if brackets[-1] == \"<\"\
    :\n                brackets = brackets[:-1]\n        if \"<\" not in brackets\
    \ or \">\" not in brackets:\n            return True\n        else:\n        \
    \    return correct_bracketing(brackets)\n    else:\n        # if index is > 0\
    \ and brackets[index] is \">\" and brackets[index - 1] is \"<\"\n        # then\
    \ return function with new brackets\n        # else return False\n        if brackets[0]\
    \ == \">\" and brackets[1] == \"<\":\n            brackets = brackets[2:]\n  \
    \          return correct_bracketing(brackets)\n        else:\n            return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15_05b6j.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmp15_05b6j.py\", line 61,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp15_05b6j.py\"\
    , line 47, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for i in brackets:\n        if i == \"<\":\n        \
    \    bracket_count += 1\n        elif i == \">\":\n            bracket_count -=\
    \ 1\n        if bracket_count < 0:\n            return False\n    return bracket_count\
    \ == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            bracket_count += 1\n        elif bracket == \">\":\n          \
    \  bracket_count -= 1\n        if bracket_count < 0:\n            return False\n\
    \    return bracket_count == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            bracket_count += 1\n        elif bracket == \">\":\n          \
    \  bracket_count -= 1\n        if bracket_count < 0:\n            return False\n\
    \    return bracket_count == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # Initialize a counter for the number of opening brackets.\n    count = 0\n\
    \    # Iterate through the string.\n    for c in brackets:\n        # Update the\
    \ counter.\n        if c == \"<\":\n            count += 1\n        elif c ==\
    \ \">\":\n            count -= 1\n        # If we've found a closing bracket that\
    \ has no opening bracket.\n        if count < 0:\n            return False\n \
    \   # If we haven't processed all of the opening brackets, return False.\n   \
    \ return count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if len(brackets) == 0:\n        return True\n    elif len(brackets) == 1:\n\
    \        return False\n    elif len(brackets) == 2:\n        return True\n   \
    \ else:\n        return brackets[0] == \"<\" and brackets[-1] == \">\" and correct_bracketing(brackets[1:-1])\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7bzuazpr.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp7bzuazpr.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp7bzuazpr.py\"\
    , line 27, in check\n    assert candidate('<><><<><>><>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        else:\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ balance = 0\n\n    for bracket in brackets:\n        if bracket == \"<\":\n\
    \            balance += 1\n        elif bracket == \">\":\n            balance\
    \ -= 1\n\n        if balance < 0:\n            return False\n\n    return balance\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"<\") == brackets.count(\">\")\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e03xcok.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3e03xcok.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp3e03xcok.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if brackets == '':\n        return True\n    elif brackets[0] == '>':\n    \
    \    return False\n    elif not correct_bracketing(brackets[1:]):\n        return\
    \ False\n    elif brackets[0] == '<':\n        return correct_bracketing(brackets[1:])\n\
    \    elif brackets[0] == '>':\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9_msc5qa.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp9_msc5qa.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9_msc5qa.py\"\
    , line 26, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for elem in brackets:\n        if elem == \"<\":\n          \
    \  count += 1\n        else:\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # Another implementation:\n    # left = 0\n    # for b in brackets:\n    # \
    \    if b == \"<\":\n    #         left += 1\n    #     else:\n    #         left\
    \ -= 1\n    #         if left < 0:\n    #             return False\n    # return\
    \ left == 0\n\n    left = 0\n    for b in brackets:\n        if b == \"<\":\n\
    \            left += 1\n        else:\n            if left == 0:\n           \
    \     return False\n            left -= 1\n    return left == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ number_of_open_brackets = 0\n    for bracket in brackets:\n        if bracket\
    \ == \"<\":\n            number_of_open_brackets += 1\n        elif bracket ==\
    \ \">\":\n            number_of_open_brackets -= 1\n            if number_of_open_brackets\
    \ < 0:\n                return False\n    return number_of_open_brackets == 0\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        else:\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if not brackets:\n        return True\n    elif brackets[0] == '>':\n      \
    \  return False\n    else:\n        # find the index of matching '>' for the first\
    \ '<'\n        try:\n            matching_index = find_matching_bracket(brackets)\n\
    \        except:\n            return False\n        return correct_bracketing(brackets[1:matching_index])\
    \ and correct_bracketing(brackets[matching_index+1:])\n\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc4dy1pka.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpc4dy1pka.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpc4dy1pka.py\"\
    , line 29, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # This function is already implemented. Do not edit it.\n    return brackets.count(\"\
    <\") == brackets.count(\">\")\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5xq013bg.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5xq013bg.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5xq013bg.py\"\
    , line 24, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function\n    return False\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpocxurg56.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpocxurg56.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpocxurg56.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for i in brackets:\n        if i == \"<\":\n            count\
    \ += 1\n        elif i == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for c in brackets:\n        if c == \"<\":\n            count\
    \ += 1\n        elif c == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # A stack is a list in which we add and remove items.\n    # In this case, we're\
    \ using it to keep track of\n    # opening brackets we've seen.\n    stack = []\n\
    \n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n\
    \        elif b == \">\":\n            if stack == []:\n                return\
    \ False\n            else:\n                stack.pop()\n\n    return stack ==\
    \ []\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n  \
    \          counter += 1\n        elif bracket == \">\":\n            counter -=\
    \ 1\n        if counter < 0:\n            return False\n    return counter ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n\
    \        elif b == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            if stack[-1] == \"<\":\n                stack.pop()\n   \
    \         else:\n                return False\n    return len(stack) == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ brackets = brackets.strip()\n    if len(brackets) % 2 != 0:\n        return\
    \ False\n    bracket_array = brackets.split(\"\")\n    if bracket_array[0] ==\
    \ \"<\":\n        return False\n    if bracket_array[len(bracket_array) - 1] ==\
    \ \">\":\n        return False\n    while len(bracket_array) > 0:\n        if\
    \ bracket_array[0] == \"<\":\n            bracket_array.pop(0)\n            if\
    \ bracket_array[0] == \">\":\n                bracket_array.pop(0)\n         \
    \   else:\n                return False\n        elif bracket_array[0] == \">\"\
    :\n            bracket_array.pop(0)\n            if bracket_array[0] == \"<\"\
    :\n                bracket_array.pop(0)\n            else:\n                return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpocbua0lf.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpocbua0lf.py\", line 53,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpocbua0lf.py\"\
    , line 39, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpocbua0lf.py\"\
    , line 17, in correct_bracketing\n    bracket_array = brackets.split(\"\")\nValueError:\
    \ empty separator\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ open = 0\n    for char in brackets:\n        if char == \"<\":\n           \
    \ open += 1\n        elif char == \">\":\n            open -= 1\n        if open\
    \ < 0:\n            return False\n    return open == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n\
    \            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets\
    \ -= 1\n        if opening_brackets < 0:\n            return False\n    return\
    \ opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for char in brackets:\n        if char == \"<\":\n         \
    \   stack.append(char)\n        else:\n            if len(stack) > 0:\n      \
    \          stack.pop()\n            else:\n                return False\n    return\
    \ len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for ch in brackets:\n        if ch == \"<\":\n            count\
    \ += 1\n        elif ch == \">\":\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # we'll keep track of how many \"open\" brackets there are.\n    # if it ever\
    \ goes negative, we have a closing bracket before an opening one!\n    n_open\
    \ = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n          \
    \  n_open += 1\n        elif bracket == \">\":\n            n_open -= 1\n    \
    \        if n_open < 0:\n                return False\n    # if n_open is not\
    \ 0, then we have more closing brackets than opening ones.\n    return n_open\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ open_brackets = []\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            open_brackets.append(bracket)\n        elif bracket == \">\":\n\
    \            try:\n                open_brackets.pop()\n            except IndexError:\n\
    \                return False\n    return len(open_brackets) == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"<\") == brackets.count(\">\")\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7xyuf4hi.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp7xyuf4hi.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp7xyuf4hi.py\"\
    , line 22, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ open = 0\n    close = 0\n    for bracket in brackets:\n        if bracket ==\
    \ \"<\":\n            open += 1\n        else:\n            close += 1\n     \
    \   if close > open:\n            return False\n    return open == close\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ num_open = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n \
    \           num_open += 1\n        elif bracket == \">\":\n            num_open\
    \ -= 1\n        if num_open < 0:\n            return False\n    return num_open\
    \ == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for b in brackets:\n        if b == \"<\":\n            count\
    \ += 1\n        elif b == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # keep track of how many brackets we have seen so far\n    num_seen = 0\n  \
    \  for b in brackets:\n        if b == \"<\":\n            num_seen += 1\n   \
    \     elif b == \">\":\n            num_seen -= 1\n        if num_seen < 0:\n\
    \            return False\n    return num_seen == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ opening = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n  \
    \          opening += 1\n        else:\n            opening -= 1\n        if opening\
    \ < 0:\n            return False\n    return opening == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for ch in brackets:\n        if ch == \"<\":\n            count\
    \ += 1\n        elif ch == \">\":\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = Stack()\n    for bracket in brackets:\n        if bracket == \"<\":\n\
    \            stack.push(bracket)\n        elif bracket == \">\":\n           \
    \ if stack.is_empty():\n                return False\n            stack.pop()\n\
    \    return stack.is_empty()\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprfy3wqjh.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmprfy3wqjh.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmprfy3wqjh.py\"\
    , line 26, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmprfy3wqjh.py\"\
    , line 14, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ brackets_stack = []\n    for bracket in brackets:\n        if bracket == \"\
    <\":\n            brackets_stack.append(bracket)\n        elif bracket == \">\"\
    :\n            if brackets_stack:\n                brackets_stack.pop()\n    \
    \        else:\n                return False\n    return not brackets_stack\n\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            open_brackets += 1\n        else:\n            open_brackets -=\
    \ 1\n        if open_brackets < 0:\n            return False\n    return open_brackets\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for brackets in brackets:\n        if brackets == \"<\":\n  \
    \          count += 1\n        elif brackets == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ char_stack = Stack()\n    for char in brackets:\n        if char == \"<\":\n\
    \            char_stack.push(char)\n        elif char == \">\":\n            if\
    \ char_stack.is_empty():\n                return False\n            char_stack.pop()\n\
    \    return char_stack.is_empty()\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5r8vixyy.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp5r8vixyy.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5r8vixyy.py\"\
    , line 26, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp5r8vixyy.py\"\
    , line 14, in correct_bracketing\n    char_stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ lbrackets = 0\n    for i in brackets:\n        if i == \"<\":\n            lbrackets\
    \ += 1\n        elif i == \">\":\n            lbrackets -= 1\n        if lbrackets\
    \ < 0:\n            return False\n    return lbrackets == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ opening = brackets.count(\"<\")\n    closing = brackets.count(\">\")\n    if\
    \ opening != closing:\n        return False\n    elif brackets.count(\"<\") >\
    \ brackets.count(\">\"):\n        return False\n    else:\n        return True\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdtsigjoc.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpdtsigjoc.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdtsigjoc.py\"\
    , line 30, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # Accumulator\n    count = 0\n    for bracket in brackets:\n        if bracket\
    \ == \"<\":\n            count += 1\n        elif bracket == \">\":\n        \
    \    count -= 1\n            if count < 0:\n                return False\n   \
    \ if count == 0:\n        return True\n    else:\n        return False\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            bracket_count += 1\n        elif bracket == \">\":\n          \
    \  bracket_count -= 1\n        if bracket_count < 0:\n            return False\n\
    \    return bracket_count == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            open_brackets += 1\n        elif bracket == \">\":\n          \
    \  open_brackets -= 1\n        if open_brackets < 0:\n            return False\n\
    \    return open_brackets == 0\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            bracket_count += 1\n        elif bracket == \">\":\n          \
    \  bracket_count -= 1\n            if bracket_count < 0:\n                return\
    \ False\n    return bracket_count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            open_brackets += 1\n        elif bracket == \">\":\n          \
    \  open_brackets -= 1\n        if open_brackets < 0:\n            return False\n\
    \    return open_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for symbol in brackets:\n        if symbol == \"<\":\n      \
    \      count += 1\n        elif symbol == \">\":\n            count -= 1\n   \
    \     if count < 0:\n            return False\n    return count == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ brackets_stack = []\n    for bracket in brackets:\n        if bracket == \"\
    <\":\n            brackets_stack.append(bracket)\n        else:\n            if\
    \ brackets_stack:\n                brackets_stack.pop()\n            else:\n \
    \               return False\n    return not brackets_stack\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # This function could be written in one line using a list comprehension.\n \
    \   # But it's a bit tricky.\n    # Don't write it like this!  It's not readable!\n\
    \    #\n    # return sum([-1 if i == \"<\" else 1 for i in brackets]) == 0\n \
    \   counter = 0\n    for i in brackets:\n        if i == \"<\":\n            counter\
    \ += 1\n        elif i == \">\":\n            counter -= 1\n        if counter\
    \ < 0:\n            return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if brackets == \"\":\n        return True\n    elif brackets[0] == \"<\":\n\
    \        return correct_bracketing(brackets[1:])\n    elif brackets[0] == \">\"\
    :\n        return False\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3bx7i7m5.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp3bx7i7m5.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp3bx7i7m5.py\"\
    , line 22, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"<\") == brackets.count(\">\")\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd80rir37.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpd80rir37.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpd80rir37.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"<\") == brackets.count(\">\")\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_bdxqrqu.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_bdxqrqu.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_bdxqrqu.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n   \
    \         stack.append(bracket)\n        elif bracket == \">\":\n            if\
    \ stack:\n                stack.pop()\n            else:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # the number of unclosed opening brackets\n    open_brackets = 0\n    for b\
    \ in brackets:\n        if b == \"<\":\n            open_brackets += 1\n     \
    \   elif b == \">\":\n            open_brackets -= 1\n            if open_brackets\
    \ < 0:\n                return False\n    return open_brackets == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n  \
    \          open_brackets += 1\n        elif char == \">\":\n            open_brackets\
    \ -= 1\n        if open_brackets < 0:\n            return False\n    return open_brackets\
    \ == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        else:\n            count -= 1\n        if count <\
    \ 0:\n            return False\n    return count == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ open_bracket_count = 0\n    for bracket in brackets:\n        if bracket ==\
    \ \"<\":\n            open_bracket_count += 1\n        else:\n            open_bracket_count\
    \ -= 1\n        if open_bracket_count < 0:\n            return False\n    return\
    \ open_bracket_count == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"<\":\n          \
    \  count += 1\n        else:\n            count -= 1\n            if count < 0:\n\
    \                return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ open_count = 0\n    for char in brackets:\n        if char == \"<\":\n     \
    \       open_count += 1\n        elif char == \">\":\n            open_count -=\
    \ 1\n        if open_count < 0:\n            return False\n    return open_count\
    \ == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ open_counter = 0\n    for char in brackets:\n        if char == \"<\":\n   \
    \         open_counter += 1\n        elif char == \">\":\n            open_counter\
    \ -= 1\n        if open_counter < 0:\n            return False\n    return open_counter\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        else:\n            count -= 1\n        if count <\
    \ 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # counter for current level of bracketing\n    level = 0\n    for ch in brackets:\n\
    \        if ch == \"<\":\n            level += 1\n        elif ch == \">\":\n\
    \            level -= 1\n        if level < 0:\n            return False\n   \
    \ return level == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return len(brackets) - brackets.count(\"<\") == brackets.count(\">\")\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5cie5cnf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5cie5cnf.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5cie5cnf.py\"\
    , line 22, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ open_num = 0\n    close_num = 0\n    for char in brackets:\n        if char\
    \ == \"<\":\n            open_num += 1\n        else:\n            close_num +=\
    \ 1\n        if close_num > open_num:\n            return False\n    return open_num\
    \ == close_num\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n \ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"<\":\n          \
    \  count += 1\n        else:\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if \"<\" in brackets and \">\" not in brackets:\n        return False\n    elif\
    \ \">\" in brackets and \"<\" not in brackets:\n        return False\n    elif\
    \ \"<\" not in brackets and \">\" not in brackets:\n        return True\n    elif\
    \ \"<\" in brackets and \">\" in brackets:\n        if brackets.index(\"<\") >\
    \ brackets.index(\">\"):\n            return False\n        else:\n          \
    \  return True\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiz5x8c5g.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpiz5x8c5g.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpiz5x8c5g.py\"\
    , line 32, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ bracket_stack = Stack()\n    #print(\"brackets: \" + brackets)\n    for char\
    \ in brackets:\n        #print(\"char: \" + char)\n        if char == \"<\":\n\
    \            bracket_stack.push(char)\n        else:\n            if bracket_stack.is_empty():\n\
    \                return False\n            else:\n                bracket_stack.pop()\n\
    \    if bracket_stack.is_empty():\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpozqt64lm.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpozqt64lm.py\", line 46,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpozqt64lm.py\"\
    , line 32, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpozqt64lm.py\"\
    , line 14, in correct_bracketing\n    bracket_stack = Stack()\nNameError: name\
    \ 'Stack' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"<\") == brackets.count(\">\")\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgeiukrt9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgeiukrt9.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgeiukrt9.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for i in brackets:\n        if i == \"<\":\n        \
    \    bracket_count += 1\n        elif i == \">\":\n            bracket_count -=\
    \ 1\n        if bracket_count < 0:\n            return False\n    return bracket_count\
    \ == 0\n\n\n@pytest.mark.parametrize(\"string,expected\", [\n    (\"<\", False),\n\
    \    (\"<>\", True),\n    (\"<<><>>\", True),\n    (\"><<>\", False),\n])\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmme5tly8.py\", line\
    \ 25, in <module>\n    @pytest.mark.parametrize(\"string,expected\", [\nNameError:\
    \ name 'pytest' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ unclosed_brackets = 0\n    for bracket in brackets:\n        if bracket == \"\
    <\":\n            unclosed_brackets += 1\n        elif bracket == \">\":\n   \
    \         unclosed_brackets -= 1\n        if unclosed_brackets < 0:\n        \
    \    return False\n    return unclosed_brackets == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for i in brackets:\n        if i == \"<\":\n            stack.append(i)\n\
    \        elif i == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    if len(stack) ==\
    \ 0:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ opening_brackets = 0\n    for bracket in brackets:\n        if bracket == \"\
    <\":\n            opening_brackets += 1\n        else:\n            opening_brackets\
    \ -= 1\n        if opening_brackets < 0:\n            return False\n    return\
    \ opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ number_of_open = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            number_of_open += 1\n        elif bracket == \">\":\n         \
    \   number_of_open -= 1\n        if number_of_open < 0:\n            return False\n\
    \    return number_of_open == 0\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = 0\n    for char in brackets:\n        if char == \"<\":\n          \
    \  stack += 1\n        elif char == \">\":\n            stack -= 1\n         \
    \   if stack < 0:\n                return False\n    return stack == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ open_count = 0\n    for ch in brackets:\n        if ch == \"<\":\n         \
    \   open_count += 1\n        elif ch == \">\":\n            open_count -= 1\n\
    \        if open_count < 0:\n            return False\n    return open_count ==\
    \ 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if len(brackets) == 0:\n        return True\n    if len(brackets) == 1:\n  \
    \      return False\n    if brackets[0] == '>':\n        return False\n    if\
    \ brackets[-1] == '<':\n        return False\n    count = 0\n    for i in brackets:\n\
    \        if i == '<':\n            count += 1\n        elif i == '>':\n      \
    \      count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            bracket_count += 1\n        elif bracket == \">\":\n          \
    \  bracket_count -= 1\n        if bracket_count < 0:\n            return False\n\
    \    return bracket_count == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if len(brackets) == 0:\n        return True\n    if len(brackets) % 2 != 0:\n\
    \        return False\n    if brackets[0] == \">\":\n        return False\n  \
    \  if brackets[-1] == \"<\":\n        return False\n    if \"><\" in brackets:\n\
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmz2j3pm5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpmz2j3pm5.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpmz2j3pm5.py\"\
    , line 29, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ open_bracket = 0\n    for b in brackets:\n        if b == \"<\":\n         \
    \   open_bracket += 1\n        else:\n            open_bracket -= 1\n        \
    \    if open_bracket < 0:\n                return False\n    return open_bracket\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        else:\n            count -= 1\n        if count <\
    \ 0:\n            return False\n    return count == 0\n\n\n@given(brackets())\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpigz1wfh_.py\", line\
    \ 25, in <module>\n    @given(brackets())\nNameError: name 'given' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for ch in brackets:\n        if ch == \"<\":\n            count\
    \ += 1\n        elif ch == \">\":\n            count -= 1\n        if count <\
    \ 0:\n            return False\n    return count == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ left_brackets = 0\n    for c in brackets:\n        if c == \"<\":\n        \
    \    left_brackets += 1\n        elif c == \">\":\n            left_brackets -=\
    \ 1\n        if left_brackets < 0:\n            return False\n    return left_brackets\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if len(brackets) == 0:\n        return True\n    else:\n        return brackets[0]\
    \ == '<' and brackets[-1] == '>' and \\\n            correct_bracketing(brackets[1:-1])\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4fap98r.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp_4fap98r.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_4fap98r.py\"\
    , line 23, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ num_open = 0\n    for char in brackets:\n        if char == \"<\":\n       \
    \     num_open += 1\n        elif char == \">\":\n            num_open -= 1\n\
    \        if num_open < 0:\n            return False\n    return num_open == 0\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # NOTE: the number of closing brackets cannot exceed the number of opening\n\
    \    # brackets in a well-bracketed sequence.\n    if brackets.count(\">\") >\
    \ brackets.count(\"<\"):\n        return False\n    # iterate through sequence\
    \ of brackets, looking for a \">\" preceded by \">\"s.\n    for i in range(len(brackets)\
    \ - 1):\n        if brackets[i] == \">\" and brackets[i - 1] == \">\":\n     \
    \       return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp06lzbphv.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp06lzbphv.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp06lzbphv.py\"\
    , line 28, in check\n    assert candidate('<><><<><>><>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"<\") == brackets.count(\">\")\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2takfpy.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpl2takfpy.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpl2takfpy.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ brackets_stack = Stack()\n    for bracket in brackets:\n        if bracket ==\
    \ \"<\":\n            brackets_stack.push(bracket)\n        else:\n          \
    \  if brackets_stack.is_empty():\n                return False\n            brackets_stack.pop()\n\
    \    return brackets_stack.is_empty()\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxh1b3qur.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpxh1b3qur.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxh1b3qur.py\"\
    , line 26, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpxh1b3qur.py\"\
    , line 14, in correct_bracketing\n    brackets_stack = Stack()\nNameError: name\
    \ 'Stack' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n   \
    \         stack.append(bracket)\n        else:\n            if len(stack) == 0:\n\
    \                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # Hint: use a stack\n    stack = Stack()\n    for b in brackets:\n        if\
    \ b == \"<\":\n            stack.push(b)\n        else:\n            if stack.is_empty():\n\
    \                return False\n            stack.pop()\n    return stack.is_empty()\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp60du7ntw.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp60du7ntw.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp60du7ntw.py\"\
    , line 27, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp60du7ntw.py\"\
    , line 15, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for b in brackets:\n        if b == \"<\":\n            count\
    \ += 1\n        elif b == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # return True if every opening bracket has a corresponding closing bracket\n\
    \    # for every opening bracket \"<\", there should be a closing bracket \">\"\
    \n    # the index of the first closing bracket should be the same or smaller\n\
    \    # than the index of the first opening bracket\n\n    # use a counter to keep\
    \ track of the number of opening brackets\n    counter = 0\n    for i in brackets:\n\
    \        if i == \"<\":\n            counter += 1\n        else:\n           \
    \ counter -= 1\n            if counter < 0:\n                return False\n  \
    \  if counter == 0:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \            if count < 0:\n                return False\n    return count ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for b in brackets:\n        if b == \"<\":\n            count\
    \ += 1\n        elif b == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for c in brackets:\n        if c == \"<\":\n            counter\
    \ += 1\n        else:\n            counter -= 1\n        if counter < 0:\n   \
    \         return False\n    return counter == 0\n\n\ndef check(candidate):\n \
    \   assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n \
    \   assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if brackets.count('<') == brackets.count('>'):\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_vsptas.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpk_vsptas.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpk_vsptas.py\"\
    , line 25, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n  \
    \          open_brackets += 1\n        elif char == \">\":\n            open_brackets\
    \ -= 1\n        if open_brackets < 0:\n            return False\n    return open_brackets\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ brackets_stack = Stack()\n    for char in brackets:\n        if char == \"<\"\
    :\n            brackets_stack.push(char)\n        elif char == \">\":\n      \
    \      if brackets_stack.is_empty():\n                return False\n         \
    \   brackets_stack.pop()\n    return brackets_stack.is_empty()\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnc_3467f.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpnc_3467f.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnc_3467f.py\"\
    , line 26, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpnc_3467f.py\"\
    , line 14, in correct_bracketing\n    brackets_stack = Stack()\nNameError: name\
    \ 'Stack' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ num_opened = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n\
    \            num_opened += 1\n        else:\n            num_opened -= 1\n   \
    \         if num_opened < 0:\n                return False\n    return num_opened\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ brackets_copy = brackets\n    while '<>' in brackets_copy:\n        brackets_copy\
    \ = brackets_copy.replace('<>', '')\n    return brackets_copy == ''\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = Stack()\n    for bracket in brackets:\n        if bracket == \"<\":\n\
    \            stack.push(bracket)\n        elif bracket == \">\":\n           \
    \ if stack.is_empty():\n                return False\n            stack.pop()\n\
    \    return stack.is_empty()\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpakmb3xo4.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpakmb3xo4.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpakmb3xo4.py\"\
    , line 25, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpakmb3xo4.py\"\
    , line 14, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # assume brackets is not empty\n    # assume every \"<\" and \">\" is correct\n\
    \    # brackets = \"<>\"\n    # brackets = \"<<><>>\"\n    # brackets = \"><\"\
    \n    # brackets = \"><<>\"\n    # brackets = \"<<<\"\n    counter = 0\n    for\
    \ char in brackets:\n        if char == \"<\":\n            counter += 1\n   \
    \     elif char == \">\":\n            counter -= 1\n            if counter <\
    \ 0:\n                return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for i in brackets:\n        if i == \"<\":\n            counter\
    \ += 1\n        elif i == \">\":\n            counter -= 1\n        if counter\
    \ < 0:\n            return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"<\":\n          \
    \  count += 1\n        elif char == \">\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for b in brackets:\n        if b == \"<\":\n            count\
    \ += 1\n        elif b == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"<\") == brackets.count(\">\")\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4u7zi1ll.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp4u7zi1ll.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4u7zi1ll.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # COMPLETE THIS FUNCTION.\n    # ...\n    return brackets.count(\"<\") == brackets.count(\"\
    >\")\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm3u3y3qx.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpm3u3y3qx.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpm3u3y3qx.py\"\
    , line 25, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ \"*** YOUR CODE HERE ***\"\n    total = 0\n    for b in brackets:\n        if\
    \ b == '<':\n            total += 1\n        else:\n            total -= 1\n \
    \           if total < 0:\n                return False\n    return total == 0\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"<\") == brackets.count(\">\")\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9nug0zv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpa9nug0zv.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpa9nug0zv.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if len(brackets) % 2 != 0:\n        return False\n    else:\n        right_brackets\
    \ = brackets.count('>')\n        left_brackets = brackets.count('<')\n       \
    \ if right_brackets != left_brackets:\n            return False\n        else:\n\
    \            return True\n    # hint: for every opening bracket,\n    # you must\
    \ find a closing bracket somewhere later\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpect08kdm.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpect08kdm.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpect08kdm.py\"\
    , line 33, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # You may not use any data structures other than a stack.\n    stack = Stack()\n\
    \    for i in brackets:\n        if i == \"<\":\n            stack.push(i)\n \
    \       elif i == \">\":\n            if stack.is_empty():\n                return\
    \ False\n            else:\n                stack.pop()\n    return stack.is_empty()\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp851k2hm8.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp851k2hm8.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp851k2hm8.py\"\
    , line 28, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp851k2hm8.py\"\
    , line 15, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n   \
    \         stack.append(bracket)\n        else:\n            if len(stack) == 0:\n\
    \                return False\n            stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for char in brackets:\n        if char == \"<\":\n        \
    \    counter += 1\n        else:\n            counter -= 1\n            if counter\
    \ < 0:\n                return False\n    return counter == 0\n        \n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ brackets_stack = []\n    for bracket in brackets:\n        if bracket == \"\
    <\":\n            brackets_stack.append(bracket)\n        elif bracket == \">\"\
    :\n            if brackets_stack == []:\n                return False\n      \
    \      else:\n                brackets_stack.pop()\n    return brackets_stack\
    \ == []\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"<\") == brackets.count(\">\")\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplswt13j6.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmplswt13j6.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplswt13j6.py\"\
    , line 22, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ n = 0\n    for b in brackets:\n        if b == \"<\":\n            n += 1\n\
    \        else:\n            n -= 1\n        if n < 0:\n            return False\n\
    \    return n == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"<\":\n          \
    \  count += 1\n        elif char == \">\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # this means that we have to have an equal number of < and >\n    # and every\
    \ < must be proceeded by a >\n    # so keep a stack of opening brackets and add\
    \ to it every time we see a <\n    # if we see a > and there are no <'s left,\
    \ we are missing an opening bracket\n    # if we see a > and there are <'s left,\
    \ pop a < and move on\n    # if we see a < and there are >'s left, we are missing\
    \ a closing bracket\n    # if we see a < and there are no >'s left, add to the\
    \ stack and move on\n    stack = []\n    for c in brackets:\n        if c == '<':\n\
    \            stack.append(c)\n        else:\n            if len(stack) == 0:\n\
    \                return False\n            stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ depth = 0\n    for c in brackets:\n        if c == \"<\":\n            depth\
    \ += 1\n        elif c == \">\":\n            depth -= 1\n        if depth < 0:\n\
    \            return False\n    return depth == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ num_left_brackets = 0\n    for c in brackets:\n        if c == \"<\":\n    \
    \        num_left_brackets += 1\n        elif c == \">\":\n            num_left_brackets\
    \ -= 1\n        if num_left_brackets < 0:\n            return False\n    return\
    \ num_left_brackets == 0\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ opening_brackets = 0\n    for bracket in brackets:\n        if bracket == \"\
    <\":\n            opening_brackets += 1\n        elif bracket == \">\":\n    \
    \        opening_brackets -= 1\n        if opening_brackets < 0:\n           \
    \ return False\n    return opening_brackets == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        else:\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n   \
    \         stack.append(bracket)\n        else:\n            if stack:\n      \
    \          stack.pop()\n            else:\n                return False\n    return\
    \ not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n \
    \   assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for i in brackets:\n        if i == \"<\":\n            count\
    \ += 1\n        elif i == \">\":\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        else:\n            count -= 1\n        if count <\
    \ 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if brackets == \"\":\n        return True\n    elif brackets[0] == \"<\":\n\
    \        return correct_bracketing(brackets[1:])\n    elif brackets[0] == \">\"\
    :\n        return correct_bracketing(brackets[1:])\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp0knnq84.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpp0knnq84.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpp0knnq84.py\"\
    , line 27, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            bracket_count += 1\n        elif bracket == \">\":\n          \
    \  bracket_count -= 1\n        if bracket_count < 0:\n            return False\n\
    \    return bracket_count == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return False\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq3wyzqhn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpq3wyzqhn.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq3wyzqhn.py\"\
    , line 17, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n\
    \        elif b == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ left_brackets = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            left_brackets += 1\n        elif bracket == \">\":\n          \
    \  left_brackets -= 1\n        if left_brackets < 0:\n            return False\n\
    \    return left_brackets == 0\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if \">\" in brackets and \"<\" not in brackets:\n        return False\n    elif\
    \ \"<\" in brackets and \">\" not in brackets:\n        return False\n    else:\n\
    \        return True\n    pass\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zca43jr.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp0zca43jr.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0zca43jr.py\"\
    , line 28, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ num_open = 0\n    for c in brackets:\n        if c == \"<\":\n            num_open\
    \ += 1\n        elif c == \">\":\n            num_open -= 1\n        if num_open\
    \ < 0:\n            return False\n    return num_open == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ if not brackets:\n        return True\n    if brackets[0] == \">\":\n      \
    \  return False\n    else:\n        return correct_bracketing(brackets[1:])\n\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbpv4r8hx.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpbpv4r8hx.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbpv4r8hx.py\"\
    , line 23, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ return False\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpobhkoiip.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpobhkoiip.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpobhkoiip.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"<\":\n          \
    \  count += 1\n        else:\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ i = 0\n    for char in brackets:\n        if char == \"<\":\n            i +=\
    \ 1\n        elif char == \">\":\n            i -= 1\n        if i < 0:\n    \
    \        return False\n    return i == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ # count = 0\n    # for char in brackets:\n    #     if char == \"<\":\n    #\
    \         count += 1\n    #     elif char == \">\":\n    #         count -= 1\n\
    \    #     if count < 0:\n    #         return False\n    # return count == 0\n\
    \    #\n    # count = 0\n    # for char in brackets:\n    #     if char == \"\
    <\":\n    #         count += 1\n    #     elif char == \">\":\n    #         count\
    \ -= 1\n    #     if count == 0:\n    #         return False\n    # return count\
    \ == 0\n    #\n    # count = 0\n    # for char in brackets:\n    #     if char\
    \ == \"<\":\n    #         count += 1\n    #     elif char == \">\":\n    #  \
    \       count -= 1\n    #     if count == 0:\n    #         return False\n   \
    \ # return count > 0\n    #\n    # count = 0\n    # for char in brackets:\n  \
    \  #     if char == \"<\":\n    #         count += 1\n    #     elif char == \"\
    >\":\n    #         count -= 1\n    #     if count < 0:\n    #         return\
    \ False\n    # return count >= 0\n    #\n    # count = 0\n    # for char in brackets:\n\
    \    #     if char == \"<\":\n    #         count += 1\n    #     elif char ==\
    \ \">\":\n    #         count -= 1\n    #     if count < 0:\n    #         return\
    \ False\n    # return count > 0\n    #\n    # count = 0\n    # for char in brackets:\n\
    \    #     if char == \"<\":\n    #         count += 1\n    #     elif char ==\
    \ \">\":\n    #         count -= 1\n    #     if count > 0:\n    #         return\
    \ False\n    # return count >= 0\n    #\n    # count = 0\n    # for char in brackets:\n\
    \    #     if char == \"<\":\n    #         count += 1\n    #     elif char ==\
    \ \">\":\n    #         count -= 1\n    #     if count > 0:\n    #         return\
    \ False\n    # return count > 0\n    #\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf05gsc8g.py\", line\
    \ 102, in <module>\n    test_check()\n  File \"/tmp/tmpf05gsc8g.py\", line 100,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpf05gsc8g.py\"\
    , line 86, in check\n    assert candidate('<>') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            bracket_count += 1\n        elif bracket == \">\":\n          \
    \  bracket_count -= 1\n            if bracket_count < 0:\n                return\
    \ False\n    return bracket_count == 0\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n   \
    \         stack.append(bracket)\n        elif bracket == \">\":\n            if\
    \ stack != []:\n                stack.pop()\n            else:\n             \
    \   return False\n    return stack == []\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n    \
    \        count += 1\n        else:\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for symbol in brackets:\n        if symbol == \"<\":\n    \
    \        counter += 1\n        else:\n            counter -= 1\n        if counter\
    \ < 0:\n            return False\n    return counter == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ num_close_brackets = 0\n    num_open_brackets = 0\n    for ch in brackets:\n\
    \        if ch == \"<\":\n            num_open_brackets += 1\n        elif ch\
    \ == \">\":\n            num_close_brackets += 1\n        if num_close_brackets\
    \ > num_open_brackets:\n            return False\n    return num_open_brackets\
    \ == num_close_brackets\n\n\n@given(strategies.brackets)\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa7i_exqi.py\", line\
    \ 26, in <module>\n    @given(strategies.brackets)\nNameError: name 'given' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n   \
    \         stack.append(bracket)\n        else:\n            if len(stack) == 0:\n\
    \                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n\
    \    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\"\
    )\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n   \
    \ left_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n  \
    \          left_brackets += 1\n        else:\n            left_brackets -= 1\n\
    \        if left_brackets < 0:\n            return False\n    return left_brackets\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
