name: HumanEval_98_count_upper
language: py
prompt: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
  \ the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf')\
  \ returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns\
  \ 0\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
  \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
  \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
  \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
completions: ["    count = 0\n    for i in range(len(s)):\n        if s[i].isupper()\
    \ and i % 2 == 0:\n            count += 1\n    return count\n\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n",
  "    pass\n\n", "    # Your code here\n    return 0\n\n", "    count = 0\n    for\
    \ i in range(0, len(s), 2):\n        if s[i] in ['A', 'E', 'I', 'O', 'U']:\n \
    \           count += 1\n    return count\n        \n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n \nassert count_upper('aBCdEf') == 1\nassert\
    \ count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n \n ", "    count\
    \ = 0\n    i = 0\n    while i < len(s):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n\
    \            count += 1\n        i += 1\n    return count\ncount_upper('aBCdEf')\n\
    \ncount_upper('abcdefg')\n\ncount_upper('dBBE')\n ", '    return', "    uppercase_vowels\
    \ = 'AEIOU'\n    counter = 0\n    for i in range(len(s)):\n        if s[i] in\
    \ uppercase_vowels and i % 2 == 0:\n            counter += 1\n    return counter\n\
    \    ", "    even_indices = []\n    for i in range(len(s)):\n        if i % 2\
    \ == 0:\n            even_indices.append(s[i])\n    count = 0\n    for i in even_indices:\n\
    \        if i in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return\
    \ count\n        \nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\n\
    print(count_upper('dBBE'))\n", "    uppers = 0\n    for i in range(0, len(s),\
    \ 2):\n        if s[i].isupper():\n            uppers += 1\n    return uppers\n\
    \nprint(count_upper('aBCdEf')) # 1\nprint(count_upper('abcdefg')) # 0\nprint(count_upper('dBBE'))\
    \ # 0\n\nprint(count_upper('abcdefg')) # 0\nprint(count_upper('aBcDeFg')) # 3\n\
    print(count_upper('aBcDeFgH')) # 4\n", "    # return len([c for c in s if is_vowel(c)\
    \ and is_upper(c) and (s.index(c) % 2 == 0)])\n    return len([c for c in s[::2]\
    \ if is_vowel(c) and is_upper(c)])\n", "    return 0\n\ncount_upper('aBCdEf')\n\
    assert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n ", "    ctr = 0\n    for i in range(0, len(s), 2):\n\
    \        if s[i] in 'AEIOU':\n            ctr += 1\n    return ctr\n", "    #\
    \ YOUR CODE HERE\n    count = 0\n    for i in range(0, len(s), 2):\n        if\
    \ s[i] in 'AEIOU':\n            count += 1\n    return count\ncount_upper('aBCdEf')\n\
    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n \n", "    uppercase_vowels = ['A', 'E', 'I', 'O',\
    \ 'U']\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n\
    \            count += 1\n    return count\n \n    ", "    upper_vowels = ['A',\
    \ 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(0, len(s), 2):\n    \
    \    if s[i] in upper_vowels:\n            count += 1\n    return count\n\n",
  "    if s == \"\":\n        return 0\n    count = 0\n    for i in range(0, len(s),\
    \ 2):\n        c = s[i]\n        if c in VOWELS and c.isupper():\n           \
    \ count += 1\n    return count\n", "    count = 0\n    for i in range(0, len(s),\
    \ 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n\
    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n \n", "    pass\n\n", "    counter = 0\n    for i\
    \ in range(len(s)):\n        if i % 2 == 0 and s[i] in VOWELS and s[i].isupper():\n\
    \            counter += 1\n    return counter\ncount_upper('dBBE')\n", "    #\
    \ YOUR CODE HERE\n    vowel_index = []\n    for i in range(0, len(s)):\n     \
    \   if (s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'):\n\
    \            vowel_index.append(i)\n    return len(vowel_index)", "    count =\
    \ 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n\
    \            count += 1\n    return count\n\nassert count_upper('aBCdEf') == 1\n\
    assert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n ", "   \
    \ # YOUR CODE HERE\n    #raise NotImplementedError()\n    c = 0\n    v = ['A','E','I','O','U']\n\
    \    for i in range(0,len(s),2):\n        if s[i] in v:\n            c += 1\n\
    \    return c\n\n", "    evens = s[::2]\n    return sum(char in 'AEIOU' for char\
    \ in evens)\n ", "    count = 0\n    for i in range(len(s)):\n        if i % 2\
    \ == 0 and s[i] in VOWELS:\n            count += 1\n    return count\n", "   \
    \ vowel = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper()\
    \ and s[i] in vowel and i % 2 == 0:\n            count += 1\n    return count\n",
  "    # YOUR CODE HERE\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for c in s:\n\
    \        if c in vowels and s.index(c) % 2 == 0:\n            count += 1\n   \
    \ return count\n", "    ### BEGIN SOLUTION\n    evens = s[::2]\n    vowels = 'AEIOU'\n\
    \    return sum(1 for c in evens if c in vowels)\n    ### END SOLUTION\n\nassert\
    \ count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE')\
    \ == 0\nassert count_upper('A') == 1\n ", "    vowels = \"AEIOU\"\n    count =\
    \ 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n         \
    \   count += 1\n    return count\n\nassert count_upper('aBCdEf') == 1\nassert\
    \ count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n ", "    vowels\
    \ = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0\
    \ and s[i] in vowels:\n            count += 1\n    return count", "    count =\
    \ 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in \"AEIOU\"\
    :\n            count += 1\n    return count\n    \n    ", "    return sum(s[i]\
    \ in 'AEIOU' for i in range(len(s)) if i % 2 == 0)\n", "    return sum(1 for idx,\
    \ c in enumerate(s) if c in 'AEIOU' and idx % 2 == 0)\n\n", "    ...\n ", "  \
    \  count = 0\n    index = 0\n    while index < len(s):\n        if s[index].isupper()\
    \ and index % 2 == 0:\n            count += 1\n        index += 1\n    return\
    \ count\n    # TODO: replace above line with a one-line solution\n\n", "    upper_vowels\
    \ = 'AEIOU'\n    ans = 0\n    for i in range(0, len(s), 2):\n        if s[i] in\
    \ upper_vowels:\n            ans += 1\n    return ans\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    assert count_upper('aBcD') == 1\n \n", "    num = 0\n    for i in range(0, len(s),\
    \ 2):\n        if s[i] in VOWELS:\n            num += 1\n    return num\n", " \
    \   s = s.upper()\n    s = s[::2]\n    counter = 0\n    for char in s:\n     \
    \   if char in 'AEIOU':\n            counter += 1\n    return counter\n", "  \
    \  #if type(s) == str:\n    c = 0\n    for i in range(len(s)):\n        if i %\
    \ 2 == 0 and s[i] in \"AEIOU\":\n            c += 1\n    return c\n", "    count\
    \ = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n      \
    \      count += 1\n    return count\n\nassert count_upper('aBCdEf') == 1\nassert\
    \ count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n", "    count\
    \ = 0\n    even = False\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    for c in\
    \ s:\n        if even and c in vowels:\n            count += 1\n        even =\
    \ not even\n    return count\n        ", "    pass # replace with your code\n\n",
  "    vowels = 'aeiouAEIOU'\n    even_upper = 0\n    for i in range(len(s)):\n  \
    \      if s[i] in vowels and i % 2 == 0:\n            even_upper += 1\n    return\
    \ even_upper", "    # TODO: implement this function\n    pass\n", "    # this\
    \ code is not optimal, I think.\n    return sum(1 for i in range(len(s)) if s[i].isupper()\
    \ and i % 2 == 0)\n\n", "    count = 0\n    for i in range(0, len(s), 2):\n  \
    \      if s[i] in 'AEIOU':\n            count += 1\n    return count\n", "   \
    \ return 0\n \n ", "    counter = 0\n    for i in range(len(s)):\n        if (i\
    \ % 2) == 0 and s[i] in 'AEIOU':\n            counter += 1\n    return counter\n\
    \            \n", "    count = 0\n    for i in range(0, len(s), 2):\n        char\
    \ = s[i]\n        if is_vowel(char) and char.isupper():\n            count +=\
    \ 1\n    return count\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n \n ", "    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n \n", "    vowel_count = 0\n    for i in range(len(s)):\n\
    \        # Check if even index\n        if i % 2 == 0:\n            # Check if\
    \ uppercase vowel\n            if s[i] in ['A', 'E', 'I', 'O', 'U']:\n       \
    \         vowel_count += 1\n    return vowel_count\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    \ \n ", "    return sum(1 for index, char in enumerate(s) if char.isupper() and\
    \ index % 2 == 0)\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n ", "    # TODO: Implement this function\n\
    \    # Hint: You may want to use the `.upper()` method\n    n = 0\n    i = 0\n\
    \    while i < len(s):\n        if s[i].upper() in 'AEIOU':\n            n +=\
    \ 1\n        i += 2\n    return n\n", "    return ...\ncount_upper('aBCdEf')\n\
    count_upper('abcdefg')\ncount_upper('dBBE')\n \n", "    count = 0\n    for i in\
    \ range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n\
    \    return count\n", "    # YOUR CODE HERE\n    #time: O(n) space: O(1)\n   \
    \ length = len(s)\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n   \
    \ for i in range(length):\n        if i % 2 == 0 and s[i] in vowels:\n       \
    \     count += 1\n    return count\n", "    # count = 0\n    # for i in range(len(s)):\n\
    \    #     if i % 2 == 0 and s[i] in 'AEIOU':\n    #         count += 1\n    #\
    \ return count\n    return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i]\
    \ in 'AEIOU')\n", "    v = 'AEIOU'\n    assert isinstance(s, str)\n    # YOUR\
    \ CODE HERE\n    #raise NotImplementedError()\n    count = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in v:\n            count += 1\n    return count\n\
    \    \n    \n", "    pass\n \n ", "    return 0\n", "    count = 0\n    for i\
    \ in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n\
    \    return count\n", "    ### BEGIN SOLUTION\n    return sum(1 for i, char in\
    \ enumerate(s) if i % 2 == 0 and char.isupper())\n    ### END SOLUTION\ntests.run_test(count_upper,\
    \ 'test_count_upper')\n", "    return sum(1 for i in range(len(s)) if i % 2 ==\
    \ 0 and s[i] in 'AEIOU')\n\ncount_upper('aBCdEf')\n\ncount_upper('abcdefg')\n\n\
    count_upper('dBBE')\n", "    # YOUR CODE HERE\n    num = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in 'AEIOU':\n            num += 1\n    return num\n\
    \    raise NotImplementedError()\n    \n    ", "    # YOUR CODE HERE\n    l=len(s)\n\
    \    count=0\n    for i in range(l):\n        if s[i].isupper() and i%2==0:\n\
    \            count+=1\n    return count\n            \n    raise NotImplementedError()\n\
    assert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\nprint('all tests pass!')\n", "    return sum(1 for\
    \ i in range(len(s)) if s[i].isupper() and i % 2 == 0)\n    \n", "    num_upper\
    \ = 0\n    # TODO: Finish function definition\n    return num_upper", "    count\
    \ = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n      \
    \      count += 1\n    return count\nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\n\
    print(count_upper('dBBE'))\n\nprint()\n\ns = 'aBCdEf'\ns = 'abcdefg'\ns = 'dBBE'\n\
    print(s)\nprint('  '.join(s))\nprint(len(s))\nfor i in range(0, len(s), 2):\n\
    \    print(i, s[i])\n\nprint()\n", "    # YOUR CODE HERE\n    count=0\n    for\
    \ i in range(0,len(s),2):\n        if s[i] in 'AEIOU':\n            count+=1\n\
    \    return count\n", "    return sum(1 for c in s[::2] if c in \"AEIOU\")\ncount_upper('aBCdEf')\n\
    \ncount_upper('abcdefg')\n\ncount_upper('dBBE')\n ", "    # STUDENTS: Complete\
    \ this function\n    pass\n    return 0\n\ncount_upper('aBCdEf')\n\ncount_upper('dBBE')\n",
  "    return sum(1 for i in range(0, len(s), 2) if s[i] in VOWELS and s[i].isupper())\n\
    \ ", "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i]\
    \ in 'AEIOU':\n            count += 1\n    return count\n    \nprint(count_upper('abCdEf'))\n",
  "    return 0\n\n", "    return 0 # replace this with a working implementation\n\
    assert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n \n ", "    vowels = ['A', 'E', 'I', 'O', 'U']\n \
    \   uppercase_count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in\
    \ vowels:\n            uppercase_count += 1\n    return uppercase_count\n\nassert\
    \ count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE')\
    \ == 0\n \n ", "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i]\
    \ in \"AEIOU\":\n            count += 1\n    return count\n \n ", "    # todo\
    \ implement this function\n    return 0\n\nassert count_upper('aBCdEf') == 1\n\
    assert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n \n ", " \
    \   for i in range(0, len(s), 2):\n        if s[i] == 'a' or s[i] == 'e' or s[i]\
    \ == 'i' or s[i] == 'o' or s[i] == 'u':\n            vowels = s.count(i)\n   \
    \ return vowels\ncount_upper('dBBE')\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n \n ", "    # YOUR CODE HERE\n    index = 0\n    count\
    \ = 0\n    while index < len(s):\n        if (index%2 == 0) and s[index] in ('A','E','I','O','U'):\n\
    \            count += 1\n        index += 1\n    return count\n    raise NotImplementedError()\n",
  "    even_count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\"\
    :\n            even_count += 1\n    return even_count", '    return 0', "    vowels\
    \ = 'AEIOU'\n    count = 0\n    for idx, c in enumerate(s):\n        if idx %\
    \ 2 == 0 and c in vowels:\n            count += 1\n    return count\n\nprint(count_upper('aBCdEf'))\n\
    print(count_upper('abcdefg'))\nprint(count_upper('dBBE'))\n", "    # fill in code\
    \ here\n    uppers = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and\
    \ s[i] in 'AEIOU':\n            uppers += 1\n    return uppers\n \n", "    # YOUR\
    \ CODE HERE\n    assert type(s) == str, 's must be a string.'\n    upper_vowels\
    \ = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(s)):\n  \
    \      if i % 2 == 0 and s[i] in upper_vowels:\n            count += 1\n    return\
    \ count", "    return 0 #TODO\n \n", "    return 0\n\n", "    pass\n \n \n \n ",
  "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n    \
    \    if s[i] in vowels:\n            count += 1\n    return count\n\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    \ \n ", "    return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in 'AEIOU')\n",
  "    if len(s) == 0:\n        return 0\n    elif s[0].isupper() and s[0] in VOWELS\
    \ and len(s) % 2 == 0:\n        return 1 + count_upper(s[1:])\n    else:\n   \
    \     return count_upper(s[1:])\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n", "    return sum(\n        s[i].upper()\
    \ in 'AEIOU' for i in range(len(s)) if i % 2 == 0\n    )\n\n", "    return # TODO\n\
    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n \n", "    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    vowel = \"AEIOU\"\n    num = 0\n    for i in range(0, len(s), 2):\n     \
    \   if s[i] in vowel:\n            num += 1\n    return num", "    count = 0\n\
    \    for index, letter in enumerate(s):\n        if index % 2 == 0 and letter\
    \ in 'AEIOU':\n            count += 1\n    return count\n\n", "    pass\n \n ",
  "    n = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n\
    \            n += 1\n    return n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n \n ", "    # YOUR CODE HERE\n    count\
    \ = 0\n    for i in range(0, len(s), 2):\n        if (s[i] in \"AEIOU\"):\n  \
    \          count += 1\n    return count\n\nassert count_upper('aBCdEf') == 1\n\
    assert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\nassert count_upper('dBBEe')\
    \ == 1\n", "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0\
    \ and s[i] in 'AEIOU':\n            count += 1\n    return count\n", "    # YOUR\
    \ CODE HERE\n    return 0\n", "    count = 0\n    for i in range(len(s)):\n  \
    \      if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE'))\n",
  "    result = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in\
    \ 'AEIOU':\n            result += 1\n    return result\n\n", "    upper_vowels\
    \ = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0\
    \ and s[i] in upper_vowels:\n            count += 1\n    return count\n\n \n",
  "    ...\ncount_upper('aBCdEf')\ncount_upper('abcdefg')\ncount_upper('dBBE')\n ",
  "    return 0\n", "    total = 0\n    vowels = set(['A', 'E', 'I', 'O', 'U'])\n\
    \    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n    \
    \        total += 1\n    return total\ncount_upper('aBCdEf')\ncount_upper('abcdefg')\n\
    count_upper('dBBE')\n \n \n ", "    # YOUR CODE HERE\n    count = 0\n    for c\
    \ in s:\n        if c.isupper() and s.index(c) % 2 == 0:\n            count +=\
    \ 1\n    return count", "    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    from numpy.testing import assert_equal\nassert_equal(count_upper('aBCdEf'), 1)\n\
    assert_equal(count_upper('abcdefg'), 0)\nassert_equal(count_upper('dBBE'), 0)\n\
    \ \nprint(\"Success!\")\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "    count = 0\n    for i\
    \ in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels and s[i].isupper():\n\
    \            count += 1\n    return count\n\n", "    # YOUR CODE HERE\n    count\
    \ = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n    \
    \        count += 1\n    return count\nassert count_upper('aBCdEf') == 1\nassert\
    \ count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n \n ", "    vowel_set\
    \ = set('AEIOU')\n    upper_vowel_count = 0\n    for i in range(0, len(s), 2):\n\
    \        if s[i] in vowel_set:\n            upper_vowel_count += 1\n    return\
    \ upper_vowel_count\n", "    raise NotImplementedError\ncount_upper('aBCdEf')\n\
    count_upper('abcdefg')\ncount_upper('dBBE')\n \n \n    ", "    count = 0\n   \
    \ for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count\
    \ += 1\n    return count\n \n", "    # Your code goes here\n    \n    ", "   \
    \ #numUpper = 0\n    #for i in range(len(s)):\n    #    if s[i].isupper() and\
    \ i % 2 == 0:\n    #        numUpper += 1\n    #return numUpper\n    return len([c\
    \ for c in s if c.isupper() and s.index(c) % 2 == 0])\n", "    # remove this pass\
    \ statement and write your code here\n    vowels = \"AEIOU\"\n    count = 0\n\
    \    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count\
    \ += 1\n    return count\n", "    count = 0\n    for (idx, ch) in enumerate(s):\n\
    \        if idx % 2 == 0 and ch in \"AEIOU\":\n            count += 1\n    return\
    \ count\n\n", '    pass', '    pass # Implement me!', "    vowels = {'A', 'E',\
    \ 'I', 'O', 'U'}\n    return len([c for i, c in enumerate(s) if c in vowels and\
    \ i % 2 == 0])\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n \n ", "    ...\n \ncount_upper('aBCdEf')\n\
    count_upper('abcdefg')\ncount_upper('dBBE')\n", "    return len([i for i in range(0,\
    \ len(s), 2) if s[i].isupper() and s[i] in 'AEIOU'])\n", "    vowels = 'AEIOU'\n\
    \    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels and i %\
    \ 2 == 0:\n            count += 1\n    return count\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    \ \n ", "    vowel = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in vowel:\n            count += 1\n    return count\n",
  "    upper_vowels = [letter for letter in s if letter.isupper() and letter in 'AEIOU']\n\
    \    return len(upper_vowels)//2\n    # count = 0\n    # i = 0\n    # while i\
    \ < len(s):\n    #     if s[i].isupper() and s[i] in 'AEIOU':\n    #         count\
    \ += 1\n    #     i += 2\n    # return count // 2\n\n", "    return 0\nassert\
    \ count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE')\
    \ == 0\n \n", "    upper_count = 0\n    for i in range(len(s)):\n        if i\
    \ % 2 == 0 and s[i] in VOWELS and s[i].isupper():\n            upper_count +=\
    \ 1\n    return upper_count\ncount_upper('aBCdEf')\n", "    return sum(1 for i\
    \ in range(0, len(s), 2) if s[i] in 'AEIOU')\n", "    return sum(map(lambda ch:\
    \ ch.upper() in 'AEIOU' and ord(ch)%2 == 0, s))\n", "    assert type(s) == str,\
    \ 's is not a string: {}'.format(s)\n    return 0", "    count = 0\n    for i\
    \ in range(0, len(s), 2):\n        if s[i] in ('A', 'E', 'I', 'O', 'U'):\n   \
    \         count += 1\n    return count\n \n", "    return sum(1 for idx, val in\
    \ enumerate(s) if val in 'AEIOU' and idx % 2 == 0)\n", "    count = 0\n    for\
    \ i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n          \
    \  count += 1\n    return count\ns = 'aBCdEf'\nprint(s)\nprint(count_upper(s))\n\
    s = 'abcdefg'\nprint(s)\nprint(count_upper(s))\ns = 'dBBE'\nprint(s)\nprint(count_upper(s))\n",
  "    # TODO complete me\n    return 0\n \n", "    num_upper = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i].isupper():\n            num_upper += 1\n    return\
    \ num_upper\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n \n ", '    return None', "    return\
    \ sum(map(str.isupper, s[::2]))\ncount_upper('aBCdEf')\n\ncount_upper('abcdefg')\n\
    \ncount_upper('dBBE')\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n \n ", "    total = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            total\
    \ += 1\n    return total\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n \n", "    return sum(1 for i in range(0,\
    \ len(s), 2) if s[i] in 'AEIOU')\n\ncount_upper('dBBE')\n", "    counter = 0\n\
    \    vowels = ['A', 'E', 'I', 'O', 'U']\n    for i in range(len(s)):\n       \
    \ if i % 2 == 0 and s[i] in vowels:\n            counter += 1\n    return counter\n\
    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\nassert count_upper('fghijklmn') == 0\n ", "    # YOUR\
    \ CODE HERE\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i]\
    \ in 'AEIOU':\n            count += 1\n    return count\n", "    return s.count('A')\
    \ + s.count('E') + s.count('I') + s.count('O') + s.count('U')\ncount_upper('aBCdEf')\n",
  "    # your code here\n    count = 0\n    for i in range(0, len(s), 2):\n      \
    \  if s[i] in \"AEIOU\":\n            count += 1\n    return count\ncount_upper('aBCdEf')\n\
    \ncount_upper('abcdefg')\n\ncount_upper('dBBE')\n", "    # STUDENTS: Add code\
    \ here\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper()\
    \ and (i % 2 == 0):\n            count += 1\n    return count\n", "    pass\n\
    \ \n ", "    # DIFFICULTY 1\n    # HINT: how to check for even indices?\n    count\
    \ = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in ['A', 'E',\
    \ 'I', 'O', 'U']:\n            count += 1\n    return count\n", "    return count_vowels(s,\
    \ upper=True, even=True)\n \n ", "    raise NotImplementedError()\ncount_upper('aBCdEf')\n\
    \ \n \n \n \n\ncount_upper('abcdefg')\n \n \n \n \n\ncount_upper('dBBE')\n \n\
    \ \n \n \n\ncount_upper('aeiouAEIOU')\n \n \n \n \n\ncount_upper('ABCDEFG')\n\
    \ \n \n \n \n\ncount_upper('pig')\n \n \n \n \n\ncount_upper('aBcDe')\n \n \n\
    \ \n \n\ncount_upper('aBc')\n \n \n \n \n\ncount_upper('BcD')\n \n \n \n \n\n\
    count_upper('abcd')\n \n \n \n \n\ncount_upper('AbCdE')\n \n \n \n \n\ncount_upper('aBCdE')\n\
    \ \n \n \n \n\ncount_upper('aBCde')\n \n \n \n \n\ncount_upper('aeiouAEIOU')\n\
    \ \n \n \n \n\ncount_upper('ABCDEFG')\n \n \n \n \n\ncount_upper('pig')\n \n \n\
    \ \n \n\ncount_upper('aBcDe')\n \n \n \n \n\ncount_upper('aBc')\n \n \n \n \n\n\
    count_upper('BcD')\n \n \n \n \n\ncount_upper('abcd')\n \n \n \n \n\ncount_upper('AbCdE')\n\
    \ \n \n \n \n\ncount_upper('aBCdE')\n \n \n \n \n\ncount_upper('aBCde')\n \n \n\
    \ \n \n\ncount_upper('aeiouAEIOU')\n \n \n \n \n\ncount_upper('ABCDEFG')\n \n\
    \ \n \n \n\ncount_upper('pig')\n \n \n \n \n\ncount_upper('aBcDe')\n \n \n \n\
    \ \n\ncount_upper('", "    return sum(1 for c in s[::2] if c in string.ascii_uppercase)\n\
    \nimport pytest\n\n@pytest.mark.parametrize('input, expected', [\n    ('aBCdEf',\
    \ 1),\n    ('abcdefg', 0),\n    ('dBBE', 0),\n])", "    pass # TODO\n    \n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()", "    count = 0\n    for\
    \ i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count +=\
    \ 1\n    return count\n\n", "    assert type(s) == str\n    return 0\n", "   \
    \ # YOUR CODE HERE\n    raise NotImplementedError()\n ", "    return 0\n", " \
    \   pass\ncount_upper('aBCdEf') == 1\ncount_upper('abcdefg') == 0\ncount_upper('dBBE')\
    \ == 0\n ", "    assert type(s) == str, 'input is not a string: {}'.format(s)\n\
    \    assert s.isalpha(), 'input is not all alphabetic: {}'.format(s)\n    count\
    \ = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n      \
    \      count += 1\n    return count\n ", "    count = 0\n    vowels = 'aeiouAEIOU'\n\
    \    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count\
    \ += 1\n    return count", "    vowels = 'AEIOU'\n    count = 0\n    for i in\
    \ range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n \
    \   return count", "    return 0\n", "    count = 0\n    for idx, char in enumerate(s):\n\
    \        if char in 'AEIOU' and idx % 2 == 0:\n            count += 1\n    return\
    \ count\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') ==\
    \ 0\nassert count_upper('dBBE') == 0\n\nprint('All tests passed!')\n", "    #\
    \ YOUR CODE HERE\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    return\n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n", "    # YOUR CODE HERE\n", "    return sum(1 for i\
    \ in range(0, len(s), 2) if s[i] in 'AEIOU')\n\nassert count_upper('aBCdEf') ==\
    \ 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n \n",
  "    cnt = 0\n    for i in range(len(s)):\n        if (i % 2 == 0) and (s[i] in\
    \ 'AEIOU'):\n            cnt += 1\n    return cnt\n    \n    \nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\n\
    print('All tests pass!')\n", "    return sum(s[::2].count(c) for c in 'AEIOU')\n\
    \    #return sum(1 for c in s[::2] if c in 'AEIOU') # itertools.count() is faster\n",
  "    # YOUR CODE HERE\n    count = 0\n    for i in range(0, len(s), 2):\n      \
    \  if s[i] in 'AEIOU':\n            count += 1\n    \n    return count\ns = 'aBCdEf'\n\
    s[1::2]\n\ncount_upper(s)\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\nassert count_upper('dBBE') == 0\n\nprint(\"\
    Success!\")\n", "    raise NotImplementedError\n \n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\ncount_upper('aBCdEf')", "    c = 0\n    for\
    \ i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n           \
    \ c += 1\n    return c\n\n", "    # YOUR CODE HERE\n    s = s.upper()\n    count\
    \ = 0\n    for i in range(len(s)):\n        if s[i] in ('A', 'E', 'I', 'O', 'U')\
    \ and i % 2 == 0:\n            count += 1\n    return count\n    raise NotImplementedError()\n\
    assert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n \n \n ", "    # YOUR CODE HERE\n    up_count = 0\n\
    \    vowel = ['A', 'E', 'I', 'O', 'U']\n    for x in range(0, len(s), 2):\n  \
    \      if s[x] in vowel:\n            up_count += 1\n    return up_count", " \
    \   return 0\n", "    return count_vowels(s, True)\n", "    pass\n\n", "    vowels\
    \ = ['A', 'E', 'I', 'O', 'U']\n    return sum([1 for i in range(0, len(s), 2)\
    \ if s[i] in vowels])\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0", "    assert type(s) == str\n    assert\
    \ len(s) >= 0\n    \n    count = 0\n    for i in range(0, len(s), 2):\n      \
    \  if s[i] in 'AEIOU':\n            count += 1\n    return count\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('aBCdEf') == 1\nassert count_upper('dBBE') == 0\nassert\
    \ count_upper('dBBE') == 0\nassert count_upper('dBbE') == 0\nassert count_upper('dBbE')\
    \ == 0\nassert count_upper('dBBbE') == 1\nassert count_upper('dBbE') == 0", " \
    \   return len([i for i in range(0, len(s), 2) if is_upper_vowel(s[i])])\n", " \
    \   return 0\n        ", "    # YOUR CODE HERE\n    counter = 0\n    vowels =\
    \ ['A', 'E', 'I', 'O', 'U']\n    for i in range(0, len(s), 2):\n        if s[i]\
    \ in vowels:\n            counter += 1\n    return counter\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    \ \n \n ", "    evens = s[::2]\n    count = 0\n    upper_vowels = 'AEIOU'\n  \
    \  for x in evens:\n        if x in upper_vowels:\n            count += 1\n  \
    \  return count\n", "    # TODO: Implement this function\n    pass\n\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    \ \n \n ", "    # YOUR CODE HERE\n    count = 0\n    for i in range(len(s)):\n\
    \        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return\
    \ count\n    raise NotImplementedError()\nassert count_upper('aBCdEf') == 1\n\
    assert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n \n", " \
    \   # YOUR CODE HERE\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n ", "    count = 0\n  \
    \  for i in range(len(s)):\n        if i % 2 == 0 and s[i] in VOWELS and s[i].isupper():\n\
    \            count += 1\n    return count\ncount_upper('aBCdEf')\n\ncount_upper('dBBE')\n\
    count_upper('abcdefg')", "    # Your code here. Use a loop and/or a conditional.\n\
    \    counter = 0\n    for i in range(len(s)):\n        if s[i].isupper() and (i\
    \ % 2 == 0):\n            counter += 1\n    return counter\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    \ \n ", "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and\
    \ s[i] in 'AEIOU':\n            count += 1\n    return count\n\n", "    return\
    \ 0\n", "    n = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n\
    \            n += 1\n    return n\n \nassert count_upper('aBCdEf') == 1\nassert\
    \ count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\nassert count_upper('a')\
    \ == 0\nassert count_upper('ab') == 0\nassert count_upper('abc') == 0\nassert\
    \ count_upper('abcd') == 0\nassert count_upper('abce') == 1\nassert count_upper('ABCD')\
    \ == 2\nassert count_upper('ABCE') == 2\nassert count_upper('ABCF') == 1\nassert\
    \ count_upper('ABCG') == 0\nassert count_upper('ABCDE') == 2\nassert count_upper('ABCEF')\
    \ == 1\nassert count_upper('ABCEG') == 0\n \n ", "    count = 0\n    for i in\
    \ range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            count\
    \ += 1\n    return count\n", "    x = 0\n    for i in range(len(s)):\n       \
    \ if s[i].isupper() and i % 2 == 0:\n            x += 1\n    return x\n    ",
  "    counter = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n\
    \            counter += 1\n    return counter\n \nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    \ \n ", "    return 0  # stub\n\n", "    count = 0\n    i = 0\n    while i < len(s):\n\
    \        if (s[i] in VOWELS) and s[i].isupper():\n            count += 1\n   \
    \     i += 2\n    return count\n\n", "    return len([c for i, c in enumerate(s)\
    \ if c in ['A', 'E', 'I', 'O', 'U'] and i % 2 == 0])\ncount_upper('aBCdEf')\n\n\
    count_upper('abcdefg')\n\ncount_upper('dBBE')\n\ncount_upper('AEiou')\n\ncount_upper('er5t')\n\
    \ ", "    c = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in\
    \ 'AEIOU':\n            c += 1\n    return c\ncount_upper('aBCdEf')\n\ncount_upper('abcdefg')\n\
    \ncount_upper('dBBE')\n\ncount_upper('aBbCcDdEeFf')\n\ncount_upper('AbCdEf')\n\
    \nassert count_upper('abcdefg') == 0\nassert count_upper('aBCdEf') == 1\nassert\
    \ count_upper('dBBE') == 0\n\nassert count_upper('aBbCcDdEeFf') == 2\nassert count_upper('AbCdEf')\
    \ == 3\n ", "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0\
    \ and s[i] in 'AEIOU':\n            count += 1\n    return count\n", "    # YOUR\
    \ CODE HERE\n    return 0\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n "]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
