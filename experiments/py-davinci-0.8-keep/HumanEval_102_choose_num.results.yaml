name: HumanEval_102_choose_num
language: py
results:
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    max_even = -1\n    for i in\
    \ range(x, y + 1):\n        if i % 2 == 0 and i > max_even:\n            max_even\
    \ = i\n    return max_even\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y + 1):\n\
    \        if i % 2 == 0:\n            return i\n    return -1\n \ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjdxi_253.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjdxi_253.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpjdxi_253.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n \
    \       if i % 2 == 0:\n            return i\n    return -1\n\nprint(choose_num(13,\
    \ 12))\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: "-1\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9yfwywp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpo9yfwywp.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpo9yfwywp.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n \
    \       if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpevb6qumk.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpevb6qumk.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpevb6qumk.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        x += 1\n        return x\n    if y % 2 == 0:\n\
    \        return y\n    elif y % 2 == 1:\n        y -= 1\n        return y\n\n\
    print(choose_num(12, 15))\nprint(choose_num(13, 12))\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: "12\n14\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvrav45xb.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvrav45xb.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpvrav45xb.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    assert x >= 0 and y >= 0\n\
    \    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n\
    \    return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    numbers = [num for num in range(x,\
    \ y + 1) if num % 2 == 0]\n    return max(numbers) if numbers else -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkz9y8c0g.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpkz9y8c0g.py\", line 23,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpkz9y8c0g.py\", line 13,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    number\
    \ = 0\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            number\
    \ = i\n    if number == 0:\n        return -1\n    else:\n        return number\n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    even_list = []\n    if y >=\
    \ x:\n        for i in range(x, y+1):\n            if i % 2 == 0:\n          \
    \      even_list.append(i)\n        if len(even_list) > 0:\n            return\
    \ max(even_list)\n        else:\n            return -1\n    else:\n        return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    return -1\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3d0rtdke.py\", line\
    \ 278, in <module>\n    test_check()\n  File \"/tmp/tmp3d0rtdke.py\", line 276,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3d0rtdke.py\", line 266,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    i = y\n    while i >= x:\n\
    \        if i % 2 == 0:\n            return i\n        i -= 1\n    return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp66k0d9h8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp66k0d9h8.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp66k0d9h8.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # compute the even numbers\
    \ from x to y, inclusive\n    evens = [n for n in range(x, y + 1) if n % 2 ==\
    \ 0]\n    # if there are even numbers, then return the largest one\n    if evens:\n\
    \        return max(evens)\n    # if there are no even numbers, then return -1\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        for i in\
    \ range(y, x-1, -1):\n            if i % 2 == 0:\n                return i\n \
    \   else:\n        for i in range(x, y-1, -1):\n            if i % 2 == 0:\n \
    \               return i\n    return -1\n\nchoose_num(12, 15)\nchoose_num(13,\
    \ 12)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplmp9of3m.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmplmp9of3m.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplmp9of3m.py\", line 25,\
    \ in check\n    assert candidate(13, 12) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_5_d1p9.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8_5_d1p9.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp8_5_d1p9.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n \
    \       if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx52836_4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpx52836_4.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpx52836_4.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Convert x, y to integers\
    \ in range [0, 100]\n    x = int(x) % 100\n    y = int(y) % 100\n\n    # Compute\
    \ the desired number\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n\
    \            return num\n    return -1\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjc7qi33x.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpjc7qi33x.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpjc7qi33x.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y + 1):\n\
    \        if i % 2 == 0:\n            return i\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprfmope0i.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprfmope0i.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprfmope0i.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3xw49pp.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmps3xw49pp.py\", line 23,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmps3xw49pp.py\", line 13,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        smallest_even\
    \ = x\n    else:\n        smallest_even = x + 1\n    if smallest_even > y:\n \
    \       return -1\n    return y - (y - smallest_even) % 2\n    # for i in range(x,\
    \ y + 1):\n    #     if i % 2 == 0:\n    #         return i\n    # return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi74tktsj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpi74tktsj.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpi74tktsj.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n\
    \    return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    res = -1\n    for i in range(x,\
    \ y + 1):\n        if i % 2 == 0:\n            res = i\n    return res\n\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp36kuf5bs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp36kuf5bs.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp36kuf5bs.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y + 1):\n\
    \        if i % 2 == 0:\n            return i\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7kr9nw05.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7kr9nw05.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7kr9nw05.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # range function takes in two\
    \ arguments, start and stop, and creates a \n    # range of integers that starts\
    \ at start and stops at stop - 1\n    even_nums = [num for num in range(x, y +\
    \ 1) if num % 2 == 0]\n    if len(even_nums) > 0:\n        return max(even_nums)\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    return # your code here\n\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33iclr_u.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp33iclr_u.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp33iclr_u.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y + 1):\n\
    \        if i % 2 == 0:\n            return i\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpocf0wxky.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpocf0wxky.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpocf0wxky.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    elif x == y:\n        if x % 2 == 0:\n            return x\n        else:\n\
    \            return -1\n    else:\n        for number in range(y, x-1, -1):\n\
    \            if number % 2 == 0:\n                return number\n        return\
    \ -1\n\nprint(choose_num(3, 7))\nprint(choose_num(14, 15))\nprint(choose_num(8,\
    \ 7))\nprint(choose_num(15, 15))\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: "6\n14\n-1\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: finish the function\n\
    \    even = []\n    for i in range(x, y+1):\n        if i % 2 == 0:\n        \
    \    even.append(i)\n    return -1 if not even else max(even)\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    assert x > 0 and y > 0, \"\
    Error: x and y should be positive!\"\n    assert x <= y, \"Error: x should be\
    \ smaller than y!\"\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n\
    \            return i\n    return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb6539kjr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb6539kjr.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpb6539kjr.py\", line 19,\
    \ in check\n    assert candidate(13, 12) == -1\n  File \"/tmp/tmpb6539kjr.py\"\
    , line 11, in choose_num\n    assert x <= y, \"Error: x should be smaller than\
    \ y!\"\nAssertionError: Error: x should be smaller than y!\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # You need to figure out how\
    \ you can find the biggest even integer\n    # number in the range [x, y] inclusive.\n\
    \n    if x % 2 == 0:\n        if x > y:\n            return -1\n        else:\n\
    \            return x\n    else:\n        return choose_num(x+1, y)\n\nassert\
    \ choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1\nassert choose_num(13,\
    \ 14) == 14\nassert choose_num(13, 16) == 14\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzwiosl13.py\", line\
    \ 21, in <module>\n    assert choose_num(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    output = 0\n    if x % 2 ==\
    \ 0:\n        output = x\n    else:\n        x += 1\n        output = x\n    while\
    \ output < y:\n        output += 2\n    if output > y:\n        output = -1\n\
    \    return output\n\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3v3y49hl.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3v3y49hl.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3v3y49hl.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    elif x % 2 == 0:\n        return x\n    else:\n        return x + 1\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr7dkymrb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpr7dkymrb.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpr7dkymrb.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    num = -1\n    for x in range(x,\
    \ y+1):\n        if (x % 2 == 0) and (x > num):\n            num = x\n    return\
    \ num\n\n\n\"\"\"Functions for Question 4\"\"\"\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    biggest = -1\n    for num in\
    \ range(x, y + 1):\n        if num % 2 == 0 and num > biggest:\n            biggest\
    \ = num\n    return biggest\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \        \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2mbwgbl2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2mbwgbl2.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp2mbwgbl2.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    assert type(x) == int and type(y)\
    \ == int and x <= y, \\\n        \"choose_num: error: non-integer input\"\n  \
    \  if x % 2 == 0:\n        return x\n    else:\n        return x + 1\n \ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51xa_8ha.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp51xa_8ha.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp51xa_8ha.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ -1\n    else:\n        for i in range(x, y + 1):\n            if i % 2 == 0:\n\
    \                return i\n                break\n        else:\n            return\
    \ -1\n            \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4i0tviay.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp4i0tviay.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4i0tviay.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # If x is even and x is in\
    \ range [x, y]\n    if x % 2 == 0 and x in range(x, y + 1):\n        return x\n\
    \    # If x is odd and (x + 1) is in range [x, y]\n    elif x % 2 == 1 and (x\
    \ + 1) in range(x, y + 1):\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqknnx7ex.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqknnx7ex.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqknnx7ex.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    else:\n        if x+1 > y:\n            return -1\n        else:\n  \
    \          return x+1\n\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw3hh93mn.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpw3hh93mn.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpw3hh93mn.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n \
    \       if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptue3ew6x.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptue3ew6x.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmptue3ew6x.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    else:\n        if y % 2 == 0:\n            return y\n        else:\n    \
    \        return y - 1\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfbpo7ytk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfbpo7ytk.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpfbpo7ytk.py\", line 25,\
    \ in check\n    assert candidate(7, 7) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(x, y+1):\n\
    \        if num % 2 == 0:\n            return num\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnnxttv_x.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnnxttv_x.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpnnxttv_x.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        if x %\
    \ 2 == 0:\n            return x\n        elif y % 2 == 0:\n            return\
    \ y\n        else:\n            return -1\n    else:\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8og_o2kn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp8og_o2kn.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp8og_o2kn.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2==0\
    \ and y%2==0:\n        if x<y:\n            return y\n        else:\n        \
    \    return x\n    elif x%2==0 and y%2!=0:\n        return y-1\n    elif x%2!=0\
    \ and y%2==0:\n        return x\n    else:\n        if x<y:\n            return\
    \ x+1\n        else:\n            return y+1\n    # If you get to this point,\
    \ then none of the conditionals were true, so you\n    # return -1 here\n    return\
    \ -1\n\nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5whj2ylz.py\", line\
    \ 30, in <module>\n    assert choose_num(13, 12) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    raise NotImplementedError()\n\
    \ \n \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdpker4bj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdpker4bj.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdpker4bj.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpdpker4bj.py\"\
    , line 10, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if (x <= y):\n        if (x\
    \ % 2 == 0):\n            return x\n        else:\n            return x + 1\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbw1m8cfn.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbw1m8cfn.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpbw1m8cfn.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    assert type(x) == int and type(y)\
    \ == int, \"The arguments to choose_num must be integers.\"\n    assert x >= 0\
    \ and y >= 0, \"The arguments to choose_num must be positive.\"\n    assert x\
    \ <= y, \"The second argument must be larger than the first.\"\n    raise NotImplementedError\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqkpdd14x.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqkpdd14x.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqkpdd14x.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpqkpdd14x.py\"\
    , line 13, in choose_num\n    raise NotImplementedError\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    raise NotImplementedError\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf1x9illn.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpf1x9illn.py\", line 23,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpf1x9illn.py\", line 13,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpf1x9illn.py\"\
    , line 10, in choose_num\n    raise NotImplementedError\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    else:\n        return x+1\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5jwjclrf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5jwjclrf.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5jwjclrf.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x if x > y else y\n    else:\n        return x + 1 if x < y else -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe3ehkyl_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpe3ehkyl_.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpe3ehkyl_.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Write code here\n    if x>y:\n\
    \        return -1\n    elif x%2 == 0:\n        return x\n    else:\n        return\
    \ x+1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpednedeik.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpednedeik.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpednedeik.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    bigger = max(x, y)\n    smaller\
    \ = min(x, y)\n    if bigger % 2 == 0:\n        return bigger\n    elif smaller\
    \ % 2 == 0:\n        return smaller\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6sjbgxo0.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6sjbgxo0.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp6sjbgxo0.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    even_nums = []\n    for num\
    \ in range(x, y + 1):\n        if num % 2 == 0:\n            even_nums.append(num)\n\
    \    if even_nums == []:\n        return -1\n    else:\n        return max(even_nums)\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    #TODO: Write your code here\n\
    \n    return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcweio_on.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcweio_on.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpcweio_on.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe4luajvv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpe4luajvv.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpe4luajvv.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprt_f7t2e.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprt_f7t2e.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprt_f7t2e.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if y < x:\n        return -1\n\
    \    else:\n        for i in range(y, x-1, -1):\n            if i % 2 == 0:\n\
    \                return i\n        return -1\n\nprint(choose_num(12, 15))\nprint(choose_num(13,\
    \ 12))\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: "14\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for n in range(x, y+1):\n \
    \       if n % 2 == 0:\n            return n\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdlskw6gw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpdlskw6gw.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdlskw6gw.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y + 1):\n\
    \        if i % 2 == 0:\n            return i\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5zi3tbkz.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5zi3tbkz.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5zi3tbkz.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Find the maximum even number\n\
    \    max_even = -1\n    for num in range(x, y + 1):\n        if (num % 2 == 0)\
    \ and (num > max_even):\n            max_even = num\n    return max_even\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    num = -1\n    for i in range(x,\
    \ y + 1):\n        if i % 2 == 0:\n            num = i\n    return num\n\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: Implement this function.\n\
    \    # Hint: Use a while loop, a break statement, and an if statement.\n    #\
    \ You might find the modulo operator (%) helpful. Remember that modulo\n    #\
    \ performs a remainder operation, and you can think of an even number as\n   \
    \ # a number which has remainder 0 when divided by 2.\n    x = int(x)\n    y =\
    \ int(y)\n    if (x > y) or (x < 0) or (y < 0):\n        return -1\n    while\
    \ x <= y:\n        if x % 2 == 0:\n            return x\n        x += 1\n    return\
    \ -1\n\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvpsmdoe.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpuvpsmdoe.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpuvpsmdoe.py\", line 28,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        biggest_even\
    \ = x\n    else:\n        biggest_even = x + 1\n    for number in range(x + 1,\
    \ y + 1):\n        if number % 2 == 0 and number > biggest_even:\n           \
    \ biggest_even = number\n    if biggest_even > y:\n        return -1\n    else:\n\
    \        return biggest_even\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    assert type(x) == int and type(y)\
    \ == int and x > 0 and y > 0, \\\n           \"Please enter positive integers\
    \ for both inputs.\"\n    for i in range(x, y+1):\n        if i % 2 == 0:\n  \
    \          return i\n    return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2u6lahc1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2u6lahc1.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp2u6lahc1.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n \
    \       if i % 2 == 0:\n            return i\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezhpkeiv.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezhpkeiv.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpezhpkeiv.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: Make sure to test your\
    \ code as you go!\n    answer = -1\n    if x < 0 or y < 0:\n        return -1\n\
    \    if x > y:\n        return -1\n    for num in range(x, y+1):\n        if num\
    \ % 2 == 0:\n            answer = num\n    return answer\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n \n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6fkzryk7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6fkzryk7.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp6fkzryk7.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmp6fkzryk7.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # This is a stub. Replace with\
    \ appropriate return value.\n    return 0\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvn0qyw0b.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvn0qyw0b.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpvn0qyw0b.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n \n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskpd7rmu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpskpd7rmu.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpskpd7rmu.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpskpd7rmu.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code goes here\n\n \
    \   while(x <= y):\n        if(x % 2 == 0):\n            return x\n        x =\
    \ x + 1\n    return -1\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe0y786wv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpe0y786wv.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpe0y786wv.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        x =\
    \ x\n    else:\n        x = x + 1\n    while x <= y:\n        if x % 2 == 0:\n\
    \            return x\n        else:\n            x = x + 1\n    return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7orh4ljc.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp7orh4ljc.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7orh4ljc.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    ...\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7nazxkvv.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7nazxkvv.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7nazxkvv.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    if x % 2 == 0:\n        return x\n    return choose_num(x + 1, y)\n\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp659o15vb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp659o15vb.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp659o15vb.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        if\
    \ y % 2 == 0:\n            return y\n        else:\n            return y - 1\n\
    \    else:\n        if y % 2 == 0:\n            return y\n        else:\n    \
    \        return y - 1\n\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpocwtj2ue.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpocwtj2ue.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpocwtj2ue.py\", line 24,\
    \ in check\n    assert candidate(13, 12) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ > y:\n        return -1\n    elif x % 2 == 0:\n        return x\n    else:\n\
    \        return choose_num(x + 1, y)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpanc3fn09.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpanc3fn09.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpanc3fn09.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Complete the code here\n\n\
    print(\"Testing choose_num() function\\n\")\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: "Testing choose_num() function\n\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5jjz06ci.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5jjz06ci.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5jjz06ci.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ != 0:\n        x+=1\n    if y%2 != 0:\n        y-=1\n    if x>y:\n        return\
    \ -1\n    for i in range(x,y+1,2):\n        return i\nchoose_num(13,12)\n\nassert\
    \ choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1\nassert choose_num(100,\
    \ 500) == 500\nassert choose_num(300, 550) == 500\nassert choose_num(500, 300)\
    \ == -1\n \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_qjzgha.py\", line\
    \ 21, in <module>\n    assert choose_num(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x%2 == 0:\n        even\
    \ = x\n    else:\n        even = x + 1\n    while even <= y:\n        if even%2\
    \ == 0:\n            return even\n        even += 2\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprd09mv37.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmprd09mv37.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprd09mv37.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    pass\n \n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwo8vhcx2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwo8vhcx2.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpwo8vhcx2.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    else:\n        for i in range(x+1, y+1):\n\
    \            if i % 2 == 0:\n                return i\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9x8im_kf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9x8im_kf.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp9x8im_kf.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    else:\n        for number in range(y, x-1, -1):\n            if number %\
    \ 2 == 0:\n                return number\n        return -1\n\nprint(choose_num(12,\
    \ 15))\nprint(choose_num(13, 12))\nprint(choose_num(13, 12))\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: "14\n-1\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        if y %\
    \ 2 == 0:\n            return y\n        elif x % 2 == 0:\n            return\
    \ x\n        else:\n            return -1\n    else:\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcws63lyt.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpcws63lyt.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpcws63lyt.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n \
    \       if i % 2 == 0:\n            return i\n    return -1\n\nassert choose_num(12,\
    \ 15) == 14\nassert choose_num(13, 12) == -1\n \ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeipj2375.py\", line\
    \ 15, in <module>\n    assert choose_num(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    else:\n        if x+1 < y:\n            return x+1\n        else:\n \
    \           return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpui226xuc.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpui226xuc.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpui226xuc.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    start\
    \ = x + x % 2\n    end = y - y % 2 + 2\n    return max(range(start, end, 2)) if\
    \ start <= end else -1\n\nassert choose_num(12, 15) == 14\nassert choose_num(13,\
    \ 12) == -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1dzeev_q.py\", line\
    \ 16, in <module>\n    assert choose_num(13, 12) == -1\n  File \"/tmp/tmp1dzeev_q.py\"\
    , line 13, in choose_num\n    return max(range(start, end, 2)) if start <= end\
    \ else -1\nValueError: max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO 4: write the code for\
    \ the function here and then delete this comment.\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf58xf3fa.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf58xf3fa.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpf58xf3fa.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y + 1):\n\
    \        if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3xwqjo1m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3xwqjo1m.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3xwqjo1m.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        if\
    \ y % 2 == 0:\n            return y\n        else:\n            return x\n   \
    \ else:\n        if y % 2 == 0:\n            return y\n        else:\n       \
    \     return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpodlypkxb.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpodlypkxb.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpodlypkxb.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y + 1):\n\
    \        if (i % 2 == 0):\n            return i\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpctogxa2j.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpctogxa2j.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpctogxa2j.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n\
    \    return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n \
    \       if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplhjvq_v0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplhjvq_v0.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplhjvq_v0.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n \
    \       if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt597dwev.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpt597dwev.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpt597dwev.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    count = 0\n    for i in range(x,\
    \ y+1):\n        if i % 2 == 0:\n            count += 1\n    if count == 0:\n\
    \        return -1\n    else:\n        return i\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3160wwfp.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp3160wwfp.py\", line 49,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3160wwfp.py\", line 39,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    even_nums = [i for i in range(x,\
    \ y + 1) if i % 2 == 0]\n    if len(even_nums) == 0:\n        return -1\n    else:\n\
    \        return max(even_nums)\n    \n \ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Creates a list of all even\
    \ numbers in the range x and y\n    even_nums = [num for num in range(x, y + 1)\
    \ if num % 2 == 0]\n    # Takes the biggest even number in the range or returns\
    \ -1\n    return max(even_nums) if even_nums else -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuxe0cv8r.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpuxe0cv8r.py\", line 23,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpuxe0cv8r.py\", line 13,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    ## START HERE\n    num = -1\n\
    \    for i in range(x, y+1):\n        if i % 2 == 0:\n            num = i\n  \
    \  return num\n\nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) ==\
    \ -1\nassert choose_num(15, 15) == 15\nassert choose_num(0, -3) == -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkoipu_aw.py\", line\
    \ 19, in <module>\n    assert choose_num(15, 15) == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        res\
    \ = x\n    else:\n        res = x + 1\n    if res < y:\n        return res\n \
    \   else:\n        return -1\n    pass\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprnl2e1hr.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmprnl2e1hr.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprnl2e1hr.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3q6uqwmw.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp3q6uqwmw.py\", line 23,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3q6uqwmw.py\", line 13,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n \
    \       if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp34d1jwfm.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp34d1jwfm.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp34d1jwfm.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n \
    \       if i % 2 == 0:\n            return i\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmm2odr5q.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpmm2odr5q.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpmm2odr5q.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # you code here\n    if x %\
    \ 2 != 0:\n        x = x + 1\n    if y % 2 != 0:\n        y = y - 1\n    if x\
    \ > y:\n        return -1\n    else:\n        return y\n    \n    \nprint(choose_num(13,\
    \ 12))\nprint(choose_num(12, 15))\nprint(choose_num(12, 12))\nprint(choose_num(14,\
    \ 15))\n\nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1\nassert\
    \ choose_num(13, 13) == -1\nassert choose_num(12, 12) == 12\nassert choose_num(14,\
    \ 15) == 14\n\nprint(\"All tests passed!\")\n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: "-1\n14\n12\n14\nAll tests passed!\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # your code here\n    e_num\
    \ = []\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            e_num.append(i)\n\
    \    if len(e_num) == 0:\n        return -1\n    else:\n        return max(e_num)\n\
    \n\nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1\nassert choose_num(2,\
    \ 2) == 2\nassert choose_num(4, 4) == 4\nassert choose_num(18, 15) == 18\nassert\
    \ choose_num(30, 31) == 30\nassert choose_num(14, 14) == 14\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ivke5d8.py\", line\
    \ 25, in <module>\n    assert choose_num(18, 15) == 18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if not (x <= y):\n        return\
    \ -1\n    if x % 2 == 0:\n        return y - x\n    return y - x - 1\n\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg24ro2og.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg24ro2og.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpg24ro2og.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ y - x\n    else:\n        return y - x - 1\n        \n\"\"\"\nPython provides\
    \ a built-in function called type that can be used to figure out\nthe type of\
    \ any object.\n\nCall the type function to determine the type of the following\
    \ object:\n\"\"\"\n\ntype(\"Hello World!\")\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphx5vv_7k.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphx5vv_7k.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmphx5vv_7k.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        for\
    \ i in range(x, y + 1, 2):\n            if i % 2 == 0:\n                x = i\n\
    \    else:\n        for i in range(x + 1, y + 1, 2):\n            if i % 2 ==\
    \ 0:\n                x = i\n    if x % 2 == 0:\n        return x\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd3fje9zg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpd3fje9zg.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpd3fje9zg.py\", line 28,\
    \ in check\n    assert candidate(5234, 5233) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    x = int(x)\n    y = int(y)\n\
    \    biggest_even = -1\n    for num in range(x, y + 1):\n        if num % 2 ==\
    \ 0:\n            biggest_even = num\n    return biggest_even\n    \n    \n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        for i in\
    \ range(y, x-1, -1):\n            if i % 2 == 0:\n                return i\n \
    \       return -1\n    return -1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x%2 != 0:\n        x +=\
    \ 1\n    if y%2 != 0:\n        y -= 1\n    if x > y:\n        return -1\n    else:\n\
    \        return y\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    else:\n        x += 1\n    if x > y:\n        return -1\n    else:\n\
    \        return x\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqt2uhbc.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfqt2uhbc.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpfqt2uhbc.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    assert x > 0 and y > 0, \"\
    Numbers have to be positive!\"\n    if x % 2 == 0:\n        if x == y:\n     \
    \       return x\n        return choose_num(x + 2, y)\n    if x % 2 == 1:\n  \
    \      if x + 1 == y:\n            return -1\n        return choose_num(x + 1,\
    \ y)\n\nprint(choose_num(11, 19))\nprint(choose_num(11, 18))\nprint(choose_num(10,\
    \ 18))\nprint(choose_num(10, 17))\nprint(choose_num(11, 20))\nprint(choose_num(7,\
    \ 15))\nprint(choose_num(11, 23))\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe5faoh_3.py\", line\
    \ 20, in <module>\n    print(choose_num(11, 19))\n  File \"/tmp/tmpe5faoh_3.py\"\
    , line 18, in choose_num\n    return choose_num(x + 1, y)\n  File \"/tmp/tmpe5faoh_3.py\"\
    , line 14, in choose_num\n    return choose_num(x + 2, y)\n  File \"/tmp/tmpe5faoh_3.py\"\
    , line 14, in choose_num\n    return choose_num(x + 2, y)\n  File \"/tmp/tmpe5faoh_3.py\"\
    , line 14, in choose_num\n    return choose_num(x + 2, y)\n  [Previous line repeated\
    \ 994 more times]\n  File \"/tmp/tmpe5faoh_3.py\", line 10, in choose_num\n  \
    \  assert x > 0 and y > 0, \"Numbers have to be positive!\"\nRecursionError: maximum\
    \ recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    x = choose_num(12, 15)\n  \
    \  y = choose_num(13, 12)\n    return x, y\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_71gorg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpa_71gorg.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa_71gorg.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpa_71gorg.py\"\
    , line 10, in choose_num\n    x = choose_num(12, 15)\n  File \"/tmp/tmpa_71gorg.py\"\
    , line 10, in choose_num\n    x = choose_num(12, 15)\n  File \"/tmp/tmpa_71gorg.py\"\
    , line 10, in choose_num\n    x = choose_num(12, 15)\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    assert x <= y and x > 0 and\
    \ y > 0\n\n    result = -1\n    for i in range(x, y + 1):\n        if i % 2 ==\
    \ 0:\n            result = i\n    return result\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbpcxy1m1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbpcxy1m1.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpbpcxy1m1.py\", line 20,\
    \ in check\n    assert candidate(13, 12) == -1\n  File \"/tmp/tmpbpcxy1m1.py\"\
    , line 10, in choose_num\n    assert x <= y and x > 0 and y > 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x == y:\n        if x %\
    \ 2 == 0:\n            return x\n        else:\n            return -1\n    elif\
    \ x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n\
    \        return -1\n \ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphv4apnjj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmphv4apnjj.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmphv4apnjj.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\nfrom bwsi_grader.python.exam2 import grader2\ngrader2(choose_num)\n\
    \ \nfrom bwsi_grader.python.exam2 import grader3\ngrader3(choose_num)\n \nfrom\
    \ bwsi_grader.python.exam2 import grader4\ngrader4(choose_num)\n \n \ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpung2v__t.py\", line\
    \ 12, in <module>\n    from bwsi_grader.python.exam2 import grader2\nModuleNotFoundError:\
    \ No module named 'bwsi_grader'\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgcnznl1l.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgcnznl1l.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpgcnznl1l.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Check that both numbers are\
    \ positive\n    assert (x > 0 and y > 0), \"Both x and y should be positive numbers\"\
    \n    # Check that y is greater than x\n    assert y > x, \"y should be greater\
    \ than x\"\n    # Check that both numbers are integers\n    assert (type(x) ==\
    \ int and type(y) == int), \"Both x and y should be integers\"\n    # Implement\
    \ the function body below\n\n    list_of_evens = []\n    for i in range(x, y+1):\n\
    \        if i % 2 == 0:\n            list_of_evens.append(i)\n    if len(list_of_evens)\
    \ == 0:\n        return -1\n    else:\n        return max(list_of_evens)\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy66v6ypl.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpy66v6ypl.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpy66v6ypl.py\", line 29,\
    \ in check\n    assert candidate(13, 12) == -1\n  File \"/tmp/tmpy66v6ypl.py\"\
    , line 13, in choose_num\n    assert y > x, \"y should be greater than x\"\nAssertionError:\
    \ y should be greater than x\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Task 1.1\n\n    # In the\
    \ function that has been given, there are two bugs\n    # 1. The input variables\
    \ should be integers as there is no reason to accept\n    #    a float. The reason\
    \ for this is that floats only provide limited\n    #    accuracy and can be very\
    \ inaccurate.\n    # 2. The function is missing a return statement. To fix this\
    \ we can add the\n    #    line, \"return -1\" so that when there is no such number,\
    \ the function\n    #    will return -1.\n    # 3. We should use the x and y variables\
    \ that were given rather than\n    #    re-declaring them as it will save memory\
    \ and keep the program efficient.\n    # 4. The brackets are unnecessary as the\
    \ range function already provides\n    #    the desired output.\n    # 5. The\
    \ function is not very clear and concise as it is not very\n    #    descriptive,\
    \ so we should change the name to something such as\n    #    \"choose_num\" or\
    \ \"find_even_in_range\" to make it clearer.\n    # 6. The function is not very\
    \ versatile as it will only work with even\n    #    numbers, so we could add\
    \ an optional boolean parameter to allow the\n    #    programmer to specify whether\
    \ they want the biggest even or the\n    #    biggest odd.\n\n    for i in range(x,\
    \ y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp72zqefz9.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp72zqefz9.py\", line 48,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp72zqefz9.py\", line 38,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        if y %\
    \ 2 == 0:\n            return y\n        elif y - 1 > x:\n            return y\
    \ - 1\n        else:\n            return -1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    raise NotImplementedError(\"\
    choose_num is not implemented\")\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpht7yq45_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpht7yq45_.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpht7yq45_.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpht7yq45_.py\"\
    , line 10, in choose_num\n    raise NotImplementedError(\"choose_num is not implemented\"\
    )\nNotImplementedError: choose_num is not implemented\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    def get_max_even(x: int, y:\
    \ int) -> int:\n        if y % 2 == 0:\n            return y\n        else:\n\
    \            return y - 1\n    if x > y:\n        return -1\n    if x % 2 == 0:\n\
    \        return get_max_even(x, y)\n    else:\n        return get_max_even(x +\
    \ 1, y)\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpphqj55i4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpphqj55i4.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpphqj55i4.py\", line 30,\
    \ in check\n    assert candidate(7, 7) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz1ud_oo5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpz1ud_oo5.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpz1ud_oo5.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code goes here!\n  \
    \  nums = []\n    for i in range(x, y+1):\n        if i % 2 == 0:\n          \
    \  nums.append(i)\n    if len(nums) == 0:\n        return -1\n    return max(nums)\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    pass # TODO: Implement\n  \
    \  counter = 0\n    even = []\n    for i in range(x, y + 1):\n        if (i %\
    \ 2) == 0:\n            even.append(i)\n            counter += 1\n    if counter\
    \ == 0:\n        return -1\n    else:\n        return even[-1]\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    counter = 0\n    if x <= y:\n\
    \        if x % 2 == 0:\n            x = x\n        else:\n            x = x +\
    \ 1\n        while counter < y:\n            if x <= y:\n                x = x\
    \ + 2\n                counter = x\n            else:\n                counter\
    \ = -1\n    else:\n        counter = -1\n    return counter\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp52qra98a.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp52qra98a.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp52qra98a.py\", line 28,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ max(range(x, y + 1, 2))\n    else:\n        return max(range(x + 1, y + 1, 2))\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyi8e5jfw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyi8e5jfw.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpyi8e5jfw.py\", line 17,\
    \ in check\n    assert candidate(13, 12) == -1\n  File \"/tmp/tmpyi8e5jfw.py\"\
    , line 13, in choose_num\n    return max(range(x + 1, y + 1, 2))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    elif y % 2 == 0:\n        return y\n    else:\n        return y - 1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd2krn0a6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd2krn0a6.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpd2krn0a6.py\", line 24,\
    \ in check\n    assert candidate(7, 7) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TASK 3\n    #\n    # Set\
    \ the variable biggest_even to the biggest even number in the range\n    # [x,\
    \ y] inclusive. If there is no such number then set it to -1.\n    #\n    # Hint:\
    \ Look into the max(), min(), and range() functions in the Python\n    # Standard\
    \ Library. \n    #\n    # YOUR CODE HERE\n    biggest_even = 0\n\n    for i in\
    \ range(x, y+1):\n        if i % 2 == 0:\n            biggest_even = i\n\n   \
    \ if biggest_even == 0:\n        biggest_even = -1\n\n    return biggest_even\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuho3h163.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpuho3h163.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpuho3h163.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Write your implementation\
    \ here\n    if x % 2 == 0:\n        return x\n    else:\n        return x + 1\n\
    \n    if choose_num(12, 15) == 14:\n        print(\"Test 1 successful\")\n   \
    \ else:\n        print(\"Test 1 failed\")\n\n    if choose_num(13, 12) == -1:\n\
    \        print(\"Test 2 successful\")\n    else:\n        print(\"Test 2 failed\"\
    )\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5jehshox.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp5jehshox.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5jehshox.py\", line 28,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # write your code here\n  \
    \  even_list = []\n    for i in range(x, y+1):\n        if i % 2 == 0:\n     \
    \       even_list.append(i)\n    if len(even_list) == 0:\n        return -1\n\
    \    else:\n        return max(even_list)\n\nprint(choose_num(12, 15))\nprint(choose_num(13,\
    \ 12))\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: "14\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    largest_even = -1\n    for\
    \ num in range(x, y + 1):\n        if num % 2 == 0 and num > largest_even:\n \
    \           largest_even = num\n    return largest_even\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    raise NotImplementedError(\"\
    Function not implemented yet\")\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgogphhcs.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpgogphhcs.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpgogphhcs.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpgogphhcs.py\"\
    , line 10, in choose_num\n    raise NotImplementedError(\"Function not implemented\
    \ yet\")\nNotImplementedError: Function not implemented yet\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    bigger_num = 0\n    while x\
    \ <= y:\n        if x % 2 == 0:\n            bigger_num = x\n        x += 1\n\
    \    if bigger_num == 0:\n        return -1\n    return bigger_num\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        if x % 2\
    \ == 0:\n            return x\n        elif x + 1 <= y:\n            return x\
    \ + 1\n        else:\n            return -1\n    elif x > y:\n        if y % 2\
    \ == 0:\n            return y\n        elif y + 1 <= x:\n            return y\
    \ + 1\n        else:\n            return -1\n    else:\n        if x % 2 == 0:\n\
    \            return x\n        else:\n            return -1\n\nprint(choose_num(12,\
    \ 15))\nprint(choose_num(13, 12))\nprint(choose_num(14, 14))\nprint(choose_num(15,\
    \ 12))\n\nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1\nassert\
    \ choose_num(14, 14) == 14\nassert choose_num(15, 12) == -1\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: "12\n12\n14\n12\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0fw8bjwv.py\", line\
    \ 35, in <module>\n    assert choose_num(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    raise NotImplementedError\n\
    \ \n    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpft4jtt_p.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpft4jtt_p.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpft4jtt_p.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpft4jtt_p.py\"\
    , line 10, in choose_num\n    raise NotImplementedError\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppoq6gcev.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmppoq6gcev.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmppoq6gcev.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmppoq6gcev.py\"\
    , line 10, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        # x\
    \ is even\n        return x\n    elif x + 1 <= y:\n        # we can return the\
    \ next even number from x\n        return x + 2\n    else:\n        # there's\
    \ no even number in [x, y]\n        return -1\n\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkj85u5c5.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkj85u5c5.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpkj85u5c5.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        for i in\
    \ range(y, x-1, -1):\n            if i % 2 == 0:\n                return i\n \
    \       return -1\n    else:\n        return -1\n\n\ndef check(candidate):\n \
    \   assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y + 1):\n\
    \        if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjykcdzxz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjykcdzxz.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpjykcdzxz.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    largest\
    \ = 0\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            if i\
    \ > largest:\n                largest = i\n    if largest == 0:\n        return\
    \ -1\n    else:\n        return largest\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    return choose_num(x + 1, y)\n        \n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf80cd3sm.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpf80cd3sm.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpf80cd3sm.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    assert x <= y\n    assert x\
    \ > 0 and y > 0\n    # YOUR CODE HERE\n    raise NotImplementedError()\n \ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz_0uwo1s.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpz_0uwo1s.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpz_0uwo1s.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpz_0uwo1s.py\"\
    , line 13, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # start by checking if x is\
    \ even\n    if x % 2 == 0:\n        if x < y:\n            return x\n        else:\n\
    \            return -1\n    else:\n        if x + 1 < y:\n            return x\
    \ + 1\n        else:\n            return -1\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdvazqbky.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpdvazqbky.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdvazqbky.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    #TODO: Write your code here!\n\
    \    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n \
    \   return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptk33b8__.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptk33b8__.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmptk33b8__.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n    return 42\n\nassert choose_num(12, 15) == 14\nassert\
    \ choose_num(13, 12) == -1\nprint(\"Congratulations! You've passed the task!\"\
    )\n \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp74_8pimj.py\", line\
    \ 14, in <module>\n    assert choose_num(12, 15) == 14\n  File \"/tmp/tmp74_8pimj.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Write your code here\n  \
    \  # Hint: You can solve this question using the sum() function\n    return 0\n\
    \n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxhz38e1g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpxhz38e1g.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxhz38e1g.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # To be completed.\n    \n\
    \    return # What should be returned?\n \nassert choose_num(12, 15) == 14\nassert\
    \ choose_num(13, 12) == -1\n \ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpejwyv_p3.py\", line\
    \ 14, in <module>\n    assert choose_num(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    ...\n \n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmv9duq9s.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpmv9duq9s.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpmv9duq9s.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: Implement choose_num()\
    \ here.\n    x = max(x, y)\n    y = min(x, y)\n    while x >= y:\n        if x\
    \ % 2 == 0:\n            return x\n        x -= 1\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp500f52g2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp500f52g2.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp500f52g2.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    new_list = list(range(x, y\
    \ + 1))\n    # TODO: complete the function\n    # Hint: you can use for-loop and\
    \ if-statement\n    for num in new_list:\n        if num % 2 == 0:\n         \
    \   return num\n    return -1\n\nprint(choose_num(12, 15))\nprint(choose_num(13,\
    \ 12))\nprint(choose_num(1, 5))\nprint(choose_num(15, 1))\nprint(choose_num(11,\
    \ 5))\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: "12\n-1\n2\n-1\n-1\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpidvn_v1w.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpidvn_v1w.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpidvn_v1w.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(x, y+1):\n\
    \        if num % 2 == 0:\n            return num\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpynxtiirz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpynxtiirz.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpynxtiirz.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    n = x\n    while n <= y:\n\
    \        if n % 2 == 0:\n            return n\n        n += 1\n    return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxfdfm9jh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxfdfm9jh.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxfdfm9jh.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        start\
    \ = x\n    else:\n        start = x + 1\n    if y % 2 == 0:\n        end = y\n\
    \    else:\n        end = y - 1\n    if start > end:\n        return -1\n    else:\n\
    \        return end\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprj08g_7i.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprj08g_7i.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprj08g_7i.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # your code here\n    i = y\n\
    \    while (i >= x):\n        if (i % 2 == 0):\n            return i\n       \
    \ i -= 1\n    return -1\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    even_nums = [num for num in\
    \ range(x, y + 1) if num % 2 == 0]\n    return max(even_nums) if even_nums else\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    return choose_num(x + 1, y) if x + 1 <= y else -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph33d_9jw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmph33d_9jw.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmph33d_9jw.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1\n\n\n\
    assert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1\n \n    \ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0oy0gbg9.py\", line\
    \ 18, in <module>\n    assert choose_num(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if not isinstance(x, int) or\
    \ not isinstance(y, int):\n        raise TypeError('Invalid argument type')\n\
    \    if x > y:\n        raise ValueError('Invalid argument value')\n    for z\
    \ in range(y, x-1, -1):\n        if z % 2 == 0:\n            return z\n    return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1gqicw9x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1gqicw9x.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp1gqicw9x.py\", line 21,\
    \ in check\n    assert candidate(13, 12) == -1\n  File \"/tmp/tmp1gqicw9x.py\"\
    , line 13, in choose_num\n    raise ValueError('Invalid argument value')\nValueError:\
    \ Invalid argument value\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if (x % 2 == 0) and (y % 2\
    \ == 0):\n        return x if (x > y) else y\n    elif (x % 2 == 0) and (y % 2\
    \ != 0):\n        return x\n    elif (x % 2 != 0) and (y % 2 == 0):\n        return\
    \ y\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpakpe23p9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpakpe23p9.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpakpe23p9.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        if\
    \ y % 2 == 0:\n            if x > y:\n                return -1\n            else:\n\
    \                return y\n        else:\n            if x > y - 1:\n        \
    \        return -1\n            else:\n                return y - 1\n    else:\n\
    \        if y % 2 == 0:\n            if x + 1 > y:\n                return -1\n\
    \            else:\n                return y\n        else:\n            if x\
    \ + 1 > y - 1:\n                return -1\n            else:\n               \
    \ return y - 1\n\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # your code below this line\n\
    \    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n\
    \    return -1\n    # your code above this line\n\n\ndef check(candidate):\n \
    \   assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnobiyrr4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpnobiyrr4.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpnobiyrr4.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    even_nums = []\n    for i in\
    \ range(x, y+1):\n        if (i % 2) == 0:\n            even_nums.append(i)\n\
    \    if len(even_nums) == 0:\n        return -1\n    else:\n        return max(even_nums)\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # We want to count backwards\
    \ in case there is no even number so\n    # that we can find the closest even\
    \ number to the first number.\n    # That's why we start at y and count backwards.\n\
    \n    # The while loop counts backwards from y to x while decrementing\n    #\
    \ i by 2 (since we want to count backwards by even numbers).\n    i = y\n    while\
    \ i >= x:\n        # If i is even, then we've found the biggest even number in\n\
    \        # the range [x, y] and we can return it.\n        if i % 2 == 0:\n  \
    \          return i\n        i -= 2\n    # There was no even number in the range\
    \ [x, y] so we have to return -1.\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsuthd2xs.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpsuthd2xs.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpsuthd2xs.py\", line 28,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    max_even = -1\n    for i in\
    \ range(x, y + 1):\n        if is_even(i) and i > max_even:\n            max_even\
    \ = i\n    return max_even\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwaypsm2e.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwaypsm2e.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpwaypsm2e.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpwaypsm2e.py\"\
    , line 12, in choose_num\n    if is_even(i) and i > max_even:\nNameError: name\
    \ 'is_even' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y + 1):\n\
    \        if i % 2 == 0:\n            return i\n    return -1\n    \n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp125q370l.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp125q370l.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp125q370l.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        num\
    \ = x\n    else:\n        num = x + 1\n    \n    while num <= y:\n        if num\
    \ % 2 == 0:\n            return num\n        num += 1\n    \n    return -1\n\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprl9jnmt_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmprl9jnmt_.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprl9jnmt_.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: Replace with your implementation.\n\
    \    x = int(x)\n    y = int(y)\n    evens = [i for i in range(x, y + 1) if i\
    \ % 2 == 0]\n    if evens:\n        return max(evens)\n    else:\n        return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        for i in\
    \ range(y, x-1, -1):\n            if i % 2 == 0:\n                return i\n \
    \       return -1\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # If y is even, y is the biggest\
    \ even integer number in the range [x, y].\n    if y % 2 == 0:\n        return\
    \ y\n    # If y is odd, but x is even, x is the biggest even integer number in\n\
    \    # the range [x, y].\n    elif x % 2 == 0:\n        return x\n    # If both\
    \ x and y are odd, there's no even integer number in the range\n    # [x, y].\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdao3eo0k.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdao3eo0k.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdao3eo0k.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        if\
    \ y % 2 == 0:\n            if x >= y:\n                return x\n            else:\n\
    \                return y\n        else:\n            return y - 1\n    else:\n\
    \        if y % 2 == 0:\n            return y\n        else:\n            if x\
    \ >= y:\n                return x - 1\n            else:\n                return\
    \ y - 1\n\nprint(choose_num(15, 15))\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: "14\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpblz7w5ec.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpblz7w5ec.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpblz7w5ec.py\", line 31,\
    \ in check\n    assert candidate(13, 12) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 < y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1oz5o7uh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1oz5o7uh.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp1oz5o7uh.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    raise NotImplementedError\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzsv7im9b.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpzsv7im9b.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzsv7im9b.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpzsv7im9b.py\"\
    , line 10, in choose_num\n    raise NotImplementedError\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    else:\n        x += 1\n        if x < y:\n            return x\n    \
    \    else:\n            return -1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcul6_5zh.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpcul6_5zh.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpcul6_5zh.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    num = -1\n    # Your solution\
    \ goes here\n    for i in range(x, y+1):\n        if i % 2 == 0:\n           \
    \ num = i\n    return num\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    raise NotImplementedError\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi3h3sa5l.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpi3h3sa5l.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpi3h3sa5l.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpi3h3sa5l.py\"\
    , line 10, in choose_num\n    raise NotImplementedError\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    pass\n</code>\nSo I have this\
    \ function, the task is to create a function to return the biggest even integer\
    \ number that is in the range x, y inclusive.\nIf there's no such number, then\
    \ the function should return -1.\nI have a suggestion, but I believe it can be\
    \ improved, I am new to python, any feedback is appreciated.\n<code>def choose_num(x:\
    \ int, y: int) -&gt; int:\n    for i in range(x, y+1):\n        if i % 2 == 0:\n\
    \            return i\n    return -1\n</code>\n\n\nA:\n\nFirst off: don't use\
    \ <code>x</code> and <code>y</code> as variable names, as you're shadowing the\
    \ builtin functions <code>min</code> and <code>max</code>.\nI would use the builtin\
    \ <code>max</code> in this case:\n<code>def choose_num(start: int, end: int) -&gt;\
    \ int:\n    evens = [n for n in range(start, end + 1) if n % 2 == 0]\n    return\
    \ max(evens, default=-1)\n</code>\nIf you don't have access to <code>default</code>\
    \ (Python 3.8+), you could use <code>None</code> and check if the result is truthy:\n\
    <code>evens = [n for n in range(start, end + 1) if n % 2 == 0]\nmax_even = max(evens,\
    \ default=None)\nreturn max_even if max_even else -1\n</code>\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmph3wlcleo.py\", line 11\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    largest = -1\n    for i in\
    \ range(x, y+1):\n        if (i % 2 == 0) and (i > largest):\n            largest\
    \ = i\n    return largest\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ y if x < y and y % 2 == 0 else x\n    else:\n        return y if x + 1 < y and\
    \ y % 2 == 0 else x + 1\n\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ql9edjj.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0ql9edjj.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp0ql9edjj.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: write your code here\n\
    \    z = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n         \
    \   z = i\n    return z\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    # Hint: use the modulo operator and a for loop\n    pass\n\n\
    assert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1\n \ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    res = -1\n    if x <= y:\n\
    \        for num in range(x, y + 1):\n            if num % 2 == 0:\n         \
    \       res = num\n    return res\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < 0 or y < 0:\n      \
    \  return -1\n    elif x % 2 == 0:\n        if x >= y:\n            return x\n\
    \        else:\n            for x in range(x, y + 1, 2):\n                return\
    \ x\n    else:\n        for x in range(x + 1, y + 1, 2):\n            return x\n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu92z8q_d.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpu92z8q_d.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpu92z8q_d.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    return max([i for i in range(x,\
    \ y+1) if i % 2 == 0])\n\nprint(choose_num(12, 15))\nprint(choose_num(13, 12))\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: "14\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcoaz05lb.py\", line\
    \ 13, in <module>\n    print(choose_num(13, 12))\n  File \"/tmp/tmpcoaz05lb.py\"\
    , line 10, in choose_num\n    return max([i for i in range(x, y+1) if i % 2 ==\
    \ 0])\nValueError: max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y + 1):\n\
    \        if i % 2 == 0:\n            biggest_even = i\n    if 'biggest_even' in\
    \ locals():\n        return biggest_even\n    else:\n        return -1\n\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if (x % 2 == 0) and (y % 2\
    \ == 0):\n        x = x\n    elif (x % 2 == 0) and (y % 2 != 0):\n        x =\
    \ x\n    elif (x % 2 != 0) and (y % 2 == 0):\n        x = x + 1\n    else:\n \
    \       x = x + 1\n    for i in range(x, y+1, 2):\n        return i\n\n    return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp508hfhc_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp508hfhc_.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp508hfhc_.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # your code here\n    if x\
    \ % 2 == 0:\n        even_num = x\n    else:\n        even_num = x + 1\n    while\
    \ even_num <= y:\n        return even_num\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1bx0nc00.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp1bx0nc00.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp1bx0nc00.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n    return None\n\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprquqi1ny.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprquqi1ny.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprquqi1ny.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmprquqi1ny.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpibllfsmu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpibllfsmu.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpibllfsmu.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y + 1):\n\
    \        if i % 2 == 0:\n            return i\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcd7raq3c.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcd7raq3c.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpcd7raq3c.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n \
    \       if i % 2 == 0:\n            return i\n    return -1\n\nassert choose_num(12,\
    \ 15) == 14\nassert choose_num(13, 12) == -1\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcua_l12o.py\", line\
    \ 15, in <module>\n    assert choose_num(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y + 1):\n\
    \        if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33kf_a1o.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp33kf_a1o.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp33kf_a1o.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    nums = list(range(x, y + 1))\n\
    \    nums.reverse()\n    for n in nums:\n        if n % 2 == 0:\n            return\
    \ n\n    return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxlaagz54.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpxlaagz54.py\", line 23,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxlaagz54.py\", line 13,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: Write your code here\n\
    \    big_num = -1\n    for num in range(x, y+1):\n        if num % 2 == 0:\n \
    \           big_num = num\n    return big_num\n\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    i = y\n    while i >= x:\n        if i % 2 == 0:\n            return i\n\
    \        i -= 1\n    return -1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if y < x:\n        return -1\n\
    \    elif y % 2 == 0:\n        return y\n    else:\n        return choose_num(x,\
    \ y - 1)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
